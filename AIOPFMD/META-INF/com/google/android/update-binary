#!/sbin/sh

{ #Default Var
set -x
STORAGE="/data/media/0" AIOLOG="AIOLogs/$(date +"%Y-%m")" NULL="/dev/null"
if realpath $STORAGE/*/AIOLogs >$NULL; then PLOGS="$(realpath $STORAGE/*/$AIOLOG)"; else PLOGS="$STORAGE/$AIOLOG"; fi
mkdir -p $PLOGS; exec 2>$PLOGS/AIO-$( date +"%d-%H:%M:%S" ).log
VCAIOPFMD="116" VAIOPFMD="25.04.25 ($VCAIOPFMD)" VAIOASH="v1.1" VCAIOASH="2"
IPDLTMP="/data/local/tmp" LOCALTMPDIR="$IPDLTMP/AIOPFMD" DEVTMPDIR="/dev/AIOPFMD"
IPDADB="/data/adb" IPDMM="/data/magisk"
SERVICED="$IPDADB/service.d" POSTFSDATAD="$IPDADB/post-fs-data.d"
IPMM="$IPDADB/modules" IPMMU="${IPMM}_update"
FILEIN="$1" FILEOUT="$2" FILE="$3"
ADDONS="$DEVTMPDIR/Addons"
BB="$DEVTMPDIR/BB" TAR="$BB/busybox tar" UNZIP="$BB/busybox unzip" ECHO="$BB/busybox echo"
BOOTMODE=$(ps -A 2>$NULL | grep -q zygote && echo true || echo false)
ENDMODE=true
} #

{ #Version Or Date Of Patches In This Patch
#UI: Pills/NavigationBar/Gestures
IDP="Pills" IDAP="PillsOverlay HideNavBar HideGesBar HidePillsOverlay" VIPP="v2.3" VCIPP="14"
IDPC="PillsColors" IDAPC="PillsColorsOverlay" VIPPC="v1.7" VCIPPC="8"
IDPHS="PillsHeight" IDAPHS="PillsHeightOverlay" VIPPH="v1.6" VCIPPH="7"
IDNBVS="NavBarVisibilitySwitcher" IDANBVS="NavBarVisibilityChanger HideNavigationBar ShowNavigationBar ShowHideNavigationBar NavigationBarVisibilityChanger" VIPNBVS="v1.1" VCIPNBVS="2"
IDBGDS="BackGestureDisabler" VIPBGD="v1.0" VCIPBGD="1"
IDFNS="ForceNavigationSwitcher" IDAFNS="ForceGestures ForceNavigation" VIPFNS="v1.2" VCIPFNS="3"
#UI: StatusBar/QuickSettings
IDSINNI="SystemIncreaseNumberIcons" IDASINNI="StatusBarIncreaseNumberIcons CINNOverlayMod CINNI SINNI SBINNI" VIPSINNI="v2.4" VCIPSINNI="15"
IDSBNISI="StatusBarNotificationIconSize" IDASBNISI="StatusBarIconSize" VIPSBNISI="v1.3" VCIPSBNISI="4"
IDSBCS="StatusBarClockSize" VIPSBCS="v1.3" VCIPSBCS="4"
IDSBP="StatusBarPadding" VIPSBP="v1.8" VCIPSBP="9"
IDSBPD="StatusBarPrivacyDot" VIPSBPD="v1.3" VCIPSBPD="4"
IDSBNIDS="StatusBarNotificationIconDotSize" VIPSBNIDS="v1.1" VCIPSBNIDS="2"
IDSBISP="StatusBarIconSpace" VIPSBISP="v1.5" VCIPSBISP="6"
IDWFAMDQSOS="Wi-FiAndMobileDataQSOldStyle" IDAWFAMDQSOS="OldDataWifiQsStyle WFAMDQSOS WFAMDQSSC" VIPWFAMDQSOS="v1.2" VCIPWFAMDQSOS="3"
IDFDNI="ForceDisableNotificationIcons" VIPFDNI="v1.0" VCIPFDNI="1"
IDNSP="NotificationSidePaddings" VIPNSP="v1.6" VCIPNSP="7"
IDQSCIAR="QSCountIconAndRows" IDAQSCIAR="QSCIAR A12VerticalQS3Columns" VIPQSCIAR="v1.8" VCIPQSCIAR="9"
IDQSSN="QSSplitNotification" IDAQSSN="better_qs" VIPQSSN="v1.1" VCIPQSSN="2"
IDQSCP="QSContentPadding" IDASBP="SUIContentPadding" VIPQSCP="v1.2" VCIPQSCP="3"
#UI: LockScreen/AlwaysOnDisplay
IDQRCSOLS="QRCodeScannerOnLockScreen" IDAQRCSOLS="QRCSOLS" VIPQRCSOLS="v1.3" VCIPQRCSOLS="4"
IDLSUS="LockScreenUserSwitcher" IDALSUS="UserLockscreen" VIPLSUS="v1.1" VCIPLSUS="2"
IDAODS="AODSwitcher" VIPAODS="v1.1" VCIPAODS="2"
IDAODSD="AODStateDoze" VIPAODSD="v1.1" VCIPAODSD="2"
IDAODALSAF="AODAndLockScreenAnimationFix" VIPAODALSAF="v1.0" VCIPAODALSAF="1"
#UI: Gboard/GboardThemes
IDGBNBS="GboardNavBarSpacing" IDAGBNBS="NavBar_Space gboardnavbar" VIPGBNBS="v1.3" VCIPGBNBS="4"
IDGBRC="GBoardRoundedCorners" VIPGBRC="v1.2" VCIPGBRC="3"
IDGBT="GBoardThemes" IDAGBT="rboard-themes" VIPGBT="v1.9" VCIPGBT="10"
IDGBSTS="GboardSilkThemeSwitcher" IDAGBSTS="gboard-silk-theme GboardSilkThemeChanger" VIPGBSTS="v1.2" VCIPGBSTS="3"
#UI: BootAnimation/MediaUISounds/Emoji
IDBA="BootAnimation" VIPBA="v2.0" VCIPBA="11"
IDMUIS="MediaUISounds" IDAMUIS="MediaUiSounds" VIPMUIS="v2.2" VCIPMUIS="13"
IDIOSEMOJI="IOSEmoji" IDAIOSEMOJI="iOS18Emoji AppleEmoji ios_emoji iOS_Emoji iOS14.6_Emoji_for_Android emoji-replacer-259830633 emoji-replacer-809887617 emoji-replacer--1117766176 android11emoji EmojiReplacer emoji-replacer-app" VIPIOSEMOJI="v1.6" VCIPIOSEMOJI="7"
#UI: RoundedUI/BIP/BackgroundBlur/Other
IDRUI="RoundedUI" IDARUI="UIROUNDED" VIPRUI="v3.7" VCIPRUI="28"
IDBIP="BurnInProtection" VIPBIP="v2.7" VCIPBIP="18"
IDBB="BackgroundBlur" VIPBB="v1.7" VCIPBB="8"
IDSUIRSRS="SUIRoundedSize" VIPSUIRSRS="v1.2" VCIPSUIRSRS="3"
IDGPPM="GPayPowerMenu" VIPGPPM="v1.1" VCIPGPPM="2"
IDFDM="ForceDarkMode" VIPFDM="v1.1" VCIPFDM="2"
IDAS="AnimationScale" VIPAS="v1.2" VCIPAS="3"
IDFDPIS="ForceDensitySwitcher" VIPFDPIS="v1.1" VCIPFDPIS="2"
#Audio: VFX(P)/DOLBY/AIST/SAQ/SIB/AML/ALCF/VS/DSM
IDVFX="V4AFX" IDAVFX="ViPER4AndroidFX ViPER4AndroidFX-Legacy ViPER4AndroidXHiFi viper4magisk ViPER4Android-RE" VIPVFX="v2.9" VCIPVFX="20"
IDVFXDAK="V4AFXDAK" IDAVFXDAK="V4AFXPresets" VIPVFXDAK="v1.9" VCIPVFXDAK="10"
IDDA="DolbyAtmos" VIPDA="v2.8" VCIPDA="19"
IDAIST="AIST" VIPAIST="v2.0" VCIPAIST="2000"
IDSAQ="SystemAudioQuality" IDASAQ="systemaudioquality2" VIPSAQ="v2.4" VCIPSAQ="15"
IDSIBS="SystemIncreaseBitrate" IDASIBS="IncreaseBitrate" VIPSIBS="v1.7" VCIPSIBS="8"
IDAML="AML" VIPAML="v4.7" VCIPAML="47"
IDALCF="ALCF" VIPALCF="v1.6" VCIPALCF="7"
IDVS="VolumeSteps" VIPVS="v1.2" VCIPVS="3"
IDDSM="DisableSafemediaMessage" VIPDSM="v1.0" VCIPDSM="1"
#AdBlock: Hosts Files
IDDAB="DisableAdBlocker" VIPDAB="v1.0" VCIPDAB="1"
IDVAAH="AdAwayHosts" VIPVAAH="v5.9" VCIPVAAH="50"
IDVSH="SystemlessHostsUnified" VIPVSH="v17.2-240906" VCIPVSH="172"
IDEH="EnergizedHosts" VIPEH="v0.100" VCIPEH="0100"
IDSHH="SHHosts" VIPSHH="v3.49" VCIPSHH="349"
IDSH="StevenHosts" VIPSH="v1.7.7" VCIPSH="177"
#Net: GPS/WIFI/TTL/DNS/APAUSBTF
IDGPSP="GPSPatcher" IDAGPSP="optmizedgpsconf" VIPGPSP="v1.2" VCIPGPSP="3"
IDWIFIP="WIFIPatcher" IDAWIFIP="wifi-bonding" VIPWIFIP="v1.5" VCIPWIFIP="6"
IDTTLF="NFQTTL" IDATTLF="nfqttl" VIPTTLF="v2.8" VCIPTTLF="19"
IDNT="NetworkTweak" VIPNT="v6.0" VCIPNT="60"
IDAPAUSBTF="APAndUSBTetheringFix" IDAAPAUSBTF="APAUSBTF USBTF" VIPAPAUSBTF="v1.0" VCIPAPAUSBTF="1"
#Utilities: BB/SELS/CC/MMFR/JITC/Detach/PIF/LSP/WOL
IDBBB="BrutalBusyBox" IDABBB="busybox-ndk busybox-brutal BuiltIn-BusyBox" VIPBBB="v1.38.0.1" VCIPBBB="13801"
IDSELS="SELinuxSwitcher" IDASELS="SeLinuxChanger SELinuxChanger" VIPSELS="v1.4" VCIPSELS="5"
IDCC="CacheCleaner" VIPCC="v3.8" VCIPCC="29"
IDMMFR="MagiskManagerForRecovery" IDAMMFR="mm MMFR" VIPMMFR="v1.5" VCIPMMFR="6"
IDJITC="JustInTimeCompiler" IDAJITC="JIT PackageCompileSpeed" VIPJITC="v1.5" VCIPJITC="6"
IDDETACH="zygisk-detach" VIPDETACH="v1.20.0" VCIPDETACH="27"
IDDETACHA="zygisk-detach-app" VIPDETACHA="v1.20.0" VCIPDETACHA="27"
IDPIF="playintegrityfix" VIPPIF="v19.0" VCIPPIF="19000"
IDLSP="zygisk_lsposed" VIPLSP="v1.10.1 (7181)" VCIPLSP="7181"
IDWOL="WakeOnLan" VIPWOL="v1.0" VCIPWOL="1"
#Other: FA/LED/PSS/UAA/SBU/SHS
IDFPA="FingerprintActions" VIPFPA="v1.3" VCIPFPA="4"
IDLEDLO="LEDLightOff" IDALEDLO="ChargingLedLightOff ChargingLEDLightOff" VIPLEDLO="v1.4" VCIPLEDLO="5"
IDLEDLA="LEDLightAnimation" VIPLEDLA="v1.3" VCIPLEDLA="4"
DPSS="ProximitySensorSwitcher" IDAPSS="ProximitySensorDisabler" VIPPSS="v1.0" VCIPPSS="1"
IDUAA="UnfreezeAllApplications" VIPUAA="v1.0" VCIPUAA="1"
#Tweaks: FGS/EHAP/FFE/E4KIYT/KL/4XMSAA/HWO/UGMSD/USGP
IDFGS="ForceGoogleSync" VIPFGS="v1.1" VCIPFGS="2"
IDEHAP="EnablingHiddenApiPolicy" VIPEHAP="v1.2" VCIPEHAP="3"
IDFUSS="ForceUnknownSourcesSwitcher" IDAFUSS="ForceInstallAppsFromUnknownSources FIAFUS AFUSS" VIPFUSS="v1.3" VCIPFUSS="4"
IDMUS="MultiUsersSwitcher" IDAMUS="MultiUsersChanger SingleUserMod SingleUserEnabler DisableMultiUsers" VIPMUS="v1.3" VCIPMUS="4"
IDFFE="ForceFakeEncryption" VIPFFE="v1.0" VCIPFFE="1"
IDE4KIYT="Enable4KInYouTube" VIPE4KIYT="v1.0" VCIPE4KIYT="1"
IDFUSEPD="FUSEPassthroughDisabler" VIPFUSEPD="v1.0" VCIPFUSEPD="1"
IDKL="KillLogger" IDAKL="killlogger killlogger++" VIPKL="v2.2" VCIPKL="13"
IDF4XMSAAS="Force4XMSAASwitcher" IDAF4XMSAAS="ForceMSAASwitcher" VIPF4XMSAAS="v1.1" VCIPF4XMSAAS="2"
IDFHWOS="ForceHWOverlaysSwitcher" IDAFHWOS="ForceDisableHWOverlays" VIPFHWOS="v1.2" VCIPFHWOS="3"
IDFDEVADB="ForceDEVADB" VIPFDEVADB="v1.8" VCIPFDEVADB="9"
IDUSBSUC="USBScreenUnlockedConfig" IDAUSBSUC="USBSUC" VIPUSBSUC="v1.1" VCIPUSBSUC="2"
IDFULIRS="FaceUnLockIRSwitcher" IDAFULIRS="FaceUnLockIRChanger" VIPFULIRS="v2.8" VCIPFULIRS="19"
IDFDPP="ForceDisablingPlayProtect" VIPFDPP="v1.0" VCIPFDPP="1"
IDUGMSD="UniversalGMSDoze" IDAUGMSD="universal-gms-doze" VIPUGMSD="v1.9.2" VCIPUGMSD="192"
IDUSGP="PixelifyPhotos" VIPUSGP="1.1-stable" VCIPUSGP="002"
IDGPUR="GPURendering" VIPGPUR="v1.2" VCIPGPUR="3"
IDSBT="ShutdownBatteryTemperature" VIPSBT="v1.2" VCIPSBT="3"
IDFDS="ForceDeepSleep" IDAFDS="ForceIdle DozeConfig_RVNS" VIPFDS="v1.2" VCIPFDS="3"
} #

{ #Functions

AIOPFMD () {
APMSGASD
PARTITION_AND_MOUNTS
IMPORTANT_VARIABLES
CHECKER "-ui -bb -arch -sel -soc -gapps -av -magisk"
UIP "Copy AIOPFMD $VAIOPFMD To TMPDIR"
$BOOTMODE && UIP "System In $MSGSRW & $MSGSMM"
(unzip -oq $FILE BB.zip Addons.tar.xz -d $DEVTMPDIR 2>$NULL
unzip -oq $BB.zip -d $DEVTMPDIR 2>$NULL
chmod -R 0777 $LOCALTMPDIR $DEVTMPDIR
cp -f $BB/busybox-$ARCH $BB/busybox
$TAR -xf $ADDONS.tar.xz -C $DEVTMPDIR; rm -f $ADDONS.tar.xz $BB.zip) &
PRESETS
END
}

APMSGASD () {
MSGSD="•" MSGCS="••••••••••••••••••••••••••••••••••••••••••••••••••"
if $BOOTMODE; then MSGVU="▲ ►" MSGVD="▼ ►"; else MSGVU="+ >" MSGVD="- >"; fi
MSGEFTC="(\)" MSGNIS="(|)" MSGNUS="(/)" MSGEEFTC="(|\)" MSGEND="(//)"
MSGRI="(R)" MSGL="(L)" MSGP="(P)" MSGO="(O)" MSGIP="(I)"
MSGIPL="$MSGIP $MSGL" MSGIPP="$MSGIP $MSGP" MSGIPO="$MSGIP $MSGO"
MSGWDI="Community" MSGAIODC="@AIOProject" MSGAIOSC="@AIOProject_Chat"
MSGDI="Install Done"
MSGDRM="Removing Done"
MSGDRP="Replace Done"
MSGDRS="Restore Done"
MSGFI="Found Install"
MSGPNF="Patching Needed Files..."
MSGFFAP="Files Found And Patched"
MSGPMIP="Patching..."
MSGRMIP="Removing..."
MSGOANF="Other App Not Found"
MSGPW="Please Wait..."
MSGSAPW="Search App, $MSGPW"
MSGSC="Start Compile"
MSGEC="End Compile"
MSGCXML="<?xml version=\"1.0\" encoding=\"utf-8\"?>"
}

PARTITION_AND_MOUNTS () {
if $BOOTMODE; then
UIP -cs
else
DABP=false
if [ -n "$(cat /proc/cmdline | grep slot_suffix)" ]; then
DABP=true SYSTEM_MOUNT="/system" SYSTEM="$SYSTEM_MOUNT/system" VENDOR="/vendor/vendor"
elif [ -n "$(cat /etc/fstab | grep /system_root)" ]; then
SYSTEM_MOUNT="/system_root" SYSTEM="$SYSTEM_MOUNT/system" VENDOR="/vendor"
else
SYSTEM_MOUNT="/system" SYSTEM="$SYSTEM_MOUNT" VENDOR="/vendor"
fi
for p in "$SYSTEM_MOUNT" "$VENDOR" "/cust" "/system_ext" "/product" "/odm"; do
if [ -d "$p" ] && grep -q "$p" "/etc/fstab"; then
MOUNTS="$MOUNTS $p"
fi
done
for m in $MOUNTS; do
CHECKER -ism "$m" && umount "$m"
mount "$m"
mount -o remount,rw "$m"
done
grep -q "$SYSTEM_MOUNT.*\sro[\s,]" /proc/mounts && mount -o remount,rw $SYSTEM_MOUNT
UIP -s "Mounting Partitions"
fi
if [ -f /system/system/build.prop ]; then SYSTEM="/system/system"; elif [ -f /system_root/system/build.prop ]; then SYSTEM="/system_root/system"; elif [ -f /system/build.prop ]; then SYSTEM="/system"; fi
if [ $BOOTMODE != true ] && [ -n "$(cat /etc/fstab | grep /vendor)" ]; then :; elif [ $BOOTMODE != true ] && [ -d $SYSTEM/vendor ]; then VENDOR="$SYSTEM/vendor"; else VENDOR="/vendor"; fi
}

IMPORTANT_VARIABLES () {
if [ -d "$MAGISKTMP/mirror/system" ]; then
MSGSMM="Magisk Mirror Found!" MAGISKMP="$MAGISKTMP/mirror"
elif [ -d "$MAGISKTMP/.magisk/mirror/system" ]; then
MSGSMM="Magisk Mirror Found!" MAGISKMP="$MAGISKTMP/.magisk/mirror"
else
$BOOTMODE && MSGSMM="Magisk Mirror Not Found!" MAGISKMP=
fi
if mount -o rw,remount $MAGISKMP/vendor; then
MSGSRW="RW" SYSTEMRO=false
else
MSGSRW="RO" SYSTEMRO=true
fi
ALLDP="/system_ext /system /product /vendor /odm"
MIPSV="/system/vendor"
IPSB="$SYSTEM/bin" MIPSB="/system/bin"
IPSXB="$SYSTEM/xbin" MIPSXB="/system/xbin"
IPSA="$SYSTEM/app" MIPSA="/system/app"
IPSPA="$SYSTEM/priv-app" MIPSPA="/system/priv-app"
IPSE="$SYSTEM/etc" MIPSE="/system/etc"
IPSEI="$IPSE/init" MIPSEI="$MIPSE/init"
IPSES="$IPSE/sysconfig" MIPSES="$MIPSE/sysconfig"
IPSEP="$IPSE/permissions" MIPSEP="$MIPSE/permissions"
IPSEDP="$IPSE/default-permissions" MIPSEDP="$MIPSE/default-permissions"
IPSEV="$IPSE/vintf" MIPSEV="$MIPSE/vintf"
IPSED="$IPSE/dolby" MIPSED="$MIPSE/dolby"
IPSL="$SYSTEM/lib" MIPSL="/system/lib"
IPSL64="$SYSTEM/lib64" MIPSL64="/system/lib64"
IPSLS="$IPSL/soundfx" MIPSLS="$MIPSL/soundfx"
IPSLS64="$IPSL64/soundfx" MIPSLS64="$MIPSL64/soundfx"
IPSAD="$SYSTEM/addon.d" MIPSAD="/system/addon.d"
IPSBP="$SYSTEM/build.prop" MIPSBP="/system/build.prop"
IPSSP="$SYSTEM/product" MIPSSP="/system/product"
IPSSPA="$IPSSP/app" MIPSSPA="$MIPSSP/app"
IPSSPPA="$IPSSP/priv-app" MIPSSPPA="$MIPSSP/priv-app"
IPSSPE="$IPSSP/etc" MIPSSPE="$MIPSSP/etc"
IPSSPES="$IPSSPE/sysconfig" MIPSSPES="$MIPSSPE/sysconfig"
IPSSPEP="$IPSSPE/permissions" MIPSSPEP="$MIPSSPE/permissions"
IPSSE="$SYSTEM/system_ext" MIPSSE="/system/system_ext"
IPSSEPE="$IPSSE/etc" MIPSSEPE="$MIPSSE/etc"
IPSSEPES="$IPSSEPE/sysconfig" MIPSSEPES="$MIPSSEPE/sysconfig"
IPSSEPEP="$IPSSEPE/permissions" MIPSSEPEP="$MIPSSEPE/permissions"
IPSSEA="$IPSSE/app" MIPSSEA="$MIPSSE/app"
IPSSEPA="$IPSSE/priv-app" MIPSSEPA="$MIPSSE/priv-app"
IPSFW="$SYSTEM/framework" MIPSFW="/system/framework"
IPSPO="$IPSSP/overlay" MIPSPO="$MIPSSP/overlay"
IPSO="$SYSTEM/overlay" MIPSO="/system/overlay"
IPSUKL="$SYSTEM/usr/keylayout" MIPSUKL="/system/usr/keylayout"
IPSPM="$IPSSP/media" MIPSPM="$MIPSSP/media"
IPSPMAU="$IPSPM/audio/ui" MIPSPMAU="$MIPSPM/audio/ui"
IPSM="$SYSTEM/media" MIPSM="/system/media"
IPSMAU="$IPSM/audio/ui" MIPSMAU="$MIPSM/audio/ui"
IPSF="$SYSTEM/fonts" MIPSF="/system/fonts"
IPVE="$VENDOR/etc" MIPSVE="$MIPSV/etc"
IPVEV="$IPVE/vintf" MIPSVEV="$MIPSVE/vintf"
IPVED="$IPVE/dolby" MIPSVED="$MIPSVE/dolby"
IPVL="$VENDOR/lib" MIPSVL="$MIPSV/lib"
IPVL64="$VENDOR/lib64" MIPSVL64="$MIPSV/lib64"
IPVLRA="$IPVL/rfsa/adsp" MIPSVLRA="$MIPSVL/rfsa/adsp"
IPVLS="$IPVL/soundfx" MIPSVLS="$MIPSVL/soundfx"
IPVLS64="$IPVL64/soundfx" MIPSVLS64="$MIPSVL64/soundfx"
IPVO="$VENDOR/overlay" MIPSVO="$MIPSV/overlay"
IPVUKL="$VENDOR/usr/keylayout" MIPSVUKL="/vendor/usr/keylayout"
IPVA="$VENDOR/app" MIPSVA="$MIPSV/app"
IPVPA="$VENDOR/priv-app" MIPSVPA="$MIPSV/priv-app"
IPVB="$VENDOR/bin" MIPSVB="$MIPSV/bin"
IPVBHW="$IPVB/hw" MIPSVBHW="$MIPSVB/hw"
IPDA="/data/app"
IPDD="/data/data"
IPDS="/data/system"
IPDSDE="/data/system_de"
IPDSU="$IPDS/users/0"
IPDSUDE="/data/user_de"
IPDSNS="$IPDS/netstats"
IPDM="/data/misc"
IPDMDE="/data/misc_de"
IPDRESC="/data/resource-cache"
IPDFF="/data/fonts/files"
IPDFC="/data/fonts/config"
ACXML="$(find $ALLDP -type f -name "audio_configs*.xml")"
APIXML="$(find $ALLDP -type f -name "audio_platform_info*.xml")"
AECONFXML="$(find $ALLDP -type f -name "*audio_effects*.conf" -o -name "*audio_effects*.xml")"
MPATHS="$(find $ALLDP -type f -name "*mixer_paths*.xml")"
BTCSCONF="$(find $ALLDP -type f -name "bt_configstore.conf")"
BTSCONF="$(find $ALLDP -type f -name "bt_stack.conf")"
MCGAX="$(find $ALLDP -type f -name "media_codecs*audio.xml")"
AIPAOPCONF="$(find $ALLDP -type f -name "*audio_io_policy*.conf" -o -name "*audio_output_policy*.conf")"
APCXML="$(find $ALLDP -type f -name "*audio_policy_configuration*.xml")"
A2DPXML="$(find $ALLDP -type f -name "a2dp*.xml")"
BTQTIXML="$(find $ALLDP -type f -name "bluetooth*.xml")"
USBXML="$(find $ALLDP -type f -name "usb*.xml")"
ACCXML="$(find $ALLDP -type f -name "audio_cloud_control*.xml")"
STPIXML="$(find $ALLDP -type f -name "sound_trigger_platform_info*.xml")"
MPXML="$(find $ALLDP -type f -name "media_profiles*.xml")"
MCXML="$(find $ALLDP -type f -name "media_codecs.xml")"
WCNSQCCFGI="$(find $ALLDP -type f -name "WCNSS_qcom_cfg.ini")"
GPSCONF="$(find $ALLDP -type f -name "gps.conf")"
UINPUTKL="$(find $ALLDP -type f -name "uinput-fpc.kl" -o -name "uinput-goodix.kl" -o -name "uinput-gf.kl")"
SDAXXML="$IPSED/*.xml" VDAXXML="$IPVED/*.xml"
XMLGLOBAL="$IPDSU/settings_global.xml" XMLSECURE="$IPDSU/settings_secure.xml" XMLSYSTEM="$IPDSU/settings_system.xml"
SPGLOBAL="settings put global" SPSECURE="settings put secure" SPSYSTEM="settings put system"
SGGLOBAL="settings get global" SGSECURE="settings get secure" SGSYSTEM="settings get system"
SDGLOBAL="settings delete global" SDSECURE="settings delete secure" SDSYSTEM="settings delete system"
ALLPROP="$DEVTMPDIR/all.prop"
GBFVXML="$IPDD/com.google.android.inputmethod.latin/shared_prefs/flag_value.xml"
SYSCV="$(find /sys/class -name "vibrator")"
SYSCL="$(find /sys/class -name "leds")"
LEDMBRED="$SYSCL/red/max_brightness"
LEDMBGREEN="$SYSCL/green/max_brightness"
LEDMBBLUE="$SYSCL/blue/max_brightness"
LEDMBWHITE="$SYSCL/white/max_brightness"
LEDRED="$SYSCL/red/brightness"
LEDGREEN="$SYSCL/green/brightness"
LEDBLUE="$SYSCL/blue/brightness"
LEDWHITE="$SYSCL/white/brightness"
FLASHLIGHT="$SYSCL/flashlight/brightness"
BUTTONBACKLIGHT="$SYSCL/button-backlight/brightness"
METAINF="META-INF/com/google/android/update-binary"
AIOMC="$STORAGE/AIOCOMPILE" RVBXML="/res/values/bools.xml" RVDXML="/res/values/dimens.xml" RVIXML="/res/values/integers.xml" RVSXML="/res/values/strings.xml"
if [ -d $IPSPO ] && [ -d $IPVO ]; then
IPPSO="$IPSPO" MIPPSO="$MIPSPO" IPPVO="$IPVO" MIPPVO="$MIPSVO"
elif [ ! -d $IPSPO ] && [ -d $IPVO ]; then
IPPSO="$IPVO" MIPPSO="$MIPSVO" IPPVO="$IPVO" MIPPVO="$MIPSVO"
elif [ -d $IPSPO ]; then
IPPSO="$IPSPO" MIPPSO="$MIPSPO" IPPVO="$IPSPO" MIPPVO="$MIPSPO"
elif [ -d $IPSO ]; then
IPPSO="$IPSO" MIPPSO="$MIPSO" IPPVO="$IPSO" MIPPVO="$MIPSO"
fi
if [ -d $IPSMAU ]; then IPPMU="$IPSMAU" MIPPMU="$MIPSMAU"; elif [ -d $IPSPMAU ]; then IPPMU="$IPSPMAU" MIPPMU="$MIPSPMAU"; fi
if [ -d $IPSPM ]; then IPPM="$IPSPM" MIPPM="$MIPSPM"; elif [ -d $IPSM ]; then IPPM="$IPSM" MIPPM="$MIPSM"; fi
if [ ! -d $IPSXB ] && [ $BOOTMODE != true ] && [ $SYSTEMRO != true ]; then mkdir -p $IPSXB; IPPSXB="$IPSXB" IPPSXBM="$MIPSXB"; elif [ ! -d $IPSXB ] && $BOOTMODE; then IPPSXB="$IPSB" IPPSXBM="$MIPSB"; else IPPSXB="$IPSXB" IPPSXBM="$MIPSXB"; fi
REMOVER -rm "$LOCALTMPDIR $DEVTMPDIR"; mkdir -p $LOCALTMPDIR $DEVTMPDIR
GET_FILE_PROP -ap
}

ALLLIST () {
case $1 in
-s) STOCKLIST="
404Clock
AEXPapers
AICorePrebuilt
ANGLE
APlayer
ARCore
ARDrawing
AREmoji
ARZone
AbleMusic
AboutBliss
Abstruct
AccessibilityMenu
AccuweatherPhone2015_MASS_HD_SWS
AdAway
Aegis
AiWallpapers
AirDots
AirDotsPlugin
AmbientStreaming
AnalyticsCore
AncientClockWidget
AndroidAutoPrebuilt
AndroidAutoStub
AndroidAutoStubPrebuilt
AndroidForWork
AssistantScreen
AudioFX
Auxio
AvatarEmojiSticker_Palette
AwakenWallpaperStub
Backgrounds
BasicDreams
BatteryTile
BetterBug
BetterBugStub
BlissUpdater
BookmarkProvider
Books
BooksPhone
BooksStub
Browser
Browser2
BrowserXposed
BtHelper
CMFileManager
Calculator
Calculator2
CalculatorGoogle
CalculatorGooglePrebuilt
Calendar
CalendarGoogle
CalendarGooglePrebuilt
CameraExtensionsProxy
CarHomeGoogle
CarrierMetrics
CarrierServices
CatchLog
CbrsNetworkMonitor
CellBroadcastApp
CellBroadcastReceiver
ChildrenSpace
ChocoEUKor
Chrome
Chrome-Stub
Chrome64
ChromeCustomizations
ClockPackage_MASS_Le
CloudPrint
CloudPrint2
ColtPapers
ConnMO
ConnMetrics
Contacts
Covers
CtsShimPrivPrebuilt
Currents
DCMO
DMService
DerpWalls
DeskClock
DeskClockGoogle
DesktopMode
DeviceIntelligenceNetworkPrebuilt
DevicePolicyPrebuilt
DiagMonAgent
DiagnosticsToolPrebuilt
Dialer
DigitalClockEasy_L
DigitalClock_L
DotFEWallpapers
DotGallery
DotWallpapers
Drive
DualClockDigital_L
DuckDuckGo
Duo
DynamicSystemInstallationService
EasterEgg
EasymodeContactsWidget
EditorsDocs
EditorsDocsStub
EditorsSheets
EditorsSheetsStub
EditorsSlides
EditorsSlidesStub
Eleven
Email
EmergencyInfo
EmergencyInfoGms
EmergencyInfoGoogleNoUi
EngineerMode
Etar
EvoEgg
ExactCalculator
Excel_SamsungStub
Exchange2
FBAppManager_NS
FBInstaller_NS
FBServices
FDroid
FDroidPrivilegedExtension
FM
FM2
FMRadio
FM_TEST
Facebook_stub
FilesPrebuilt
Firewall
FitnessPrebuilt
FloatAssistant
Focus
FotaAgent
FuseWalls
GCS
Galaxy4
GalaxyApps
Gallery
Gallery2
GalleryGo
GalleryGoPrebuilt
GalleryGoogle
GalleryPrebuilt
GameCenter
GameCenterGlobal
Gboard
GeminiPrebuilt
GenieWidget
Glimpse
GlobalTrendNews
GlobalUserGuide
Gmail
Gmail2
GoogleCalendar
GoogleCloudPrint
GoogleContacts
GoogleDialer
GoogleEars
GoogleEarth
GoogleFeedback
GoogleHangouts
GoogleHindiIME
GoogleHome
GoogleJapaneseInput
GoogleKeep
GoogleKeyboard
GoogleLatinIme
GoogleMusic
GoogleNow
GoogleNowVoiceSearch
GoogleOne
GooglePay
GooglePinyinIME
GooglePlus
GooglePrintRecommendationService
GoogleQuickSearchBox
GoogleSearch
GoogleTTS
GoogleVrCore
GoogleZhuyinIME
Gramophone
HTMLViewer
Hangouts
HangoutsDialer
Health
HealthConnectPrebuilt
HelpRtcPrebuilt
HoloSpiralWallpaper
HotwordEnrollment
HotwordEnrollmentOKGoogle*
HotwordEnrollmentXGoogle*
HybridAccessory
HybridPlatform
HybridRadio2015
HyconWallpapers
IdMipay
InMipay
Jelly
Jellyfish
Joyose
KLMSAgent
KeKeMarket
KeKeThemeSpace
KeKeUserCenter
Keep
KidsSupervisionStub
KimciRecorder
KoreanIME
KoreanIMEStub
LPaper-v1.0.0-release
LPaper-v2.0-release
LatinIME
LatinIMEGooglePrebuild
LatinIMEGooglePrebuilt
LatinImeDictionaryPack
LatinImeGoogle
LatinImeGoogleWithLatinIME
LatinImeTutorial
Lawnfeed
Leaflet
Lens
LensAppStub
LinktoWindows
LogKit
LogViewer
MSA-Global
MSSkype_stub
MaestroPrebuilt
Magazines
Maps
MatLog
MatchmakerPrebuilt
MatchmakerPrebuiltPixel4
Megogo
Megogo_vender
Messages
Messaging
MiBrowser
MiBrowserGlobal
MiDrive
MiDrop
MiGalleryLockscreen
MiHealth
MiMover
MiMusic
MiPicks
MiService
MiShare
MiVideo
Mimoji
MiuiBugReport
MiuiCompass
MiuiScanner
MiuiSuperMarket
MiuiVideo
MiuiVideoGlobal
MiuiVideoPlayer
Mms
MozillaNlpBackend
MtkFMRadio
Music
Music2
MusicFX
MusicPlayerGO
MyVerizonServices
NeMate
Netflix
Netflix_activation
Netflix_activationCommon
Netflix_stub
NewsWeather
Newsstand
NewsstandStub
NextPay
NexusLauncherIcons
NexusWallpapersStubPrebuilt2017
NexusWallpapersStubPrebuilt2019
NezukoMusic
NoiseField
Notes
NovaBugreportWrapper
OBDM_Permissions
ONESettings
OPFileManager
OPIconpackOnePlus
OPIconpackOxygen
OPIconpackRound
OPMemberShip
OPScreenRecord
OPScreenRecorder
OPWeather
OPWidget
OccamQuickOffice
OdadPrebuilt
OemDmTrigger
Olc
OmniJaws
OmniSwitch
OneDrive
OneDrive_Samsung_v3
OneNote
OneOSLogcat
OneOSSTATS
OneOSSpace
Opera
OperaMax
OperaMax_PreinstallProvider
Opera_data
Ornament
Panic
Papers
ParanoidPapers
PartnerBookmarksProvider
PaymentService
PdfViewer
PersonalAssistant
PersonalAssistantGlobal
PhaseBeam
Phonograph
PhotoTable
Photos
PicoTts
PixelLiveWallpaperPrebuilt
PixelWallpapers2020
PixelWallpapers2021
PixelWallpapers2022
PixelWallpapers2023
PlayGames
PlusOne
Podcasts
Portrait
PowerPoint_SamsungStub
PrebuiltBugle
PrebuiltBugleStub
PrebuiltDeskClockGoogle
PrebuiltEmailGoogle
PrebuiltExchange3Google
PrebuiltGmail
PrebuiltGoogleTelemetryTvp
PrebuiltKeep
PrebuiltKeepStub
PrebuiltNewsWeather
Prospect
PulseMusic
PureBrowser
QPGallery
QuickAccessWallet
QuickOffice
QuickSearchBox
RRWallpapers
Recorder
RecorderPrebuilt
RetroMusicPlayer
RetroMusicPlayerPrebuilt
RevengeMessages
RevengeOSCalculator
Ripple
RockClient
RomStats
RoseEUKor
SBrowser_3.0.38_MASS_LATEST
SCONE
SOAgent
SPPPushClient_Prod
SPenSdk3
SPlannerWidget_Essential
SPlanner_Essential
SafetyHubPrebuilt
SamsungIMEv2
SamsungSans
SamsungTTS
SceneMode
ScribePrebuilt
SecCalculator2_L
SecEmailComposer-mass
SecEmailProvider-mass
SecEmailSync-mass
SecEmailUI-mass
SecEmailWidget-mass
SecHTMLViewer
SecMyFiles2015_ESS
SecSetupWizard2015
SecurityLogAgent
ShiftPapers
Showcase
SimIcons
Simple-Calendar
SimpleCalendar
SimpleGallery
SimpleGalleryPro
SmartCookieWeb
SmartManagerSDK
SmartManager_OLEDHD
SmartSideBar
SnapdragonMusic
SoundAmplifierPrebuilt
SparkWallpaperStub
SpeechServicesByGoogle
SprdQuickSearchBox
SprintDM
SprintHM
StagWalls
StatusBarLyricExt
StickerFaceARAvatar
Street
Superiorwalls
SwitchAccessPrebuilt
Talk
TalkbackSE
TeamOctavi
Terminal
TipsPrebuilt
TouchAssistant
Traceur
Translate
TranslatePrebuilt
Turbo
TurboAdapter
TurboAdapter_NoBatt
TurboPrebuilt
Tycho
UPTsmService
USCCDM
Updates
VZWAPNLib
Velvet
Velvet_update
ViMusic
Via
ViaBrowser
Videos
VinylMusicPlayer
VoiceAccessPrebuilt
VoiceSearch
VoiceSearchStub
VzwOmaTrigger
Wallet
Wallpaper
WallpaperEffect
WallpaperEmojiPrebuilt
WallpapersBReel2017
WallpapersBReel2019
WallpapersBReel2020
WallpapersBReel2020a
WarpShare
WaveWidget
WeatherDaemon
WeatherPixelPrebuilt
WeatherTile
WebManual
Wellbeing
WellbeingPrebuilt
Word_SamsungStub
XiaomiKeyboard
YGPS
YTMusic
YellowPage
YouDaoEngine
YouTube
YouTubeMusicPrebuilt
YouTubeVanced
ZVideoMass
app-assist-light-release
arcore
bcr
clock-widgets-release
com.facebook.appmanager
com.facebook.services
com.facebook.system
com.google.ar.core
com.sonymobile.infoapp
com.sonymobile.support
crDroidMusic
facebook-appmanager
facebook-installer
facebook-services
googleconf
greenguard
iWnnIME
iWnnIME_Kbd_White
linktowindows
mab
madLauncher
madWallpapers
messaging
obdm_stub
stats
talkback
wellbeingconf
yetCalc
";;
-e) EXPERIMENTALLIST="
BuiltInPrintService
DeviceAsWebcam
DevicePersonalizationPrebuiltPixel2020
DevicePersonalizationPrebuiltPixel2021
DevicePersonalizationPrebuiltPixel2022
DevicePersonalizationPrebuiltPixel4
DocumentsUI
DocumentsUIGoogle
EuiccGoogle
FileExplorer
FileExplorerGlobal
Markup
MarkupGoogle
ParallelSpace
ParallelSpacePrebuilt
PifPrebuilt
PlayAutoInstallConfig
PowerOffAlarm
PrintSpooler
SPrintSpooler
SPrintSpoolerLMR1
SoundPicker
SoundPickerPrebuilt
Stk
Stk2
Tag
TagGoogle
TouchGestures
TrichromeLibrary
TrichromeLibrary-Stub
WallpaperPickerGoogle
WallpaperPickerGooglePrebuilt
WallpaperPickerGoogleRelease
WallpaperPicker_Zero2
WebView
WebViewGoogle
WebViewGoogle-Stub
WebViewStub
";;
-l) LAUNCHERLIST="
ArrowLauncher
AsusLauncher
AsusLauncherDev
DerpLauncherQuickStep
EasyLauncher2_Zero
EnigmaLauncher
EvolutionXLauncherQuickStep
FluidLauncherQuickStep
GhostLauncherQuickStep
Launcher3
Launcher3QuickStep
Launcher3QuickStepMock
Lawnchair
LawnchairQuickStep
MatrixxLauncherQuickStep
NeLauncher
NexusLauncher
NexusLauncherPrebuilt
NexusLauncherRelease
NothingLauncher3
NusantaraLauncherQuickStep
OPLauncher
OPLauncher2
OPLauncherRelease
OPLauncherReleases
OrtusLauncher
OrtusLauncherQuickStep
ParanoidQuickStep
PixelLauncher
RevengeLauncherQuickStep
ShadyLauncher
ShadyQuickStep
SuperiorLauncherQuickStep
TWLauncherESS
Trebuchet
TrebuchetQuickStep
";;
-c) CAMERALIST="
Aperture
ApertureLensLauncher
Camera
Camera2
CameraGo
DevCamera
Flash
FlashLensLauncher
GCam
GCamGOPrebuilt
GCamGo
Gcam
GoogleCamera
GoogleCameraGo
GoogleCameraLegacy
GrapheneCamera
LegacyCamera
Snap
madCamera
";;
-mmh) MMHOSTSLIST="
AdAwayHosts
DisableAdBlocker
Energized
EnergizedHosts
Hosts
LuckyPatcherHosts
SHHosts
SH_Blocker
StevenHosts
SystemlessHostsUnified
disableadblock
hosts
systemless-hosts
";;
-mma) MMAUDIOFX="
AudioFX
MusicFX
MiSound
Dirac
DiracAudioControlService
";;
-hex) HEXUUID="
0bbc89fe-52dc-4c40-8211-cae4da538b50
0e9779c9-4e8f-494d-b2b1-b4ad4e37c54c
146edfc0-7ed2-11e4-80eb-0002a5d5c51b
17852d50-161e-11e2-892e-0800200c9a66
3783c334-d3a0-4d13-874f-0032e5fb80e2
3799d6d1-22c5-43c3-b3ec-d664cf8d2f0d
41d3c987-e6cf-11e3-a88a-11aba5d5c51b
4c6383e0-ff7d-11e0-b6d8-0002a5d5c51b
50786e95-da76-4557-976b-7981bdf6feb9
50dbef80-4ad4-11e3-8f96-0800200c9a66
63509430-52aa-11e3-8f96-0800200c9a66
6723dd80-f0b7-11e0-98a2-0002a5d5c51b
6ab06da4-c516-4611-8166-452799218539
6ab06da4-c516-4611-8166-6168726e6f69
74697567-7261-6564-6864-65726f206678
850b6319-bf66-4f93-bec0-dc6964367786
90380da3-8536-4744-a6a3-5731970e640f
9626da93-9c71-4bb2-8e23-9fc707fb9703
9d4921da-8225-4f29-aefa-39537a04bcaa
9d4921da-8225-4f29-aefa-6e6f69726861
9d4921da-8225-4f29-aefa-aacb40a73593
a0c30891-8246-4aef-b8ad-696f6e726861
a0c30891-8246-4aef-b8ad-d53e26da0253
ae12da60-99ac-11df-b456-0002a5d5c51b
af8da7e0-2ca1-11e3-b71d-0002a5d5c51b
b437f4de-da28-449b-9673-667f8b964304
b437f4de-da28-449b-9673-667f8b9643fe
b8a031e0-6bbf-11e5-b9ef-0002a5d5c51b
bf51a790-512b-11e3-8f96-0800200c9a66
d92c3a90-3e26-11e2-a25f-0800200c9a66
e069d9e0-8329-11df-9168-0002a5d5c51b
e5456320-5391-11e3-8f96-0800200c9a66
f1c02420-777f-11e3-981f-0800200c9a66
f27317f4-c984-4de6-9a90-545759495bf2
f9ed8ae0-1b9c-11e4-8900-0002a5d5c51b
";;
-muis) MUISF="
$IPPMU/ChargingReverse.ogg
$IPPMU/ChargingStarted.ogg
$IPPMU/Dock.ogg
$IPPMU/Effect_Tick.ogg
$IPPMU/InCallNotification.ogg
$IPPMU/KeypressDelete.ogg
$IPPMU/KeypressInvalid.ogg
$IPPMU/KeypressReturn.ogg
$IPPMU/KeypressSpacebar.ogg
$IPPMU/KeypressStandard.ogg
$IPPMU/Lock.ogg
$IPPMU/LowBattery.ogg
$IPPMU/NFCFailure.ogg
$IPPMU/NFCInitiated.ogg
$IPPMU/NFCSuccess.ogg
$IPPMU/NFCTransferComplete.ogg
$IPPMU/NFCTransferInitiated.ogg
$IPPMU/Trusted.ogg
$IPPMU/Undock.ogg
$IPPMU/Unlock.ogg
$IPPMU/VideoRecord.ogg
$IPPMU/VideoStop.ogg
$IPPMU/WirelessChargingStarted.ogg
$IPPMU/audio_end.ogg
$IPPMU/audio_initiate.ogg
$IPPMU/camera_click.ogg
$IPPMU/camera_focus.ogg
$IPPMU/screenshot.ogg
";;
esac
}

CHECKER () {
for c in $1; do
case $c in
-av) ASDK="$(GET_FILE_PROP "ro.build.version.sdk")"
case $ASDK in
22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40);; *) UIP "Warning! SDK Not Supported/Found!"; ENDMODE=false; END;;
esac
[ $ASDK -lt 26 ] && IPPSOUNDFX="\/system\/lib\/soundfx" || IPPSOUNDFX="\/vendor\/lib\/soundfx";;
-ui) if [ -d /data/miui ] || grep "ro.miui.build.region" $ALLPROP >$NULL || grep "ro.miui.region" $ALLPROP >$NULL || grep "ro.miui.ui.version*" $ALLPROP >$NULL; then MIUI=true; else MIUI=false; fi
if [ -d /data/oplus ] || grep "ro.oplus.product.series*" $ALLPROP >$NULL; then BBK=true; else BBK=false; fi
if [ -d /data/sec ] || grep "ro.config.knox" $ALLPROP >$NULL; then ONEUI=true; else ONEUI=false; fi
if $MIUI || $BBK || $ONEUI; then ALLUI=true; else ALLUI=false; fi;;
-magisk) ZYGISK=false MAGISKFIRSTTIME=false FINDMAGISK=false MAGISK=false
if [ -d $IPDADB/magisk ] && [ -f $IPDADB/magisk/util_functions.sh ]; then
FINDMAGISK=true MAGISK=true
UFSH="$IPDADB/magisk/util_functions.sh"
MAGISKVC="$(GET_FILE_PROP -s "$UFSH" "MAGISK_VER_CODE")"
elif [ -d $IPDMM ] && [ -f $IPDMM/util_functions.sh ]; then
FINDMAGISK=true MAGISK=true MAGISKFIRSTTIME=true
UFSH="$IPDMM/util_functions.sh"
MAGISKVC="$(GET_FILE_PROP -s "$UFSH" "MAGISK_VER_CODE")"
fi
if $FINDMAGISK; then
[ $MAGISKVC -ge 23010 ] && ZYGISK=true
if [ $MAGISKVC -lt 27000 ] || [ $MAGISKVC -gt 28100 ] || [ "$(grep "delta" "$UFSH")" ] || [ "$(grep "alpha" "$UFSH")" ] || [ "$(grep "Lygisk" "$UFSH")" ]; then
UIP "Found Unsupported Magisk!" "Please Install Official Magisk v27.0 Or 28.1!"
fi
fi
if $MAGISK; then
if [ ! -d $IPMM ] && [ ! -d $POSTFSDATAD ] && [ ! -d $SERVICED ]; then
mkdir -p $IPMM $POSTFSDATAD $SERVICED
chmod 0755 $IPMM $POSTFSDATAD $SERVICED
fi
MSGIAM="$MSGIP (M)"
[ $BOOTMODE != true ] && UIP "Everything Will Install As Magisk Modules"
else
MSGIAM="$MSGIP (S)"
UIP "Everything Will Install As Non Magisk Modules"
fi;;
-bb) FBUSYBOX=false
if [ -f $IPSB/busybox ]; then BUSYBOX="/bin" FBUSYBOX=true; elif [ -f $IPSXB/busybox ]; then BUSYBOX="/xbin" FBUSYBOX=true; elif [ -d $IPMM/$IDBBB ]; then FBUSYBOX=true; fi;;
-arch) DARCH="$(GET_FILE_PROP "ro.product.cpu.abi")"
case "$DARCH" in
*arm64*) ARCH="arm64";;
*armeabi*) ARCH="arm";;
*) UIP "Warning! ARCH Not Supported/Found!"; ENDMODE=false; END;;
esac
AAPT="$ADDONS/aapt-$ARCH" XMLSTARLET="$ADDONS/xmlstarlet-$ARCH" ZIPALIGN="$ADDONS/zipalign-$ARCH" ZIPPACKER="$ADDONS/zip-$ARCH" WOL="$ADDONS/wol";;
-sel) if grep -q "1" /sys/fs/selinux/enforce || [ $BOOTMODE != true ]; then SELINUX=true SELINUXS="Enforcing"; elif grep -q "0" /sys/fs/selinux/enforce; then SELINUX=false SELINUXS="Permissive"; fi;;
-soc) echo -e "\nro.build.kernel.version=$(uname -r)" >> $ALLPROP
HIRES=false
for PLATFORM in msm8952 msm8953 sdm660 bengal trinket sdm670 lito sdm710 atoll sm6150 msm8994 msm8996 msm8998 sdm845 msmnile kona lahaina holi taro kalama pineapple parrot; do
if grep -q "ro.board.platform=$PLATFORM" "$ALLPROP"; then HIRES=true; break; fi
done
SNAPSOC=false MTKSOC=false EXYSOC=false KIRSOC=false
if grep -qE "ro.soc.model=SM*|ro.soc.manufacturer=Q*|ro.board.platform=apq.*|ro.board.platform=msm*|ro.board.platform=sdm*" "$ALLPROP"; then
SNAPSOC=true
elif grep -qE "ro.soc.manufacturer=M*|ro.mediatek.version.*|ro.hardware=mt*|ro.board.platform=mt*|ro.board.platform=MT*|Build.BRAND=MTK*" "$ALLPROP"; then
MTKSOC=true
elif grep -qE "ro.soc.model=Tensor*|ro.soc.manufacturer=Google*|ro.hardware=exynos*|ro*.*chipname=exynos*|ro.product.board=exynos*|ro.board.platform=exynos*" "$ALLPROP"; then
EXYSOC=true
elif grep -qE "ro.board.platform=hi*|ro.board.platform=kirin*" "$ALLPROP"; then
KIRSOC=true
fi;;
-gapps) FINDGAPPS=false
for d in $ALLDP; do
for gms in "GmsCore" "PrebuiltGmsCore" "GoogleServicesFramework" "Phonesky"; do
if [ -d $d/*/$gms ]; then FINDGAPPS=true; break 2; fi
done
done
if [ $FINDGAPPS != true ] && [ -d $IPSAD ]; then
for gms in "*bitgapps*.sh" "*flame*.sh" "*nikgapps*.sh" "*gapps*.sh"; do
if find $IPSAD -type f -name $gms >$NULL; then FINDGAPPS=true; break; fi
done
fi;;
-device) local PROPDEVICE=$(echo "$2" | tr '[:upper:]' '[:lower:]')
for j in "ro.product.device" "ro.build.product" "ro.product.vendor.device" "ro.vendor.product.device"; do
[ "$(sed -n "s/^$j=//p" $ALLPROP 2>$NULL | head -n 1 | tr '[:upper:]' '[:lower:]')" == "$PROPDEVICE" ] && return 0
done
return 1;;
-upd) MODIDCV=false MSGMMFUPD="Found" MSGMMUPD="ReInstall"
local MMUPDID="$2" MMUPDV="$3" MMUPDVC="$4"
for ALLMMUPDID in $MMUPDID; do
if [ -d $IPMM/$ALLMMUPDID ]; then
local MODVERSION="$(GET_FILE_PROP -s "$IPMM/$ALLMMUPDID/module.prop" "version")" MODCVERSION="$(GET_FILE_PROP -s "$IPMM/$ALLMMUPDID/module.prop" "versionCode")"
if [ "$MODIDVAR" ]; then
MMUPDID=${MMUPDID%% *}
if [ "$MODIDVAR" = "$ALLMMUPDID" ]; then
unset MODIDVAR
UIP -cs
UIP "$MSGMMFUPD $ALLMMUPDID" "Version Installed: $MODVERSION/$MODCVERSION" "New Version: $MMUPDV/$MMUPDVC, $MSGMMUPD?" "$MSGVU Yes" "$MSGVD No $MSGNUS"; KEYCHOOSE && $5
break 3
fi
fi
if $MMUPD; then
if [ -z "$MODCVERSION" ] || [ "$MMUPDVC" -gt "$MODCVERSION" ]; then MODIDCV=true MSGMMFUPD="Found Update For" MSGMMUPD="Update"; fi
break
else
MODIDCV=true; break
fi
fi
done
if $MODIDCV; then
UIP -cs
UIP "$MSGMMFUPD $ALLMMUPDID" "Version Installed: $MODVERSION/$MODCVERSION" "New Version: $MMUPDV/$MMUPDVC, $MSGMMUPD?" "$MSGVU Yes" "$MSGVD No $MSGNUS"; KEYCHOOSE && $5
fi;;
-ism) grep -q " `readlink -f $2` " /proc/mounts 2>$NULL; return $?;;
esac
done
}

UNMOUNT () {
if [ $BOOTMODE != true ]; then
UIP "UnMounting Partitions"
for m in $MOUNTS; do
case $m in
$SYSTEM_MOUNT) $DABP && mount -o ro $SYSTEM_MOUNT || umount $SYSTEM_MOUNT;;
*) CHECKER -ism "$m" && umount "$m";;
esac
done
fi
}

END () {
UIP -cs
if $ENDMODE; then
UIP "It's Time To Choose:" "$MSGVU To The Beginning $MSGEFTC" "$MSGVD Exit $MSGEND"
GESTURES=false
if KEYCHOOSE; then PRESETS; END; else ENDMODE=false; END; fi
else
UNMOUNT
UIP "Clear TMPDIR & Exit"; UIP -cs
rm -rf $LOCALTMPDIR $DEVTMPDIR
exit 0
fi
}

UIP () {
case $1 in
-s) UIP -cs; for uip in "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}" "${11}"; do [ "$uip" ] && UIP -p "$uip" || break; done;;
-cs) $BOOTMODE && echo "$MSGCS" || echo -e "UIP -p $MSGCS\nUIP -p" >> /proc/self/fd/$FILEOUT;;
-p) $BOOTMODE && echo "$MSGSD $2" || echo -e "UIP -p $MSGSD $2\nUIP -p" >> /proc/self/fd/$FILEOUT;;
*) for uip in "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"; do [ "$uip" ] && UIP -p "$uip" || break; done;;
esac
}

UCSA () {
if $MAGISK; then
case $1 in
-eno | -ent) CEMODID="$4";;
-s | -a | -led | -rm) :;;
*) CEMODID="$3";;
esac
if [ "$CEMODID" ]; then
for SCEMODID in $CEMODID; do
if [ ! -d $IPMM/$SCEMODID ]; then
MSGCEMODID=" [X]"
elif [ -f $IPMM/$SCEMODID/remove ]; then
MSGCEMODID=" [R]"
elif [ -f $IPMM/$SCEMODID/disable ]; then
MSGCEMODID=" [D]"
elif [ ! -f $IPMM/$SCEMODID/disable ] && [ ! -f $IPMM/$SCEMODID/remove ] && [ -f $IPMM/$SCEMODID/update ]; then
MSGCEMODID=" [U]"
elif [ -d $IPMM/$SCEMODID ] && [ ! -f $IPMM/$SCEMODID/disable ] && [ ! -f $IPMM/$SCEMODID/remove ] && [ ! -f $IPMM/$SCEMODID/update ]; then
MSGCEMODID=" [V]"
break
fi
done
fi
fi
case $1 in
-eno) UIP -s "$2" "$MSGVU Yes$MSGCEMODID $MSGEEFTC" "$MSGVD No $MSGNUS"; KEYCHOOSE && $3;;
-ent) UIP -s "$2" "$MSGVU Yes$MSGCEMODID $MSGEFTC" "$MSGVD No $MSGNUS"; KEYCHOOSE && $3;;
-rm) UIP -s "$MSGFI $2, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then UIP "$MSGRMIP"; rm -f $3; UIP "$MSGDRM"; fi;;
-led) NLEDLO="$2"
UIP -s "($3)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
ANIMATIONVARIANT=$(KEYCHOOSE && echo true || echo false)
if $ANIMATIONVARIANT && $TEST; then
UIP "$MSGPW"
sh "$LOCALTMPDIR/$IDLEDLA/$NLEDLO.sh"
UIP -s "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
NEXTTEST=$(KEYCHOOSE && echo true || echo false)
$NEXTTEST || ANIMATIONVARIANT=false
fi;;
-s) UIP -s "$2" "$MSGVU Yes $3" "$MSGVD No $4"; KEYCHOOSE && $5;;
-a) MSGUCSF=true
local UCSFNMPC=$2
for UCSFNMC in $(echo $UCSFNMPC | cut -f 1 -d '_'); do
if $MSGUCSF; then
UIP -s "$3"
MSGUCSF=false
else
UIP -cs
fi
UIP "$4 ($UCSFNMC)" "$MSGVU Yes"
MSGUCSFA="$MSGNIS"
case $UCSFNMC in
"$5") MSGUCSFA="$MSGNUS";;
esac
UIP "$MSGVD No $MSGUCSFA"
if KEYCHOOSE; then
UCSFNM=true
break
else
UCSFNM=false
fi
done;;
*) UIP -s "$1" "$MSGVU Yes$MSGCEMODID" "$MSGVD No $MSGNUS"; KEYCHOOSE && $2;;
esac
CEMODID= SCEMODID= MSGCEMODID=
}

GET_FILE_PROP () {
case $1 in
-s) grep -m1 "^$3=" "$2" | cut -d= -f2;;
-ap) if [ $BOOTMODE != true ]; then
for path in $ALLDP; do
files=$(find "$path" -type f -name "build.prop" 2>$NULL)
for file in $files; do
echo "=== $file ===" >> "$ALLPROP"; cat "$file" >> "$ALLPROP"; echo -e "\n" >> "$ALLPROP"
done
done
fi
getprop | sed "s/\]: \[/=/g;s/\]//g;s/\[//g" >> $ALLPROP;;
*) local REGEX="s/^$1=//p"
shift
local FILES=$@
[ -z "$FILES" ] && FILES="$ALLPROP"
sed -n "$REGEX" $FILES 2>$NULL | head -n 1;;
esac
}

TOUCHER () {
mkdir -p ${1%/*} 2>$NULL; [ -z $2 ] && touch $1 || echo $2 > $1
}

REPLACER () {
case $1 in
-f) local REPLACE=$2; for TARGET in $REPLACE; do for FPATH in "$IPSA" "$IPSPA" "$IPSSPA" "$IPSSPPA" "$IPSSEA" "$IPSSEPA" "$IPVA" "$IPVPA"; do if [ -d $MAGISKMP$FPATH/$TARGET ]; then UIP "Found $TARGET, Replace..."; TOUCHER $IPMM/$MODID$FPATH/$TARGET/.replace; fi; done; done;;
-a) local REPLACE=$2 TPATH=$3; for TARGET in $REPLACE; do for FPATH in $TPATH; do [ -f $MAGISKMP$FPATH/$TARGET ] && TOUCHER $IPMM/$MODID$FPATH/$TARGET; done; done;;
*) local REPLACE=$1; for TARGET in $REPLACE; do TOUCHER $IPMM/$MODID$TARGET/.replace; done;;
esac
}

REMOVER () {
local REMOVE=$2
case $1 in
-rm) for TARGET in $REMOVE; do [ -d $TARGET ] && rm -rf $TARGET; done;;
-mm) for TARGET in $REMOVE; do for MMP in $IPMM $IPMMU; do [ -d $MMP/$TARGET ] && rm -rf $MMP/$TARGET; done; done;;
-emm) for TARGET in $REMOVE; do for MMP in $IPMM $IPMMU; do if [ -d $MMP/$TARGET ]; then local EXCEPT=$3; cd $IPMM/$TARGET; ls | grep -v $EXCEPT | xargs rm -rf; fi; done; done;;
esac
}

BUCKUPER () {
local RORB=$2
for TARGET in $RORB; do
case $1 in
-r) [ -f $TARGET.bak ] && mv -f $TARGET.bak $TARGET;;
-s) [ -f $TARGET ] && for SBT in $TARGET; do cp -f $SBT $SBT.bak; done;;
-bp) [ -f $TARGET ] && cp -f $TARGET "$TARGET-$( date +"%d-%m-%Y-%H:%M:%S" ).bak";;
esac
done
}

FINDER () {
case $1 in
-mm) local FIND=$2; for TARGET in $FIND; do if [ -d $IPMM/$TARGET ] || [ -d $IPMMU/$TARGET ]; then return 0; break; fi; done; return 1;;
-nmp) local FIND=$2; for TARGET in $FIND; do if [ -e $TARGET ]; then return 0; break; fi; done; return 1;;
-aiop) if [ $BOOTMODE != true ]; then local FIND=$2; for TARGET in $FIND; do if [ -e $TARGET ]; then return 0; break; fi; done; return 1; else return 1; fi;;
-aiopb) if [ $BOOTMODE != true ]; then local FIND=$2; for TARGET in $FIND; do if [ -e $TARGET.bak ]; then return 0; break; fi; done; return 1; else return 1; fi;;
*) local FIND=$1; for TARGET in $FIND; do if [ -e $MAGISKMP$TARGET ]; then return 0; break; fi; done; return 1;;
esac
}

SETPERM () {
case $1 in
-s) chown $3:$4 $2 || return 1
chmod $5 $2 || return 1
CON=$6
[ -z $CON ] && CON=u:object_r:system_file:s0
chcon $CON $2 || return 1;;
-rp) [ -z $7 ] && UIP "Setting Permissions"
find $2 -type d 2>$NULL | while read dir; do
SETPERM -s $dir $3 $4 $5 $7
done
find $2 -type f -o -type l 2>$NULL | while read file; do
SETPERM -s $file $3 $4 $6 $7
done;;
-mm) if $MAGISK; then
SETPERM -rp $IPMM/$MODID 0 0 0755 0644
if [ -d $IPMM/$MODID$MIPSV ]; then
SETPERM -rp $IPMM/$MODID$MIPSV 0 0 0755 0644 u:object_r:vendor_file:s0
[ -d $IPMM/$MODID$MIPSVA ] && SETPERM -rp $IPMM/$MODID$MIPSVA 0 0 0755 0644 u:object_r:vendor_app_file:s0
[ -d $IPMM/$MODID$IPSVE ] && SETPERM -rp $IPMM/$MODID$IPSVE 0 0 0755 0644 u:object_r:vendor_configs_file:s0
[ -d $IPMM/$MODID$MIPSVO ] && SETPERM -rp $IPMM/$MODID$MIPSVO 0 0 0755 0644 u:object_r:vendor_overlay_file:s0
for FILE in $(find $IPMM/$MODID$MIPSV -type f -name *".apk"); do
[ -f $FILE ] && chcon u:object_r:vendor_app_file:s0 $FILE
done
fi
[ -d $IPMM/$MODID$MIPSB ] && chmod -R 0777 $IPMM/$MODID$MIPSB
[ -d $IPMM/$MODID$MIPSXB ] && chmod -R 0777 $IPMM/$MODID$MIPSXB
[ -f $IPMM/$MODID/nfqttl ] && chmod 0777 $IPMM/$MODID/nfqttl
fi
case $2 in -msg) UIP "$MSGDI";; esac;;
esac
}

UZTI () {
case $1 in
-i) UZTI "$2" "$3"
cd $LOCALTMPDIR/$2 && $ZIPPACKER -r -0 $LOCALTMPDIR/$2 * >$NULL
OFPATHZIP="$LOCALTMPDIR/$2"
mkdir -p $OFPATHZIP
$UNZIP -oq "$FILE" '$OFPATHZIP.zip' -d "$OFPATHZIP"
$UNZIP -oq "$OFPATHZIP.zip" '$METAINF' -d "$OFPATHZIP"
chmod 0755 "$OFPATHZIP/$METAINF"
sh "$OFPATHZIP/$METAINF" "$FILEIN" "$FILEOUT" "$OFPATHZIP.zip"
rm -rf $OFPATHZIP*
if [ $BOOTMODE != true ]; then UIP -s "ReMounting$MOUNTS"; PARTITION_AND_MOUNTS; fi
UIP "$MSGDI";;
*) [ "$2" ] && UIP "$MSGIAM $2"
[ ! -f $LOCALTMPDIR/$1.tar.xz ] && $UNZIP -oq $FILE $1.tar.xz -d $LOCALTMPDIR 2>$NULL
$TAR -xf $LOCALTMPDIR/$1.tar.xz -C $LOCALTMPDIR
rm -f $LOCALTMPDIR/$1.tar.xz
chmod -R 0777 $LOCALTMPDIR/$1;;
esac
}

MOVERPATH () {
if [ $BOOTMODE != true ]; then
if [ -d $IPMM/$MODID/system_root/system ]; then
mkdir -p $IPMM/$MODID/system; cp -rf $IPMM/$MODID/system_root/system/* $IPMM/$MODID/system; rm -rf $IPMM/$MODID/system_root
fi
if [ -d $IPMM/$MODID/system/system ]; then
mkdir -p $IPMM/$MODID/system; cp -rf $IPMM/$MODID/system/system/* $IPMM/$MODID/system; rm -rf $IPMM/$MODID/system/system
fi
fi
if [ -d $IPMM/$MODID/vendor ]; then
mkdir -p $IPMM/$MODID$MIPSV; cp -rf $IPMM/$MODID/vendor/* $IPMM/$MODID$MIPSV; rm -rf $IPMM/$MODID/vendor
fi
if [ -d $IPMM/$MODID/odm ]; then
mkdir -p $IPMM/$MODID/system/odm; cp -rf $IPMM/$MODID/odm/* $IPMM/$MODID/system/odm; rm -rf $IPMM/$MODID/odm
fi
}

APKINSTALLER () {
NAMEINSTALLAPP=$2 NAMEPATHOUT=$3
UIP "$MSGIP $PACKAGENAME"
case $1 in
-d) if $BOOTMODE; then
pm install -r $NAMEINSTALLAPP >$NULL
else
cp -f $STORAGE/Applications/$APKINPUT $IPDA/$PACKAGENAME.apk
SETPERM -rp $IPDA/$PACKAGENAME.apk 1000 1000 0771 0644
fi;;
-a) if $MAGISK; then
PATHINSTALLAPP=$IPMM/$MODID$MIPSA/$NAMEINSTALLAPP
else
PATHINSTALLAPP=$IPSA/$NAMEINSTALLAPP
fi
rm -rf $PATHINSTALLAPP
mkdir -p $LOCALTMPDIR/Lib_$NAMEINSTALLAPP
for ARCHA in "armeabi" "armeabi-v7a" "arm64-v8a"; do
$UNZIP -oq $FILE $NAMEPATHOUT/$NAMEINSTALLAPP.apk -d $LOCALTMPDIR 2>$NULL
$UNZIP -oq $LOCALTMPDIR/$NAMEPATHOUT/$NAMEINSTALLAPP.apk lib/$ARCHA/* -d $LOCALTMPDIR/Lib_$NAMEINSTALLAPP 2>$NULL
case $ARCHA in
"armeabi") ARCHOUT="arm";; "armeabi-v7a") ARCHOUT="arm";; "arm64-v8a") ARCHOUT="arm64";;
esac
if [ -d $LOCALTMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCHA ]; then
mkdir -p $PATHINSTALLAPP/lib/$ARCHOUT
cp -f $LOCALTMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCHA/* $PATHINSTALLAPP/lib/$ARCHOUT
else
mkdir -p $PATHINSTALLAPP
fi
cp -f $LOCALTMPDIR/$NAMEPATHOUT/$NAMEINSTALLAPP.apk $PATHINSTALLAPP
done
rm -rf $LOCALTMPDIR/Lib_$NAMEINSTALLAPP
if $MAGISK; then
MMPR -v "AIOIARPFMD" "$VAIOPFMD" "$VAIOPFMD" "AIOIARPFMD - Systemless Apps As Magisk Module"
touch $IPMM/$MODID/update
APKPERM "$PATHINSTALLAPP/$NAMEINSTALLAPP.apk" "$IPMM/$MODID$MIPSEP"; HAPWL "$IPMM/$MODID$MIPSES"
SETPERM -mm
else
APKPERM "$PATHINSTALLAPP/$NAMEINSTALLAPP.apk" "$IPSEP"; HAPWL "$IPSES"
SETPERM -rp $IPSA/$NAMEINSTALLAPP 0 0 0755 0644
fi;;
-s) rm -rf $PATHINSTALLAPP
mkdir -p $LOCALTMPDIR/Lib_$NAMEINSTALLAPP
for ARCHA in "armeabi" "armeabi-v7a" "arm64-v8a"; do
$UNZIP -oq $NAMEPATHOUT/$NAMEINSTALLAPP.apk lib/$ARCHA/* -d $LOCALTMPDIR/Lib_$NAMEINSTALLAPP 2>$NULL
case $ARCHA in
"armeabi") ARCHOUT="arm";; "armeabi-v7a") ARCHOUT="arm";; "arm64-v8a") ARCHOUT="arm64";;
esac
if [ -d $LOCALTMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCHA ]; then
mkdir -p $PATHINSTALLAPP/lib/$ARCHOUT
cp -f $LOCALTMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCHA/* $PATHINSTALLAPP/lib/$ARCHOUT
else
mkdir -p $PATHINSTALLAPP
fi
cp -f $NAMEPATHOUT/$NAMEINSTALLAPP.apk $PATHINSTALLAPP
done
rm -rf $LOCALTMPDIR/Lib_$NAMEINSTALLAPP;;
esac
}

APKBUILDER () {
for p in $1; do
$AAPT p -f -v -M $p/AndroidManifest.xml -I $STORAGE/framework-res.apk -S $p/res/ -F $p/unsigned.apk >$NULL
$ZIPALIGN -c 4 $p/unsigned.apk
[ $2 ] && cp -f $p/unsigned.apk $p-$2.apk || cp -f $p/unsigned.apk $p.apk
done
}

APKPERM () {
APKINPUT=$1 APKDIROUTPUT=$2
PACKAGENAME=$($AAPT list -a $APKINPUT | awk -v FS='"' '/package=/{print $2}')
mkdir -p $APKDIROUTPUT
PERM=$($AAPT d permissions $APKINPUT | grep "uses-permission:" | \
     sed -r "s|.*='(.*)'|\1|")
APPPERM=$(echo "$PERM" | \
     sed -re "s|  ||g; s|^|        <permission name=\"|; s|$|\"/>|")
echo -e "$MSGCXML\n<permissions>\n	<privapp-permissions package=\"$PACKAGENAME\">\n$APPPERM\n	</privapp-permissions>\n</permissions>" | tee $APKDIROUTPUT/privapp-permissions-$PACKAGENAME.xml $APKDIROUTPUT/$PACKAGENAME.xml >$NULL
chmod 0644 $APKDIROUTPUT/privapp-permissions-$PACKAGENAME.xml $APKDIROUTPUT/$PACKAGENAME.xml
}

HAPWL () {
APKDIROUTPUT=$1; mkdir -p $APKDIROUTPUT
echo -e "$MSGCXML\n<config>\n	<hidden-api-whitelisted-app package=\"$PACKAGENAME\" />\n</config>" > $APKDIROUTPUT/$PACKAGENAME-package-whitelist.xml
chmod 0644 $APKDIROUTPUT/$PACKAGENAME-package-whitelist.xml
}

MKSCXML () {
APKDIROUTPUT=$1; mkdir -p $APKDIROUTPUT
echo -e "$MSGCXML\n<config>\n	<hidden-api-whitelisted-app package=\"$PACKAGENAME\" />\n	<allow-in-power-save package=\"$PACKAGENAME\" />\n</config>" > $APKDIROUTPUT/config-$PACKAGENAME.xml
chmod 0644 $APKDIROUTPUT/config-$PACKAGENAME.xml
}

AMXML () {
[ $7 ] && CATEGORY=" android:category=\"$7\"" || CATEGORY=
mkdir -p $6/res/values $6/res/values-land $6/res/drawable $6/res/values-440dpi-v4 $6/res/values-sw600dp-v13 $6/res/values-sw900dp-v13 $6/res/values-xhdpi-v4 $6/res/values-xxhdpi-v4 $6/res/values-xxxhdpi-v4
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"$1\" android:versionName=\"$2\" android:versionCode=\"$3\">
	<uses-sdk android:minSdkVersion=\"27\" android:targetSdkVersion=\"35\" />
	<overlay$CATEGORY android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"$4\"/>
	<application android:hasCode=\"false\" android:label=\"$5\"/>
</manifest>" > $6/AndroidManifest.xml
}

MMPR () {
local MMPROP="$IPMM/$MODID/module.prop"
echo -e "id=$MODID\nname=$2\nversion=$3" > $MMPROP
case $1 in
-v) echo -e "versionCode=$4\nauthor=$MSGWDI\ndescription=$5" >> $MMPROP;;
-vc) echo -e "versionCode=$4\nauthor=$5\ndescription=$6" >> $MMPROP;;
-vcs) echo -e "versionCode=$4\nauthor=$5\ndescription=$6\nsupport=$7" >> $MMPROP;;
esac
echo -e "#!/bin\sh
set -x
UNZIP=\"$IPDADB/magisk/busybox unzip\"
MODIDVAR=\"$MODID\"
export MODIDVAR

KEYCHOOSE () {
while true; do
eval \$(getevent -lqc 1 | awk '{print \"K=\" \$3; print \"V=\" \$4}')
case \"\$K:\$V\" in
\"KEY_VOLUMEUP:DOWN\") return 0;;
\"KEY_VOLUMEDOWN:DOWN\") return 1;;
esac
done
}

UNIVERSALUNZIP () {
OFPATHZIP=\"$LOCALTMPDIR\"
mkdir -p \$OFPATHZIP
\$UNZIP -oq \"\$AIOFILE\" '$METAINF' -d \"\$OFPATHZIP\"
chmod 0755 \"\$OFPATHZIP/$METAINF\"
sh \"\$OFPATHZIP/$METAINF\" \"$FILEIN\" \"$FILEOUT\" \"\$AIOFILE\"
}

echo -e \"$MSGCS\\\n$MSGSD AIO Action $VAIOASH ($VCAIOASH)\\\n$MSGSD $2 $3 ($4)\\\n$MSGSD Installed From AIO $VAIOPFMD\\\n$MSGSD AIO Chanel: $MSGAIODC\\\n$MSGSD AIO Chat: $MSGAIOSC\\\n$MSGCS\"

AIOFILE=\$(find $STORAGE/* -maxdepth 1 -type f -name 'AIOPFMD*.zip' 2>$NULL | head -n 1)
if [[ -n \"\$AIOFILE\" ]]; then
echo -e \"$MSGSD Found \$AIOFILE, Install?\\\n$MSGSD ▲ ► Yes $MSGEEFTC\\\n$MSGSD ▼ ► No $MSGEND\"
if KEYCHOOSE; then
\$UNZIP -oq \"\$AIOFILE\" -d $LOCALTMPDIR 2>$NULL
UNIVERSALUNZIP
else
echo \"$MSGCS\"
exit 1
fi
else
exit 1
fi" > $IPMM/$MODID/action.sh
}

MSSERVICE () {
case $1 in
-s) echo -e "#/sbin/sh\n\nwhile true; do\nif [ \$(getprop sys.boot_completed) -eq 1 ]; then\n$2\nbreak\nfi\ndone" > $IPMM/$MODID/service.sh;;
-u) echo -e "#/sbin/sh\n\nwhile true; do\nif [ ! -d $IPMM/$MODID ]; then\n$2\nrm -f $SERVICED/$3.sh\nbreak\nelse\nbreak\nfi\ndone" > $SERVICED/$3.sh;;
-uc) echo -e "#/sbin/sh\n\nwhile true; do\nif [ \$(getprop sys.boot_completed) -eq 1 ]; then\n$2\nbreak\nfi\ndone" > $SERVICED/$3.sh;;
*) echo -e "#/sbin/sh\n\nwhile true; do\nif [ \$(getprop sys.boot_completed) -eq 1 ]; then\nif [ -f $IPMM/$MODID/disable ] || [ ! -d $IPMM/$MODID ]; then\n$1\nif [ ! -d $IPMM/$MODID ]; then\nrm -f $SERVICED/$3.sh\nfi\nbreak\nelif [ -d $IPMM/$MODID ]; then\n$2\nbreak\nfi\nfi\ndone" > $SERVICED/$3.sh;;
esac
[ -f $SERVICED/$3.sh ] && chmod 0777 $SERVICED/$3.sh
}

WCANFTP () {
for c in $1; do
case $c in
-sl) CHECKER "-sel"; if $SELINUX || [ $BOOTMODE != true ]; then if [ ! -d $IPMM/$IDSELS ]; then UIP "May Needed SELinux Is Permissive!"; PAI=true; UCSA "$MSGIP SELinux Is Permissive $VIPSELS?" "IPSELSS" "$IDSELS"; fi; fi;;
-bb) CHECKER "-bb"; if [ $FBUSYBOX != true ]; then UIP "Not Found BusyBox!"; IPBBBS; fi;;
-ehap) if [ ! -d $IPMM/$IDEHAP ] && [ $ASDK = 30 ]; then UIP "May Needed Enabling Hidden Api Policy!"; UCSA "$MSGIP Enabling Hidden Api Policy $VIPEHAP?" "IPEHAPS" "$IDEHAP"; fi;;
-alcf) if [ ! -d $IPMM/$IDALCF ]; then UIP "May Needed Audio Library Crackling Fix!"; UCSA "$MSGIP Audio Library Crackling Fix $VIPALCF?" "IPALCFS" "$IDALCF"; fi;;
-aml) if [ ! -d $IPMM/$IDAML ]; then
if [[ -d $IPMM/$IDDA && -d $IPMM/$IDVFX ]] || [[ -d $IPMM/$IDDA && -d $IPMM/$IDVFX && -f $IPMM/NLSound$MIPSVLRA/dirac.so ]] || [[ -d $IPMM/$IDVFX && -f $IPMM/NLSound$MIPSVLRA/dirac.so ]] || [[ -d $IPMM/$IDDA && -f $IPMM/NLSound$MIPSVLRA/dirac.so ]]; then UIP "Not Found Audio Modification Library!"; AMLI=true; IPAMLS; else AMLI=false; fi
if [ $AMLI != true ]; then
ALLLIST -hex
for UUID in $HEXUUID; do
for PSF in $AECONFXML; do
if grep $UUID $MAGISKMP$PSF >$NULL; then
UIP -s "Found HEXUUID: $UUID" "May Needed Audio Modification Library!"
UCSA "$MSGIP Audio Modification Library $VIPAML?" "IPAMLS" "$IDAML"
break 2
fi
done
done
fi
fi;;
esac
done
}

PSXCF () {
case $1 in
-aae) case $PSF in
*.conf) sed -i "s/^effects {/effects {\n  $3 {\n    library $2\n    uuid $5\n  }/g" $PSF
sed -i "s/^libraries {/libraries {\n  $2 {\n    path $IPPSOUNDFX\/$4\n  }/g" $PSF
if [ $MODID = $IDDA ]; then
echo "$GPSF" | grep -Eq m && sed -i "/^    music {/a\        $3 {\n        }" $PSF
echo "$GPSF" | grep -Eq r && sed -i "/^    ring {/a\        $3 {\n        }" $PSF
echo "$GPSF" | grep -Eq a && sed -i "/^    alarm {/a\        $3 {\n        }" $PSF
echo "$GPSF" | grep -Eq s && sed -i "/^    system {/a\        $3 {\n        }" $PSF
echo "$GPSF" | grep -Eq v && sed -i "/^    voice_call {/a\        $3 {\n        }" $PSF
echo "$GPSF" | grep -Eq n && sed -i "/^    notification {/a\        $3 {\n        }" $PSF
fi;;
*.xml) sed -i "/<libraries>/ a\        <library name=\"$2\" path=\"$4\"\/>" $PSF
sed -i "/<effects>/ a\        <effect name=\"$3\" library=\"$2\" uuid=\"$5\"\/>" $PSF
if [ $MODID = $IDDA ]; then
echo "$GPSF" | grep -Eq m && sed -i "/<stream type=\"music\">/a\            <apply effect=\"$3\"\/>" $PSF
echo "$GPSF" | grep -Eq r && sed -i "/<stream type=\"ring\">/a\            <apply effect=\"$3\"\/>" $PSF
echo "$GPSF" | grep -Eq a && sed -i "/<stream type=\"alarm\">/a\            <apply effect=\"$3\"\/>" $PSF
echo "$GPSF" | grep -Eq s && sed -i "/<stream type=\"system\">/a\            <apply effect=\"$3\"\/>" $PSF
echo "$GPSF" | grep -Eq v && sed -i "/<stream type=\"voice_call\">/a\            <apply effect=\"$3\"\/>" $PSF
echo "$GPSF" | grep -Eq n && sed -i "/<stream type=\"notification\">/a\            <apply effect=\"$3\"\/>" $PSF
fi;;
esac;;
-rae) case $PSF in *.conf) for RAE in $2; do sed -i "/$RAE/d" $PSF; done;; *.xml) for RAE in $2; do sed -i "/\"$RAE\"/d" $PSF; done;; esac;;
-osp) case $2 in
*.conf) local SPACES=$(sed -n "/^output_session_processing {/,/^}/ {/^ *music {/p}" $2 | sed -r "s/( *).*/\1/") EFFECTS=$(sed -n "/^output_session_processing {/,/^}/ {/^${SPACES}music {/,/^${SPACES}}/p}" $2 | grep -E "^${SPACES} +[A-Za-z]+" | sed -r "s/( *.*) .*/\1/g")
for EFFECT in $EFFECTS; do
local SPACES=$(sed -n "/^effects {/,/^}/ {/^ *${EFFECT} {/p}" $2 | sed -r "s/( *).*/\1/")
[ "$EFFECT" != "atmos" ] && sed -i "/^effects {/,/^}/ {/^${SPACES}${EFFECT} {/,/^${SPACES}}/ s/^/#/g}" $2
done;;
*.xml) local EFFECTS=$(sed -n "/^ *<postprocess>$/,/^ *<\/postprocess>$/ {/^ *<stream type=\"music\">$/,/^ *<\/stream>$/ {/<stream type=\"music\">/d; /<\/stream>/d; s/<apply effect=\"//g; s/\"\/>//g; p}}" $2)
for EFFECT in $EFFECTS; do
[ "$EFFECT" != "atmos" ] && sed -ri "s|^( *)<apply effect=\"${EFFECT}\"/>|\1<!--<apply effect=\"${EFFECT}\"/>-->|" $2
done;;
esac;;
-pre | -post) case $1 in -pre) CONF=pre_processing XML=preprocess;; -post) CONF=output_session_processing XML=postprocess;; esac
case $2 in
*.conf) if [ ! "$(sed -n "/^${CONF} {/,/^}/p" $2)" ]; then
echo -e "\n${CONF} {\n    $3 {\n        $4 {\n        }\n    }\n}" >> $2
elif [ ! "$(sed -n "/^${CONF} {/,/^}/ {/$3 {/,/^    }/p}" $2)" ]; then
sed -i "/^${CONF} {/,/^}/ s/${CONF} {/${CONF} {\n    $3 {\n        $4 {\n        }\n    }/" $2
elif [ ! "$(sed -n "/^${CONF} {/,/^}/ {/$3 {/,/^    }/ {/$4 {/,/}/p}}" $2)" ]; then
sed -i "/^${CONF} {/,/^}/ {/$3 {/,/^    }/ s/$3 {/$3 {\n        $4 {\n        }/}" $2
fi;;
*.xml) if [ ! "$(sed -n "/^ *<${XML}>/,/^ *<\/${XML}>/p" $2)" ]; then
sed -i "/<\/audio_effects_conf>/i\    <${XML}>\n       <stream type=\"$3\">\n            <apply effect=\"$4\"\/>\n        <\/stream>\n    <\/${XML}>" $2
elif [ ! "$(sed -n "/^ *<${XML}>/,/^ *<\/${XML}>/ {/<stream type=\"$3\">/,/<\/stream>/p}" $2)" ]; then
sed -i "/^ *<${XML}>/,/^ *<\/${XML}>/ s/    <${XML}>/    <${XML}>\n        <stream type=\"$3\">\n            <apply effect=\"$4\"\/>\n        <\/stream>/" $2
elif [ ! "$(sed -n "/^ *<${XML}>/,/^ *<\/${XML}>/ {/<stream type=\"$3\">/,/<\/stream>/ {/^ *<apply effect=\"$4\"\/>/p}}" $2)" ]; then
sed -i "/^ *<${XML}>/,/^ *<\/${XML}>/ {/<stream type=\"$3\">/,/<\/stream>/ s/<stream type=\"$3\">/<stream type=\"$3\">\n            <apply effect=\"$4\"\/>/}" $2
fi;;
esac;;
-psf) for FPSFTTS in $2; do
PSF="$IPMM/$MODID$FPSFTTS"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FPSFTTS $PSF
sed -i 's/\t/  /g' $PSF
done;;
*) local Name0=$(echo "$3" | sed -r "s|^.*/.*\[@(.*)=\".*\".*$|\1|") Value0=$(echo "$3" | sed -r "s|^.*/.*\[@.*=\"(.*)\".*$|\1|")
[ "$(echo "$4" | grep '=')" ] && Name1=$(echo "$4" | sed "s|=.*||") || local Name1="value"
local Value1=$(echo "$4" | sed "s|.*=||")
case $1 in
"-s"|"-u"|"-i")
local SNP=$(echo "$3" | sed -r "s|(^.*/.*)\[@.*=\".*\".*$|\1|") NP=$(dirname "$SNP") SN=$(basename "$SNP")
if [ "$5" ]; then
[ "$(echo "$5" | grep '=')" ] && local Name2=$(echo "$5" | sed "s|=.*||") || local Name2="value"
local Value2=$(echo "$5" | sed "s|.*=||")
fi
if [ "$6" ]; then
[ "$(echo "$6" | grep '=')" ] && local Name3=$(echo "$6" | sed "s|=.*||") || local Name3="value"
local Value3=$(echo "$6" | sed "s|.*=||")
fi
if [ "$7" ]; then
[ "$(echo "$7" | grep '=')" ] && local Name4=$(echo "$7" | sed "s|=.*||") || local Name4="value"
local Value4=$(echo "$7" | sed "s|.*=||")
fi;;
esac
case $1 in
"-d") $XMLSTARLET ed -L -d "$3" "$2";;
"-u") $XMLSTARLET ed -L -u "$3/@$Name1" -v "$Value1" "$2";;
"-s")
if [ "$($XMLSTARLET sel -t -m "$3" -c . "$2")" ]; then
$XMLSTARLET ed -L -u "$3/@$Name1" -v "$Value1" "$2"
else
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" \
-i "$SNP-$MODID" -t attr -n "$Name0" -v "$Value0" \
-i "$SNP-$MODID" -t attr -n "$Name1" -v "$Value1" \
-r "$SNP-$MODID" -v "$SN" "$2"
fi;;
"-i")
if [ "$($XMLSTARLET sel -t -m "$3[@$Name1=\"$Value1\"]" -c . "$2")" ]; then
$XMLSTARLET ed -L -d "$3[@$Name1=\"$Value1\"]" "$2"
fi
if [ -z "$Value3" ]; then
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" \
-i "$SNP-$MODID" -t attr -n "$Name0" -v "$Value0" \
-i "$SNP-$MODID" -t attr -n "$Name1" -v "$Value1" \
-i "$SNP-$MODID" -t attr -n "$Name2" -v "$Value2" \
-r "$SNP-$MODID" -v "$SN" "$2"
elif [ "$Value4" ]; then
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" \
-i "$SNP-$MODID" -t attr -n "$Name0" -v "$Value0" \
-i "$SNP-$MODID" -t attr -n "$Name1" -v "$Value1" \
-i "$SNP-$MODID" -t attr -n "$Name2" -v "$Value2" \
-i "$SNP-$MODID" -t attr -n "$Name3" -v "$Value3" \
-i "$SNP-$MODID" -t attr -n "$Name4" -v "$Value4" \
-r "$SNP-$MODID" -v "$SN" "$2"
elif [ "$Value3" ]; then
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" \
-i "$SNP-$MODID" -t attr -n "$Name0" -v "$Value0" \
-i "$SNP-$MODID" -t attr -n "$Name1" -v "$Value1" \
-i "$SNP-$MODID" -t attr -n "$Name2" -v "$Value2" \
-i "$SNP-$MODID" -t attr -n "$Name3" -v "$Value3" \
-r "$SNP-$MODID" -v "$SN" "$2"
fi;;
esac;;
esac
}

MMUPD_LIST () {
if [ -z "$MODIDVAR" ]; then UIP -s "Choose Variant:" "$MSGVU Update" "$MSGVD ReInstall"; KEYCHOOSE && MMUPD=true || MMUPD=false; fi

#UI: Pills/NavigationBar/Gestures
CHECKER -upd "$IDP $IDAP" "$VIPP" "$VCIPP" "IPPS"
CHECKER -upd "$IDPC $IDAPC" "$VIPPC" "$VCIPPC" "IPPCS"
CHECKER -upd "$IDPHS $IDAPHS" "$VIPPH" "$VCIPPH" "IPPHS"
CHECKER -upd "$IDNBVS $IDANBVS" "$VIPNBVS" "$VCIPNBVS" "IPNBVSS"
CHECKER -upd "$IDBGDS" "$VIPBGD" "$VCIPBGD" "IPBGDS"
CHECKER -upd "$IDFNS $IDAFNS" "$VIPFNS" "$VCIPFNS" "IPFNSS"
#UI: StatusBar/QuickSettings
CHECKER -upd "$IDSINNI $IDASINNI" "$VIPSINNI" "$VCIPSINNI" "IPSINNIS"
CHECKER -upd "$IDSBNISI $IDASBNISI" "$VIPSBNISI" "$VCIPSBNISI" "IPSBNISS"
CHECKER -upd "$IDSBCS" "$VIPSBCS" "$VCIPSBCS" "IPSBCSS"
CHECKER -upd "$IDSBP $IDASBP" "$VIPSBP" "$VCIPSBP" "IPSBPS"
CHECKER -upd "$IDSBPD" "$VIPSBPD" "$VCIPSBPD" "IPSBPDS"
CHECKER -upd "$IDSBNIDS" "$VIPSBNIDS" "$VCIPSBNIDS" "IPSBNIDSS"
CHECKER -upd "$IDSBISP" "$VIPSBISP" "$VCIPSBISP" "IPSBISPS"
CHECKER -upd "$IDWFAMDQSOS $IDAWFAMDQSOS" "$VIPWFAMDQSOS" "$VCIPWFAMDQSOS" "IPWFAMDQSOSS"
CHECKER -upd "$IDFDNI" "$VIPFDNI" "$VCIPFDNI" "IPFDNIS"
CHECKER -upd "$IDNSP" "$VIPNSP" "$VCIPNSP" "IPNSPS"
CHECKER -upd "$IDQSCIAR $IDAQSCIAR" "$VIPQSCIAR" "$VCIPQSCIAR" "IPQSCIARS"
CHECKER -upd "$IDQSSN $IDAQSSN" "$VIPQSSN" "$VCIPQSSN" "IPQSSNS"
CHECKER -upd "$IDQSCP" "$VIPQSCP" "$VCIPQSCP" "IPQSCPS"
#UI: LockScreen/AlwaysOnDisplay
CHECKER -upd "$IDQRCSOLS $IDAQRCSOLS" "$VIPQRCSOLS" "$VCIPQRCSOLS" "IPQRCSOLSS"
CHECKER -upd "$IDLSUS $IDALSUS" "$VIPLSUS" "$VCIPLSUS" "IPLSUSS"
CHECKER -upd "$IDAODS" "$VIPAODS" "$VCIPAODS" "IPAODSS"
CHECKER -upd "$IDAODSD" "$VIPAODSD" "$VCIPAODSD" "IPAODSDS"
CHECKER -upd "$IDAODSD" "$VIPAODSD" "$VCIPAODSD" "IPAODSDS"
CHECKER -upd "$IDAODALSAF" "$VIPAODALSAF" "$VCIPAODALSAF" "IPAODALSAFS"
#UI: Gboard/GboardThemes
CHECKER -upd "$IDGBNBS $IDAGBNBS" "$VIPGBNBS" "$VCIPGBNBS" "IPGBNBSS"
CHECKER -upd "$IDGBRC" "$VIPGBRC" "$VCIPGBRC" "IPGBRCS"
CHECKER -upd "$IDGBT $IDAGBT" "$VIPGBT" "$VCIPGBT" "IPGBTS"
CHECKER -upd "$IDGBSTS $IDAGBSTS" "$VIPGBSTS" "$VCIPGBSTS" "IPGBSTSS"
#UI: BootAnimation/MediaUISounds/Emoji
CHECKER -upd "$IDBA" "$VIPBA" "$VCIPBA" "IPBAS"
CHECKER -upd "$IDMUIS $IDAMUIS" "$VIPMUIS" "$VCIPMUIS" "IPMUISS"
CHECKER -upd "$IDIOSEMOJI $IDAIOSEMOJI" "$VIPIOSEMOJI" "$VCIPIOSEMOJI" "IPIOSEMOJIS"
#UI: RoundedUI/BIP/BackgroundBlur/Other
CHECKER -upd "$IDRUI $IDARUI" "$VIPRUI" "$VCIPRUI" "IPRUIS"
CHECKER -upd "$IDBIP" "$VIPBIP" "$VCIPBIP" "IPBIPS"
CHECKER -upd "$IDBB" "$VIPBB" "$VCIPBB" "IPBBS"
CHECKER -upd "$IDSUIRSRS" "$VIPSUIRSRS" "$VCIPSUIRSRS" "IPSUIRSRSS"
CHECKER -upd "$IDGPPM" "$VIPGPPM" "$VCIPGPPM" "IPGPPMS"
CHECKER -upd "$IDFDM" "$VIPFDM" "$VCIPFDM" "IPFDMS"
CHECKER -upd "$IDAS" "$VIPAS" "$VCIPAS" "IPASS"
CHECKER -upd "$IDFDPIS" "$VIPFDPIS" "$VCIPFDPIS" "IPFDPISS"
#Audio: VFX(P)/DOLBY/AIST/SAQ/SIB/AML/ALCF/VS/DSM
CHECKER -upd "$IDVFX" "$VIPVFX" "$VCIPVFX" "IPVFXS"
CHECKER -upd "$IDVFXDAK $IDAVFXDAK" "$VIPVFXDAK" "$VCIPVFXDAK" "IPVFXDAKS"
CHECKER -upd "$IDDA" "$VIPDA" "$VCIPDA" "IPDAS"
CHECKER -upd "$IDAIST" "$VIPAIST" "$VCIPAIST" "IPAISTS"
CHECKER -upd "$IDSAQ $IDASAQ" "$VIPSAQ" "$VCIPSAQ" "IPSAQS"
CHECKER -upd "$IDSIBS $IDASIBS" "$VIPSIBS" "$VCIPSIBS" "IPSIBS"
CHECKER -upd "$IDAML" "$VIPAML" "$VCIPAML" "IPAMLS"
CHECKER -upd "$IDALCF" "$VIPALCF" "$VCIPALCF" "IPALCFS"
CHECKER -upd "$IDVS" "$VIPVS" "$VCIPVS" "IPVSS"
CHECKER -upd "$IDDSM" "$VIPDSM" "$VCIPDSM" "IPDSM"
#AdBlock: Hosts Files
CHECKER -upd "$IDDAB" "$VIPDAB" "$VCIPDAB" "IPESHFS"
CHECKER -upd "$IDVAAH" "$VIPVAAH" "$VCIPVAAH" "IPAAHFS"
CHECKER -upd "$IDVSH" "$VIPVSH" "$VCIPVSH" "IPSHFS"
CHECKER -upd "$IDEH" "$VIPEH" "$VCIPEH" "IPEHFS"
CHECKER -upd "$IDSHH" "$VIPSHH" "$VCIPSHH" "IPSHHFS"
CHECKER -upd "$IDSH" "$VIPSH" "$VCIPSH" "IPSTEVENHFS"
#Net: GPS/WIFI/TTL/DNS/APAUSBTF
CHECKER -upd "$IDGPSP $IDAGPSP" "$VIPGPSP" "$VCIPGPSP" "IPGPSPS"
CHECKER -upd "$IDWIFIP $IDAWIFIP" "$VIPWIFIP" "$VCIPWIFIP" "IPWIFIPS"
CHECKER -upd "$IDTTLF $IDATTLF" "$VIPTTLF" "$VCIPTTLF" "IPTTLFS"
CHECKER -upd "$IDNT" "$VIPNT" "$VCIPNT" "IPNTS"
CHECKER -upd "$IDAPAUSBTF $IDAAPAUSBTF" "$VIPAPAUSBTF" "$VCIPAPAUSBTF" "IPAPAUSBTFS"
#Utilities: BB/SELS/CC/MMFR/JITC/Detach/PIF/LSP/WOL
CHECKER -upd "$IDBBB $IDABBB" "$VIPBBB" "$VCIPBBB" "IPBBBS"
CHECKER -upd "$IDSELS $IDASELS" "$VIPSELS" "$VCIPSELS" "IPSELSS"
CHECKER -upd "$IDCC" "$VIPCC" "$VCIPCC" "IPCCS"
CHECKER -upd "$IDMMFR $IDAMMFR" "$VIPMMFR" "$VCIPMMFR" "IPMMFRS"
CHECKER -upd "$IDJITC $IDAJITC" "$VIPJITC" "$VCIPJITC" "IPJITCS"
CHECKER -upd "$IDDETACH" "$VIPDETACH" "$VCIPDETACH" "IPDETACHS"
CHECKER -upd "$IDPIF" "$VIPPIF" "$VCIPPIF" "IPPIFS"
CHECKER -upd "$IDLSP" "$VIPLSP" "$VCIPLSP" "IPLSPS"
CHECKER -upd "$IDWOL" "$VIPWOL" "$VCIPWOL" "IPWOLS"
#Other: FA/LED/PSS/UAA/SBU/SHS
CHECKER -upd "$IDFPA" "$VIPFPA" "$VCIPFPA" "IPFPAS"
CHECKER -upd "$IDLEDLO $IDALEDLO" "$VIPLEDLO" "$VCIPLEDLO" "IPLEDLOS"
CHECKER -upd "$IDLEDLA" "$VIPLEDLA" "$VCIPLEDLA" "IPLEDLAS"
CHECKER -upd "$IDPSS $IDAPSS" "$VIPPSS" "$VCIPPSS" "IPPSSS"
#Tweaks: FGS/EHAP/FFE/E4KIYT/KL/4XMSAA/HWO/UGMSD/USGP
CHECKER -upd "$IDFGS" "$VIPFGS" "$VCIPFGS" "IPFGSS"
CHECKER -upd "$IDEHAP" "$VIPEHAP" "$VCIPEHAP" "IPEHAPS"
CHECKER -upd "$IDFUSS $IDAFUSS" "$VIPFUSS" "$VCIPFUSS" "IPFUSSS"
CHECKER -upd "$IDMUS $IDAMUS" "$VIPMUS" "$VCIPMUS" "IPMUSS"
CHECKER -upd "$IDFFE" "$VIPFFE" "$VCIPFFE" "IPFFES"
CHECKER -upd "$IDE4KIYT" "$VIPE4KIYT" "$VCIPE4KIYT" "IPE4KIYTS"
CHECKER -upd "$IDFUSEPD" "$VIPFUSEPD" "$VCIPFUSEPD" "IPFUSEPD"
CHECKER -upd "$IDKL $IDAKL" "$VIPKL" "$VCIPKL" "IPKLS"
CHECKER -upd "$IDF4XMSAAS $IDAF4XMSAAS" "$VIPF4XMSAAS" "$VCIPF4XMSAAS" "IPF4XMSAASS"
CHECKER -upd "$IDFHWOS $IDAFHWOS" "$VIPFHWOS" "$VCIPFHWOS" "IPFHWOSS"
CHECKER -upd "$IDFDEVADB" "$VIPFDEVADB" "$VCIPFDEVADB" "IPFDEVADBS"
CHECKER -upd "$IDUSBSUC $IDAUSBSUC" "$VIPUSBSUC" "$VCIPUSBSUC" "IPUSBSUCS"
CHECKER -upd "$IDFULIRS $IDAFULIRS" "$VIPFULIRS" "$VCIPFULIRS" "IPFULIRSS"
CHECKER -upd "$IDFDPP" "$VIPFDPP" "$VCIPFDPP" "IPFDPPS"
CHECKER -upd "$IDUGMSD $IDAUGMSD" "$VIPUGMSD" "$VCIPUGMSD" "IPUGMSDS"
CHECKER -upd "$IDUSGP" "$VIPUSGP" "$VCIPUSGP" "IPUSGPS"
CHECKER -upd "$IDGPUR" "$VIPGPUR" "$VCIPGPUR" "IPGPURS"
CHECKER -upd "$IDSBT" "$VIPSBT" "$VCIPSBT" "IPSBTS"
CHECKER -upd "$IDFDS $IDAFDS" "$VIPFDS" "$VCIPFDS" "IPFDSS"
UIP "Other Updates Not Found"
}

QCDFP () {
if grep -m1 "^$1" $PSF >$NULL; then
local g=$(grep -m1 "^$1" $PSF)
sed -i "s~$g~$1=$2~g" $PSF
elif grep -m1 "^#$1" $PSF >$NULL; then
local g=$(grep -m1 "^#$1" $PSF)
sed -i "s~$g~$1=$2~g" $PSF
elif grep -m1 "^# $1" $PSF >$NULL; then
local g=$(grep -m1 "^# $1" $PSF)
sed -i "s~$g~$1=$2~g" $PSF
else
echo -e "\n$3\n$1=$2" >> $PSF
fi
}

PTMFI () {
case "$1" in
-nm) MODID="$2"; local IP="$3"; REMOVER -mm "$MODID"; for MP in $IP; do mkdir -p "$IPMM/$MODID$MP"; done;;
*) MODID="$1"; local DMM="$2" IP="$3"; REMOVER -mm "$MODID $DMM"; mkdir -p "$IPMM/$MODID"; for MP in $IP; do mkdir -p "$IPMM/$MODID$MP"; done;;
esac
touch $IPMM/$MODID/update
}

SXML () {
echo -e "$MSGCXML\n<resources>" > $4
case $1 in
-d) for S in $2; do
case $S in
screenrecord_status_icon_height | screenrecord_status_icon_width) echo "	<dimen name=\"$S\">16dip</dimen>" >> $4;;
*) echo "	<dimen name=\"$S\">$3</dimen>" >> $4;;
esac
done;;
-i) for S in $2; do echo "	<integer name=\"$S\">$3</integer>" >> $4; done;;
-b) for S in $2; do echo "	<bool name=\"$S\">$3</bool>" >> $4; done;;
-s) for S in $2; do echo "	<string name=\"$S\">$3</string>" >> $4; done;;
esac
echo "</resources>" >> $4
}

} #

{ #KeyChoose

KEYCHOOSE () {
while true; do
eval $(getevent -lqc 1 | awk '{print "K=" $3; print "V=" $4}')
case "$K:$V" in
"KEY_VOLUMEUP:DOWN") return 0;;
"KEY_VOLUMEDOWN:DOWN") return 1;;
"KEY_F3:DOWN") if [ -f $STORAGE/framework-res.apk ]; then UCSA -ent "Overlay Compile" "OVERLAY_PRESETS"; PRESETS; END; fi;;
"ABS_MT_SLOT:00000000") $GESTURES && END;;
esac
done
}

} #

{ #All Otval

{ #UI: Pills/NavigationBar/Gestures

IPP () {
if FINDER -aiop "$IPPSO/Pills.apk"; then
UCSA -rm "Pills" "$IPPSO/Pills.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 29 ]; then UCSA -ent "$MSGIP Pills $VIPP?" "IPPS" "$IDP"; fi
fi
}

IPPS () {
PILLSHIDE=false IMMERSIVE=false FIMMERSIVE=false
UIP -s "Choose Variant Pills:" "$MSGVU Full Hide/Immersive" "$MSGVD More Other Variants"
if KEYCHOOSE; then
PILLSHIDE=true PFSGVFPX=true POFSGC=true FIMMERSIVE=true PILLSWIDTHSIZE="0dip" PILLSFATSIZE="0dip"
else
UIP -s "Transparent Variant:" "$MSGVU Transparent" "$MSGVD Not Transparent"
KEYCHOOSE && IMMERSIVE=true
UIP -s "Choose Width Size:" "$MSGVU 4dip/8dip (Dot)" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
POFSGCDOT=true PHOC=true PILLSFATSIZE="4dip" PILLSWIDTHSIZE="8dip"
else
POFSGCDOT=false
UIP -s "$MSGVU 0dip/0dip (Hide)" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
POFSGC=true PHOC=true PILLSFATSIZE="0dip" PILLSWIDTHSIZE="0dip"
else
PHOC=false
for PILLSWIDTHSIZE in "60dip" "120dip" "180dip" "240dip" "300dip"; do
UIP -s "$MSGVU $PILLSWIDTHSIZE"
MSGPOFSGA="$MSGNIS"
case $PILLSWIDTHSIZE in
"300dip") MSGPOFSGA="$MSGNUS";;
esac
UIP "$MSGVD No $MSGPOFSGA"
if KEYCHOOSE; then
POFSGC=true
break
else
POFSGC=false
fi
done
fi
fi
if $POFSGC && [ $POFSGCDOT != true ] || [ $PHOC != true ]; then
if $POFSGC && [ $PHOC != true ]; then
MSGPOFSG=true
for PILLSFATSIZE in "1dip" "2dip" "3dip" "4dip"; do
if $MSGPOFSG; then
UIP -s "Choose Fat Size:"
MSGPOFSG=false
else
UIP -cs
fi
UIP "$MSGVU $PILLSFATSIZE"
MSGPOFSGA="$MSGNIS"
case $PILLSFATSIZE in
"4.0dp") MSGPOFSGA="$MSGNUS";;
esac
UIP "$MSGVD No $MSGPOFSGA"
if KEYCHOOSE; then
PFSGVFPX=true
break
else
PFSGVFPX=false
fi
done
fi
fi
fi
if $POFSGC && $PFSGVFPX; then
UZTI "Pills" "Pills"
if $MAGISK; then
PTMFI "$IDP" "$IDAP" "$MIPPSO"
if $IMMERSIVE; then
cp -f $LOCALTMPDIR/$MODID/PillsImmersive-48.0dip.apk $IPMM/$MODID$MIPPSO
fi
if $FIMMERSIVE; then
cp -f $LOCALTMPDIR/$MODID/PillsImmersive-0.0dip.apk $IPMM/$MODID$MIPPSO
fi
cp -f $LOCALTMPDIR/$MODID/Pills-$PILLSFATSIZE-$PILLSWIDTHSIZE.apk $IPMM/$MODID$MIPPSO
if $PILLSHIDE; then
MMPR -v "Pills" "$VIPP" "$VCIPP" "Pills Full Hide/Immersive"
else
MMPR -v "Pills" "$VIPP" "$VCIPP" "Pills Size $PILLSFATSIZE/$PILLSWIDTHSIZE"
fi
else
if $IMMERSIVE; then
cp -f $LOCALTMPDIR/Pills/PillsImmersive-48.0dip.apk $IPPSO
fi
if $FIMMERSIVE; then
cp -f $LOCALTMPDIR/Pills/PillsImmersive-0.0dip.apk $IPPSO
fi
cp -f $LOCALTMPDIR/Pills/Pills-$PILLSFATSIZE-$PILLSWIDTHSIZE.apk $IPPSO/Pills.apk
fi
SETPERM -mm -msg
fi
}

IPPC () {
if FINDER -aiop "$IPPSO/PillsColors*.apk"; then
UCSA -rm "Pills Colors" "$IPPSO/PillsColors*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 29 ]; then UCSA -ent "$MSGIP Pills Colors $VIPPC?" "IPPCS" "$IDPC"; fi
fi
}

IPPCS () {
UIP -s "Choose Variant:" "$MSGVU Choose One Color" "$MSGVD Choose Two Color Separately"
if KEYCHOOSE; then COLORVARIANT=" "; IPPCAS; PILLSLIGHTCOLORS=$PILLSCOLORS; PILLSDARKCOLORS=$PILLSCOLORS; else COLORVARIANT=" Light: "; IPPCOAS; if $PCOFSGC; then PILLSLIGHTCOLORS=$PILLSCOLORS; COLORVARIANT=" Dark: "; IPPCOAS; PILLSDARKCOLORS=$PILLSCOLORS; fi; fi
if $PCOFSGC; then
UZTI "PillsColors" "Pills Colors"
if $MAGISK; then
PTMFI "$IDPC" "$IDAPC" "$MIPPSO"
cp -f $LOCALTMPDIR/$MODID/PillsColors-$PILLSLIGHTCOLORS-$PILLSDARKCOLORS.apk $IPMM/$MODID$MIPPSO
MMPR -v "Pills Colors" "$VIPPC" "$VCIPPC" "Pills Colors - Set On: Light - $PILLSLIGHTCOLORS & Dark - $PILLSDARKCOLORS"
else
cp -f $LOCALTMPDIR/PillsColors/PillsColors-$PILLSLIGHTCOLORS-$PILLSDARKCOLORS.apk $IPPSO
fi
SETPERM -mm -msg
fi
}

IPPCAS () {
for PILLSCOLORS in "Accent" "ff1a73e8" "ff5e97f6" "ffb31818" "ffff4151" "ff1ed760" "ff47ae84" "ffffa842" "ffff8055" "ffa86bd5"; do
case $PILLSCOLORS in
"Accent") NAMEPILLSCOLORS="System Accent";;
"ff1a73e8") NAMEPILLSCOLORS="Blue";;
"ff5e97f6") NAMEPILLSCOLORS="Light Blue";;
"ffb31818") NAMEPILLSCOLORS="Red";;
"ffff4151") NAMEPILLSCOLORS="Light Red";;
"ff1ed760") NAMEPILLSCOLORS="Green";;
"ff47ae84") NAMEPILLSCOLORS="Light Green";;
"ffffa842") NAMEPILLSCOLORS="Yellow";;
"ffff8055") NAMEPILLSCOLORS="Orange";;
"ffa86bd5") NAMEPILLSCOLORS="Violet";;
esac
UIP -s "$MSGVU$COLORVARIANT$NAMEPILLSCOLORS ($PILLSCOLORS)"
MSGPCFSGA="$MSGNIS"
case $PILLSCOLORS in
"ffa86bd5") MSGPCFSGA="$MSGNUS";;
esac
UIP "$MSGVD No $MSGPCFSGA"
if KEYCHOOSE; then
PCFSGC=true
break
else
PCFSGC=false
fi
done
}

IPPH () {
if FINDER -aiop "$IPPSO/PillsHeight*.apk"; then
UCSA -rm "Pills Height" "$IPPSO/PillsHeight*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 29 ]; then UCSA -ent "$MSGIP Pills Height $VIPPH?" "IPPHS" "$IDPHS"; fi
fi
}

IPPHS () {
UCSA -a "0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip" "Choose Pills Height" "Height:" "10dip"
if $UCSFNM; then
UZTI "PillsHeight" "Pills Height"
if $MAGISK; then
PTMFI "$IDPHS" "$IDAPHS" "$MIPPSO"
cp -f $LOCALTMPDIR/$MODID/PillsHeight-$UCSFNMC.apk $IPMM/$MODID$MIPPSO
MMPR -v "Pills Height" "$VIPPH" "$VCIPPH" "Pills Height - Set On: $UCSFNMC"
else
cp -f $LOCALTMPDIR/PillsHeight/PillsHeight-$UCSFNMC.apk $IPPSO
fi
SETPERM -mm -msg
fi
}

IPNBVS () {
if [ $ONEUI != true ]; then
UCSA "$MSGIP Nav Bar Visibility Switcher $VIPNBVS?" "IPNBVSS" "$IDNBVS"
fi
}

IPNBVSS () {
UIP -s "Choose Variant:" "$MSGVU Show" "$MSGVD Hide"
if KEYCHOOSE; then NBVSV="0" MSGNBVS="Show"; else NBVSV="1" MSGNBVS="Hide"; fi
UIP "$MSGIAM Nav Bar Visibility Switcher"
if $MAGISK; then
PTMFI "$IDNBVS" "$IDANBVS"
echo "qemu.hw.mainkeys=$NBVSV" > $IPMM/$MODID/system.prop
MMPR -v "Nav Bar Visibility Switcher" "$VIPNBVS" "$VCIPNBVS" "Nav Bar Visibility Switcher - Set On: $MSGNBVS"
else
BUCKUPER -bf "$IPSBP"
sed -i "/qemu.hw.mainkeys/d" $IPSBP
echo -e "\n# Nav Bar Visibility Switcher\nqemu.hw.mainkeys=$NBVSV" >> $IPSBP
fi
SETPERM -mm -msg
}

IPBGD () {
if $MAGISK && [ $ALLUI != true ] && [ "$ASDK" -ge 30 ]; then
UCSA "$MSGIP Back Gesture Disabler $VIPBGD?" "IPBGDS" "$IDBGDS"
fi
}

IPBGDS () {
UIP -s "Disable Left Gesture?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
KEYCHOOSE && BGISL="0" || BGISL="1"
UIP -s "Disable Right Gesture?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
KEYCHOOSE && BGISR="0" || BGISR="1"
UIP "$MSGIAM Back Gesture Disabler"
PTMFI "$IDBGDS"
MSSERVICE "$SPSECURE back_gesture_inset_scale_left 1; $SPSECURE back_gesture_inset_scale_right 1" "$SPSECURE back_gesture_inset_scale_left $BGISL; $SPSECURE back_gesture_inset_scale_right $BGISR" "BGDS"
MMPR -v "Back Gesture Disabler" "$VIPBGD" "$VCIPBGD" "Back Gesture Disabler"; SETPERM -mm -msg
}

IPFNS () {
if $MAGISK && [ $ALLUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "$MSGIP Force Navigation Switcher $VIPFNS?" "IPFNSS" "$IDFNS"
fi
}

IPFNSS () {
UIP -s "Choose Variant:" "$MSGVU Gestural" "$MSGVD Three Button"
KEYCHOOSE && FNSV="gestural" || FNSV="threebutton"
UIP "$MSGIAM Force Navigation Switcher"
PTMFI "$IDFNS" "$IDAFNS"
MSSERVICE -s "cmd overlay enable com.android.internal.systemui.navbar.$FNSV"
MMPR -v "Force Navigation Switcher" "$VIPFNS" "$VCIPFNS" "Force Navigation Switcher - If The Navigation Selection Item Disappeared After Install Other Launchers Or Forced Hiding NavBar"; SETPERM -mm -msg
}

} #

{ #UI: StatusBar/QuickSettings

IPSINNI () {
if FINDER -aiop "$IPPSO/SystemIncreaseNumberNotificationIcons*.apk"; then
UCSA -rm "System Increase Number Icons" "$IPPSO/SystemIncreaseNumberNotificationIcons*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 29 ]; then UCSA -ent "$MSGIP System Increase Number Icons $VIPSINNI?" "IPSINNIS" "$IDSINNI"; fi
fi
}

IPSINNIS () {
UCSA -a "$(seq 1 1 10)" "Choose Variant" "Number Of Icons:" "10"; SINNIV=$UCSFNMC
if $UCSFNM; then
UZTI "SINNI" "System Increase Number Icons"
if $MAGISK; then
PTMFI "$IDSINNI" "$IDASINNI" "$MIPPSO"
cp -f $LOCALTMPDIR/SINNI/SystemIncreaseNumberNotificationIcons-$SINNIV.apk $IPMM/$MODID$MIPPSO
MMPR -v "System Increase Number Notification Icons" "$VIPSINNI" "$VCIPSINNI" "System Increase Number Notification Icons For Status Bar, Lock Screen & AOD - Set On: $SINNIV"
else
cp -f $LOCALTMPDIR/SINNI/SystemIncreaseNumberNotificationIcons-$SINNIV.apk $IPPSO
fi
SETPERM -mm -msg
fi
}

IPSBNISI () {
if FINDER -aiop "$IPPSO/*StatusBarNotificationIconSize*.apk"; then
UCSA -rm "Status Bar Notification Icon Size" "$IPPSO/*StatusBarNotificationIconSize*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 29 ]; then UCSA -ent "$MSGIP Status Bar Notification Icon Size $VIPSBNISI?" "IPSBNISS" "$IDSBNISI"; fi
fi
}

IPSBNISS () {
UCSA -a "12dip 13dip 14dip 15dip 16dip 17dip 18dip" "Choose Icon Size" "Icon Size:" "18dip"; ASBISI=$UCSFNMC
if $UCSFNM; then
UZTI "SBNIS" "Status Bar Notification Icon Size"
if $MAGISK; then
PTMFI "$IDSBNISI" "$IDASBNISI" "$MIPPSO"
cp -f $LOCALTMPDIR/SBNIS/StatusBarNotificationIconSize-$ASBISI.apk $IPMM/$MODID$MIPPSO
MMPR -v "Status Bar Notification Icon Size" "$VIPSBNISI" "$VCIPSBNISI" "Status Bar Notification Icon Size - Set On: $ASBISI"
else
cp -f $LOCALTMPDIR/SBNIS/StatusBarNotificationIconSize-$ASBISI.apk $IPPSO
fi
SETPERM -mm -msg
fi
}

IPSBCS () {
if FINDER -aiop "$IPPSO/StatusBarClockSize*.apk"; then
UCSA -rm "Status Bar Clock Size" "$IPPSO/StatusBarClockSize*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 29 ]; then UCSA -ent "$MSGIP Status Bar Clock Size $VIPSBCS?" "IPSBCSS" "$IDSBCS"; fi
fi
}

IPSBCSS () {
UCSA -a "10sp 11sp 12sp 13sp 14sp 15sp 16sp 17sp 18sp 19sp 20sp" "Choose Clock Size" "Clock Size:" "20sp"
if $UCSFNM; then
UZTI "SBCS" "Status Bar Clock Size"
if $MAGISK; then
PTMFI -nm "$IDSBCS" "$MIPPSO"
cp -f $LOCALTMPDIR/SBCS/StatusBarClockSize-$UCSFNMC.apk $IPMM/$MODID$MIPPSO
MMPR -v "Status Bar Clock Size" "$VIPSBCS" "$VCIPSBCS" "Status Bar Clock Size - Set On: $UCSFNMC"
else
cp -f $LOCALTMPDIR/SBCS/StatusBarClockSize-$UCSFNMC.apk $IPPSO
fi
SETPERM -mm -msg
fi
}

IPSBP () {
if FINDER -aiop "$IPPSO/StatusBarPadding*.apk"; then
UCSA -rm "Status Bar Padding" "$IPPSO/StatusBarPadding*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 29 ]; then UCSA -ent "$MSGIP Status Bar Padding $VIPSBP?" "IPSBPS" "$IDSBP"; fi
fi
}

IPSBPS () {
UIP -s "Choose Variant:" "$MSGVU Choose One Start/End" "$MSGVD Choose Start/End Separately"
if KEYCHOOSE; then UCSA -a "0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip" "Choose Padding Start/End" "Padding:" "10dip"
SCSBPCO=$UCSFNMC SCSBPCT=$UCSFNMC
else
UCSA -a "0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip" "Choose Padding Start" "Padding:" "10dip"
SCSBPCO=$UCSFNMC
if $UCSFNM; then
UCSA -a "0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip" "Choose Padding End" "Padding:" "10dip"
SCSBPCT=$UCSFNMC
fi
fi
if $UCSFNM; then
UZTI "SBP" "Status Bar Padding"
if $MAGISK; then
PTMFI "$IDSBP" "$IDASBP" "$MIPPSO"
MMPR -v "Status Bar Padding" "$VIPSBP" "$VCIPSBP" "Status Bar Padding From The Edges Of The Screen - Set On: Start - $SCSBPCO & End - $SCSBPCT"
cp -f $LOCALTMPDIR/SBP/StatusBarPadding-$SCSBPCO-$SCSBPCT.apk $IPMM/$MODID$MIPPSO
else
cp -f $LOCALTMPDIR/SBP/StatusBarPadding-$SCSBPCO-$SCSBPCT.apk $IPPSO
fi
SETPERM -mm -msg
fi
}

IPSBPD () {
if FINDER -aiop "$IPPSO/StatusBarPrivacyDot*.apk"; then
UCSA -rm "Status Bar Privacy Dot" "$IPPSO/StatusBarPrivacyDot*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 31 ]; then UCSA -ent "$MSGIP Status Bar Privacy Dot $VIPSBPD?" "IPSBPDS" "$IDSBPD"; fi
fi
}

IPSBPDS () {
UIP -s "Choose Variant:" "$MSGVU Disable" "$MSGVD Optimized"
KEYCHOOSE && SBPDV="Disable" || SBPDV="Optimized"
UZTI "SBPD" "Status Bar Privacy Dot"
if $MAGISK; then
PTMFI -nm "$IDSBPD" "$MIPPSO"
cp -f $LOCALTMPDIR/SBPD/StatusBarPrivacyDot-$SBPDV.apk $IPMM/$MODID$MIPPSO
MMPR -v "Status Bar Privacy Dot" "$VIPSBPD" "$VCIPSBPD" "Status Bar Privacy Dot - Set On: $SBPDV"
else
cp -f $LOCALTMPDIR/SBPD/StatusBarPrivacyDot-$SBPDV.apk $IPPSO
fi
SETPERM -mm -msg
}

IPSBNIDS () {
if FINDER -aiop "$IPPSO/StatusBarNotificationIconDotSize*.apk"; then
UCSA -rm "Status Bar Notification Icon Dot Size" "$IPPSO/StatusBarNotificationIconDotSize*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 31 ]; then UCSA -ent "$MSGIP Status Bar Notification Icon Dot Size $VIPSBNIDS?" "IPSBNIDSS" "$IDSBNIDS"; fi
fi
}

IPSBNIDSS () {
UCSA -a "0dip 1dip 2dip 3dip 4dip 5dip 6dip" "Choose Notification Dot Size" "Dot Size:" "6dip"; SBNID=$UCSFNMC
if $UCSFNM; then
UZTI "SBNIDS" "Status Bar Notification Icon Dot Size"
if $MAGISK; then
PTMFI -nm "$IDSBNIDS" "$MIPPSO"
cp -f $LOCALTMPDIR/SBNIDS/StatusBarNotificationIconDotSize-$SBNID.apk $IPMM/$MODID$MIPPSO
MMPR -v "Status Bar Notification Icon Dot Size" "$VIPSBNIDS" "$VCIPSBNIDS" "Status Bar Notification Icon Dot Size - Set On: $SBNID"
else
cp -f $LOCALTMPDIR/SBNIDS/StatusBarNotificationIconDotSize-$SBNID.apk $IPPSO
fi
SETPERM -mm -msg
fi
}

IPSBISP () {
if FINDER -aiop "$IPPSO/*StatusBarIconSpace*.apk"; then
UCSA -rm "Status Bar Icon Space" "$IPPSO/*StatusBarIconSpace*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 29 ]; then UCSA -ent "$MSGIP Status Bar Icon Space $VIPSBISP?" "IPSBISPS" "$IDSBISP"; fi
fi
}

IPSBISPS () {
if [ $ASDK -eq 34 ]; then
UCSFNM=true ASBIS="N/A"
else
UCSA -a "14dip 15dip 16dip 17dip 18dip 19dip 20dip" "Choose Space" "Left Icon:" "20dip"; ASBIS=$UCSFNMC
fi
if $UCSFNM; then UCSA -a "-4dip -3dip -2dip -1dip 0dip 1dip 2dip 3dip 4dip" "Choose Space" "Right Icon:" "4dip"; SUISBIS=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "0dip 1dip 2dip 3dip 4dip" "Choose Space" "Battery Icon:" "4dip"; BSUISBIS=$UCSFNMC; fi
if $UCSFNM; then
UZTI "SBIS" "Status Bar Icon Space"
if $MAGISK; then
PTMFI -nm "$IDSBISP" "$MIPPSO"
if [ "$ASDK" -ge 29 ] && [ $ASDK -le 33 ]; then cp -f $LOCALTMPDIR/SBIS/AndroidStatusBarIconSpace-$ASBIS.apk $IPMM/$MODID$MIPPSO; fi
cp -f $LOCALTMPDIR/SBIS/SUIStatusBarIconSpace-$SUISBIS-$BSUISBIS.apk $IPMM/$MODID$MIPPSO
MMPR -v "Status Bar Icon Space" "$VIPSBISP" "$VCIPSBISP" "Status Bar Icon Space - Set On: $ASBIS/$SUISBIS/$BSUISBIS"
else
if [ "$ASDK" -ge 29 ] && [ $ASDK -le 33 ]; then cp -f $LOCALTMPDIR/SBIS/AndroidStatusBarIconSpace-$ASBIS.apk $IPPSO; fi
cp -f $LOCALTMPDIR/SBIS/SUIStatusBarIconSpace-$SUISBIS-$BSUISBIS.apk $IPPSO
fi
SETPERM -mm -msg
fi
}

IPWFAMDQSOS () {
if $MAGISK && [ $ALLUI != true ] && [ "$ASDK" -ge 31 ]; then UCSA "$MSGIPL Wi-Fi And Mobile Data QS Old Style $VIPWFAMDQSOS?" "IPWFAMDQSOSS" "$IDWFAMDQSOS"; fi
}

IPWFAMDQSOSS () {
UIP "$MSGIAM Wi-Fi And Mobile Data QS Old Style"
PTMFI "$IDWFAMDQSOS" "$IDAWFAMDQSOS"
MSSERVICE "$SPGLOBAL settings_provider_model true; $SPSECURE sysui_qs_tiles \"internet,\$($SGSECURE sysui_qs_tiles)\"" "$SPGLOBAL settings_provider_model false; $SPSECURE sysui_qs_tiles \"wifi,cell,\$($SGSECURE sysui_qs_tiles)\"" "WFAMDQSOS"
MMPR -v "Wi-Fi And Mobile Data QS Old Style" "$VIPWFAMDQSOS" "$VCIPWFAMDQSOS" "Wi-Fi And Mobile Data QS Old Style"; SETPERM -mm -msg
}

IPFDNI () {
if $MAGISK && [ $ALLUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "$MSGIPL Force Disable Notification Icons $VIPFDNI?" "IPFDNIS" "$IDFDNI"
fi
}

IPFDNIS () {
UIP "$MSGIAM Force Disable Notification Icons"
PTMFI "$IDFDNI"
MSSERVICE -s "cmd statusbar send-disable-flag notification-icons"
MMPR -v "Force Disable Notification Icons" "$VIPFDNI" "$VCIPFDNI" "Force Disable Notification Icons In Status Bar"; SETPERM -mm -msg
}

IPNSP () {
if FINDER -aiop "$IPPSO/NotificationSidePaddings*.apk"; then
UCSA -rm "Notification Side Paddings" "$IPPSO/NotificationSidePaddings*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 29 ]; then UCSA -ent "$MSGIP Notification Side Paddings $VIPNSP?" "IPNSPS" "$IDNSP"; fi
fi
}

IPNSPS () {
UCSA -a "0dip 5dip 10dip 15dip 20dip 25dip 30dip" "Side For Notification" "Paddings Size:" "30dip"; NSPCOS=$UCSFNMC
if $UCSFNM; then UCSA -a "0dip 5dip 10dip 15dip 20dip 25dip 30dip" "Side For First QS Notification" "Paddings Size:" "30dip"; NSPCOSA=$UCSFNMC; fi
if $UCSFNM; then
UZTI "NSP" "Notification Side Paddings"
if $MAGISK; then
PTMFI -nm "$IDNSP" "$MIPPSO"
cp -f $LOCALTMPDIR/NSP/NotificationSidePaddings-$NSPCOS-$NSPCOSA.apk $IPMM/$MODID$MIPPSO
MMPR -v "Notification Side Paddings" "$VIPNSP" "$VCIPNSP" "Notification Side Paddings For QS/QS Notification/Lock Screen Notification - Set On: $NSPCOS-$NSPCOSA"
else
cp -f $LOCALTMPDIR/NSP/NotificationSidePaddings-$NSPCOS-$NSPCOSA.apk $IPPSO
fi
SETPERM -mm -msg
fi
}

IPQSCIAR () {
if FINDER -aiop "$IPPSO/QSCountIconAndRows*.apk"; then
UCSA -rm "QS Count Icon And Rows" "$IPPSO/QSCountIconAndRows*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 29 ]; then UCSA -ent "$MSGIP QS Count Icon And Rows $VIPQSCIAR?" "IPQSCIARS" "$IDQSCIAR"; fi
fi
}

IPQSCIARS () {
if [ "$ASDK" -ge 31 ]; then
UCSA -a "2 3 4" "All QS" "Count:" "4"; SUIQSSNC=$UCSFNMC
if $UCSFNM; then UCSA -a "$(seq 1 1 10)" "Expand Portrait QS + All QS ($SUIQSSNC)" "Count:" "10"; SUIQSMX=$UCSFNMC; fi
else
UCSA -a "$(seq 4 1 10)" "Minimized QS" "Count:" "10"; SUIQSC=$UCSFNMC
if $UCSFNM; then UCSA -a "$(seq 4 1 10)" "Expand Portrait QS" "Count:" "10"; SUIQSCP=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "$(seq 4 1 10)" "Expand Landscape QS" "Count:" "10"; SUIQSCL=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "$(seq 1 1 3)" "QS Rows Portrait" "Count:" "3"; SUIQSRP=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "$(seq 1 1 3)" "QS Rows Landscape" "Count:" "3"; SUIQSRL=$UCSFNMC; fi
fi
if $UCSFNM; then
UZTI "QSCIAR" "QS Count Icon And Rows"
if $MAGISK; then
PTMFI "$IDQSCIAR" "$IDAQSCIAR" "$MIPPSO"
if [ "$ASDK" -ge 31 ]; then
cp -f $LOCALTMPDIR/QSCIAR/QSCountIconAndRows-$SUIQSSNC-$SUIQSMX.apk $IPMM/$MODID$MIPPSO
MMPR -v "QS Count Icon And Rows" "$VIPQSCIAR" "$VCIPQSCIAR" "QS Count Icon And Rows - Set On: $SUIQSSNC-$SUIQSMX"
else
cp -f $LOCALTMPDIR/QSCIAR/QSCountIconAndRows-$SUIQSC-$SUIQSCP-$SUIQSCL-$SUIQSRP-$SUIQSRL.apk $IPMM/$MODID$MIPPSO
MMPR -v "QS Count Icon And Rows" "$VIPQSCIAR" "$VCIPQSCIAR" "QS Count Icon And Rows - Set On: $SUIQSC-$SUIQSCP-$SUIQSCL-$SUIQSRP-$SUIQSRL"
fi
else
if [ "$ASDK" -ge 31 ]; then
cp -f $LOCALTMPDIR/QSCIAR/QSCountIconAndRows-$SUIQSSNC-$SUIQSMX.apk $IPPSO
else
cp -f $LOCALTMPDIR/QSCIAR/QSCountIconAndRows-$SUIQSC-$SUIQSCP-$SUIQSCL-$SUIQSRP-$SUIQSRL.apk $IPPSO
fi
fi
SETPERM -mm -msg
fi
}

IPQSSN () {
if FINDER -aiop "$IPPSO/QSSplitNotification*.apk"; then
UCSA -rm "QS Split Notification" "$IPPSO/QSSplitNotification*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 32 ]; then UCSA -ent "$MSGIP QS Split Notification $VIPQSSN?" "IPQSSNS" "$IDQSSN"; fi
fi
}

IPQSSNS () {
UIP -s "Choose Variant:" "$MSGVU Enable" "$MSGVD Disable"
KEYCHOOSE && QSSNV="Enable" || QSSNV="Disable"
UZTI "QSSN" "QS Split Notification"
if $MAGISK; then
PTMFI "$IDQSSN" "$IDAQSSN" "$MIPPSO"
cp -f $LOCALTMPDIR/QSSN/QSSplitNotification-$QSSNV.apk $IPMM/$MODID$MIPPSO
MMPR -v "QS Split Notification" "$VIPQSSN" "$VCIPQSSN" "QS Split Notification - Set On: $QSSNV"
else
cp -f $LOCALTMPDIR/QSSN/QSSplitNotification-$QSSNV.apk $IPPSO
fi
SETPERM -mm -msg
}

IPQSCP () {
if $MAGISK && [ $ALLUI != true ]; then
if [ "$ASDK" -eq 28 ] || [ "$ASDK" -eq 29 ]; then
UCSA -ent "$MSGIPL QS Content Padding $VIPQSCP?" "IPQSCPS" "$IDQSCP"
fi
fi
}

IPQSCPS () {
UCSA -a "$(seq 0 5 40)" "Choose Padding Size" "Padding Size:" "40"
if $UCSFNM; then
UIP "$MSGIAM QS Content Padding"
PTMFI "$IDQSCP"
MSSERVICE -s "$SPSECURE sysui_rounded_content_padding $UCSFNMC"
MMPR -v "QS Content Padding" "$VIPQSCP" "$VCIPQSCP" "QS Content Padding - Set On: $UCSFNMC"; SETPERM -mm -msg
fi
}

} #

{ #UI: LockScreen/AlwaysOnDisplay

IPQRCSOLS () {
if FINDER -aiop "$IPPSO/QRCodeScannerOnLockScreen*.apk"; then
UCSA -rm "QR Code Scanner On Lock Screen" "$IPPSO/QRCodeScannerOnLockScreen*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -eq 33 ]; then UCSA -ent "$MSGIP QR Code Scanner On Lock Screen $VIPQRCSOLS?" "IPQRCSOLSS" "$IDQRCSOLS"; fi
fi
}

IPQRCSOLSS () {
UIP -s "Choose Variant:" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then QRCSOLSV="Enable" QRCSOLSVO="1" QRCSOLSVT="0"; else QRCSOLSV="Disable" QRCSOLSVO="0" QRCSOLSVT="1"; fi
UZTI "QRCSOLS" "QR Code Scanner On Lock Screen"
if $MAGISK; then
PTMFI "$IDQRCSOLS" "$IDAQRCSOLS" "$MIPPSO"
cp -f $LOCALTMPDIR/QRCSOLS/QRCodeScannerOnLockScreen-$QRCSOLSV.apk $IPMM/$MODID$MIPPSO
MSSERVICE "$SPSECURE lock_screen_show_qr_code_scanner $QRCSOLSVT" "$SPSECURE lock_screen_show_qr_code_scanner $QRCSOLSVO" "QRCSOLS"
MMPR -v "QR Code Scanner On Lock Screen" "$VIPQRCSOLS" "$VCIPQRCSOLS" "QR Code Scanner On Lock Screen - Set On: $QRCSOLSV"
else
cp -f $LOCALTMPDIR/QRCSOLS/QRCodeScannerOnLockScreen-$QRCSOLSV.apk $IPPSO
fi
SETPERM -mm -msg
}

IPLSUS () {
if FINDER -aiop "$IPPSO/LockScreenUserSwitcher*.apk"; then
UCSA -rm "Lock Screen User Switcher" "$IPPSO/LockScreenUserSwitcher*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 33 ]; then UCSA -ent "$MSGIP Lock Screen User Switcher $VIPLSUS?" "IPLSUSS" "$IDLSUS"; fi
fi
}

IPLSUSS () {
UIP -s "Choose Variant:" "$MSGVU Enable" "$MSGVD Disable"
KEYCHOOSE && LSUSV="Enable" || LSUSV="Disable"
UZTI "LSUS" "Lock Screen User Switcher"
if $MAGISK; then
PTMFI "$IDLSUS" "$IDALSUS" "$MIPPSO"
cp -f $LOCALTMPDIR/LSUS/LockScreenUserSwitcher-$LSUSV.apk $IPMM/$MODID$MIPPSO
MMPR -v "Lock Screen User Switcher" "$VIPLSUS" "$VCIPLSUS" "Lock Screen User Switcher - Set On: $LSUSV"
else
cp -f $LOCALTMPDIR/LSUS/LockScreenUserSwitcher-$LSUSV.apk $IPPSO
fi
SETPERM -mm -msg
}

IPAODS () {
if FINDER -aiop "$IPPSO/AODSwitcher*.apk"; then
UCSA -rm "AOD Switcher" "$IPPSO/AODSwitcher*.apk"
else
if [ "$ASDK" -ge 27 ]; then UCSA -ent "$MSGIP AOD Switcher $VIPAODS?" "IPAODSS" "$IDAODS"; fi
fi
}

IPAODSS () {
UIP -s "Choose Variant:" "$MSGVU Enable" "$MSGVD Disable"
KEYCHOOSE && AODSV="Enable" || AODSV="Disable"
UZTI "AODS" "AOD Switcher"
if $MAGISK; then
PTMFI "$IDAODS" "$IDAAODS" "$MIPPSO"
cp -f $LOCALTMPDIR/AODS/AODSwitcher-$AODSV.apk $IPMM/$MODID$MIPPSO
MMPR -v "AOD Switcher" "$VIPAODS" "$VCIPAODS" "AOD Switcher - Set On: $AODSV"
else
cp -f $LOCALTMPDIR/AODS/AODSwitcher-$AODSV.apk $IPPSO
fi
SETPERM -mm -msg
}

IPAODSD () {
if FINDER -aiop "$IPPSO/AODStateDoze*.apk"; then
UCSA -rm "AOD State Doze" "$IPPSO/AODStateDoze*.apk"
else
if [ $ALLUI != true ] && [ "$ASDK" -ge 27 ]; then UCSA -ent "$MSGIP AOD State Doze $VIPAODSD?" "IPAODSDS" "$IDAODSD"; fi
fi
}

IPAODSDS () {
UIP -s "Choose Variant:" "$MSGVU Enable" "$MSGVD Disable"
KEYCHOOSE && AODSDV="Enable" || AODSDV="Disable"
UZTI "AODSD" "AOD State Doze"
if $MAGISK; then
PTMFI "$IDAODSD" "$IDAAODSD" "$MIPPSO"
cp -f $LOCALTMPDIR/AODSD/AODStateDoze-$AODSDV.apk $IPMM/$MODID$MIPPSO
MMPR -v "AOD State Doze" "$VIPAODSD" "$VCIPAODSD" "AOD State Doze - Set On: $AODSDV"
else
cp -f $LOCALTMPDIR/AODSD/AODStateDoze-$AODSDV.apk $IPPSO
fi
SETPERM -mm -msg
}

IPAODALSAF () {
if [ "$ASDK" -ge 28 ]; then UCSA -eno "$MSGIP AOD & Lock Screen Animation Fix $VIPAODALSAF?" "IPAODALSAFS" "$IDAODALSAF"; fi
}

IPAODALSAFS () {
UIP "$MSGIAM AOD & Lock Screen Animation Fix"
if $MAGISK; then
PTMFI "$IDAODALSAF"
echo "debug.force_no_blanking=true" > $IPMM/$MODID/system.prop
MMPR -v "AOD & Lock Screen Animation Fix" "$VIPAODALSAF" "$VCIPAODALSAF" "Always On Display & Lock Screen Animation Fix"
else
BUCKUPER -bf "$IPSBP"
sed -i "/debug.force_no_blanking/d" $IPSBP
echo -e "\n# AOD & Lock Screen Animation Fix\ndebug.force_no_blanking=true" >> $IPSBP
fi
SETPERM -mm -msg
}

} #

{ #UI: Gboard/GboardThemes

IPGBNBS () {
if [ "$ASDK" -ge 29 ]; then
UCSA -ent "$MSGIP GBoard NavBar Space $VIPGBNBS?" "IPGBNBSS" "$IDGBNBS"
fi
}

IPGBNBSS () {
UCSA -a "$(seq 0 5 40)" "Choose NavBar Space Size" "NavBar Space Size:" "40"
if $UCSFNM; then
UIP "$MSGIAM GBoard NavBar Space"
if $MAGISK; then
PTMFI "$IDGBNBS" "$IDAGBNBS"
echo "ro.com.google.ime.kb_pad_port_b=$UCSFNMC" > $IPMM/$MODID/system.prop
MMPR -v "Gboard NavBar Spacing" "$VIPGBNBS" "$VCIPGBNBS" "Gboard NavBar Spacing - Set On: $UCSFNMC"
else
BUCKUPER -bf "$IPSBP"
sed -i "/ro.com.google.ime.kb_pad_port_b/d" $IPSBP
echo -e "\n# Gboard NavBar Spacing\nro.com.google.ime.kb_pad_port_b=$UCSFNMC" >> $IPSBP
fi
SETPERM -mm -msg
fi
}

IPGBRC () {
if [ "$ASDK" -ge 29 ]; then
UCSA -ent "$MSGIP GBoard Rounded Corners $VIPGBRC?" "IPGBRCS" "$IDGBRC"
fi
}

IPGBRCS () {
UCSA -a "$(seq 0 5 50)" "Choose Rounded Size" "Rounded Size:" "50"
if $UCSFNM; then
UIP "$MSGIAM GBoard Rounded Corners"
if $MAGISK; then
PTMFI "$IDGBRC"
echo "ro.com.google.ime.corner_key_r=$UCSFNMC" > $IPMM/$MODID/system.prop
MMPR -v "GBoard Rounded Corners" "$VIPGBRC" "$VCIPGBRC" "GBoard Rounded Corners - Set On: $UCSFNMC"
else
BUCKUPER -bf "$IPSBP"
sed -i "/ro.com.google.ime.corner_key_r/d" $IPSBP
echo -e "# GBoard NavBar Space Remover\nro.com.google.ime.corner_key_r=$UCSFNMC" >> $IPSBP
fi
SETPERM -mm -msg
fi
}

IPGBT () {
UCSA "$MSGIP GBoard Themes $VIPGBT?" "IPGBTS" "$IDGBT"
}

IPGBTS () {
UCSA -a "$(seq 0 5 30)" "Choose Key Rounded Size" "Rounded Size:" "30"
if $UCSFNM; then
UZTI "GBoardThemes" "GBoard Themes"
cp -rf $LOCALTMPDIR/GBoardThemes/3DB $LOCALTMPDIR/GBoardThemes/3DD
sed -i "s/00000000/21212121/g;s/000000FF/212121FF/g" $LOCALTMPDIR/GBoardThemes/3DD/style_sheet.css
sed -i "s/00000000/21212121/g;s/000000FF/212121FF/g" $LOCALTMPDIR/GBoardThemes/3DD/style_sheet_border.css
cp -rf $LOCALTMPDIR/GBoardThemes/FB $LOCALTMPDIR/GBoardThemes/FD
sed -i "s/00000000/21212121/g;s/000000FF/212121FF/g" $LOCALTMPDIR/GBoardThemes/FB/style_sheet.css
mkdir -p $LOCALTMPDIR/GBoardThemes/Compile $LOCALTMPDIR/GBoardThemes/gboard_theme
for f in "1A73E8" "B31818" "1ED760" "FFA842" "FF8055" "A86BD5" "FF4151" "5E97F6" "47AE84"; do
for s in "3DB" "3DD" "3DW" "FB" "FD" "FW"; do
case $s in
"3DB") g="3db";;
"3DD") g="3dd";;
"3DW") g="3dw";;
"FB") g="fb";;
"FD") g="fd";;
"FW") g="fw";;
esac
local n="$(tr -cd 'a-z' < /dev/urandom | dd bs=6 count=1 2>$NULL)"
cp -rf $LOCALTMPDIR/GBoardThemes/$s/* $LOCALTMPDIR/GBoardThemes/Compile
sed -i "s/#ROUNDED/$UCSFNMC/g" $LOCALTMPDIR/GBoardThemes/Compile/style_sheet.css
sed -i "s/#ACCENT/#$f\FF/g" $LOCALTMPDIR/GBoardThemes/Compile/style_sheet.css
[ -f $LOCALTMPDIR/GBoardThemes/Compile/style_sheet_border.css ] && sed -i "s/#ACCENT/#$f\FF/g" $LOCALTMPDIR/GBoardThemes/Compile/style_sheet_border.css
sed -i "s/#ID/$g$n/g" $LOCALTMPDIR/GBoardThemes/Compile/metadata.json
sed -i "s/#NAME/$g$n/g" $LOCALTMPDIR/GBoardThemes/Compile/metadata.json
cd $LOCALTMPDIR/GBoardThemes/Compile
$ZIPPACKER -r -0 $LOCALTMPDIR/GBoardThemes/Compile * >$NULL
mv $LOCALTMPDIR/GBoardThemes/Compile.zip $LOCALTMPDIR/GBoardThemes/gboard_theme/user_theme_package_$s-$f.zip
rm -rf $LOCALTMPDIR/GBoardThemes/Compile/*
done
done
if $MAGISK; then
PTMFI "$IDGBT" "$IDAGBT" "$MIPSE"
cp -rf $LOCALTMPDIR/GBoardThemes/gboard_theme $IPMM/$MODID$MIPSE
echo -e "ro.com.google.ime.theme_file=user_theme_package_FB-1A73E8.zip\nro.com.google.ime.themes_dir=$MIPSE/gboard_theme" > $IPMM/$MODID/system.prop
MMPR -v "GBoard Themes" "$VIPGBT" "$VCIPGBT" "GBoard Themes, Key Rounded Size - Set On: $UCSFNMC"
MSSERVICE -s "[ -d $IPDD/com.google.android.inputmethod.latin/files ] && cp -rf $IPMM/$MODID$MIPSE/gboard_theme/* $IPDD/com.google.android.inputmethod.latin/files"
else
BUCKUPER -bf "$IPSBP"
sed -i "/ro.com.google.ime.theme_file/d;ro.com.google.ime.themes_dir/d" $IPSBP
echo -e "\n# GBoard Themes\nro.com.google.ime.theme_file=user_theme_package_FB-1A73E8.zip\nro.com.google.ime.themes_dir=$MIPSE/gboard_theme" >> $IPSBP
cp -rf $LOCALTMPDIR/GBoardThemes/gboard_theme $IPSE
SETPERM -rp $IPSE/gboard_theme 0 0 0755 0644
fi
if [ -d $IPDD/com.google.android.inputmethod.latin/files ]; then
cp -rf $LOCALTMPDIR/GBoardThemes/gboard_theme/* $IPDD/com.google.android.inputmethod.latin/files
fi
SETPERM -mm -msg
fi
}

IPGBSTS () {
UCSA "$MSGIPL GBoard Silk Theme Switcher $VIPGBSTS?" "IPGBSTSS" "$IDGBSTS"
}

IPGBSTSS () {
UIP -s "Enable Or Disable Silk Theme?" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then GBSTF="false" GBSTT="true" MSGGBSTS="Enable"; else GBSTF="true" GBSTT="false" MSGGBSTS="Disable"; fi
UIP -s "Enable Or Disable Key Shadows?" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then GBSTKSF="true" GBSTKST="false"; else GBSTKSF="false" GBSTKST="true"; fi
UIP -s "Enable Or Disable Shaped Key?" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then GBSTSKF="false" GBSTSKT="true"; else GBSTSKF="true" GBSTSKT="false"; fi
UIP "$MSGIAM GBoard Silk Theme Switcher"

GBFLAGS="
animate_first_content_suggestion_results
enable_animated_whatsapp_sticker_webp
enable_fake_app_completion
enable_inline_suggestions_on_client_side
enable_inline_suggestions_on_decoder_side
enable_inline_suggestions_space_tooltip
enable_inline_suggestions_tooltip
enable_keyboard_redesign
enable_keyboard_redesign_theme
enable_matched_predictions_as_inline_from_crank_cifg
enable_multiword_predictions_as_inline_from_crank_cifg
enable_multiword_suggestions_as_inline_from_crank_cifg
enable_new_spellchecker
enable_nga
enable_send_swipe_on_space_to_app
enable_single_word_predictions_as_inline_from_crank_cifg
enable_single_word_suggestions_as_inline_from_crank_cifg
enable_spacebar_mixed_model
enable_spell_checker_extension
enable_spellchecker_chips_ui
enable_sticker_candidates
enable_tflite_triggering_model
enable_trigger_spell_check_in_composing
enable_trigger_spell_check_in_sentence
enable_user_history_predictions_as_inline_from_crank_cifg
extends_touch_below_space
fast_access_bar_enable_frequently_used
fast_access_bar_enable_instantly_remove
keyboard_redesign_google_sans
lm_personalization_enabled
native_language_hint_by_system_locales
nebulae_enable_input_action_collection
show_branding_on_space
silk_on_all_pixel
silk_theme
spellchecker_enable_language_trigger
spellchecker_enable_rule_trigger
supports_battery_saver_theme
use_keyboard_redesign_on_existing_theme
use_keyboard_redesign_on_existing_theme_on_all_users
use_keyboard_redesign_theme_by_default
use_silk_theme_by_default
"

if $MAGISK; then
PTMFI "$IDGBSTS" "$IDAGBSTS"
MMPR -v "Gboard Silk Theme Switcher" "$VIPGBSTS" "$VCIPGBSTS" "Gboard Silk Theme Switcher - Set On: $MSGGBSTS"
MSSERVICE "for GBFLAGS in $GBFLAGS; do sed -i -e \"s/\\\"\$GBFLAGS\\\" value=\\\"$GBSTT\\\"/\\\"\$GBFLAGS\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML; done
sed -i -e \"s/\\\"branding_fadeout_delay_ms\\\" value=\\\"9000000\\\"/\\\"branding_fadeout_delay_ms\\\" value=\\\"900\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"concept_prediction_sample_emoji_by_popularity\\\" value=\\\"$GBSTF\\\"/\\\"concept_prediction_sample_emoji_by_popularity\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"disable_vocabulary_capitalization\\\" value=\\\"$GBSTF\\\"/\\\"disable_vocabulary_capitalization\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"keyboard_redesign_forbid_key_shadows\\\" value=\\\"$GBSTKST\\\"/\\\"keyboard_redesign_forbid_key_shadows\\\" value=\\\"$GBSTKSF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"pill_shaped_key\\\" value=\\\"$GBSTSKT\\\"/\\\"pill_shaped_key\\\" value=\\\"$GBSTSKF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"pseudo_spellchecker_mode\\\" value=\\\"0\\\"/\\\"pseudo_spellchecker_mode\\\" value=\\\"1\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"show_branding_interval_seconds\\\" value=\\\"0\\\"/\\\"show_branding_interval_seconds\\\" value=\\\"86400000\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"threshold_for_single_word_completions\\\" value=\\\"-5.0\\\"/\\\"threshold_for_single_word_completions\\\" value=\\\"-8.0\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"time_interval_percentile\\\" value=\\\"90\\\"/\\\"time_interval_percentile\\\" value=\\\"67\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"trigger_spell_check_in_composing_delay\\\" value=\\\"1500\\\"/\\\"trigger_spell_check_in_composing_delay\\\" value=\\\"3000\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"trigger_spell_check_in_sentence_delay\\\" value=\\\"1000\\\"/\\\"trigger_spell_check_in_sentence_delay\\\" value=\\\"2000\\\"/g\" $GBFVXML" "for GBFLAGS in $GBFLAGS; do sed -i -e \"s/\\\"\$GBFLAGS\\\" value=\\\"$GBSTF\\\"/\\\"\$GBFLAGS\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML; done
sed -i -e \"s/\\\"branding_fadeout_delay_ms\\\" value=\\\"900\\\"/\\\"branding_fadeout_delay_ms\\\" value=\\\"9000000\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"concept_prediction_sample_emoji_by_popularity\\\" value=\\\"$GBSTT\\\"/\\\"concept_prediction_sample_emoji_by_popularity\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"disable_vocabulary_capitalization\\\" value=\\\"$GBSTT\\\"/\\\"disable_vocabulary_capitalization\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"keyboard_redesign_forbid_key_shadows\\\" value=\\\"$GBSTKSF\\\"/\\\"keyboard_redesign_forbid_key_shadows\\\" value=\\\"$GBSTKST\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"nwp_threshold_for_two_words_completions\\\" value=\\\"-0.4\\\"/\\\"nwp_threshold_for_two_words_completions\\\" value=\\\"-0.3\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"pill_shaped_key\\\" value=\\\"$GBSTSKF\\\"/\\\"pill_shaped_key\\\" value=\\\"$GBSTSKT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"pseudo_spellchecker_mode\\\" value=\\\"0\\\"/\\\"pseudo_spellchecker_mode\\\" value=\\\"1\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"show_branding_interval_seconds\\\" value=\\\"86400000\\\"/\\\"show_branding_interval_seconds\\\" value=\\\"0\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"threshold_for_single_word_completions\\\" value=\\\"-8.0\\\"/\\\"threshold_for_single_word_completions\\\" value=\\\"-5.0\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"time_interval_percentile\\\" value=\\\"90\\\"/\\\"time_interval_percentile\\\" value=\\\"67\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"trigger_spell_check_in_composing_delay\\\" value=\\\"3000\\\"/\\\"trigger_spell_check_in_composing_delay\\\" value=\\\"1500\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"trigger_spell_check_in_sentence_delay\\\" value=\\\"2000\\\"/\\\"trigger_spell_check_in_sentence_delay\\\" value=\\\"1000\\\"/g\" $GBFVXML" "GSTE"
fi
if [ -f $GBFVXML ]; then
sed -i -e "s/\"concept_prediction_sample_emoji_by_popularity\" value=\"$GBSTT\"/\"concept_prediction_sample_emoji_by_popularity\" value=\"$GBSTF\"/g" $GBFVXML
sed -i -e "s/\"disable_vocabulary_capitalization\" value=\"$GBSTT\"/\"disable_vocabulary_capitalization\" value=\"$GBSTF\"/g" $GBFVXML
sed -i -e "s/\"keyboard_redesign_forbid_key_shadows\" value=\"$GBSTKSF\"/\"keyboard_redesign_forbid_key_shadows\" value=\"$GBSTKST\"/g" $GBFVXML
sed -i -e "s/\"pill_shaped_key\" value=\"$GBSTSKF\"/\"pill_shaped_key\" value=\"$GBSTSKT\"/g" $GBFVXML
sed -i -e "s/\"branding_fadeout_delay_ms\" value=\"900\"/\"branding_fadeout_delay_ms\" value=\"9000000\"/g" $GBFVXML
sed -i -e "s/\"nwp_threshold_for_two_words_completions\" value=\"-0.4\"/\"nwp_threshold_for_two_words_completions\" value=\"-0.3\"/g" $GBFVXML
sed -i -e "s/\"pseudo_spellchecker_mode\" value=\"0\"/\"pseudo_spellchecker_mode\" value=\"1\"/g" $GBFVXML
sed -i -e "s/\"show_branding_interval_seconds\" value=\"86400000\"/\"show_branding_interval_seconds\" value=\"0\"/g" $GBFVXML
sed -i -e "s/\"threshold_for_single_word_completions\" value=\"-8.0\"/\"threshold_for_single_word_completions\" value=\"-5.0\"/g" $GBFVXML
sed -i -e "s/\"time_interval_percentile\" value=\"90\"/\"time_interval_percentile\" value=\"67\"/g" $GBFVXML
sed -i -e "s/\"trigger_spell_check_in_composing_delay\" value=\"3000\"/\"trigger_spell_check_in_composing_delay\" value=\"1500\"/g" $GBFVXML
sed -i -e "s/\"trigger_spell_check_in_sentence_delay\" value=\"2000\"/\"trigger_spell_check_in_sentence_delay\" value=\"1000\"/g" $GBFVXML
for GBFLAGS in $GBFLAGS; do sed -i -e "s/\"$GBFLAGS\" value=\"$GBSTF\"/\"$GBFLAGS\" value=\"$GBSTT\"/g" $GBFVXML; done
if $BOOTMODE; then
am force-stop com.google.android.inputmethod.latin >$NULL
am start -a android.intent.action.MAIN -n com.google.android.inputmethod.latin/com.google.android.apps.inputmethod.latin.firstrun.LatinFirstRunActivity >$NULL
fi
fi
SETPERM -mm -msg
}

} #

{ #UI: BootAnimation/MediaUISounds/Emoji

IPBA () {
if FINDER -aiopb "$IPPM/bootanimation.zip $IPPM/bootanimation-dark.zip"; then
UIP -s "$MSGFI Boot Animation, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "$MSGRMIP"
BUCKUPER -r "$IPPM/bootanimation.zip $IPPM/bootanimation-dark.zip"
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ $ONEUI != true ]; then
UCSA "$MSGIP Boot Animation $VIPBA?" "IPBAS" "$IDBA"
fi
fi
}

IPBAS () {
BATC=false
UIP -s "Choose Boot Animation:" "$MSGVU Google Pixel" "$MSGVD $MSGNIS"
if KEYCHOOSE; then
UIP -s "Choose Color Variant:" "$MSGVU Black" "$MSGVD White"
KEYCHOOSE && BADIR=GPBAB || BADIR=GPBAW BATC=true BANAME=Pixel
else
UIP -s "Choose Boot Animation:" "$MSGVU TenX" "$MSGVD $MSGNIS"
if KEYCHOOSE; then
UIP -s "Choose Color Variant:" "$MSGVU Black" "$MSGVD White"
KEYCHOOSE && BADIR=TENXB || BADIR=TENXW BATC=true BANAME=TenX
else
UIP -s "Choose Boot Animation:" "$MSGVU Radiant" "$MSGVD $MSGNIS"
if KEYCHOOSE; then
BATC=true BADIR=RADIANT BANAME=Radiant
else
UIP -s "Choose Boot Animation:" "$MSGVU Spark" "$MSGVD $MSGNIS"
if KEYCHOOSE; then
BATC=true BADIR=SPARK BANAME=Spark
else
UIP -s "Choose Boot Animation:" "$MSGVU Awaken" "$MSGVD $MSGNIS"
if KEYCHOOSE; then
BATC=true BADIR=AWAKEN BANAME=Awaken
else
UIP -s "Choose Boot Animation:" "$MSGVU VoidUI" "$MSGVD $MSGNUS"
if KEYCHOOSE; then
BATC=true BADIR=VOIDUI BANAME=VoidUI
fi
fi
fi
fi
fi
fi
if $BATC; then
UIP -s "Choose FPS:" "$MSGVU 60" "$MSGVD 30"; KEYCHOOSE && BAFPS="60" || BAFPS="30"
UZTI "BA" "Boot Animation"
sed -i "s/#FPS/$BAFPS/g" $LOCALTMPDIR/BA/$BADIR/desc.txt
cd $LOCALTMPDIR/BA/$BADIR
$ZIPPACKER -r -0 $LOCALTMPDIR/BA/$BADIR * >$NULL
mv -f $LOCALTMPDIR/BA/$BADIR.zip $LOCALTMPDIR/BA/bootanimation.zip
if $MAGISK; then
PTMFI -nm "$IDBA" "$MIPPM"
cp -f $LOCALTMPDIR/BA/bootanimation.zip $IPMM/$MODID$MIPPM
[ -f $IPPM/bootanimation-dark.zip ] && cp -f $LOCALTMPDIR/BA/bootanimation.zip $IPMM/$MODID$MIPPM/bootanimation-dark.zip
echo "mount --bind $IPMM/$MODID$MIPPM/bootanimation.zip /my_product/media/bootanimation/bootanimation.zip
mount --bind $IPMM/$MODID$MIPPM/bootanimation.zip /my_product/media/bootanimation/rbootanimation.zip
mount --bind $IPMM/$MODID$MIPPM/bootanimation.zip /oem/media/bootanimation.zip
mount --bind $IPMM/$MODID$MIPPM/bootanimation.zip /oem/media/shutdownanimation.zip" > $IPMM/$MODID/post-fs-data.sh
MMPR -v "Boot Animation" "$VIPBA" "$VCIPBA" "Boot Animation From $BANAME"
else
BUCKUPER -s "$IPPM/bootanimation.zip $IPPM/bootanimation-dark.zip"
cp -f $LOCALTMPDIR/BA/bootanimation.zip $IPPM
[ -f $IPPM/bootanimation-dark.zip ] && cp -f $LOCALTMPDIR/BA/bootanimation.zip $IPPM/bootanimation-dark.zip
fi
SETPERM -mm -msg
fi
}

IPMUIS () {
if FINDER -aiopb "$IPPMU/audio_end.ogg"; then
UIP -s "$MSGFI Media UI Sounds, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "$MSGRMIP"
ALLLIST -muis; BUCKUPER -s "$MUISF"
UIP "$MSGDRM"
fi
else
UCSA "$MSGIP Media UI Sounds $VIPMUIS?" "IPMUISS" "$IDMUIS"
fi
}

IPMUISS () {
MASIKALT=false ONEPLUSALT=false
UCSA -a "Masik OnePlus Pixel Samsung Oppo Spark Arcana AlphaDroid Rising IOS Hyper" "Choose Media Variant" "Media From:" "Hyper"
FMUIS=$UCSFNMC
if $UCSFNM; then
case $FMUIS in
"Masik") UIP -s "Use Alternative Lock/Unlock Sound?" "$MSGVU Yes" "$MSGVD No $MSGEEFTC"; KEYCHOOSE && MASIKALT=true;;
"OnePlus") UIP -s "Choose UI Sound From:" "$MSGVU OOS 12" "$MSGVD OOS 11"; KEYCHOOSE && MUIC="/12" || MUIC="/11";;
esac
if [ $FMUIS = "OnePlus" ]; then
UIP -s "Use Alternative Touch Sound?" "$MSGVU Yes" "$MSGVD No $MSGEEFTC"; if KEYCHOOSE; then
UCSA -a "Touch1 Touch2 Touch3" "Choose Media Variant" "Alternative Touch Sound:" "Touch3"
if $UCSFNM; then
ONEPLUSALT=true
fi
fi
fi
UZTI "MediaUISounds" "Media UI Sounds"
$MASIKALT && cp -f $LOCALTMPDIR/MediaUISounds/MasikAlt/* $LOCALTMPDIR/MediaUISounds/Masik
$ONEPLUSALT && cp -f $LOCALTMPDIR/MediaUISounds/OnePlusAlt/$UCSFNMC.ogg $LOCALTMPDIR/MediaUISounds/OnePlus$MUIC/Effect_Tick.ogg
cp -f $LOCALTMPDIR/MediaUISounds/$FMUIS$MUIC/ChargingStarted.ogg $LOCALTMPDIR/MediaUISounds/$FMUIS$MUIC/ChargingReverse.ogg
cp -f $LOCALTMPDIR/MediaUISounds/$FMUIS$MUIC/ChargingStarted.ogg $LOCALTMPDIR/MediaUISounds/$FMUIS$MUIC/charging.ogg
cp -f $LOCALTMPDIR/MediaUISounds/$FMUIS$MUIC/WirelessChargingStarted.ogg $LOCALTMPDIR/MediaUISounds/$FMUIS$MUIC/charge_wireless.ogg
cp -f $LOCALTMPDIR/MediaUISounds/$FMUIS$MUIC/camera_click.ogg $LOCALTMPDIR/MediaUISounds/$FMUIS$MUIC/screenshot.ogg
cp -f $LOCALTMPDIR/MediaUISounds/$FMUIS$MUIC/camera_click.ogg $LOCALTMPDIR/MediaUISounds/$FMUIS$MUIC/screenshot_kr.ogg
if $MAGISK; then
PTMFI "$IDMUIS" "$IDAMUIS" "$MIPPMU"
cp -f $LOCALTMPDIR/$MODID/$FMUIS$MUIC/* $IPMM/$MODID$MIPPMU
MMPR -v "Media UI Sounds" "$VIPMUIS" "$VCIPMUIS" "Media UI Sounds From $FMUIS"
else
ALLLIST -muis; BUCKUPER -s "$MUISF"
cp -f $LOCALTMPDIR/MediaUISounds/$FMUIS$MUIC/* $IPPMU
fi
SETPERM -mm -msg
fi
}

IPIOSEMOJI () {
if FINDER -aiopb "$IPSF/NotoColorEmoji.ttf"; then
UIP -s "$MSGFI IOS Emoji, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "$MSGRMIP"
BUCKUPER -r "$IPSF/AndroidEmoji-htc.ttf $IPSF/ColorUniEmoji.ttf $IPSF/CombinedColorEmoji.ttf $IPSF/DcmColorEmoji.ttf $IPSF/HTC_ColorEmoji.ttf $IPSF/NotoColorEmoji.ttf $IPSF/NotoColorEmojiFlags.ttf $IPSF/NotoColorEmojiLegacy.ttf $IPSF/SamsungColorEmoji.ttf"
UIP "$MSGDRM"
fi
else
UCSA "$MSGIP IOS Emoji From IOS 18 $VIPIOSEMOJI?" "IPIOSEMOJIS" "$IDIOSEMOJI"
fi
}

IPIOSEMOJIS () {
UZTI "IOSEmoji" "IOS Emoji"
if $MAGISK; then
PTMFI "$IDIOSEMOJI" "$IDAIOSEMOJI" "$MIPSF"
for TTF in AndroidEmoji-htc ColorUniEmoji CombinedColorEmoji DcmColorEmoji HTC_ColorEmoji NotoColorEmoji SamsungColorEmoji; do
[ -f $MAGISKMP$IPSF/$TTF.ttf ] && cp -f $LOCALTMPDIR/IOSEmoji/NotoColorEmoji.ttf $IPMM/$MODID$MIPSF/$TTF.ttf
done
MMPR -v "IOS Emoji" "$VIPIOSEMOJI" "$VCIPIOSEMOJI" "Emoji From IOS 18"
echo "#!$MIPSB/sh
sed -i \"/emoji_compat_app_whitelist/d\" $GBFVXML
for FBAN in \"com.facebook.orca\" \"com.facebook.katana\"; do
if [ -d $IPDD/\$FBAN ]; then
mkdir -p $IPDD/\$FBAN/app_ras_blobs
cp -f $IPMM/$MODID$MIPSF/NotoColorEmoji.ttf $IPDD/\$FBAN/app_ras_blobs/FacebookEmoji.ttf
fi
done
if [ -f $IPDFC/config.xml ] && [ -d $IPDFF ]; then
rm -rf $IPDFC/config.xml $IPDFF
fi
fi" > $IPMM/$MODID/post-fs-data.sh
else
sed -i "/emoji_compat_app_whitelist/d" $GBFVXML
BUCKUPER -s "$IPSF/AndroidEmoji-htc.ttf $IPSF/ColorUniEmoji.ttf $IPSF/CombinedColorEmoji.ttf $IPSF/DcmColorEmoji.ttf $IPSF/HTC_ColorEmoji.ttf $IPSF/NotoColorEmoji.ttf $IPSF/NotoColorEmojiFlags.ttf $IPSF/NotoColorEmojiLegacy.ttf $IPSF/SamsungColorEmoji.ttf"
for TTF in AndroidEmoji-htc ColorUniEmoji CombinedColorEmoji DcmColorEmoji HTC_ColorEmoji NotoColorEmoji NotoColorEmojiFlags NotoColorEmojiLegacy SamsungColorEmoji; do
[ -f $MAGISKMP$IPSF/$TTF.ttf ] && cp -f $LOCALTMPDIR/IOSEmoji/NotoColorEmoji.ttf $IPSF/$TTF.ttf
done
fi
for FBAN in "com.facebook.orca" "com.facebook.katana"; do
if [ -d $IPDD/$FBAN ]; then
mkdir -p $IPDD/$FBAN/app_ras_blobs
cp -f $LOCALTMPDIR/IOSEmoji/NotoColorEmoji.ttf $IPDD/$FBAN/app_ras_blobs/FacebookEmoji.ttf
fi
done
if [ -f $IPDFC/config.xml ] && [ -d $IPDFF ]; then
rm -rf $IPDFC/config.xml $IPDFF
fi
SETPERM -mm -msg
}

} #

{ #UI: RoundedUI/BIP/BackgroundBlur/Other

IPRUI () {
if FINDER -aiop "$IPPSO/Rounded*3*.apk"; then
UCSA -rm "Rounded UI" "$IPPSO/Rounded*3*.apk"
else
if [ "$ASDK" -ge 29 ]; then
UCSA -ent "$MSGIP Rounded UI $VIPRUI?" "IPRUIS" "$IDRUI"
fi
fi
}

IPRUIS () {
UZTI "RoundedUI" "Rounded UI"
[ "$ASDK" -ge 31 ] && UCSFNMC=30dip || UCSFNMC=33dip
if $MAGISK; then
PTMFI "$IDRUI" "$IDARUI" "$MIPPSO"
cp -f $LOCALTMPDIR/$MODID/Rounded*-$UCSFNMC.apk $IPMM/$MODID$MIPPSO
MMPR -v "RoundedUI" "$VIPRUI" "$VCIPRUI" "Rounded UI For Round Apps, System UI, Launcher Recent & Etc"
else
cp -f $LOCALTMPDIR/RoundedUI/Rounded*-$UCSFNMC.apk $IPPSO
fi
SETPERM -mm -msg
}

IPBIP () {
if FINDER -aiop "$IPPSO/*BurnInProtection*.apk"; then
UCSA -rm "Burn In Protection" "$IPPSO/*BurnInProtection*.apk"
else
if [ "$ASDK" -ge 29 ]; then UCSA -ent "$MSGIP Burn In Protection $VIPBIP?" "IPBIPS" "$IDBIP"; fi
fi
}

IPBIPS () {
UCSA -a "20 40 60" "Choose Shift Interval" "Interval:" "60"; SHIFTINTERVAL=$UCSFNMC
if $UCSFNM; then UCSA -a "4dip 6dip" "Choose Horizontal Shift" "Shift:" "6dip"; HORIZONTALSWIFT=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "4dip 6dip" "Choose Vertical Shift" "Shift:" "6dip"; VERTICALSWIFT=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "20dip 30dip 40dip" "Choose AOD Horizontal Shift" "Shift:" "40dip"; AODHORIZONTALSWIFT=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "20dip 30dip 40dip" "Choose AOD Vertical Shift" "Shift:" "40dip"; AODVERTICALSWIFT=$UCSFNMC; fi
if $UCSFNM; then
UZTI "BIP" "Burn In Protection"
if $MAGISK; then
PTMFI -nm "$IDBIP" "$MIPPSO"
cp -f $LOCALTMPDIR/BIP/*BurnInProtection*-$SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT*.apk $IPMM/$MODID$MIPPSO
MSSERVICE -s "$SPGLOBAL burn_in_protection 1"
MMPR -v "Burn In Protection" "$VIPBIP" "$VCIPBIP" "Burn In Protection For Status Bar, Gesture Pills/NavBar & AOD - Set On: $SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT"
else
cp -f $LOCALTMPDIR/BIP/*BurnInProtection*-$SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT*.apk $IPPSO
fi
SETPERM -mm -msg
fi
}

IPBB () {
if [ "$ASDK" -ge 30 ] && [ $ONEUI != true ]; then UCSA -ent "$MSGIP Background Blur $VIPBB?" "IPBBS" "$IDBB"; fi
}

IPBBS () {
UIP -s "Choose Variant:" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then BBV="1" BBVA="true" BBVR="false" BBVRA="0" MASGBB="Enable"; else BBV="0" BBVA="false" BBVR="true" BBVRA="1" MASGBB="Disable"; fi
UIP "$MSGIAM Background Blur"
if $MAGISK; then
PTMFI "$IDBB"
echo -e "persist.sysui.disableBlur=$BBVR\nro.config.avoid_gfx_accel=$BBVR\ndisableBlurs=$BBVR\nenable_blurs_on_windows=$BBV\npersist.sys.background_blur_status_default=$BBVA\npersist.sys.background_blur_supported=$BBVA\npersist.sys.sf.disable_blurs=$BBVRA\nro.launcher.blur.appLaunch=$BBV\nro.miui.has_real_blur=$BBV\nro.sf.blurs_are_expensive=$BBV\nro.surface_flinger.supports_background_blur=$BBV" > $IPMM/$MODID/system.prop
MMPR -v "Background Blur" "$VIPBB" "$VCIPBB" "Background Blur For QS, Launcher Resents, Etc - Set On: $MASGBB"
SETPERM -mm
else
BUCKUPER -bp
sed -i "/persist.sysui.disableBlur/d;ro.config.avoid_gfx_accel/d;disableBlurs/d;enable_blurs_on_windows/d;persist.sys.background_blur_status_default/d;persist.sys.background_blur_supported/d;persist.sys.sf.disable_blurs/d;ro.launcher.blur.appLaunch/d;ro.miui.has_real_blur/d;ro.sf.blurs_are_expensive/d;ro.surface_flinger.supports_background_blur/d" $IPSBP
echo -e "\n#Background Blur\npersist.sysui.disableBlur=$BBVR\nro.config.avoid_gfx_accel=$BBVR\ndisableBlurs=$BBVR\nenable_blurs_on_windows=$BBV\npersist.sys.background_blur_status_default=$BBVA\npersist.sys.background_blur_supported=$BBVA\npersist.sys.sf.disable_blurs=$BBVRA\nro.launcher.blur.appLaunch=$BBV\nro.miui.has_real_blur=$BBV\nro.sf.blurs_are_expensive=$BBV\nro.surface_flinger.supports_background_blur=$BBV" >> $IPSBP
fi
UIP "$MSGDI"
}

IPGPPM () {
if $MAGISK && [ "$ASDK" -eq 29 ] && [ $ALLUI != true ]; then UCSA "Activate GPay Power Menu $VIPGPPM?" "IPGPPMS" "$IDGPPM"; fi
}

IPGPPMS () {
UIP "$MSGIAM GPay Power Menu"
PTMFI "$IDGPPM"
MSSERVICE "$SPSECURE global_actions_panel_debug_enabled 0; $SPSECURE global_actions_panel_available 0" "$SPSECURE global_actions_panel_debug_enabled 1; $SPSECURE global_actions_panel_available 1" "GPPM"
MMPR -v "GPay Power Menu" "$VIPGPPM" "$VCIPGPPM" "Enable Google Pay Quick Wallet Access In The Power Menu"; SETPERM -mm -msg
}

IPSUIRSRS () {
if $MAGISK && [ $ALLUI != true ]; then
if [ "$ASDK" -ge 27 ] && [ "$ASDK" -le 30 ]; then
UCSA -ent "$MSGIPL SUI Rounded Size $VIPSUIRSRS?" "IPSUIRSRSS" "$IDSUIRSRS"
fi
fi
}

IPSUIRSRSS () {
[ "$ASDK" -eq 30 ] && UCSA -a "0 10 20 30 40 50 60 70 80 90 100" "Choose Rounded Size" "Rounded Size:" "100" || UCSA -a "0 10 20 33 40 50 60 70 80 90 100" "Choose Rounded Size" "Rounded Size:" "100"
if $UCSFNM; then
UIP "$MSGIAM SUI Rounded Size"
PTMFI "$IDSUIRSRS"
MSSERVICE -s "$SPSECURE sysui_rounded_size $UCSFNMC"
MMPR -v "SUI Rounded Size" "$VIPSUIRSRS" "$VCIPSUIRSRS" "SUI Rounded Size To Round The Screen Around The Edges - Set On: $UCSFNMC"; SETPERM -mm -msg
fi
}

IPFDM () {
[ "$ASDK" -ge 27 ] && UCSA "$MSGIP Force Dark Mode $VIPFDM?" "IPFDMS" "$IDFDM"
}

IPFDMS () {
UIP -s "Choose Variant:" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then FDMV="true" MSGFDM="Enable"; else FDMV="false" MSGFDM="Disable"; fi
UIP "$MSGIAM Force Dark Mode"
if $MAGISK; then
PTMFI "$IDFDM"
echo -e "debug.hwui.force_dark=$FDMV\ndebug.hwui.force_dark_enabled=$FDMV" > $IPMM/$MODID/system.prop
MMPR -v "Force Dark Mode" "$VIPFDM" "$VCIPFDM" "Force Dark Mode In Developer Settings After ReBoot - Set On: $MSGFDM"
else
BUCKUPER -bf "$IPSBP"
sed -i "/debug.hwui.force_dark/d" $IPSBP
echo -e "\n# Force Dark Mode\ndebug.hwui.force_dark=$FDMV\ndebug.hwui.force_dark_enabled=$FDMV" >> $IPSBP
fi
SETPERM -mm -msg
}

IPAS () {
$MAGISK && UCSA "$MSGIP Animation Scale $VIPAS?" "IPASS" "$IDAS"
}

IPASS () {
UCSA -a "0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.25" "Choose Animation Scale" "Animation Scale:" "1.25"
if $UCSFNM; then
UIP "$MSGIAM Animation Scale"
PTMFI "$IDAS"
MSSERVICE -s "$SPGLOBAL window_animation_scale $UCSFNMC; $SPGLOBAL transition_animation_scale $UCSFNMC; $SPGLOBAL animator_duration_scale $UCSFNMC"
MMPR -v "Animation Scale" "$VIPAS" "$VCIPAS" "Animation Scale - Set On: $UCSFNMC"; SETPERM -mm -msg
fi
}

IPFDPIS () {
if $MAGISK; then
UCSA "$MSGIP Force Density Switcher $VIPFDPIS?" "IPFDPISS" "$IDFDPIS"
fi
}

IPFDPISS () {
UCSA -a "300 320 340 360 380 400 420 440 460 480 500" "Choose Density:" "Density" "500"
if $UCSFNM; then
UIP "$MSGIAM Force Density Switcher"
PTMFI "$IDFDPIS"
MSSERVICE -s "wm density $UCSFNMC; sleep 40 wm density $UCSFNMC"
MMPR -v "Force Density Switcher" "$VIPFDPIS" "$VCIPFDPIS" "Force Density Switcher - Set On: $UCSFNMC"; SETPERM -mm -msg
fi
}

} #

{ #Audio: VFX(P)/DOLBY/AIST/SAQ/SIB/AML/ALCF/VS/DSM

IPVFX () {
if $MAGISK; then
if [ $ASDK -le 30 ] && [ ! $ASDK -le 22 ]; then
UCSA "$MSGIPP ViperFX $VIPVFX - v2.5.0.5 Or v2.7.1.6?" "IPVFXS" "$IDVFX"
elif [ $ASDK -le 22 ]; then
UCSA "$MSGIPP ViperFX $VIPVFX - v2.5.0.5?" "IPVFXS" "$IDVFX"
elif [ $ASDK -ge 31 ] && [ $ASDK -le 34 ]; then
UCSA "$MSGIPP ViperFX $VIPVFX - v2.5.0.5, v2.7.2.1 & v0.6.3?" "IPVFXS" "$IDVFX"
elif [ $ASDK -ge 34 ]; then
UCSA "$MSGIPP ViperFX $VIPVFX - v0.6.3?" "IPVFXS" "$IDVFX"
fi
fi
}

IPVFXS () {
IV4AFX=false
if [ $ASDK -le 30 ] && [ ! $ASDK -le 22 ]; then
UIP -s "Choose Version:" "$MSGVU ViperFX v2.5.0.5" "$MSGVD ViperFX v2.7.1.6"
if KEYCHOOSE; then V4AFX="2.5.0.5" IV4AFX=true; else V4AFX="2.7.1.6" IV4AFX=true; fi
elif [ $ASDK -le 22 ]; then
V4AFX="2.5.0.5" IV4AFX=true
elif [ $ASDK -ge 31 ] && [ $ASDK -le 33 ]; then
UIP -s "ViperFX v2.5.0.5" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
V4AFX="2.5.0.5" IV4AFX=true
else
UIP -s "ViperFX v2.7.2.1" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
V4AFX="2.7.2.1" IV4AFX=true
else
UIP -s "ViperFX v0.6.3" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
V4AFX="0.6.3" IV4AFX=true
fi
fi
fi
elif [ $ASDK -ge 34 ]; then
V4AFX="0.6.3" IV4AFX=true
fi
if $IV4AFX; then
UZTI "V4AFX" "ViperFX"
PTMFI "$IDVFX" "$IDAVFX" "$MIPSVLS $MIPSPA/ViPER4AndroidFX"
if $BOOTMODE; then
pm uninstall com.pittvandewitt.viperfx >$NULL
pm uninstall com.wstxda.viper4android >$NULL
pm install -r $LOCALTMPDIR/V4AFX/ViPER4AndroidFX-$V4AFX.apk >$NULL
else
cp -f $LOCALTMPDIR/V4AFX/ViPER4AndroidFX-$V4AFX.apk $IPMM/$MODID$MIPSPA/ViPER4AndroidFX/ViPER4AndroidFX.apk
APKPERM "$IPMM/$MODID$MIPSPA/ViPER4AndroidFX/ViPER4AndroidFX.apk" "$IPMM/$MODID$MIPSEP"; HAPWL "$IPMM/$MODID$MIPSES"; MKSCXML "$IPMM/$MODID$MIPSES"
fi
if [ $V4AFX = "0.6.3" ]; then
if [ $ARCH = "arm64" ]; then
mkdir -p $IPMM/$MODID$MIPSVLS64 $IPMM/$MODID$MIPSPA/ViPER4AndroidFX/lib/arm64
cp -f $LOCALTMPDIR/V4AFX/libv4a_re-arm64.so $IPMM/$MODID$MIPSVLS64/libv4a_re.so
cp -f $LOCALTMPDIR/V4AFX/libHiddenApiBypass-arm64.so $IPMM/$MODID$MIPSPA/ViPER4AndroidFX/lib/arm64/libHiddenApiBypass.so
fi
mkdir -p $IPMM/$MODID$MIPSPA/ViPER4AndroidFX/lib/arm
cp -f $LOCALTMPDIR/V4AFX/libv4a_re-arm.so $IPMM/$MODID$MIPSVLS/libv4a_re.so
cp -f $LOCALTMPDIR/V4AFX/libHiddenApiBypass-arm.so $IPMM/$MODID$MIPSPA/ViPER4AndroidFX/lib/arm/libHiddenApiBypass.so
else
cp -f $LOCALTMPDIR/V4AFX/libv4a_fx_ics.so $IPMM/$MODID$MIPSVLS
cp -f $LOCALTMPDIR/V4AFX/libstdc++.so $IPMM/$MODID$MIPSVL
fi
if [ $ASDK -ge 31 ] && [ $ASDK -le 33 ] && [ $V4AFX = "2.7.2.1" ] && [ $V4AFX != "0.6.3" ]; then
mkdir -p $IPMM/$MODID$MIPPSO
cp -f $LOCALTMPDIR/V4AFX/ViPER4AndroidFX-Black-Blue.apk $IPMM/$MODID$MIPPSO
fi
MMPR -v "V4AFX" "$VIPVFX" "$VCIPVFX" "V4AFX v$V4AFX Is An Audio Enhancing Software To Provide Everyone With A Better Audio Experience"
echo -e "tunnel.decode=false\nlpa.use-stagefright=false\nlpa.releaselock=false\nlpa.decode=false\nro.control_privapp_permissions=log" > $IPMM/$MODID/system.prop
$ECHO "#!$MIPSB/sh
(
[ -d $IPDADB/$IDAML/$MODID ] && DIR=$IPDADB/$IDAML/$MODID || DIR=$IPMM/$MODID
for i in \$(find \$DIR/system/odm -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\"); do
j=\"\$(echo \$i | sed \"s|\$DIR/system||\")\"
mount -o bind \$i \$j
done
killall -q audioserver
)&" > $IPMM/$MODID/service.sh
MSSERVICE -uc "if [ ! -d \"$IPMM/$MODID\" ]; then pm uninstall com.pittvandewitt.viperfx; pm uninstall com.wstxda.viper4android; rm -rf $SERVICED/V4AFX.sh; break; else break; fi" "V4AFX"
ALLLIST -mma; REPLACER -f "$MMAUDIOFX"
UIP "$MSGPNF"
for FAECONFXML in $AECONFXML; do
UIP "Found $(basename $FAECONFXML)" "$MSGPMIP"
PSF="$IPMM/$MODID$FAECONFXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FAECONFXML $PSF
PSXCF -osp "$PSF"
if [ $V4AFX = "0.6.3" ]; then
PSXCF -aae "v4a_re" "v4a_standard_re" "libv4a_re.so" "90380da3-8536-4744-a6a3-5731970e640f"
else
PSXCF -aae "v4a_fx" "v4a_standard_fx" "libv4a_fx_ics.so" "41d3c987-e6cf-11e3-a88a-11aba5d5c51b"
fi
UIP "$MSGFFAP"
done
MOVERPATH
SETPERM -mm -msg
WCANFTP "-sl -ehap -alcf -aml"
fi
}

IPVFXDAK () {
UCSA "$MSGIP DDC & Kernel $VIPVFXDAK For ViperFX?" "IPVFXDAKS" "$IDVFXDAK"
}

IPVFXDAKS () {
UZTI "V4AFXDAK" "DDC & Kernel For ViperFX"
mkdir -p $STORAGE/Android/data/com.pittvandewitt.viperfx/files $STORAGE/ViPER4Android $STORAGE/Documents/ViPER4Android
cp -rf $LOCALTMPDIR/V4AFXDAK/* $STORAGE/Android/data/com.pittvandewitt.viperfx/files
cp -rf $LOCALTMPDIR/V4AFXDAK/* $STORAGE/ViPER4Android
cp -rf $LOCALTMPDIR/V4AFXDAK/* $STORAGE/Documents/ViPER4Android
if $MAGISK; then
PTMFI "$IDVFXDAK" "$IDAVFXDAK"
MSSERVICE -u "rm -rf $STORAGE/Android/data/com.pittvandewitt.viperfx $STORAGE/ViPER4Android $STORAGE/Documents/ViPER4Android" "V4AFXP"
MMPR -v "DDC & Kernel For ViperFX" "$VIPVFXDAK" "$VCIPVFXDAK" "DDC & Kernel For ViperFX"
fi
SETPERM -mm -msg
}

IPDA () {
if $MAGISK && [ $ASDK -ge 28 ] && [ $SYSTEMRO != true ] && $SNAPSOC; then
UCSA -eno "$MSGIPP Dolby Atmos $VIPDA?" "IPDAS" "$IDDA"
fi
}

IPDAS () {
UIP -s "Use Virtualizer?" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGNIS"
KEYCHOOSE && DAVEV=true || DAVEV=false
UIP -s "Use Volume Leveler Boost?" "$MSGVU Yes" "$MSGVD No $MSGRI $MSGNIS"
KEYCHOOSE && DAVLEV=true || DAVLEV=false
UIP -s "Use Deeper Bass GEQ Frequency?" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGEEFTC"
KEYCHOOSE && DBGEQ=true || DBGEQ=false
UZTI "DolbyAtmos" "Dolby Atmos"
PTMFI "$IDDA" "dolbyatmos DolbyAudio MotoDolby SoundEnhancement MiSound AudioFxMoto MotoWaves"
MMPR -v "Dolby Atmos" "$VIPDA" "$VCIPDA" "Dolby Atmos - Is An Audio Enhancing Software To Provide Everyone With A Better Audio Experience"
echo "allow system_server system_file file write
create { system_lib_file vendor_file vendor_configs_file vendor_data_file vendor_media_data_file hal_dms_default_exec }
allow { system_file system_lib_file vendor_file vendor_configs_file vendor_data_file vendor_media_data_file hal_dms_default_exec } labeledfs filesystem associate
allow init { system_file system_lib_file vendor_file vendor_configs_file vendor_data_file vendor_media_data_file } { dir file } relabelfrom
allow init hal_dms_default_exec file relabelfrom
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app hal_audio_default mtk_hal_audio audioserver } { default_android_hwservice hal_dms_hwservice dms_hwservice } hwservice_manager find
allow daxservice_app { permission_checker_service game_service netstats_service content_capture_service } service_manager find
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } hal_dms_default binder call
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } { hal_dms_default_exec vendor_displayfeature_prop } file getattr
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } bluetooth_prop file map
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } { vendor_default_prop qemu_hw_prop } file { read open getattr }
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } { debug_mtk_gpud_prop audio_config_prop } file { read open getattr map }
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } vendor_displayfeature_prop file read
allow zygote { device unlabeled } file write
allow zygote zygote_tmpfs file { create open }
allow init system_file file mounton
allow daxservice_app default_prop file read
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } device chr_file { read write open getattr ioctl }
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } migt_file dir search
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } system_file dir write
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } zygote unix_stream_socket getopt
allow system_app system_app capability { dac_read_search dac_override sys_resource }
allow platform_app platform_app capability { dac_read_search dac_override sys_resource }
allow priv_app priv_app capability { dac_read_search dac_override sys_resource }
allow untrusted_app_29 untrusted_app_29 capability { dac_read_search dac_override sys_resource }
allow untrusted_app_27 untrusted_app_27 capability { dac_read_search dac_override sys_resource }
allow untrusted_app untrusted_app capability { dac_read_search dac_override sys_resource }
allow { hal_audio_default mtk_hal_audio audioserver } system_suspend_hwservice hwservice_manager find
allow { hal_audio_default mtk_hal_audio audioserver } hal_system_suspend_service service_manager find
allow { hal_audio_default mtk_hal_audio audioserver } { default_prop boottime_prop audio_prop } file { read open getattr map }
allow { hal_audio_default mtk_hal_audio audioserver } { mnt_vendor_file system_prop } file { read open getattr }
allow { hal_audio_default mtk_hal_audio audioserver } radio_prop file { read open getattr map }
allow { hal_audio_default mtk_hal_audio audioserver } sysfs_wake_lock file { write open }
allow { hal_audio_default mtk_hal_audio audioserver } vendor_default_prop file { read open getattr }
allow { hal_audio_default mtk_hal_audio audioserver } { sysfs sysfs_boot_mode } file { read open }
allow { hal_audio_default mtk_hal_audio audioserver } system_prop file map
allow { hal_audio_default mtk_hal_audio audioserver } vendor_pd_locater_dbg_prop file read
allow { hal_audio_default mtk_hal_audio audioserver } sysfs_net dir search
allow { hal_audio_default mtk_hal_audio audioserver } { sysfs_net sysfs } dir { read open }
allow { hal_audio_default mtk_hal_audio audioserver } logd_socket sock_file write
allow { hal_audio_default mtk_hal_audio audioserver } logd unix_stream_socket connectto
allow { hal_audio_default mtk_hal_audio audioserver } { diag_device vendor_diag_device } chr_file { read write open ioctl getattr }
allow { hal_audio_default mtk_hal_audio audioserver } device chr_file { read write }
allow { hal_audio_default mtk_hal_audio audioserver } system_suspend binder call
allow { hal_audio_default mtk_hal_audio audioserver } { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } fifo_file write
allow hal_audio_default hal_audio_default capability2 block_suspend
allow mtk_hal_audio mtk_hal_audio capability2 block_suspend
allow audioserver audioserver capability2 block_suspend
allow hal_audio_default hal_audio_default capability { sys_nice dac_override sys_admin dac_read_search }
allow mtk_hal_audio mtk_hal_audio capability { sys_nice dac_override sys_admin dac_read_search }
allow audioserver audioserver capability { sys_nice dac_override sys_admin dac_read_search }
allow hal_audio_default hal_audio_default tcp_socket create
allow mtk_hal_audio mtk_hal_audio tcp_socket create
allow audioserver audioserver tcp_socket create" > $IPMM/$MODID/sepolicy.rule
echo "#!$MIPSB/sh

resetprop -n ro.audio.ignore_effects false
resetprop -n ro.feature.dolby_enable true
resetprop -n ro.dolby.music_stream false
resetprop -n vendor.audio.dolby.ds2.enabled false
resetprop -n vendor.audio.dolby.ds2.hardbypass false

STOPSERVICE=\"dms-hal-1-0\" \"dms-hal-2-0\"
for NAME in \$STOPSERVICE; do
if [ \"\`getprop init.svc.$NAME\`\" == running ]\
|| [ \"\`getprop init.svc.$NAME\`\" == restarting ]; then
stop \$NAME
fi
done

FILE=\`realpath /vendor\`/bin/hw/vendor.dolby.hardware.dms@1.0-service
killall \$FILE
\$FILE &
PID=\`pidof \$FILE\`

GPSF=\`getprop audio.rotation\`
if [ \"\$GPSF\" == 1 ]; then
resetprop ro.audio.monitorRotation true
fi

killall com.dolby.daxservice com.dolby.daxappui com.dolby.atmos
killall vendor.qti.hardware.vibrator.service
killall vendor.qti.hardware.vibrator.service.oneplus9
killall vendor.qti.hardware.vibrator.service.oplus
killall android.hardware.camera.provider@2.4-service_64
killall android.hardware.usb@1.0-service
killall android.hardware.usb@1.0-service.basic
killall android.hardware.lights-service.xiaomi_mithorium
killall vendor.samsung.hardware.light-service
killall vendor.qti.hardware.lights.service
killall android.hardware.health-service.qti
SERVERPID=\$(pidof audioserver); [ \"\$SERVERPID\" ] && kill \$SERVERPID" > $IPMM/$MODID/service.sh
echo "#!$MIPSB/sh
DIR=/data/vendor/dolby
mkdir -p \$DIR
chmod 0770 \$DIR
chown 1013.1013 \$DIR
chcon u:object_r:vendor_data_file:s0 \$DIR
if [ -d \"/debug_ramdisk/.magisk/mirror\" ]; then if [ -d \"/debug_ramdisk/.magisk/mirror/system\" ]; then MAGISKMP=\"/debug_ramdisk/.magisk/mirror\"; else MAGISKMP=\"\"; fi; else MAGISKMP=\"\$(realpath /dev/*/.magisk/mirror)\"; fi
OPMANIFESTXML=\$MAGISKMP$MIPSEV/manifest.xml
PMANIFESTXML=$IPMM/$MODID$MIPSEV/manifest.xml
rm -f \$PMANIFESTXML
FMANIFESTXML=\"\$MAGISKMP/*/etc/vintf/manifest.xml \$MAGISKMP/*/*/etc/vintf/manifest.xml /*/etc/vintf/manifest.xml /*/*/etc/vintf/manifest.xml \$MAGISKMP/*/etc/vintf/manifest/*.xml \$MAGISKMP/*/*/etc/vintf/manifest/*.xml /*/etc/vintf/manifest/*.xml /*/*/etc/vintf/manifest/*.xml\"
if ! getprop | grep -Eq \"dolby.skip.*\]: \[1\"\\
&& ! grep -A2 vendor.dolby.hardware.dms \$FMANIFESTXML | grep -Eq 1.0; then
cp -f \$OPMANIFESTXML \$PMANIFESTXML
if [ -f \$PMANIFESTXML ]; then
sed -i '/<manifest/a\\
    <hal format=\"hidl\">\\
        <name>vendor.dolby.hardware.dms</name>\\
        <transport>hwbinder</transport>\\
        <fqname>@1.0::IDms/default</fqname>\\
    </hal>' \$PMANIFESTXML
mount -o bind \$PMANIFESTXML $MIPSEV/manifest.xml
killall hwservicemanager
fi
fi" > $IPMM/$MODID/post-fs-data.sh
echo "ro.control_privapp_permissions=log" > $IPMM/$MODID/system.prop

PROCL="alarm_helper dirac dlb_alarm_listener dlb_music_listener dlb_notification_listener dlb_ring_listener dlb_system_listener dtsaudio fens lmfv ma_alarm_helper ma_music_helper ma_notification_helper ma_ring_helper ma_system_helper ma_voice_helper music_helper notification_helper ring_helper sa3d voice_helper"

if FINDER "$AECONFXML"; then
GPSF=`getprop stream.mode`
UIP "$MSGPNF"
for FAECONFXML in $AECONFXML; do
UIP "Found $(basename $FAECONFXML)" "$MSGPMIP"
PSF="$IPMM/$MODID$FAECONFXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FAECONFXML $PSF
case $PSF in
*.conf) for PROC in "$PROCL"; do sed -i "/^        $PROC {/ {;N s/        $PROC {\n        }//}" $PSF; sed -i "/$PROC { }/d;/$PROC {}/d" $PSF; done
if ! grep -Eq '^output_session_processing {' $PSF; then
sed -i '$a\
output_session_processing {\
    music {\
    }\
    ring {\
    }\
    alarm {\
    }\
    system {\
    }\
    voice_call {\
    }\
    notification {\
    }\
    bluetooth_sco {\
    }\
    dtmf {\
    }\
    enforced_audible {\
    }\
    accessibility {\
    }\
    tts {\
    }\
    assistant {\
    }\
    call_assistant {\
    }\
    patch {\
    }\
    rerouting {\
    }\
}\' $PSF
else
for OSP in rerouting patch call_assistant assistant tts accessibility enforced_audible dtmf bluetooth_sco notification voice_call system alarm ring music; do
if ! grep -Eq '^    $OSP {' $PSF; then
sed -i "/^output_session_processing {/a\    $OSP {\n    }" $PSF
fi
done
fi;;
*.xml) for PROC in "$PROCL"; do sed -i "/<apply effect=\"$PROC\"\/>/d;/<apply effect=\"$PROC\" \/>/d" $PSF; done
if ! grep -Eq '<postprocess>' $PSF || grep -Eq '<!-- Audio post processor' $PSF; then
sed -i '/<\/effects>/a\
    <postprocess>\
        <stream type="music">\
        <\/stream>\
        <stream type="ring">\
        <\/stream>\
        <stream type="alarm">\
        <\/stream>\
        <stream type="system">\
        <\/stream>\
        <stream type="voice_call">\
        <\/stream>\
        <stream type="notification">\
        <\/stream>\
        <stream type="bluetooth_sco">\
        <\/stream>\
        <stream type="dtmf">\
        <\/stream>\
        <stream type="enforced_audible">\
        <\/stream>\
        <stream type="accessibility">\
        <\/stream>\
        <stream type="tts">\
        <\/stream>\
        <stream type="assistant">\
        <\/stream>\
        <stream type="call_assistant">\
        <\/stream>\
        <stream type="patch">\
        <\/stream>\
        <stream type="rerouting">\
        <\/stream>\
    <\/postprocess>' $PSF
else
for OSP in rerouting patch call_assistant assistant tts accessibility enforced_audible dtmf bluetooth_sco notification voice_call system alarm ring music; do
if ! grep -Eq '<stream type="$OSP">' $PSF; then
case $OSP in
notification | alarm | ring | music) if grep -Eq '<!-- YunMang.Xiao@PSW.MM.Dolby' $PSF || grep -Eq '<!-- WuHao@MULTIMEDIA.AUDIOSERVER.EFFECT' $PSF; then sed -i "/<postprocess>/a\        <stream type=\"$OSP\">\n        <\/stream>" $PSF; fi;;
*) sed -i "/<postprocess>/a\        <stream type=\"$OSP\">\n        <\/stream>" $PSF;;
esac
fi
done
fi;;
esac
if ! getprop | grep -Eq "disable.dirac\]: \[0"; then
PSXCF -rae "libdiraceffect.so dirac_gef 3799d6d1-22c5-43c3-b3ec-d664cf8d2f0d dirac_afm 743539f8-1076-451f-8395-84acfab0fac7 dirac_controller 128b9ba2-d0c9-47c6-aff3-9f761cd0e228 libdirac.so b437f4de-da28-449b-9673-667f8b9643fe dirac_music b437f4de-da28-449b-9673-667f8b964304 dirac e069d9e0-8329-11df-9168-0002a5d5c51b"
fi
if ! getprop | grep -Eq "disable.misoundfx\]: \[0"; then
PSXCF -rae "libmisoundfx.so misoundfx 5b8e36a5-144a-4c38-b1d7-0002a5d5c51b"
fi
PSXCF -rae "dolbyatmos libatmos.so 74697567-7261-6564-6864-65726f206678"
PSXCF -aae "dolbyatmos" "dolbyatmos" "libatmos.so" "74697567-7261-6564-6864-65726f206678"
UIP "$MSGFFAP"
done
fi

if FINDER "$MCXML"; then
UIP "$MSGPNF"
for FMCXML in $MCXML; do
UIP "Found $(basename $FMCXML)" "$MSGPMIP"
PSF="$IPMM/$MODID$FMCXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FMCXML $PSF
sed -i '/<MediaCodecs>/a\
    <Include href="media_codecs_dolby_audio.xml"/>' $PSF
UIP "$MSGFFAP"
done
fi

if FINDER "$AIPAOPCONF" && ! getprop | grep -Eq "disable.raw\]: \[0"; then
UIP "Disabling Ultra Low Latency Playback (RAW)"
echo "if [ -d \"/debug_ramdisk/.magisk/mirror\" ]; then if [ -d \"/debug_ramdisk/.magisk/mirror/system\" ]; then MAGISKMP=\"/debug_ramdisk/.magisk/mirror\"; else MAGISKMP=\"\"; fi; else MAGISKMP=\"\$(realpath /dev/*/.magisk/mirror)\"; fi
AIPAOPCONF=\"\$(find /vendor -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
PAIPAOPCONF=false
for ALLMOD in \$(ls $IPMM); do
ALLMODAIPAOPCONF=\"\$(find $IPMM/\$ALLMOD -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
if [ ! -f $IPMM/\$ALLMOD/disable ]; then
for FAIPAOPCONF in \$ALLMODAIPAOPCONF; do
if [ -f \$FAIPAOPCONF ] && [ ! -f \$FAIPAOPCONF.bak ]; then
PAIPAOPCONF=true
cp -f \$FAIPAOPCONF \$FAIPAOPCONF.bak
sed -i 's/RAW/NONE/g;s/,raw//g' \$FAIPAOPCONF
elif [ -f \$FAIPAOPCONF ] && [ -f \$FAIPAOPCONF.bak ]; then
PAIPAOPCONF=true
sed -i 's/RAW/NONE/g;s/,raw//g' \$FAIPAOPCONF
fi
done
fi
if [ -d $IPMM/$IDAML ] && [ ! -f $IPMM/$IDAML/disable ]; then
RMAIPAOPCONF=\"\$(find $IPMM/$MODID -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
rm -rf \$RMAIPAOPCONF
fi
done
if [ \$PAIPAOPCONF != true ]; then
for FAIPAOPCONF in \$AIPAOPCONF; do
PSF=\"$IPMM/$MODID\$FAIPAOPCONF\"
mkdir -p \`dirname \$PSF\`
cp -f \$MAGISKMP\$FAIPAOPCONF \$PSF
sed -i 's/RAW/NONE/g;s/,raw//g' \$PSF
mkdir -p $IPMM/$MODID$MIPSV; cp -rf $IPMM/$MODID/vendor/* $IPMM/$MODID$MIPSV; rm -rf $IPMM/$MODID/vendor
done
fi" >> $IPMM/$MODID/post-fs-data.sh
echo "#!$MIPSB/sh
if [ ! -d $IPMM/$MODID ] || [ -f $IPMM/$MODID/disable ] || [ -f $IPMM/$MODID/remove ]; then
AIPAOPCONF=\"\$(find $IPMM -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
for FAIPAOPCONF in \$AIPAOPCONF; do
if [ -f \$FAIPAOPCONF.bak ]; then
cp -f \$FAIPAOPCONF.bak \$FAIPAOPCONF
rm -f \$FAIPAOPCONF.bak
if [ ! -f $IPMM/$IDSAQ/disable ] && [ -f $IPMM/$IDSAQ/post-fs-data.sh ]; then sh $IPMM/$IDSAQ/post-fs-data.sh; fi
fi
done
fi
if [ -d \"/debug_ramdisk/.magisk/mirror\" ]; then if [ -d \"/debug_ramdisk/.magisk/mirror/system\" ]; then MAGISKMP=\"/debug_ramdisk/.magisk/mirror\"; else MAGISKMP=\"\"; fi; else MAGISKMP=\"\$(realpath /dev/*/.magisk/mirror)\"; fi
if [ ! -d $IPMM/$MODID ] || [ -f $IPMM/$MODID/remove ]; then
mount -o rw,remount \$MAGISKMP/vendor
cp -f \$MAGISKMP/vendor/etc/vintf/manifest.xml.bak \$MAGISKMP/vendor/etc/vintf/manifest.xml
rm -f \$MAGISKMP/vendor/etc/vintf/manifest.xml.bak $POSTFSDATAD/$MODID.sh
else
mount -o rw,remount \$MAGISKMP/vendor
if [ ! -f \$MAGISKMP/vendor/etc/vintf/manifest.xml.bak ]; then
if ! getprop | grep -Eq \"dolby.skip.*\]: \[1\"\\
&& ! grep -A2 vendor.dolby.hardware.dms \$MAGISKMP/vendor/etc/vintf/manifest.xml | grep -Eq 1.0; then
cp -f \$MAGISKMP/vendor/etc/vintf/manifest.xml \$MAGISKMP/vendor/etc/vintf/manifest.xml.bak
sed -i '/<manifest/a\\
    <hal format=\"hidl\">\\
        <name>vendor.dolby.hardware.dms</name>\\
        <transport>hwbinder</transport>\\
        <fqname>@1.0::IDms/default</fqname>\\
    </hal>' \$MAGISKMP/vendor/etc/vintf/manifest.xml
killall hwservicemanager
reboot
fi
fi
fi" > $POSTFSDATAD/$MODID.sh
chmod 0777 $POSTFSDATAD/$MODID.sh
else
UIP "Not Disabling Ultra Low Latency Playback (RAW)"
fi

if [ "$ARCH" != "arm64" ]; then
cp -rf $LOCALTMPDIR/DolbyAtmos/system_32/* $LOCALTMPDIR/DolbyAtmos/system
rm -rf `find $LOCALTMPDIR/DolbyAtmos -type d -name *64`
fi

DALIB="$(find $ALLDP -type f -name "libhidltransport.so" -o -name "libhwbinder.so")"
FINDER "$DALIB" && : || cp -rf $LOCALTMPDIR/DolbyAtmos/system_support/* $LOCALTMPDIR/DolbyAtmos/system

if [ -f $IPVEV/manifest.xml ]; then
UIP "$MSGPNF"
if $BOOTMODE; then mount -o rw,remount $MAGISKMP/vendor; DAPATH=$MAGISKMP/vendor/etc/vintf/manifest.xml; else DAPATH=$IPVEV/manifest.xml; fi
if ! getprop | grep -Eq "dolby.skip.*\]: \[1"\
&& ! grep -A2 vendor.dolby.hardware.dms $DAPATH | grep -Eq 1.0; then
UIP "Found $(basename $DAPATH)" "$MSGPMIP"
cp -f $DAPATH $DAPATH.bak
sed -i '/<manifest/a\
    <hal format=\"hidl\">\
        <name>vendor.dolby.hardware.dms</name>\
        <transport>hwbinder</transport>\
        <fqname>@1.0::IDms/default</fqname>\
    </hal>' $DAPATH
UIP "$MSGFFAP"
else
UIP "Found $(basename $DAPATH)" "No Needed Patching"
fi
fi

for FDASO in inlibstagefrightdolby.so libstagefright_soft_ddpdec.so; do
if [ -f $MAGISKMP$IPVL/$FDASO ]; then
UIP "Found $IPVL/$FDASO" "$MSGRMIP"
rm -f $LOCALTMPDIR/DolbyAtmos$MIPSVL/$FDASO
fi
if [ -f $MAGISKMP$IPVL64/$FDASO ]; then
UIP "Found $IPVL64/$FDASO" "$MSGRMIP"
rm -f $LOCALTMPDIR/DolbyAtmos$MIPSVL64/$FDASO
fi
done

PSF=$LOCALTMPDIR/DolbyAtmos$MIPSVED/dap-default.xml
if $DAVEV; then
UIP "Changing All Virtualizer Value To True"
sed -i 's|virtualizer-enable value="false"|virtualizer-enable value="true"|g' $PSF
else
UIP "Changing All Virtualizer Value To False"
sed -i 's|virtualizer-enable value="true"|virtualizer-enable value="false"|g' $PSF
fi
if $DAVLEV; then
UIP "Changing All Volume Leveler Boost Value To True"
sed -i 's|volume-leveler-enable value="false"|volume-leveler-enable value="true"|g' $PSF
else
UIP "Changing All Volume Leveler Boost Value To False"
sed -i 's|volume-leveler-enable value="true"|volume-leveler-enable value="false"|g' $PSF
fi
if $DBGEQ; then
UIP "Using Deeper Bass GEQ Frequency"
sed -i 's|frequency="47"|frequency="0"|g' $PSF
sed -i 's|frequency="141"|frequency="47"|g' $PSF
sed -i 's|frequency="234"|frequency="141"|g' $PSF
sed -i 's|frequency="328"|frequency="234"|g' $PSF
sed -i 's|frequency="469"|frequency="328"|g' $PSF
sed -i 's|frequency="656"|frequency="469"|g' $PSF
sed -i 's|frequency="844"|frequency="656"|g' $PSF
sed -i 's|frequency="1031"|frequency="844"|g' $PSF
sed -i 's|frequency="1313"|frequency="1031"|g' $PSF
sed -i 's|frequency="1688"|frequency="1313"|g' $PSF
sed -i 's|frequency="2250"|frequency="1688"|g' $PSF
sed -i 's|frequency="3000"|frequency="2250"|g' $PSF
sed -i 's|frequency="3750"|frequency="3000"|g' $PSF
sed -i 's|frequency="4688"|frequency="3750"|g' $PSF
sed -i 's|frequency="5813"|frequency="4688"|g' $PSF
sed -i 's|frequency="7125"|frequency="5813"|g' $PSF
sed -i 's|frequency="9000"|frequency="7125"|g' $PSF
sed -i 's|frequency="11250"|frequency="9000"|g' $PSF
sed -i 's|frequency="13875"|frequency="11250"|g' $PSF
sed -i 's|frequency="19688"|frequency="13875"|g' $PSF
fi

APKPERM "$LOCALTMPDIR/$MODID$MIPSPA/DAXUI/DAXUI.apk" "$LOCALTMPDIR/$MODID$MIPSEP"; HAPWL "$LOCALTMPDIR/$MODID$MIPSES"; MKSCXML "$LOCALTMPDIR/$MODID$MIPSES"
APKPERM "$LOCALTMPDIR/$MODID$MIPSPA/DAXService/DAXService.apk" "$LOCALTMPDIR/$MODID$MIPSEP"; HAPWL "$LOCALTMPDIR/$MODID$MIPSES"; MKSCXML "$LOCALTMPDIR/$MODID$MIPSES"

echo -e "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<permissions>\n    <library name=\"dolby_dax\"\n        file=\"/system/framework/dolby_dax.jar\"/>\n</permissions>" > $LOCALTMPDIR/$MODID$MIPSEP/dolby_dax.xml
ALLLIST -mma; REPLACER -f "$MMAUDIOFX DaxUI MotoDolbyDax3 MotoDolbyV3 OPSoundTuner daxService"
cp -rf $LOCALTMPDIR/DolbyAtmos/system $IPMM/$MODID
REPLACER -a "dumpstate" "$IPSB"
REPLACER -a "vendor.dolby.hardware.dms@2.0-service" "$IPVBHW"
if $MIUI || [ $ASDK -le 30 ]; then
mkdir -p $IPMM/$MODID$MIPPSO
cp -f $LOCALTMPDIR/DolbyAtmos/DAXUI-ForceColor.apk $IPMM/$MODID$MIPPSO
fi
MOVERPATH
SETPERM -mm
FILE=`find $IPMM/$MODID$MIPSVB -type f`
for FILES in $FILE; do chmod 0755 $FILES; chown 0.2000 $FILES; done
chmod 0751 $IPMM/$MODID$MIPSVB $IPMM/$MODID$MIPSVBHW
DIR=`find $IPMM/$MODID$MIPSV -type d`
for DIRS in $DIR; do chown 0.2000 $DIRS; done
UIP "$MSGDI"
WCANFTP "-sl -alcf -aml"
}

IPAIST () {
if $MAGISK && $SNAPSOC; then
UCSA -eno "$MSGIPP AIST $VIPAIST?" "IPAISTS" "$IDAIST"
fi
}

IPAISTS () {
STEP1=false STEP2=false STEP3=false
if FINDER "$MPATHS"; then
UIP -s "Boost Sound Volume Levels?" "This Item Boosting Sound Volume Levels" "$MSGVU Yes" "$MSGVD No $MSGNIS"
KEYCHOOSE && STEP1=true
UIP -s "Boost Microphones Volume Levels?" "This Item Boosting Microphones Volume Levels" "$MSGVU Yes" "$MSGVD No $MSGNIS"
KEYCHOOSE && STEP2=true
fi
if FINDER "$MCGAX"; then
UIP -s "Patch Media Codecs Files?" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGEEFTC"
KEYCHOOSE && STEP3=true
fi
UIP "$MSGIAM AIST"
$HIRES && UIP "Device With Support Hi-Res" || UIP "Device Without Support Hi-Res"
PTMFI "$IDAIST" "NLSound"
MMPR -vcs "AIST For Devices Based On Qualcomm" "$VIPAIST" "$VCIPAIST" "Oleg_Skalskiy" "This Module Improving Audio Quality" "https://t.me/AIST_FLOOD"
echo "# GENERAL PARAMETERS
ro.input.noresample=1
ro.output.noresample=1
af.thread.throttle=0
af.fast_track_multiplier=0
af.fast_downmix=0
audio.ull_record_period_multiplier=1
vendor.audio.ull_record_period_multiplier=1
audio_hal.period_multiplier=2
vendor.audio_hal.period_multiplier=2
audio.adm.phaseshift.ms=0
vendor.audio.adm.phaseshift.ms=0
ro.af.client_heap_size_kbyte=10240
audio.hal.boot.timeout.ms=3500
vendor.audio.hal.boot.timeout.ms=3500
audio.truehd.buffer.size.kb=8
vendor.audio.truehd.buffer.size.kb=8
audio.offload.buffer.size.kb=96
vendor.audio.offload.buffer.size.kb=96
audio.native.dsd.buffer.size.kb=64
vendor.audio.native.dsd.buffer.size.kb=64
audio.sys.noisy.broadcast.delay=50
vendor.audio.sys.noisy.broadcast.delay=50
audio.sys.offload.pstimeout.secs=0
vendor.audio.sys.offload.pstimeout.secs=0
media.stagefright.enable-rtsp=true
media.stagefright.enable-tsp=true
media.stagefright.enable-record=true
media.stagefright.enable-meta=true
media.stagefright.enable-player=true
media.stagefright.enable-http=true
media.stagefright.enable-aac=true
media.stagefright.enable-qcp=true
media.stagefright.enable-fma2dp=true
media.stagefright.enable-scan=true
media.stagefright.thumbnail.prefer_hw_codecs=true
media.stagefright.audio.deep=true
media.stagefright.audio.direct=true
media.stagefright.use-awesome=true
media.stagefright.use-nu=true
media.recorder.show_manufacturer_and_model=true
media.aac_51_output_enabled=true
mm.enable.smoothstreaming=false
mm.enable.sec.smoothstreaming=false
mm.enable.vsync.render=0
vendor.mm.enable.qcom_parser=16777215
persist.mm.enable.prefetch=true
vendor.audio.offload.multiaac.enable=true
lpa.encode=false
lpa30.encode=false
lpa.decode=false
lpa30.decode=false
lpa.use-stagefright=false
lpa.releaselock=false
audio.lowpower=false
vendor.audio.lowpower=false
ro.vendor.audio.lowpower=false
vendor.audio.context.manager=true
vendor.audio.caretaker.at=false
vendor.audio.AT.blocking=false
vendor.audio.usb.super_hifi=false
vendor.audio.spkcal.copy.inhal=false
vendor.audio.compress_capture.enabled=false
vendor.audio.compress_capture.aac=false
vendor.audio.compress_capture.aac.cut_off_freq=-1
vendor.audio.rt.mode=false
vendor.audio.rt.mode.onlyfast=false
vendor.audio.cpu.sched=false
vendor.audio.cpu.sched.onlyfast=false
vendor.audio.ull.rt.prio=false
vendor.audio.ull.cpu.affinity=false
vendor.audio.ull.playback.support=false
vendor.audio.dolby.control.support=true
vendor.audio.dolby.control.tunning.by.volume.support=false
vendor.audio.offload.playspeed=false
vendor.audio.camera.unsupport_low_latency=true
persist.audio.format.24bit=true
persist.vendor.audio.format.24bit=true
persist.audio.format.32bit=true
persist.vendor.audio.format.32bit=true
persist.audio.format.float=true
persist.vendor.audio.format.float=true
persist.vendor.audio.spv3.enable=false
persist.vendor.audio.spv4.enable=false
persist.vendor.audio.spv5.enable=false
persist.vendor.audio.delta.refresh=false
persist.vendor.audio.ll_playback_bargein=false
persist.vendor.audio.ozo.codec.enable=true
persist.vendor.audio.spf_restart=true
persist.vendor.audio.aanc.enable=true
persist.vendor.audio.zoom.scheme=true
persist.vendor.audio.cca.enabled=true
persist.vendor.audio.induce_crash=false
persist.vendor.audio.fpsop.game.effect=false
persist.vendor.audio.cinema.support=false
persist.vendor.audio.scheme.acdb=false
persist.vendor.adapt.sampler=false
persist.sys.phh.disable_soundvolume_effect=1
persist.sys.phh.disable_audio_effects=0
persist.sys.phh.caf.audio_policy=0
persist.sys.phh.disable_a2dp_offload=false
persist.sys.phh.ims.caf=true
ro.audio.ignore_effects=false
audio.sys.mute.latency.factor=0
vendor.audio.sys.mute.latency.factor=0
media.resolution.limit.16bit=
media.resolution.limit.24bit=
media.resolution.limit.32bit=
media.resolution.limit.64bit=
ro.config.volume_not_share=false
ro.vendor.audio.eq.reset=true
ro.vendor.audio.dump.mixer=false
ro.audio.offload_wakelock=false
ro.audio.playbackScene=false
ro.vendor.audio.playbackScene=false
ro.audio.headtracking_enabled=true
ro.vendor.audio.recording.hd=true
ro.vendor.audio.sos=true
ro.vendor.audio.voice.change.support=true
ro.vendor.audio.voice.change.youme.support=true
ro.vendor.audio.spk.stereo=true
ro.vendor.audio.spk.clean=true
ro.vendor.audio.vocal.support=true
ro.vendor.audio.sfx.earadj=false
ro.vendor.audio.sfx.speaker=true
ro.vendor.audio.sfx.spk.movie=true
ro.vendor.audio.sfx.harmankardon=true
ro.vendor.audio.sfx.scenario=true
ro.vendor.audio.scenario.support=true
persist.vendor.audio.auto.scenario=false
ro.vendor.audio.gain.support=true
ro.vendor.audio.camera.bt.record.support=true
ro.vendor.audio.ns.support=false
ro.vendor.audio.enhance.support=false
ro.audio.monitorRotation=true
ro.vendor.audio.monitorRotation=true
ro.vendor.audio.game.mode=true
ro.vendor.audio.game.vibrate=true
ro.vendor.audio.game.effect=false
ro.vendor.audio.soundtrigger.lowpower=false
ro.vendor.audio.soundtrigger.adjconf=false
ro.vendor.audio.soundtrigger.split_training=0
ro.vendor.soundtrigger.dfs.support=0
ro.vendor.audio.soundtrigger.sva-5.0=1
ro.vendor.audio.soundtrigger.sva-6.0=1
ro.vendor.audio.soundtrigger.sva-7.0=1
ro.vendor.audio.soundtrigger.snr=-100
ro.vendor.audio.soundtrigger.snr.enable=0
ro.vendor.audio.zerodata.upload=true
ro.vendor.audio.playbackcapture.screen=true
ro.vendor.audio.meeting.mode=false
ro.vendor.audio.micalltransfer=true
ro.vendor.audio.misound.dynamic.support=true
ro.vendor.audio.soundfx.usb=true
ro.vendor.audio.ring.filter=true
ro.vendor.audio.feature.fade=true
ro.vendor.audio.camera.loopback.support=true
ro.vendor.audio.support.sound.id=true
ro.vendor.standard.video.enable=true
ro.vendor.audio.videobox.switch=true
ro.vendor.audio.multiroute=true
ro.vendor.audio.multichannel.5point1.headset=false
ro.vendor.audio.multichannel.5point1=false
ro.vendor.audio.notify5Point1InUse=false
ro.vendor.audio.multi.channel=false
ro.vendor.audio.dolby.eq.half=false
ro.vendor.audio.dolby.vision.support=false
ro.vendor.audio.dolby.vision.capture.support=false
ro.vendor.audio.dolby.surround.enable=false
ro.vendor.audio.dolby.fade_switch=false
ro.vendor.audio.dolby.spatial.xml=true
ro.vendor.audio.surround.support=true
ro.vendor.audio.surround.headphone.only=false
ro.vendor.audio.elus.enable=true
ro.vendor.audio.extendtonecallendedlength=true
ro.vendor.audio.dpaudio=true
ro.vendor.audio.volume.modeler.enable=true
ro.vendor.audio.bass.enhancer.enable=true
ro.vendor.audio.bass.boost.enable=true
ro.vendor.audio.bass.booster.enable=true
ro.vendor.audio.virtualizer.enable=false
ro.vendor.audio.notification.single=true
ro.vendor.audio.identify_low_end_device=false
ro.vendor.audio.record.customized.support=true
ro.vendor.audio.aac.para.modify.support=true
ro.vendor.audio.usb.safe.volume.index.support=false
ro.vendor.audio.3d.audio.support=true
ro.vendor.audio.voice.super_volume=true
ro.vendor.audio.ear.scan.support=true
ro.vendor.audio.voice.voip.holder.support=true
ro.vendor.audio.lowpower.pa.para.support=false
ro.vendor.audio.product.sleepmonitor.config=true
ro.vendor.audio.record.customized.support=true
ro.vendor.audio.ear.scan.support=true
ro.vendor.audio.3daudio.record.enable=true
vendor.audio.3daudio.record.enable=true
vendor.audio.hdr.record.enable=true
vendor.audio.game2D.switch=0
vendor.audio.game3D.switch=0
vendor.audio.game4D.switch=0
vendor.audio.game5D.switch=0
vendor.audio.game6D.switch=0
audio.hal.output.suspend.supported=false
vendor.audio.hal.output.suspend.supported=false
audio.safemedia.bypass=true
vendor.audio.safemedia.bypass=true
audio.pp.asphere.enabled=false
vendor.audio.pp.asphere.enabled=false
audio.nat.codec.enabled=1
vendor.audio.nat.codec.enabled=1
persist.audio.hp=true
persist.vendor.audio.hp=true
persist.audio.vr.enable=false
persist.vendor.audio.vr.enable=false
sys.haptic.ignoreWhenCamera=true
sys.haptic.intensityforkeyboard=true
vendor.audio.read.wsatz.type=false
audio.safx.pbe.enabled=true
vendor.audio.safx.pbe.enabled=true
audio.playback.mch.downsample=false
vendor.audio.playback.mch.downsample=false
effect.reverb.pcm=0
audio.matrix.limiter.enable=0
vendor.audio.matrix.limiter.enable=0
audio.tunnel.encode=false
vendor.audio.tunnel.encode=false
tunnel.audio.encode=false
vendor.tunnel.audio.encode=false
tunnel.audiovideo.encode=false
vendor.tunnel.audiovideo.encode=false
audio.tunnel.decode=false
vendor.audio.tunnel.decode=false
tunnel.audio.decode=false
vendor.tunnel.audio.decode=false
tunnel.audiovideo.decode=false
vendor.tunnel.audiovideo.decode=false
persist.speaker.prot.enable=false
persist.vendor.speaker.prot.enable=false
audio.offload.pcm.enable=false
audio.offload.pcm.16bit.enable=false
audio.offload.pcm.24bit.enable=false
audio.offload.pcm.32bit.enable=false
audio.offload.pcm.float.enable=false
vendor.audio.offload.pcm.enable=false
vendor.audio.offload.pcm.16bit.enable=false
vendor.audio.offload.pcm.24bit.enable=false
vendor.audio.offload.pcm.32bit.enable=false
vendor.audio.offload.pcm.float.enable=false
audio.offload.pcm.enabled=false
audio.offload.pcm.16bit.enabled=false
audio.offload.pcm.24bit.enabled=false
audio.offload.pcm.32bit.enabled=false
audio.offload.pcm.float.enabled=false
vendor.audio.offload.pcm.enabled=false
vendor.audio.offload.pcm.16bit.enabled=false
vendor.audio.offload.pcm.24bit.enabled=false
vendor.audio.offload.pcm.32bit.enabled=false
vendor.audio.offload.pcm.float.enabled=false
audio.hwacceffects.needed=true
vendor.audio.hwacceffects.needed=true
audio.high.resolution.enable=true
vendor.audio.high.resolution.enable=true
ro.have_aacencode_feature=1
ro.have_aacdecode_feature=1
vendor.audio.playback.dsp.pathdelay=0
vendor.audio.usb.disable.sidetone=true
ro.telephony.call_ring.multiple=false
persist.dirac.acs.ignore_error=1
persist.vendor.audio_fx.waves.maxxsense=true
persist.vendor.audio_fx.waves.processing=true
persist.vendor.audio_fx.waves.proc_twks=true
persist.vendor.audio_fx.waves.systrace=false
audio.passthrough.volume.route2cec=true
vendor.audio.passthrough.volume.route2cec=true
persist.sys.fuse.passthrough.enable=false
audio.c2.preferred=true
vendor.audio.c2.preferred=true
debug.c2.use_dmabufheaps=1
low.pass.filter=Off
midle.pass.filter=Off
high.pass.filter=Off
band.pass.filter=Off
LPF=Off
MPF=Off
HPF=Off
BPF=Off
persist.audio.uhqa=1
persist.vendor.audio.uhqa=1
ro.platform.disable.audiorawout=true
ro.vendor.platform.disable.audiorawout=true
# Spatial
persist.vendor.audio.spatializer.enable=true
ro.audio.spatializer_binaural_enabled_default=false
ro.audio.spatializer_transaural_enabled_default=false
persist.bluetooth.spatial_audio_support=true
ro.audio.spatializer_enabled=true
ro.vendor.audio.spatializer_enabled=true
vendor.audio.useXiaomiSpatializer=true
ro.vendor.audio.spatializer.support.speaker=true
persist.vendor.audio.effectimplenter=dolby
ro.vendor.audio.dolby.spatial.profile=music
# OPLUS Start
ro.oplus.audio.dolby.offload=0
ro.oplus.audio.custom.media_vol_default=false
ro.oplus.audio.detection.support=0
ro.oplus.audio.support.audioscence.v2=1
ro.oplus.platform.audio.bitrate=true
ro.oplus.audio.hdr_switch=1
ro.oplus.audio.support.ocar=1
persist.oplus.audio.spllimit.support=false
ro.oplus.audio.ringermodeinfo.feedback.support=1
ro.oplus.audio.thermal_control=0
# OPLUS End
# Xiao Start
ro.vendor.audio.karaoke.enable=true
ro.vendor.audio.miui.karaoke.show=false
ro.vendor.audio.miui.karaoke.tencent.show=false
ro.vendor.audio.karaoke.suppot.lowlatency=true
ro.miui.audio.karaoke.suppot.lowlatency=true
ro.vendor.audio.karaok.enable=true
ro.vendor.audio.karaok.support=true
ro.vendor.camera.karaok.support=true
ro.vendor.audio.soundtrigger.xiaomievent=1
persist.vendor.audio.misoundasc=false
dolby.mi.metadata.log=false
vendor.dolby.mi.metadata.log=false
ro.miui.allow_app_playbackcapture=true
# Xiao End

# QC2 PARAMETERS
vendor.qc2audio.suspend.enabled=false
vendor.qc2audio.per_frame.mpegh.dec.enabled=false
vendor.qc2audio.per_frame.mp3.dec.enabled=false
vendor.qc2audio.per_frame.flac.dec.enabled=false
vendor.qc2audio.per_frame.alac.dec.enabled=false
vendor.qc2audio.per_frame.ape.dec.enabled=false
vendor.qc2audio.per_frame.aac.dec.enabled=false
vendor.qc2audio.per_frame.aac_adts.dec.enabled=false
vendor.qc2audio.per_frame.vorbis.dec.enabled=false
vendor.qc2audio.per_frame.opus.dec.enabled=false
vendor.qc2audio.per_frame.raw.dec.enabled=false
vendor.qc2audio.per_frame.wma.dec.enabled=false
vendor.qc2audio.per_frame.mpegh.enc.enabled=false
vendor.qc2audio.per_frame.mp3.enc.enabled=false
vendor.qc2audio.per_frame.flac.enc.enabled=false
vendor.qc2audio.per_frame.alac.enc.enabled=false
vendor.qc2audio.per_frame.ape.enc.enabled=false
vendor.qc2audio.per_frame.aac.enc.enabled=false
vendor.qc2audio.per_frame.aac_adts.enc.enabled=false
vendor.qc2audio.per_frame.vorbis.enc.enabled=false
vendor.qc2audio.per_frame.opus.enc.enabled=false
vendor.qc2audio.per_frame.raw.enc.enabled=false
vendor.qc2audio.per_frame.wma.enc.enabled=false

# DECODER/ENCODER PARAMETERS
vendor.audio.mpegh.complexity.default=8
vendor.audio.mpegh.quality=100
vendor.audio.mp3.complexity.default=8
vendor.audio.mp3.quality=100
vendor.audio.amrwbplus.complexity.default=8
vendor.audio.amrwbplus.quality=100
vendor.audio.amrnb.complexity.default=8
vendor.audio.amrnb.quality=100
vendor.audio.amrwb.complexity.default=8
vendor.audio.amrwb.quality=100
vendor.audio.flac.complexity.default=8
vendor.audio.flac.quality=100
vendor.audio.alac.complexity.default=8
vendor.audio.alac.quality=100
vendor.audio.ape.complexity.default=8
vendor.audio.ape.quality=100
vendor.audio.aac.complexity.default=8
vendor.audio.aac.quality=100
vendor.audio.aac_adts.complexity.default=8
vendor.audio.aac_adts.quality=100
vendor.audio.dts.complexity.default=8
vendor.audio.dts.quality=100
vendor.audio.wma.complexity.default=8
vendor.audio.wma.quality=100
vendor.audio.vorbis.complexity.default=8
vendor.audio.vorbis.quality=100
vendor.audio.adts.complexity.default=8
vendor.audio.adts.quality=100
vendor.audio.opus.complexity.default=8
vendor.audio.opus.quality=100
vendor.audio.raw.complexity.default=8
vendor.audio.raw.quality=100
vendor.audio.ac3.complexity.default=8
vendor.audio.ac3.quality=100
vendor.audio.eac3.complexity.default=8
vendor.audio.eac3.quality=100
vendor.audio.eac3_joc.complexity.default=8
vendor.audio.eac3_joc.quality=100
vendor.audio.ac4.complexity.default=8
vendor.audio.ac4.quality=100
vendor.audio.dsp.complexity.default=8
vendor.audio.dsp.quality=100
vendor.audio.dsd.complexity.default=8
vendor.audio.dsd.quality=100
vendor.audio.evrc.complexity.default=8
vendor.audio.evrc.quality=100
vendor.audio.qcelp.complexity.default=8
vendor.audio.qcelp.quality=100
vendor.audio.ozoaudio.complexity.default=8
vendor.audio.ozoaudio.quality=100
vendor.audio.heic.complexity.default=8
vendor.audio.heic.quality=100
vendor.audio.heif.complexity.default=8
vendor.audio.heif.quality=100
vendor.audio.use.sw.mpegh.decoder=true
vendor.audio.use.sw.mp3.decoder=true
vendor.audio.use.sw.flac.decoder=true
vendor.audio.use.sw.alac.decoder=true
vendor.audio.use.sw.ape.decoder=true
vendor.audio.use.sw.aac.decoder=true
vendor.audio.use.sw.aac_adts.decoder=true
vendor.audio.use.sw.vorbis.decoder=true
vendor.audio.use.sw.opus.decoder=true
vendor.audio.use.sw.raw.decoder=true
vendor.audio.use.sw.wma.decoder=true
vendor.audio.use.sw.mpegh.encoder=true
vendor.audio.use.sw.mp3.encoder=true
vendor.audio.use.sw.flac.encoder=true
vendor.audio.use.sw.alac.encoder=true
vendor.audio.use.sw.ape.encoder=true
vendor.audio.use.sw.aac.encoder=true
vendor.audio.use.sw.aac_adts.encoder=true
vendor.audio.use.sw.vorbis.encoder=true
vendor.audio.use.sw.opus.encoder=true
vendor.audio.use.sw.raw.encoder=true
vendor.audio.use.sw.wma.encoder=true
vendor.audio.mpegh.sw.decoder.24bit=true
vendor.audio.mp3.sw.decoder.24bit=true
vendor.audio.flac.sw.decoder.24bit=true
vendor.audio.alac.sw.decoder.24bit=true
vendor.audio.ape.sw.decoder.24bit=true
vendor.audio.aac.sw.decoder.24bit=true
vendor.audio.aac_adts.sw.decoder.24bit=true
vendor.audio.vorbis.sw.decoder.24bit=true
vendor.audio.opus.sw.decoder.24bit=true
vendor.audio.raw.sw.decoder.24bit=true
vendor.audio.mpegh.sw.encoder.24bit=true
vendor.audio.mp3.sw.encoder.24bit=true
vendor.audio.flac.sw.encoder.24bit=true
vendor.audio.alac.sw.encoder.24bit=true
vendor.audio.ape.sw.encoder.24bit=true
vendor.audio.aac.sw.encoder.24bit=true
vendor.audio.aac_adts.sw.encoder.24bit=true
vendor.audio.vorbis.sw.encoder.24bit=true
vendor.audio.opus.sw.encoder.24bit=true
vendor.audio.raw.sw.encoder.24bit=true
vendor.audio.wma.sw.encoder.24bit=true
vendor.audio.hw.aac.encoder=true
vendor.audio.hw.aac.decoder=true
qcom.hw.aac.encoder=true
qcom.hw.aac.decoder=true
vidc.enc.narrow.searchrange=1
vidc.dec.narrow.searchrange=1

# HiFi/Dolby PARAMETERS
ro.audio.hifi=false
ro.vendor.audio.hifi=false
persist.audio.hifi=false
persist.vendor.audio.hifi=false
use.dts_eagle=true
audio.use.dts_eagle=true
vendor.audio.use.dts_eagle=true
DTS_EAGLE_PLATFORM_SUPPORT=true
dolby.dap.param.tee=true
vendor.dolby.dap.param.tee=true
dolby.dax.param.tee=true
vendor.dolby.dax.param.tee=true
audio.gef.enable.traces=false
audio.gef.debug.flags=false
vendor.audio.gef.enable.traces=false
vendor.audio.gef.debug.flags=false
ro.platform.support.dolby=true
ro.platform.support.dts=true
ro.vendor.platform.support.dolby=true
ro.vendor.platform.support.dts=true
vendor.dts.audio.skip_shadow=true
vendor.dts.audio.set_bypass=true
vendor.dts.audio.log_time=false
vendor.dts.audio.allow_offload=false
vendor.dts.audio.print_eagle=true
vendor.audio.dolby.ds2.enabled=false
vendor.audio.dolby.ds2.hardbypass=false
persist.vendor.audio.dolby.disable=false

# BT PARAMETERS
net.bt.name=BT-INet
qcom.bt.dev_power_class=3
qcom.bt.le_dev_pwr_class=3
persist.bluetooth.aptxadaptive_offload.enabled=true
persist.vendor.qcom.bluetooth.aptxadaptiver2_1_support=true
persist.vendor.qcom.bluetooth.aptxadaptiver2_2_support=true
persist.vendor.qcom.bluetooth.aptxadaptiver2_3_support=true
persist.vendor.qcom.bluetooth.lossless_aptx_adaptive_le.enabled=true
persist.bt.a2dp.aac_disable=false
audio.effect.a2dp.enable=1
vendor.audio.effect.a2dp.enable=1
persist.sys.btsatck.absvolfeature=true
persist.vendor.btsatck.absvolfeature=true
persist.bluetooth.enable_dynamic_absvol=true
persist.vendor.bt.a2dp.addr_check_enabled_for_aac=true
persist.bluetooth.avrcpversion=avrcp16
persist.bluetooth.mapversion=map14
bt.max.hfpclient.connections=5
ro.bluetooth.hfp.ver=1.9
sys.fflag.override.settings_bluetooth_hearing_aid=true
persist.sys.fflag.override.settings_bluetooth_hearing_aid=true
persist.vendor.bt.enable.swb=true
persist.vendor.bt.enable.swbpm=true
persist.vendor.btstack.enable.swb=true
persist.vendor.btstack.enable.swbpm=true
persist.vendor.qcom.bluetooth.enable.swb=true
persist.vendor.qcom.bluetooth.enable.swbpm=true
vendor.bt.pts.pbap=true
persist.bluetooth.sbc_hd_higher_bitrate=1
persist.bt.sbc_hd_enabled=1
persist.vendor.qcom.bluetooth.a2dp_mcast_test.enabled=false
persist.af.losslessbt.on=1
bluetooth.a2dp.lhdc=true
persist.bluetooth.a2dp.lhdc=true
ro.bluetooth.lhdcsupport=true
ro.vendor.bluetooth.lhdcsupport=true
persist.bluetooth.dualconnection.supported=true
persist.vendor.qcom.bluetooth.dualmode_transport_support=true
persist.bluetooth.gamemode=true
vendor.bluetooth.sbc.abr=false
vendor.bluetooth.aac.abr=false
vendor.bluetooth.aptx.abr=false
vendor.bluetooth.ldac.abr=false
vendor.bluetooth.lhdc.abr=false
vendor.bluetooth.lc3.abr=false
persist.bluetooth.a2dp_sbc_abr.enable=false
persist.bluetooth.a2dp_aac_abr.enable=false
persist.bluetooth.a2dp_aptx_abr.enable=false
persist.bluetooth.a2dp_ldac_abr.enable=false
persist.bluetooth.a2dp_lhdc_abr.enable=false
persist.bluetooth.a2dp_lc3_abr.enable=false
persist.vendor.bt.a2dp.mac_whitelist=true
audio.a2dp.codec.latency=true
vendor.audio.a2dp.codec.latency=true
ro.vendor.audio.a2dp.codec.latency=true
persist.vendor.bluetooth.heif=false
persist.vendor.service.bt.iot.enablelogging=false
persist.vendor.bt.iotinfo.report.enable=false
persist.vendor.service.bt.iotinfo.report.enable=false
persist.bt.iot.enablelogging=false
persist.bluetooth.bluetooth_asd_enable=true
persist.sys.bluetooth.linkkey_enc.support=true
persist.sys.bluetooth.random=true
persist.sys.bluetooth.wearcheck_support=true
persist.sys.bluetooth.gatt.cache.support=true
persist.sys.bluetooth.ble.retry.support=true
persist.sys.bluetooth.rssi_distance.support=true
persist.sys.bluetooth.rssi_distance.balanced=false
# LeAudio START
ro.vendor.bluetooth.csip_qti=false
ro.bluetooth.leaudio_offload.supported=true
ro.bluetooth.leaudio_switcher.supported=true
persist.vendor.btstack.lc3_reset_adv_audio_mask=false
persist.vendor.bt.enable.lpa=false
persist.vendor.btstack.enable.lpa=false
persist.vendor.qcom.bluetooth.enable.lpa=false
persist.bluetooth.leaudio_offload.disabled=false

# Audio Stream Transitions
bluetooth.profile.bap.broadcast.assist.enabled=true
bluetooth.profile.bap.broadcast.source.enabled=true
bluetooth.profile.bap.unicast.client.enabled=true
bluetooth.profile.bas.client.enabled=false
bluetooth.profile.ccp.server.enabled=false
bluetooth.profile.ccp.client.enabled=false
bluetooth.profile.csip.set_coordinator.enabled=false
bluetooth.profile.pacs.server.enabled=false
bluetooth.profile.ascs.server.enabled=false
persist.bluetooth.support_le_conn_interval_change=true

# Capture and Rendering Volume Control
bluetooth.profile.vcp.controller.enabled=false
bluetooth.profile.vcs.controller.enabled=false
bluetooth.profile.micp.controller.enabled=false

#Content Control
bluetooth.profile.mcp.server.enabled=false
bluetooth.profile.mcp.client.enabled=false

# LeAudio END
bluetooth.profile.a2dp.source.enabled=true
bluetooth.profile.avrcp.target.enabled=true
bluetooth.profile.avrcp.controller.enabled=false
bluetooth.profile.hfp.ag.enabled=true
bluetooth.profile.hfp.wbs.enabled=true
bluetooth.profile.asha.central.enabled=true
bluetooth.profile.dun.enabled=true
bluetooth.profile.hsp.enabled=true
bluetooth.profile.ftp.enabled=true
bluetooth.profile.gatt.enabled=true
bluetooth.profile.gmcs.server.enabled=true
bluetooth.profile.hid.host.enabled=true
bluetooth.profile.hid.device.enabled=true
bluetooth.profile.map.server.enabled=true
bluetooth.profile.map.server.enabled=true
bluetooth.profile.mcs.server.enabled=true
bluetooth.profile.mcs.client.enabled=true
bluetooth.profile.opp.enabled=true
bluetooth.profile.pan.nap.enabled=true
bluetooth.profile.pan.panu.enabled=true
bluetooth.profile.pbap.client.enabled=true
bluetooth.profile.pbap.server.enabled=true
bluetooth.profile.sap.server.enabled=true
bluetooth.profile.sap.client.enabled=true
bluetooth.profile.tbs.server.enabled=true
bluetooth.profile.gtbs.server.enabled=true
bluetooth.profile.bass.client.enabled=true
bluetooth.profile.bass.server.enabled=true
vendor.audio.hfp.enable=true
ro.qualcomm.bluetooth.opp=true
ro.qualcomm.bluetooth.hfp=true
ro.qualcomm.bluetooth.hsp=true
ro.qualcomm.bluetooth.pbap=true
ro.qualcomm.bluetooth.ftp=true
ro.qualcomm.bluetooth.map=true
ro.qualcomm.bluetooth.nap=true
ro.qualcomm.bluetooth.sap=true
ro.qualcomm.bluetooth.dun=true
ro.qualcomm.bluetooth.hfp.wbs=true
persist.bluetooth.specificatcmdsenable=true
persist.bluetooth.ble_drop_power=true
persist.vendor.bluetooth.ble_drop_power=true
persist.bluetooth.disableinbandringing=true
persist.bluetooth.a2dp_offload.disabled=false
persist.bluetooth.opus.enabled=true
persist.sys.bluetooth.abnormal_sco_notify=true
persist.bluetooth.support.sar=00
persist.bluetooth.carkit_compability_control=false
persist.sys.bt.oob.support=true
persist.sys.bluetooth.oob.support=true
persist.vendor.bt.asd.firmware=true
persist.vendor.bluetooth.asd.firmware=true
persist.vendor.service.bdroid.soc.alwayson=false
persist.vendor.bt.a2dp.samplerate=true
ro.vendor.audio.btsamplerate.adaptive=false
persist.bluetooth.support_limit_remote_name_request=false
ro.bluetooth.dun=true
ro.bluetooth.request.master=true
ro.bluetooth.remote.autoconnect=true
# Xiao Start
audio.misound.bluetooth.enable=true
vendor.audio.misound.bluetooth.enable=true
ro.vendor.audio.misound.bluetooth.enable=true
# Xiao End
# OPLUS Start
persist.sys.oplus.bt.binaural_record=false
persist.sys.oplus.bt.acl_optimize=true
persist.sys.oplus.bt.log_off_bt=false
persist.sys.oplus.bt.switch_log.enable=false
persist.sys.oplus.bt.cache_hcilog_allow_all_devices=0
persist.sys.oplus.bt.cache_hcilog_mode=0
persist.vendor.oneplus.bt.asd.firmware=true
persist.sys.oplus.bt.le_audio=false
persist.sys.oplus.bt.oob.support=true
# OPLUS End

# AHAL/APM/CONFIG PARAMETERS
audio.offload.disable=false
audio.offload.video=false
av.offload.enable=false
audio.offload.gapless.enabled=true
vendor.audio.offload.gapless.enabled=true
ro.vendor.audio.offload.gapless.enabled=true
vendor.audio.av.streaming.offload.enable=false
ro.vendor.audio.av.streaming.offload.enable=false
vendor.audio.offload.passthrough=false
ro.vendor.audio.offload.passthrough=false
vendor.audio.offload.multiple.enabled=false
ro.vendor.audio.offload.multiple.enabled=false
audio.offload.track.enable=true
vendor.audio.offload.track.enable=true
ro.vendor.audio.offload.track.enable=true
use.voice.path.for.pcm.voip=true
vendor.voice.path.for.pcm.voip=true
persist.vendor.audio.sva.conc.enabled=true
persist.vendor.audio.va_concurrency_enabled=true
vendor.voice.conc.fallbackpath=fast
vendor.audio.rec.playback.conc.disabled=true
vendor.voice.dsd.playback.conc.disabled=true
vendor.voice.playback.conc.disabled=true
vendor.voice.record.conc.disabled=false
vendor.voice.voip.conc.disabled=false
audio.decoder_override_check=true
vendor.audio.decoder_override_check=true
ro.vendor.audio.decoder_override_check=true
vendor.audio.kpi_optimize.enable=false
vendor.audio.battery_listener.enable=false
vendor.audio.keep_alive.disabled=false
ro.bluetooth.a2dp_offload.supported=true
vendor.audio.feature.mpegh_offload.enable=true
vendor.audio.feature.mp3_offload.enable=true
vendor.audio.feature.flac_offload.enable=true
vendor.audio.feature.alac_offload.enable=true
vendor.audio.feature.ape_offload.enable=true
vendor.audio.feature.aac_offload.enable=true
vendor.audio.feature.aac_adts_offload.enable=true
vendor.audio.feature.vorbis_offload.enable=true
vendor.audio.feature.opus_offload.enable=true
vendor.audio.feature.raw_offload.enable=true
vendor.audio.feature.wma_offload.enable=true
vendor.audio.feature.pcm_offload_16.enable=false
vendor.audio.feature.pcm_offload_24.enable=false
vendor.audio.feature.pcm_offload_32.enable=false
vendor.audio.feature.pcm_offload_float.enable=false
vendor.audio.feature.qti_flac_decoder.enable=false
vendor.audio.feature.qti_flac_encoder.enable=false
vendor.audio.feature.a2dp_offload.enable=true
vendor.audio.feature.anc_headset.enable=false
vendor.audio.feature.battery_listener.enable=false
vendor.audio.feature.devicestate_listener.enable=false
vendor.audio.feature.thermal_listener.enable=false
vendor.audio.feature.compr_cap.enable=false
vendor.audio.feature.compress_meta_data.enable=true
vendor.audio.feature.concurrent_capture.enable=true
vendor.audio.feature.custom_stereo.enable=false
vendor.audio.feature.dsm_feedback.enable=true
vendor.audio.feature.dynamic_ecns.enable=true
vendor.audio.feature.extn_compress_format.enable=false
vendor.audio.feature.extn_resampler.enable=false
vendor.audio.feature.extn_formats.enable=false
vendor.audio.feature.ext_hw_plugin.enable=false
vendor.audio.feature.external_dsp.enable=false
vendor.audio.feature.external_qdsp.enable=false
vendor.audio.feature.external_speaker.enable=false
vendor.audio.feature.external_speaker_tfa.enable=false
vendor.audio.feature.hfp.enable=true
vendor.audio.feature.hifi_audio.enable=false
vendor.audio.feature.hwdep_cal.enable=true
vendor.audio.feature.keep_alive.enable=true
vendor.audio.feature.kpi_optimize.enable=false
vendor.audio.feature.maxx_audio.enable=true
vendor.audio.feature.record_play_concurency.enable=false
vendor.audio.feature.voice_concurrency.enable=true
vendor.audio.feature.spkr_prot.enable=false
vendor.audio.feature.deepbuffer_as_primary.enable=false
vendor.audio.feature.audiosphere.enable=false
vendor.audio.feature.asphere.enable=false
vendor.audio.feature.vbat.enable=false
vendor.audio.feature.wsa.enable=false
vendor.audio.feature.audiozoom.enable=false
vendor.audio.feature.src_trkn.enable=false
vendor.audio.feature.snd_mon.enable=false
vendor.audio.feature.dmabuf.cma.memory.enable=false
vendor.audio.feature.power_mode.enable=false
vendor.audio.feature.auto_hal.enable=false" > $IPMM/$MODID/system.prop
if [ "$SD888" ] || [ "$SM6375" ] || [ "$SM8450" ] || [ "$SM8550" ]; then
echo -e "# HI-RES PARAMETERS
vendor.audio.feature.compress_in.enable=false" >> $IPMM/$MODID/system.prop
fi
ALLLIST -mma; REPLACER -f "$MMAUDIOFX"
echo -e "#!$MIPSB/sh
resetprop -p --delete persist.audio_hal.dsp_bit_width_enforce_mode
resetprop -p --delete persist.vendor.audio_hal.dsp_bit_width_enforce_mode
resetprop -p --delete media.resolution.limit.16bit
resetprop -p --delete media.resolution.limit.24bit
resetprop -p --delete media.resolution.limit.32bit
resetprop -p --delete media.resolution.limit.64bit
SERVERPID=\$(pidof audioserver); [ \"\$SERVERPID\" ] && kill \$SERVERPID" > $IPMM/$MODID/service.sh
PSXCF -psf "$MPATHS $APIXML $ACXML $APCXML $AIPAOPCONF $A2DPXML $BTQTIXML $USBXML $ACCXML $STPIXML"
$STEP1 && PATCH_VOLUMES
$STEP2 && PATCH_MICROPHONE
$STEP3 && PATCH_MEDIA_CODECS
FINDER "$MPATHS" && PATCH_MIXER
FINDER "$APIXML" && PATCH_AUDIO_PLATFORM_INFO
FINDER "$ACXML" && PATCH_DEEP_BUFFER
FINDER "$APCXML" && PATCH_AUDIO_POLICY_CONFIGURATION
if FINDER "$BTCSCONF" || FINDER "$BTSCONF"; then PATCH_IMPROVE_BLUETOOTH; fi
FINDER "$AIPAOPCONF" && PATCH_AUDIO_POLICY
if FINDER "$A2DPXML"; then
for FA2DPXML in $A2DPXML; do
if [ -f $MAGISKMP$FA2DPXML ]; then
UIP "Found $(basename $FA2DPXML)" "$MSGPMIP"
PSF="$IPMM/$MODID$FA2DPXML"
sed -i 's/samplingRates="44100,48000,88200,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/g' $PSF
sed -i 's/samplingRates="44100 48000 88200 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/g' $PSF
sed -i 's/samplingRates="44100,48000,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/g' $PSF
sed -i 's/samplingRates="44100 48000 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/g' $PSF
sed -i 's/ AUDIO_FORMAT_FORCE_AOSP_LL//g' $PSF
sed -i 's/AUDIO_FORMAT_FORCE_AOSP_LL//g' $PSF
sed -i 's/AUDIO_FORMAT_FORCE_AOSP/AUDIO_FORMAT_FORCE_AOSP AUDIO_FORMAT_FORCE_AOSP_LL/g' $PSF
sed -i 's/"AUDIO_DEVICE_OUT_BLUETOOTH_A2DP" role="sink">/"AUDIO_DEVICE_OUT_BLUETOOTH_A2DP" role="sink" encodedFormats="AUDIO_FORMAT_FORCE_AOSP AUDIO_FORMAT_FORCE_AOSP_LL">/g' $PSF
sed -i 's/AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES" role="sink">/AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES" role="sink" encodedFormats="AUDIO_FORMAT_FORCE_AOSP AUDIO_FORMAT_FORCE_AOSP_LL">/g' $PSF
sed -i 's/AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER" role="sink">/AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER" role="sink" encodedFormats="AUDIO_FORMAT_FORCE_AOSP AUDIO_FORMAT_FORCE_AOSP_LL">/g' $PSF
UIP "$MSGFFAP"
fi
done
fi
if FINDER "$BTQTIXML"; then
for FBTQTIXML in $BTQTIXML; do
if [ -f $MAGISKMP$FBTQTIXML ]; then
UIP "Found $(basename $FBTQTIXML)" "$MSGPMIP"
PSF="$IPMM/$MODID$FBTQTIXML"
sed -i 's/samplingRates="44100,48000,88200,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/g' $PSF
sed -i 's/samplingRates="44100 48000 88200 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/g' $PSF
sed -i 's/samplingRates="44100,48000,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/g' $PSF
sed -i 's/samplingRates="44100 48000 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/g' $PSF
sed -i 's/ AUDIO_FORMAT_FORCE_AOSP_LL//g' $PSF
sed -i 's/AUDIO_FORMAT_FORCE_AOSP_LL//g' $PSF
sed -i 's/AUDIO_FORMAT_FORCE_AOSP/AUDIO_FORMAT_FORCE_AOSP AUDIO_FORMAT_FORCE_AOSP_LL/g' $PSF
sed -i 's/"AUDIO_DEVICE_OUT_BLUETOOTH_A2DP" role="sink">/"AUDIO_DEVICE_OUT_BLUETOOTH_A2DP" role="sink" encodedFormats="AUDIO_FORMAT_FORCE_AOSP AUDIO_FORMAT_FORCE_AOSP_LL">/g' $PSF
sed -i 's/AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES" role="sink">/AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES" role="sink" encodedFormats="AUDIO_FORMAT_FORCE_AOSP AUDIO_FORMAT_FORCE_AOSP_LL">/g' $PSF
sed -i 's/AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER" role="sink">/AUDIO_DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER" role="sink" encodedFormats="AUDIO_FORMAT_FORCE_AOSP AUDIO_FORMAT_FORCE_AOSP_LL">/g' $PSF
UIP "$MSGFFAP"
fi
done
fi
if FINDER "$USBXML"; then
for FUSBXML in $USBXML; do
if [ -f $MAGISKMP$FUSBXML ]; then
UIP "Found $(basename $FUSBXML)" "$MSGPMIP"
PSF="$IPMM/$MODID$FUSBXML"
sed -i 's/samplingRates="44100"/samplingRates="192000"/g' $PSF
UIP "$MSGFFAP"
fi
done
fi
if FINDER "$ACCXML"; then
for FACCXML in $ACCXML; do
if [ -f $MAGISKMP$FACCXML ]; then
UIP "Found $(basename $FACCXML)" "$MSGPMIP"
PSF="$IPMM/$MODID$FACCXML"
sed -i '/<kara_app_name_list>/a\
        <com.neutroncode.mp/>\
        <ru.yandex.music/>\
        <com.hitrolab.audioeditor/>\
        <com.google.android.youtube/>\
        <com.google.android.youtube.music/>\
        <com.mxtech.videoplayer/>\
        <com.mxtech.videoplayer.pro/>\
        <com.spotify.music/>\
        <com.apple.android.music/>\
        <deezer.android.app/>\
        <com.vkontakte.android/>\
        <com.uma.musicvk/>\
        <com.vk.clips/>\
        <ru.ok.android/>\
        <com.facebook.katana/>\
        <com.instagram.android/>\
        <tunein.player/>\
        <free.zaycev.net/>\
        <fm.last.android/>\
        <com.aspiro.tidal/>\
        <com.qobuz.music/>\
        <com.extreamsd.usbaudioplayerpro/>\
        <com.zvooq.openplay/>\
        <com.jetappfactory.jetaudio/>\
        <com.jetappfactory.jetaudioplus/>\
		<ru.mts.music.android/>\
        <com.maxmpz.audioplayer/>' $PSF
sed -i '/<record_unsilence_app_name_list>/a\
        <com.SearingMedia.Parrot/>\
        <com.hitrolab.audioeditor/>' $PSF
UIP "$MSGFFAP"
fi
done
fi
if FINDER "$STPIXML"; then
for FSTPIXML in $STPIXML; do
if [ -f $MAGISKMP$FSTPIXML ]; then
UIP "Found $(basename $FSTPIXML)" "$MSGPMIP"
PSF="$IPMM/$MODID$FSTPIXML"
sed -i 's/context_manager_enable="true"/context_manager_enable="false"/g' $PSF
sed -i 's/dedicated_headset_path="true"/dedicated_headset_path="false"/g' $PSF
sed -i 's/dedicated_sva_path="true"/dedicated_sva_path="false"/g' $PSF
sed -i 's/concurrent_capture="false"/concurrent_capture="true"/g' $PSF
sed -i 's/concurrent_voice_call="false"/concurrent_voice_call="true"/g' $PSF
sed -i 's/concurrent_voip_call="false"/concurrent_voip_call="true"/g' $PSF
sed -i 's/support_non_lpi_without_ec="false"/support_non_lpi_without_ec="true"/g' $PSF
sed -i 's/support_nlpi_switch="false"/support_nlpi_switch="true"/g' $PSF
sed -i 's/low_latency_bargein_enable="true"/low_latency_bargein_enable="false"/g' $PSF
sed -i 's/enable_debug_dumps="true"/enable_debug_dumps="false"/g' $PSF
sed -i 's/hifi_filter="true"/hifi_filter="false"/g' $PSF
sed -i 's/acd_enable="true"/acd_enable="false"/g' $PSF
sed -i 's/get_module_version="true"/get_module_version="false"/g' $PSF
sed -i '/logging_level/d' $PSF
UIP "$MSGFFAP"
fi
done
fi
if [ -d $MAGISKMP$IPSED ] || [ -d $MAGISKMP$IPVED ]; then PATCH_DOLBY; fi
if CHECKER "-device" "dipper" && [ $ASDK -le 33 ]; then PATCH_FIX_MICRO; fi
MOVERPATH
SETPERM -mm -msg
WCANFTP "-alcf"
}

PATCH_DEEP_BUFFER () {
UIP "Start PATCH_DEEP_BUFFER" "$MSGPNF"
for FACXML in $ACXML; do
if [ -f $MAGISKMP$FACXML ]; then
UIP "Found $(basename $FACXML)" "$MSGPMIP"
PSF="$IPMM/$MODID$FACXML"
PSXCF -u $PSF '/configs/property[@name="audio.offload.disable"]' "false"
PSXCF -u $PSF '/configs/property[@name="av.offload.enable"]' "false"
PSXCF -u $PSF '/configs/property[@name="audio.offload.video"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.av.streaming.offload.enable"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.offload.multiple.enabled"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.offload.track.enable"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.voice.path.for.pcm.voip"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.use.sw.alac.decoder"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.use.sw.ape.decoder"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.use.sw.mpegh.decoder"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.flac.sw.decoder.24bit"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.hw.aac.encoder"]' "false"
PSXCF -u $PSF '/configs/property[@name="persist.vendor.audio.sva.conc.enabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="persist.vendor.audio.va_concurrency_enabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.voice.conc.fallbackpath"]' "fast"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.rec.playback.conc.disabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.voice.dsd.playback.conc.disabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.voice.playback.conc.disabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.voice.record.conc.disabled"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.voice.voip.conc.disabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="voice_concurrency"]' "true"
PSXCF -u $PSF '/configs/flag[@name="audio_extn_formats_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="audio_extn_hdmi_spk_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="aac_adts_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="alac_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="ape_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="flac_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="pcm_offload_enabled_16"]' "false"
PSXCF -u $PSF '/configs/flag[@name="pcm_offload_enabled_24"]' "false"
PSXCF -u $PSF '/configs/flag[@name="qti_flac_decoder"]' "false"
PSXCF -u $PSF '/configs/flag[@name="vorbis_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="wma_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="fm_power_opt"]' "false"
PSXCF -u $PSF '/configs/flag[@name="a2dp_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="anc_headset_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="audio_zoom_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="audiosphere_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="battery_listener_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="compress_capture_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="compress_metadata_needed"]' "true"
PSXCF -u $PSF '/configs/flag[@name="concurrent_capture_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="custom_stereo_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="dsm_feedback_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="dynamic_ecns_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="ext_hw_plugin_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="ext_qdsp_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="ext_spkr_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="ext_spkr_tfa_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="hfp_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="hifi_audio_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="hwdep_cal_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="keep_alive_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="kpi_optimize_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="maxx_audio_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="record_play_concurrency"]' "false"
PSXCF -u $PSF '/configs/flag[@name="spkr_prot_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="source_track_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="snd_monitor_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="use_deep_buffer_as_primary_output"]' "false"
PSXCF -u $PSF '/configs/flag[@name="vbat_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="wsa_enabled"]' "false"
UIP "$MSGFFAP"
fi
done
}

PATCH_VOLUMES () {
UIP "Start PATCH_VOLUMES" "$MSGPNF"
for FMPATHS in $MPATHS; do
if [ -f $MAGISKMP$FMPATHS ]; then
UIP "Found $(basename $FMPATHS)" "$MSGPMIP"
PSF="$IPMM/$MODID$FMPATHS"
if $HIRES; then
PSXCF -u $PSF '/mixer/ctl[@name="RX0 Digital Volume"]' "88"
PSXCF -u $PSF '/mixer/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -s $PSF '/mixer/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -s $PSF '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="LINEOUT1 Volume"]' "16"
PSXCF -u $PSF '/mixer/ctl[@name="LINEOUT2 Volume"]' "16"
else
PSXCF -u $PSF '/mixer/ctl[@name="RX0 Digital Volume"]' "88"
PSXCF -u $PSF '/mixer/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -s $PSF '/mixer/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -s $PSF '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="LINEOUT1 Volume"]' "16"
PSXCF -u $PSF '/mixer/ctl[@name="LINEOUT2 Volume"]' "16"
fi
UIP "$MSGFFAP"
fi
done
}

PATCH_MICROPHONE () {
UIP "Start PATCH_MICROPHONE" "$MSGPNF"
for FMPATHS in $MPATHS; do
if [ -f $MAGISKMP$FMPATHS ]; then
UIP "Found $(basename $FMPATHS)" "$MSGPMIP"
PSF="$IPMM/$MODID$FMPATHS"
PSXCF -u $PSF '/mixer/ctl[@name="ADC0 Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="ADC1 Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="ADC2 Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="ADC3 Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="ADC4 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="handset-mic"]/ctl[@name="ADC0 Volume"]' "14"
PSXCF -u $PSF '/mixer/path[@name="handset-mic"]/ctl[@name="ADC1 Volume"]' "14"
PSXCF -u $PSF '/mixer/path[@name="handset-mic"]/ctl[@name="ADC2 Volume"]' "14"
PSXCF -u $PSF '/mixer/path[@name="handset-mic"]/ctl[@name="ADC3 Volume"]' "14"
PSXCF -u $PSF '/mixer/path[@name="handset-mic"]/ctl[@name="ADC4 Volume"]' "14"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="ADC0 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="ADC1 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="ADC2 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="ADC3 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="ADC4 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-mic"]/ctl[@name="ADC0 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-mic"]/ctl[@name="ADC1 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-mic"]/ctl[@name="ADC2 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-mic"]/ctl[@name="ADC3 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-mic"]/ctl[@name="ADC4 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="handset-dmic-endfire"]/ctl[@name="ADC0 Volume"]' "10"
PSXCF -u $PSF '/mixer/path[@name="handset-dmic-endfire"]/ctl[@name="ADC1 Volume"]' "10"
PSXCF -u $PSF '/mixer/path[@name="handset-dmic-endfire"]/ctl[@name="ADC2 Volume"]' "10"
PSXCF -u $PSF '/mixer/path[@name="handset-dmic-endfire"]/ctl[@name="ADC3 Volume"]' "10"
PSXCF -u $PSF '/mixer/path[@name="handset-dmic-endfire"]/ctl[@name="ADC4 Volume"]' "10"
PSXCF -u $PSF '/mixer/path[@name="speaker-dmic-endfire"]/ctl[@name="ADC0 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-dmic-endfire"]/ctl[@name="ADC1 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-dmic-endfire"]/ctl[@name="ADC2 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-dmic-endfire"]/ctl[@name="ADC3 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-dmic-endfire"]/ctl[@name="ADC4 Volume"]' "20"
UIP "$MSGFFAP"
fi
done
}

PATCH_AUDIO_PLATFORM_INFO () {
UIP "Start PATCH_AUDIO_PLATFORM_INFO" "$MSGPNF"
for FAPIXML in $APIXML; do
if [ -f $MAGISKMP$FAPIXML ]; then
UIP "Found $(basename $FAPIXML)" "$MSGPMIP"
PSF="$IPMM/$MODID$FAPIXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FAPIXML $PSF
sed -i '/<bit_width_configs/a\
    <device name="SND_DEVICE_OUT_SPEAKER" bit_width="24"/>\
    <device name="SND_DEVICE_OUT_HEADPHONES" bit_width="24"/>\
    <device name="SND_DEVICE_OUT_SPEAKER_REVERSE" bit_width="24"/>\
    <device name="SND_DEVICE_OUT_SPEAKER_PROTECTED" bit_width="24"/>\
    <device name="SND_DEVICE_OUT_HEADPHONES_44_1" bit_width="24"/>\
    <device name="SND_DEVICE_OUT_GAME_SPEAKER" bit_width="24"/>\
    <device name="SND_DEVICE_OUT_GAME_HEADPHONES" bit_width="24"/>\
    <device name="SND_DEVICE_OUT_BT_A2DP" bit_width="24"/>' $PSF
sed -i 's/name="SND_DEVICE_OUT_SPEAKER" bit_width="16"/name="SND_DEVICE_OUT_SPEAKER" bit_width="24"/g' $PSF
UIP "$MSGFFAP"
fi
done
}

PATCH_MIXER () {
UIP "Start PATCH_MIXER" "$MSGPNF"
for FMPATHS in $MPATHS; do
if [ -f $MAGISKMP$FMPATHS ]; then
UIP "Found $(basename $FMPATHS)" "$MSGPMIP"
PSF="$IPMM/$MODID$FMPATHS"
sed -i 's/COMP Switch" value="1"/COMP Switch" value="0"/g' $PSF
sed -i 's/COMP0 Switch" value="1"/COMP0 Switch" value="0"/g' $PSF
sed -i 's/COMP1 Switch" value="1"/COMP1 Switch" value="0"/g' $PSF
sed -i 's/COMP2 Switch" value="1"/COMP2 Switch" value="0"/g' $PSF
sed -i 's/COMP3 Switch" value="1"/COMP3 Switch" value="0"/g' $PSF
sed -i 's/COMP4 Switch" value="1"/COMP4 Switch" value="0"/g' $PSF
sed -i 's/COMP5 Switch" value="1"/COMP5 Switch" value="0"/g' $PSF
sed -i 's/COMP6 Switch" value="1"/COMP6 Switch" value="0"/g' $PSF
sed -i 's/COMP7 Switch" value="1"/COMP7 Switch" value="0"/g' $PSF
sed -i 's/COMP8 Switch" value="1"/COMP8 Switch" value="0"/g' $PSF
sed -i 's/Softclip0 Enable" value="1"/Softclip0 Enable" value="0"/g' $PSF
sed -i 's/Softclip1 Enable" value="1"/Softclip1 Enable" value="0"/g' $PSF
sed -i 's/Softclip2 Enable" value="1"/Softclip2 Enable" value="0"/g' $PSF
sed -i 's/Softclip3 Enable" value="1"/Softclip3 Enable" value="0"/g' $PSF
sed -i 's/Softclip4 Enable" value="1"/Softclip4 Enable" value="0"/g' $PSF
sed -i 's/Softclip5 Enable" value="1"/Softclip5 Enable" value="0"/g' $PSF
sed -i 's/Softclip6 Enable" value="1"/Softclip6 Enable" value="0"/g' $PSF
sed -i 's/Softclip7 Enable" value="1"/Softclip7 Enable" value="0"/g' $PSF
sed -i 's/Softclip8 Enable" value="1"/Softclip8 Enable" value="0"/g' $PSF
sed -i 's/HPHL_RDAC Switch" value="0"/HPHL_RDAC Switch" value="1"/g' $PSF
sed -i 's/HPHR_RDAC Switch" value="0"/HPHR_RDAC Switch" value="1"/g' $PSF
sed -i 's/Boost Class-H Tracking Enable" value="0"/Boost Class-H Tracking Enable" value="1"/g' $PSF
sed -i 's/DRE DRE Switch" value="0"/DRE DRE Switch" value="1"/g' $PSF
sed -i 's/"RX INT0 DEM MUX" value="NORMAL_DSM_OUT"/"RX INT0 DEM MUX" value="CLSH_DSM_OUT"/g' $PSF
sed -i 's/"RX INT1 DEM MUX" value="NORMAL_DSM_OUT"/"RX INT1 DEM MUX" value="CLSH_DSM_OUT"/g' $PSF
sed -i 's/"RX INT2 DEM MUX" value="NORMAL_DSM_OUT"/"RX INT2 DEM MUX" value="CLSH_DSM_OUT"/g' $PSF
sed -i 's/"RX INT3 DEM MUX" value="NORMAL_DSM_OUT"/"RX INT3 DEM MUX" value="CLSH_DSM_OUT"/g' $PSF
sed -i 's/"RX INT4 DEM MUX" value="NORMAL_DSM_OUT"/"RX INT4 DEM MUX" value="CLSH_DSM_OUT"/g' $PSF
sed -i '/EC Reference Channels/d' $PSF
sed -i '/EC Reference SampleRate/d' $PSF
sed -i '/EC Reference Bit Format/d' $PSF
PSXCF -u $PSF '/mixer/ctl[@name="HPHL Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="HPHR Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="HPHL"]' "Switch"
PSXCF -u $PSF '/mixer/ctl[@name="HPHR"]' "Switch"
PSXCF -u $PSF '/mixer/ctl[@name="Load acoustic model"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Voice Sidetone Enable"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Audiosphere Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="Audiosphere Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="Set HPX OnOff"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="Set HPX OnOff"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Set HPX ActiveBe"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="Set HPX ActiveBe"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="DS2 OnOff"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="DS2 OnOff"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="THD3 Compensation"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="THD3 Compensation"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="MSM ASphere Set Param"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="MSM ASphere Set Param"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Codec Wideband"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="Codec Wideband"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="Set Custom Stereo OnOff"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="Set Custom Stereo OnOff"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="HiFi Function"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="HiFi Function"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="Virtual Bass Boost"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="Virtual Bass Boost"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_RX0 EC_HQ Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_RX1 EC_HQ Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_RX3 EC_HQ Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_RX4 EC_HQ Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT1 SEC MIX HPHL Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT2 SEC MIX HPHR Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT1 MIX3 DSD HPHL Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT2 MIX3 DSD HPHR Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="HPH Idle Detect"]' "ON"
PSXCF -s $PSF '/mixer/ctl[@name="HPH Idle Detect"]' "ON"
PSXCF -u $PSF '/mixer/ctl[@name="SLIM_7_RX Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/ctl[@name="SLIM_7_RX SampleRate"]' "KHZ_192"
PSXCF -u $PSF '/mixer/ctl[@name="SLIM_7_RX Channels"]' "Two"
PSXCF -u $PSF '/mixer/ctl[@name="SLIMBUS_7_RX Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/ctl[@name="SLIMBUS_7_RX SampleRate"]' "KHZ_192"
PSXCF -u $PSF '/mixer/ctl[@name="SLIMBUS_7_RX Channels"]' "Two"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM_7_RX Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM_7_RX SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM_7_RX Channels"]' "Two"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS_7_RX Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS_7_RX SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS_7_RX Channels"]' "Two"
PSXCF -u $PSF '/mixer/ctl[@name="SLIM7_RX ADM Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/ctl[@name="SLIM7_RX ADM SampleRate"]' "KHZ_192"
PSXCF -u $PSF '/mixer/ctl[@name="SLIM7_RX ADM Channels"]' "Two"
PSXCF -u $PSF '/mixer/ctl[@name="SLIMBUS7_RX ADM Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/ctl[@name="SLIMBUS7_RX ADM SampleRate"]' "KHZ_192"
PSXCF -u $PSF '/mixer/ctl[@name="SLIMBUS7_RX ADM Channels"]' "Two"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM7_RX ADM Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM7_RX ADM SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM7_RX ADM Channels"]' "Two"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS7_RX ADM Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS7_RX ADM SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS7_RX ADM Channels"]' "Two"
PSXCF -u $PSF '/mixer/ctl[@name="AUX_HPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="AUX_HPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="A2DP_HPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="A2DP_HPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="BT_HPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="BT_HPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="HPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="HPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="AUX_LPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="AUX_LPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="A2DP_LPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="A2DP_LPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="BT_LPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="BT_LPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="LPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="LPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="AUX_BPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="AUX_BPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="A2DP_BPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="A2DP_BPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="BT_BPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="BT_BPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="BPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="BPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="LDOH Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="LDOH Enable"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="ST Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="ST Enable"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="BDE Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="BDE Enable"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="Amp DSP Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="Amp DSP Enable"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="DRE En"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="DRE En"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX_FIR Filter"]' "OFF"
PSXCF -s $PSF '/mixer/ctl[@name="RX_FIR Filter"]' "OFF"
PSXCF -u $PSF '/mixer/path[@name="headphones-hifi-filter"]/ctl[@name="RX_FIR Filter"]' "OFF"
PSXCF -s $PSF '/mixer/path[@name="headphones-hifi-filter"]/ctl[@name="RX_FIR Filter"]' "OFF"
PSXCF -s $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="ADC0 Volume"]' "20"
PSXCF -s $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="ADC1 Volume"]' "20"
PSXCF -s $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="ADC2 Volume"]' "20"
PSXCF -s $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="ADC3 Volume"]' "20"
PSXCF -s $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="ADC4 Volume"]' "20"
UIP "$MSGFFAP"
fi
done
}

PATCH_FIX_MICRO () {
UIP "Start PATCH_FIX_MICRO" "$MSGPNF"
for FMPATHS in $MPATHS; do
if [ -f $MAGISKMP$FMPATHS ]; then
UIP "Found $(basename $FMPATHS)" "$MSGPMIP"
PSF="$IPMM/$MODID$FMPATHS"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band0"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band1"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band2"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band3"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band4"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band5"]' "1"
UIP "$MSGFFAP"
fi
done
}

PATCH_MEDIA_CODECS () {
UIP "Start PATCH_MEDIA_CODECS" "$MSGPNF"
for FMCGAX in $MCGAX; do
if [ -f $MAGISKMP$FMCGAX ]; then
UIP "Found $(basename $FMCGAX)" "$MSGPMIP"
PSF="$IPMM/$MODID$FMCGAX"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FMCGAX $PSF
AF="aac ac3 ac4 alac alaw amrnb amrwb ape dsd dsp eac3 eac3_joc flac mlaw mp3 mpegh opus raw vorbis"
sed -i "/name=\"sample-rate\"/d;/name=\"quality\"/d;/name=\"bitrate\"/d;/name=\"quality\"/d;/name=\"channel-count\"/d;/name=\"quality\"/d;/name=\"concurrent-instances\"/d;/name=\"quality\"/d;/name=\"complexity\"/d;/name=\"bitrate-modes\"/d" $PSF
for f in $AF; do
for t in encoder decoder; do
case $f in
aac | alac | ape | dsd | dsp | flac | mp3 | mpegh | opus | raw | vorbis) CC="7.1";;
ac3 ) CC="6";;
ac4 ) CC="2";;
alaw | amrnb | amrwb | mlaw) CC="1";;
eac3 | eac3_joc ) CC="8";;
esac
case $f in
aac | mp3 | mpegh | opus | raw) BR="1-210000000";;
ac3) BR="32000-640000";;
ac4) BR="16000-2688000";;
alac | ape | dsd | dsp | flac) BR="1-21000000";;
alaw | mlaw) BR="64000";;
amrnb) BR="4750-24400";;
amrwb) BR="6600-46850";;
eac3 | eac3_joc) BR="32000-6144000";;
vorbis) BR="32000-500000";;
esac
case $f in
aac) SR="7350,8000,11025,12000,16000,22050,24000,32000,44100,48000,96000,192000,384000";;
ac3 | eac3) SR="32000,44100,48000";;
ac4 | eac3_joc) SR="48000";;
alac | ape | dsd | dsp | flac) SR="1-210000000";;
alaw | mlaw) SR="8000-48000";;
amrnb) SR="8000";;
amrwb) SR="16000";;
mp3 | mpegh | opus) SR="8000,11025,12000,16000,22050,24000,32000,44100,48000,96000,192000,384000";;
raw) SR="8000-192000";;
vorbis) SR="8000-96000";;
esac
sed -i "s/\" >/\">/g;/$f.$t/,/c>/s/\">/\">\n            <Limit name=\"sample-rate\" ranges=\"$SR\" \/>/g;/$f.$t/,/c>/s/\">/\">\n            <Limit name=\"bitrate\" range=\"$BR\" \/>/g;/$f.$t/,/c>/s/\">/\">\n            <Limit name=\"channel-count\" max=\"$CC\" \/>/g;/$f.$t/,/c>/s/\">/\">\n            <Limit name=\"concurrent-instances\" max=\"10\" \/>/g;/$f.$t/,/c>/s/\">/\">\n            <Limit name=\"quality\" range=\"0-100\" default=\"100\" \/>/g;/$f.$t/,/c>/s/\">/\">\n            <Limit name=\"complexity\" range=\"0-10\" default=\"10\" \/>/g;s/\" >/\">/g;/$f.$t/,/c>/s/\">/\">\n            <Feature name=\"bitrate-modes\" value=\"CQ\" \/>/g" $PSF
done
done
UIP "$MSGFFAP"
fi
done
}

PATCH_AUDIO_POLICY () {
UIP "Start PATCH_AUDIO_POLICY" "$MSGPNF"
for FAIPAOPCONF in $AIPAOPCONF; do
if [ -f $MAGISKMP$FAIPAOPCONF ]; then
UIP "Found $(basename $FAIPAOPCONF)" "$MSGPMIP"
PSF="$IPMM/$MODID$FAIPAOPCONF"
sed -i 's/sampling_rates 44100|48000|88200|96000|176400|192000|352800|384000/sampling_rates 8000|11025|12000|16000|22050|24000|32000|44100|48000|88200|96000|176400|192000|352800|384000/g' $PSF
sed -i 's/sampling_rates 32000|44100|48000|88200|96000|176400|192000|352800/sampling_rates 8000|11025|12000|16000|22050|24000|32000|44100|48000|88200|96000|176400|192000|352800|384000/g' $PSF
sed -i 's/AUDIO_FORMAT_PCM_16_BIT_OFFLOAD|//g' $PSF
sed -i 's/AUDIO_FORMAT_PCM_24_BIT_OFFLOAD|//g' $PSF
sed -i 's/AUDIO_FORMAT_PCM_32_BIT_OFFLOAD|//g' $PSF
sed -i 's/AUDIO_FORMAT_PCM_FLOAT_OFFLOAD|//g' $PSF
sed -i 's/AUDIO_FORMAT_PCM_32_BIT/AUDIO_FORMAT_PCM_FLOAT/g' $PSF
sed -i '/AUDIO_FORMAT_MP3/a\
AIST' $PSF
sed -i '/AIST/,+1d' $PSF
sed -i '/AUDIO_FORMAT_MP3/a\
    sampling_rates 8000|11025|12000|16000|22050|24000|32000|44100|48000|88200|96000|176400|192000|352800|384000' $PSF
sed -i '/default_24/,+6d' $PSF
sed -i '/proaudio/,+6d' $PSF
sed -i '/^outputs/a\
  default_24 {\
    flags AUDIO_OUTPUT_FLAG_PRIMARY\
    formats AUDIO_FORMAT_PCM_FLOAT\
    sampling_rates 48000\
    bit_width 24\
    app_type 69937\
  }\
  default_24bit {\
    flags AUDIO_OUTPUT_FLAG_PRIMARY\
    formats AUDIO_FORMAT_PCM_FLOAT\
    sampling_rates 48000\
    bit_width 24\
    app_type 69937\
  }\
  proaudio {\
    flags AUDIO_OUTPUT_FLAG_FAST\
    formats AUDIO_FORMAT_PCM_FLOAT\
    sampling_rates 48000\
    bit_width 32\
    app_type 69943\
  }' $PSF
UIP "$MSGFFAP"
fi
done
}

PATCH_AUDIO_POLICY_CONFIGURATION () {
UIP "Start PATCH_AUDIO_POLICY_CONFIGURATION" "$MSGPNF"
for FPCXML in $APCXML; do
if [ -f $MAGISKMP$FPCXML ]; then
UIP "Found $(basename $FPCXML)" "$MSGPMIP"
PSF="$IPMM/$MODID$FPCXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FPCXML $PSF
sed -i 's/AUDIO_FORMAT_PCM_32_BIT/AUDIO_FORMAT_PCM_FLOAT/g' $PSF
sed -i '/channelMasks="AUDIO_CHANNEL_OUT_STEREO"/a\
\
\
\
\
' $PSF
sed -i '/channelMasks="AUDIO_CHANNEL_OUT_STEREO,AUDIO_CHANNEL_OUT_MONO"/a\
\
\
\
\
' $PSF
sed -i '/channelMasks="AUDIO_CHANNEL_OUT_STEREO AUDIO_CHANNEL_OUT_MONO"/a\
\
\
\
\
' $PSF
sed -i '/channelMasks="AUDIO_CHANNEL_OUT_MONO,AUDIO_CHANNEL_OUT_STEREO"/a\
\
\
\
\
' $PSF
sed -i '/channelMasks="AUDIO_CHANNEL_OUT_MONO AUDIO_CHANNEL_OUT_STEREO"/a\
\
\
\
\
' $PSF
sed -i '/AUDIO_OUTPUT_FLAG_RAW/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_FLOAT"\
                             samplingRates="48000" channelMasks="AUDIO_CHANNEL_OUT_STEREO"/>\
#AIST' $PSF
sed -i 's/ AUDIO_FORMAT_FORCE_AOSP_LL//g' $PSF
sed -i 's/AUDIO_FORMAT_FORCE_AOSP_LL//g' $PSF
sed -i 's/AUDIO_FORMAT_FORCE_AOSP/AUDIO_FORMAT_FORCE_AOSP AUDIO_FORMAT_FORCE_AOSP_LL/g' $PSF
sed -i 's/ AUDIO_FORMAT_LHDC_LL//g' $PSF
sed -i 's/AUDIO_FORMAT_LHDC_LL//g' $PSF
sed -i 's/AUDIO_FORMAT_LHDC/AUDIO_FORMAT_LHDC AUDIO_FORMAT_LHDC_LL/g' $PSF
sed -i 's/speaker_drc_enabled="true"/speaker_drc_enabled="false"/g' $PSF
sed -i 's/samplingRates="32000,44100,48000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000,352800,384000"/g' $PSF
sed -i 's/samplingRates="32000,44100,48000,64000,88200,96000,128000,176400,192000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000,352800,384000"/g' $PSF
sed -i 's/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000,352800,384000"/g' $PSF
sed -i 's/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000,352800,384000"/g' $PSF
sed -i 's/samplingRates="44100,48000,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/g' $PSF
sed -i 's/samplingRates="44100,48000,88200,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/g' $PSF
sed -i 's/samplingRates="32000 44100 48000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000 352800 384000"/g' $PSF
sed -i 's/samplingRates="32000 44100 48000 64000 88200 96000 128000 176400 192000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000 352800 384000"/g' $PSF
sed -i 's/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000 352800 384000"/g' $PSF
sed -i 's/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000 352800 384000"/g' $PSF
sed -i 's/samplingRates="44100 48000 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/g' $PSF
sed -i 's/samplingRates="44100 48000 88200 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/g' $PSF
sed -i 's/channelMasks="AUDIO_CHANNEL_OUT_5POINT1,AUDIO_CHANNEL_OUT_6POINT1,AUDIO_CHANNEL_OUT_7POINT1"/channelMasks="AUDIO_CHANNEL_OUT_MONO,AUDIO_CHANNEL_OUT_STEREO,AUDIO_CHANNEL_OUT_2POINT1,AUDIO_CHANNEL_OUT_QUAD,AUDIO_CHANNEL_OUT_PENTA,AUDIO_CHANNEL_OUT_5POINT1,AUDIO_CHANNEL_OUT_6POINT1,AUDIO_CHANNEL_OUT_7POINT1"/g' $PSF
sed -i 's/channelMasks="AUDIO_CHANNEL_OUT_5POINT1 AUDIO_CHANNEL_OUT_6POINT1 AUDIO_CHANNEL_OUT_7POINT1"/channelMasks="AUDIO_CHANNEL_OUT_MONO AUDIO_CHANNEL_OUT_STEREO AUDIO_CHANNEL_OUT_2POINT1 AUDIO_CHANNEL_OUT_QUAD AUDIO_CHANNEL_OUT_PENTA AUDIO_CHANNEL_OUT_5POINT1 AUDIO_CHANNEL_OUT_6POINT1 AUDIO_CHANNEL_OUT_7POINT1"/g' $PSF
sed -i 's/channelMasks="AUDIO_CHANNEL_OUT_STEREO,AUDIO_CHANNEL_OUT_MONO"/channelMasks="AUDIO_CHANNEL_OUT_MONO,AUDIO_CHANNEL_OUT_STEREO,AUDIO_CHANNEL_OUT_2POINT1,AUDIO_CHANNEL_OUT_QUAD,AUDIO_CHANNEL_OUT_PENTA,AUDIO_CHANNEL_OUT_5POINT1,AUDIO_CHANNEL_OUT_6POINT1,AUDIO_CHANNEL_OUT_7POINT1"/g' $PSF
sed -i 's/channelMasks="AUDIO_CHANNEL_OUT_STEREO AUDIO_CHANNEL_OUT_MONO"/channelMasks="AUDIO_CHANNEL_OUT_MONO AUDIO_CHANNEL_OUT_STEREO AUDIO_CHANNEL_OUT_2POINT1 AUDIO_CHANNEL_OUT_QUAD AUDIO_CHANNEL_OUT_PENTA AUDIO_CHANNEL_OUT_5POINT1 AUDIO_CHANNEL_OUT_6POINT1 AUDIO_CHANNEL_OUT_7POINT1"/g' $PSF
sed -i 's/channelMasks="AUDIO_CHANNEL_OUT_MONO,AUDIO_CHANNEL_OUT_STEREO,AUDIO_CHANNEL_OUT_2POINT1,AUDIO_CHANNEL_OUT_QUAD,AUDIO_CHANNEL_OUT_PENTA,AUDIO_CHANNEL_OUT_5POINT1"/channelMasks="AUDIO_CHANNEL_OUT_MONO,AUDIO_CHANNEL_OUT_STEREO,AUDIO_CHANNEL_OUT_2POINT1,AUDIO_CHANNEL_OUT_QUAD,AUDIO_CHANNEL_OUT_PENTA,AUDIO_CHANNEL_OUT_5POINT1,AUDIO_CHANNEL_OUT_6POINT1,AUDIO_CHANNEL_OUT_7POINT1"/g' $PSF
sed -i 's/channelMasks="AUDIO_CHANNEL_OUT_MONO AUDIO_CHANNEL_OUT_STEREO AUDIO_CHANNEL_OUT_2POINT1 AUDIO_CHANNEL_OUT_QUAD AUDIO_CHANNEL_OUT_PENTA AUDIO_CHANNEL_OUT_5POINT1"/channelMasks="AUDIO_CHANNEL_OUT_MONO AUDIO_CHANNEL_OUT_STEREO AUDIO_CHANNEL_OUT_2POINT1 AUDIO_CHANNEL_OUT_QUAD AUDIO_CHANNEL_OUT_PENTA AUDIO_CHANNEL_OUT_5POINT1 AUDIO_CHANNEL_OUT_6POINT1 AUDIO_CHANNEL_OUT_7POINT1"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="0" maxActiveCount="0"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="0" maxActiveCount="1"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="0" maxActiveCount="2"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="1" maxActiveCount="0"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="1" maxActiveCount="1"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="1" maxActiveCount="2"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="2" maxActiveCount="0"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="2" maxActiveCount="1"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="2" maxActiveCount="2"/mixPort name="primary input" role="sink"/g' $PSF
sed -i '/AIST/,+3d' $PSF
sed -i 's/flags="AUDIO_OUTPUT_FLAG_FAST|AUDIO_OUTPUT_FLAG_RAW/flags="AUDIO_OUTPUT_FLAG_FAST/g' $PSF
sed -i 's/flags="AUDIO_OUTPUT_FLAG_RAW|AUDIO_OUTPUT_FLAG_FAST/flags="AUDIO_OUTPUT_FLAG_FAST/g' $PSF
sed -i 's/flags="AUDIO_OUTPUT_FLAG_FAST AUDIO_OUTPUT_FLAG_RAW/flags="AUDIO_OUTPUT_FLAG_FAST/g' $PSF
sed -i 's/flags="AUDIO_OUTPUT_FLAG_RAW AUDIO_OUTPUT_FLAG_FAST/flags="AUDIO_OUTPUT_FLAG_FAST/g' $PSF
UIP "$MSGFFAP"
fi
done
}

PATCH_IMPROVE_BLUETOOTH () {
UIP "Start PATCH_IMPROVE_BLUETOOTH"
PSXCF -psf "$BTCSCONF $BTSCONF"
for FBTCSCONF in $BTCSCONF; do
UIP "Found $(basename $FBTCSCONF)" "$MSGPMIP"
PSF="$IPMM/$MODID$FBTCSCONF"
sed -i 's/aacFrameCtlEnabled = false/aacFrameCtlEnabled = true/g' $PSF
UIP "$MSGFFAP"
done
for FBTSCONF in $BTSCONF; do
UIP "Found $(basename $FBTSCONF)" "$MSGPMIP"
PSF="$IPMM/$MODID$FBTSCONF"
sed -i 's/TraceConf=true/TraceConf=false/g' $PSF
sed -i 's/TRC_BTM=2/TRC_BTM=0/g' $PSF
sed -i 's/TRC_HCI=2/TRC_HCI=0/g' $PSF
sed -i 's/TRC_L2CAP=2/TRC_L2CAP=0/g' $PSF
sed -i 's/TRC_RFCOMM=2/TRC_RFCOMM=0/g' $PSF
sed -i 's/TRC_OBEX=2/TRC_OBEX=0/g' $PSF
sed -i 's/TRC_AVCT=2/TRC_AVCT=0/g' $PSF
sed -i 's/TRC_AVDT=2/TRC_AVDT=0/g' $PSF
sed -i 's/TRC_AVRC=2/TRC_AVRC=0/g' $PSF
sed -i 's/TRC_AVDT_SCB=2/TRC_AVDT_SCB=0/g' $PSF
sed -i 's/TRC_AVDT_CCB=2/TRC_AVDT_CCB=0/g' $PSF
sed -i 's/TRC_A2D=2/TRC_A2D=0/g' $PSF
sed -i 's/TRC_SDP=2/TRC_SDP=0/g' $PSF
sed -i 's/TRC_SMP=2/TRC_SMP=0/g' $PSF
sed -i 's/TRC_BTAPP=2/TRC_BTAPP=0/g' $PSF
sed -i 's/TRC_BTIF=2/TRC_BTIF=0/g' $PSF
sed -i 's/TRC_BNEP=2/TRC_BNEP=0/g' $PSF
sed -i 's/TRC_PAN=2/TRC_PAN=0/g' $PSF
sed -i 's/TRC_HID_HOST=2/TRC_HID_HOST=0/g' $PSF
sed -i 's/TRC_HID_DEV=2/TRC_HID_DEV=0/g' $PSF
sed -i 's/TRC_GATT=2/TRC_GATT=0/g' $PSF
UIP "$MSGFFAP"
done
}

PATCH_DOLBY () {
UIP "Start PATCH_DOLBY" "$MSGPNF"
PSXCF -psf "$SDAXXML $VDAXXML"
for FDAXXML in $SDAXXML $VDAXXML; do
if [ -f $MAGISKMP$FDAXXML ]; then
UIP "Found $(basename $FDAXXML)" "$MSGPMIP"
PSF="$IPMM/$MODID$FDAXXML"
sed -i 's/mi-dv-leveler-steering-enable value="true"/mi-dv-leveler-steering-enable value="false"/g' $PSF
sed -i 's/mi-surround-compressor-steering-enable value="true"/mi-surround-compressor-steering-enable value="false"/g' $PSF
sed -i 's/mi-dialog-enhancer-steering-enable value="true"/mi-dialog-enhancer-steering-enable value="false"/g' $PSF
sed -i 's/mi-ieq-steering-enable value="false"/mi-ieq-steering-enable value="true"/g' $PSF
sed -i 's/mi-adaptive-virtualizer-steering-enable value="false"/mi-adaptive-virtualizer-steering-enable value="true"/g' $PSF
sed -i 's/low-filter-mode value="1"/low-filter-mode value="0"/g' $PSF
sed -i 's/band-filter-mode value="1"/band-filter-mode value="0"/g' $PSF
sed -i 's/middle-filter-mode value="1"/middle-filter-mode value="0"/g' $PSF
sed -i 's/height-filter-mode value="1"/height-filter-mode value="0"/g' $PSF
sed -i 's/volume-leveler-compressor-enable value="true"/volume-leveler-compressor-enable value="false"/g' $PSF
sed -i 's/hearing-protection-enable value="true"/hearing-protection-enable value="false"/g' $PSF
sed -i 's/regulator-speaker-dist-enable value="true"/regulator-speaker-dist-enable value="false"/g' $PSF
sed -i 's/bass-mbdrc-enable value="true"/bass-mbdrc-enable value="false"/g' $PSF
sed -i 's/bass-extraction-enable value="true"/bass-extraction-enable value="false"/g' $PSF
sed -i 's/reverb-suppression-enable value="true"/reverb-suppression-enable value="false"/g' $PSF
sed -i 's/audio-optimizer-enable value="true"/audio-optimizer-enable value="false"/g' $PSF
sed -i 's/regulator-sibilance-suppress-enable value="true"/regulator-sibilance-suppress-enable value="false"/g' $PSF
sed -i 's/ieq-enable value="true"/ieq-enable value="false"/g' $PSF
sed -i 's/complex-equalizer-enable value="true"/complex-equalizer-enable value="false"/g' $PSF
sed -i 's/virtual-bass-process-enable value="true"/virtual-bass-process-enable value="false"/g' $PSF
sed -i 's/virtualizer-enable value="true"/virtualizer-enable value="false"/g' $PSF
sed -i 's/bass-enhancer-enable value="false"/bass-enhancer-enable value="true"/g' $PSF
sed -i 's/dialog-enhancer-enable value="true"/dialog-enhancer-enable value="false"/g' $PSF
sed -i 's/graphic-equalizer-enable value="false"/graphic-equalizer-enable value="true"/g' $PSF
sed -i 's/surround-decoder-enable value="false"/surround-decoder-enable value="true"/g' $PSF
sed -i 's/volume-leveler-enable value="false"/volume-leveler-enable value="true"/g' $PSF
sed -i 's/volume-modeler-enable value="true"/volume-modeler-enable value="false"/g' $PSF
sed -i 's/tuned_rate="48000"/tuned_rate="96000"/g' $PSF
UIP "$MSGFFAP"
fi
done
}

IPSAQ () {
if FINDER -aiopb "$AIPAOPCONF"; then
UIP -s "$MSGFI System Audio Quality, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "$MSGRMIP"
BUCKUPER -r "$AIPAOPCONF"
UIP "$MSGDRM"
fi
else
if FINDER "$AIPAOPCONF"; then
UCSA "$MSGIPP System Audio Quality $VIPSAQ?" "IPSAQS" "$IDSAQ"
fi
fi
}

IPSAQS () {
UIP "$MSGIAM System Audio Quality"
if $MAGISK; then
PTMFI "$IDSAQ" "$IDASAQ"
MMPR -vc "System Audio Quality" "$VIPSAQ" "$VCIPSAQ" "Ichigo Kywrosaki" "This Module Improves The Sound Quality Of System Sounds"
$ECHO "if [ -d \"/debug_ramdisk/.magisk/mirror\" ]; then if [ -d \"/debug_ramdisk/.magisk/mirror/system\" ]; then MAGISKMP=\"/debug_ramdisk/.magisk/mirror\"; else MAGISKMP=\"\"; fi; else MAGISKMP=\"\$(realpath /dev/*/.magisk/mirror)\"; fi
AIPAOPCONF=\"\$(find /vendor -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
PAIPAOPCONF=false
for ALLMOD in \$(ls $IPMM); do
ALLMODAIPAOPCONF=\"\$(find $IPMM/\$ALLMOD -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
if [ ! -f $IPMM/\$ALLMOD/disable ]; then
for FAIPAOPCONF in \$ALLMODAIPAOPCONF; do
if [ -f \$FAIPAOPCONF ] && [ ! -f \$FAIPAOPCONF.bak ]; then
PAIPAOPCONF=true
cp -f \$FAIPAOPCONF \$FAIPAOPCONF.bak
sed -i '/default {/p;/default {/,/}/d;' \$FAIPAOPCONF
sed -i \"s/^  default {/  default {\n    flags AUDIO_OUTPUT_FLAG_PRIMARY\n    formats AUDIO_FORMAT_PCM_16_BIT\n    sampling_rates 48000\n    bit_width 16\n    app_type 69936\n  }/\" \$FAIPAOPCONF
elif [ -f \$FAIPAOPCONF ] && [ -f \$FAIPAOPCONF.bak ]; then
PAIPAOPCONF=true
sed -i '/default {/p;/default {/,/}/d;' \$FAIPAOPCONF
sed -i \"s/^  default {/  default {\n    flags AUDIO_OUTPUT_FLAG_PRIMARY\n    formats AUDIO_FORMAT_PCM_16_BIT\n    sampling_rates 48000\n    bit_width 16\n    app_type 69936\n  }/\" \$FAIPAOPCONF
fi
done
fi
rm -rf $IPMM/$MODID$MIPSV
done
if [ \$PAIPAOPCONF != true ]; then
for FAIPAOPCONF in \$AIPAOPCONF; do
PSF=\"$IPMM/$MODID\$FAIPAOPCONF\"
mkdir -p \`dirname \$PSF\`
cp -f \$MAGISKMP\$FAIPAOPCONF \$PSF
sed -i '/default {/p;/default {/,/}/d;' \$PSF
sed -i \"s/^  default {/  default {\n    flags AUDIO_OUTPUT_FLAG_PRIMARY\n    formats AUDIO_FORMAT_PCM_16_BIT\n    sampling_rates 48000\n    bit_width 16\n    app_type 69936\n  }/\" \$PSF
mkdir -p $IPMM/$MODID$MIPSV; cp -rf $IPMM/$MODID/vendor/* $IPMM/$MODID$MIPSV; rm -rf $IPMM/$MODID/vendor
done
fi" > $IPMM/$MODID/post-fs-data.sh
echo "#!$MIPSB/sh
if [ ! -d $IPMM/$MODID ] || [ -f $IPMM/$MODID/disable ] || [ -f $IPMM/$MODID/remove ]; then
AIPAOPCONF=\"\$(find $IPMM -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
for FAIPAOPCONF in \$AIPAOPCONF; do
if [ -f \$FAIPAOPCONF.bak ]; then
cp -f \$FAIPAOPCONF.bak \$FAIPAOPCONF
rm -f \$FAIPAOPCONF.bak
if [ ! -f $IPMM/$IDDA/disable ] && [ -f $IPMM/$IDDA/post-fs-data.sh ]; then sh $IPMM/$IDDA/post-fs-data.sh; fi
fi
done
fi
if [ ! -d $IPMM/$MODID ] || [ -f $IPMM/$MODID/remove ]; then rm -f $POSTFSDATAD/$MODID.sh; fi" > $POSTFSDATAD/$MODID.sh
chmod 0777 $POSTFSDATAD/$MODID.sh
SETPERM -mm
else
BUCKUPER -s "$AIPAOPCONF"
UIP "$MSGPNF"
for FAIPAOPCONF in $AIPAOPCONF; do
UIP "Found $(basename $FAIPAOPCONF)" "$MSGPMIP"
PSF="$FAIPAOPCONF"
sed -i '/default {/p;/default {/,/}/d;' $PSF
sed -i "s/^  default {/  default {\n    flags AUDIO_OUTPUT_FLAG_PRIMARY\n    formats AUDIO_FORMAT_PCM_16_BIT\n    sampling_rates 48000\n    bit_width 16\n    app_type 69936\n  }/" $PSF
UIP "$MSGFFAP"
done
fi
UIP "$MSGDI"
}

IPSIB () {
if FINDER -aiopb "$MPXML"; then
UIP -s "$MSGFI System Increase Bitrate, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "$MSGRMIP"
BUCKUPER -r "$MPXML"
UIP "$MSGDRM"
fi
else
if FINDER "$MPXML"; then
UCSA "$MSGIPP System Increase Bitrate $VIPSIBS?" "IPSIBS" "$IDSIBS"
fi
fi
}

IPSIBS () {
UIP "$MSGIAM System Increase Bitrate"
if $MAGISK; then
PTMFI "$IDSIBS" "$IDASIBS"
MMPR -v "System Increase Bitrate" "$VIPSIBS" "$VCIPSIBS" "System Increase Bitrate For Microphone (320kbps)"
echo "if [ -d \"/debug_ramdisk/.magisk/mirror\" ]; then if [ -d \"/debug_ramdisk/.magisk/mirror/system\" ]; then MAGISKMP=\"/debug_ramdisk/.magisk/mirror\"; else MAGISKMP=\"\"; fi; else MAGISKMP=\"\$(realpath /dev/*/.magisk/mirror)\"; fi
MPXML=\"\$(find /system /vendor -type f -name \"media_profiles*.xml\")\"
PMPXML=false
for ALLMOD in \$(ls $IPMM); do
ALLMODMPXML=\"\$(find $IPMM/\$ALLMOD -type f -name \"media_profiles*.xml\")\"
if [ ! -f $IPMM/\$ALLMOD/disable ]; then
for FMPXML in \$ALLMODMPXML; do
if [ -f \$FMPXML ] && [ ! -f \$FMPXML.bak ]; then
PMPXML=true
cp -f \$FMPXML \$FMPXML.bak
sed -i \"s/192000/320000/g\" \$FMPXML
elif [ -f \$FMPXML ] && [ -f \$FMPXML.bak ]; then
PMPXML=true
sed -i \"s/192000/320000/g\" \$FMPXML
fi
done
fi
rm -rf $IPMM/$MODID$MIPSV
done
if [ \$PMPXML != true ]; then
for FMPXML in \$MPXML; do
PSF=\"$IPMM/$MODID\$FMPXML\"
mkdir -p \`dirname \$PSF\`
cp -f \$MAGISKMP\$FMPXML \$PSF
sed -i \"s/192000/320000/g\" \$PSF
mkdir -p $IPMM/$MODID$MIPSV; cp -rf $IPMM/$MODID/vendor/* $IPMM/$MODID$MIPSV; rm -rf $IPMM/$MODID/vendor
done
fi" > $IPMM/$MODID/post-fs-data.sh
echo "#!$MIPSB/sh
if [ ! -d $IPMM/$MODID ] || [ -f $IPMM/$MODID/disable ] || [ -f $IPMM/$MODID/remove ]; then
MPXML=\"\$(find $IPMM -type f -name \"media_profiles*.xml\")\"
for FMPXML in \$MPXML; do
if [ -f \$FMPXML.bak ]; then
cp -f \$FMPXML.bak \$FMPXML
rm -f \$FMPXML.bak
fi
done
fi
if [ ! -d $IPMM/$MODID ] || [ -f $IPMM/$MODID/remove ]; then rm -f $POSTFSDATAD/$MODID.sh; fi" > $POSTFSDATAD/$MODID.sh
chmod 0777 $POSTFSDATAD/$MODID.sh
SETPERM -mm
else
BUCKUPER -s "$MPXML"
UIP "$MSGPNF"
for FMPXML in $MPXML; do
UIP "Found $(basename $FMPXML)" "$MSGPMIP"
PSF="$FMPXML"
sed -i "s/192000/320000/g" $PSF
UIP "$MSGFFAP"
done
fi
UIP "$MSGDI"
}

IPAML () {
if $MAGISK; then
UCSA "$MSGIP Audio Modification Library $VIPAML?" "IPAMLS" "$IDAML"
fi
}

IPAMLS () {
UIP "$MSGIAM Audio Modification Library"
MODID="$IDAML"; REMOVER -emm "$MODID aml acp" "system"
TOUCHER $IPMM/$MODID/update
MMPR -vcs "Audio Modification Library" "$VIPAML" "$VCIPAML" "zackptg5, ahrion" "AudModLib Is A Framework That Allows The Seamless Integration Of Multiple Audio Mods In Magisk" "https://forum.xda-developers.com/apps/magisk/module-audio-modification-library-t3579612"
echo "#!$MIPSB/sh
if [ -s $IPDADB/$MODID/modlist ]; then
while read MOD; do
[ -d \"$IPMM/\$MOD\" ] || continue
for file in \$(find $IPDADB/$MODID/\$MOD -type f 2>$NULL | sed \"s|$IPDADB/$MODID/||\"); do
[ -f \"$IPMM/\$file\" ] || cp -af $IPDADB/$MODID/\$file $IPMM/\$file
done
done < $IPDADB/$MODID/modlist
fi
rm -rf $IPDADB/$MODID $IPMM/$MODID/system
for AMODID in $IDDA $IDSIBS $IDSAQ $IDALCF; do
if [ -d $IPMM/\$AMODID ]; then
if [ ! -f $IPMM/\$AMODID/disable ] || [ ! -f $IPMM/\$AMODID/remove ]; then
sh $IPMM/\$AMODID/post-fs-data.sh
fi
fi
done
if [ ! -d $IPMM/$MODID ] || [ -f $IPMM/$MODID/remove ]; then rm -f $POSTFSDATAD/$MODID.sh; fi" | tee $IPMM/$MODID/uninstall.sh $POSTFSDATAD/$MODID.sh >$NULL
echo "if [ -d \"/debug_ramdisk/.magisk/mirror\" ]; then if [ -d \"/debug_ramdisk/.magisk/mirror/system\" ]; then MAGISKMP=\"/debug_ramdisk/.magisk/mirror\"; else MAGISKMP=\"\"; fi; else MAGISKMP=\"\$(realpath /dev/*/.magisk/mirror)\"; fi

SETPERM () {
case \$1 in
-s) chown \$3:\$4 \$2 || return 1
chmod \$5 \$2 || return 1
CON=\$6
[ -z \$CON ] && CON=u:object_r:system_file:s0
chcon \$CON \$2 || return 1;;
-rp) find \$2 -type d 2>$NULL | while read dir; do
SETPERM -s \$dir \$3 \$4 \$5 \$7
done
find \$2 -type f -o -type l 2>$NULL | while read file; do
SETPERM -s \$file \$3 \$4 \$6 \$7
done;;
esac
}

CP_MV () {
mkdir -p \"\$(dirname \"\$3\")\"
cp -af \"\$2\" \"\$3\"
[ \"\$1\" == \"-m\" ] && rm -f \$2 || true
}

OSP_DETECT () {
local SPACES EFFECT type=\"\$1\" files=\$(find $IPMM/$MODID/system -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\")
for file in \$files; do
for OSP in \$type; do
case \$file in
*.conf) SPACES=\$(sed -n \"/^output_session_processing {/,/^}/ {/^ *\$OSP {/p}\" \$file | sed -r \"s/( *).*/\1/\")
EFFECT=\$(sed -n \"/^output_session_processing {/,/^}/ {/^\$SPACES\\\$OSP {/,/^\$SPACES}/p}\" \$file | grep -E \"^\$SPACES +[A-Za-z]+\" | sed -r \"s/( *.*) .*/\1/g\")
for EFFECT in \${EFFECT}; do
SPACES=\$(sed -n \"/^effects {/,/^}/ {/^ *\$EFFECT {/p}\" \$file | sed -r \"s/( *).*/\1/\")
[ \"\$EFFECT\" != \"atmos\" -a \"\$EFFECT\" != \"dtsaudio\" ] && sed -i \"/^effects {/,/^}/ {/^\$SPACES\$EFFECT {/,/^\$SPACES}/d}\" \$file
done;;
*.xml) EFFECT=\$(sed -n \"/^ *<postprocess>\$/,/^ *<\/postprocess>\$/ {/^ *<stream type=\\\"\$OSP\\\">\$/,/^ *<\/stream>\$/ {/<stream type=\\\"\$OSP\\\">/d; /<\/stream>/d; s/<apply effect=\\\"//g; s/\\\"\/>//g; s/ *//g; p}}\" \$file)
for EFFECT in \${EFFECT}; do
[ \"\$EFFECT\" != \"atmos\" -a \"\$EFFECT\" != \"dtsaudio\" ] && sed -i \"/^\( *\)<apply effect=\\\"\$EFFECT\\\"\/>/d\" \$file
done;;
esac
done
done
return 0
}

. $IPMM/$MODID/uninstall.sh
rm -rf $IPDADB/$MODID $IPMM/$MODID/system $IPMM/$MODID/Errors.txt $IPMM/$MODID/system.prop
mkdir -p $IPDADB/$MODID
files=\"\$(find \$MAGISKMP/system_root/system \$MAGISKMP/system \$MAGISKMP/vendor -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\" -o -name \"*audio_*policy*.conf\" -o -name \"*audio_*policy*.xml\" -o -name \"*mixer_paths*.xml\" -o -name \"*mixer_gains*.xml\" -o -name \"*audio_device*.xml\" -o -name \"*sapa_feature*.xml\" -o -name \"*audio_platform_info*.xml\" -o -name \"*audio_configs*.xml\" -o -name \"*audio_device*.xml\")\"
for file in \$files; do
name=\$(echo \"\$file\" | sed -e \"s|\$MAGISKMP||\" -e \"s|/system_root/|/|\" -e \"s|/system/|/|\")
CP_MV -c \$file $IPMM/$MODID/system\$name
modfiles=\"/system\$name \$modfiles\"
done
OSP_DETECT \"music\"

for MOD in \$(find $IPMM/* -maxdepth 0 -type d ! -name $MODID); do
MODNAME=\"\$(basename \$MOD)\"
[ -f \"\$MOD/disable\" ] && continue
files=\"\$(find \$MOD/system -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\" -o -name \"*audio_*policy*.conf\" -o -name \"*audio_*policy*.xml\" -o -name \"*mixer_paths*.xml\" -o -name \"*mixer_gains*.xml\" -o -name \"*audio_device*.xml\" -o -name \"*sapa_feature*.xml\" -o -name \"*audio_platform_info*.xml\" -o -name \"*audio_configs*.xml\" -o -name \"*audio_device*.xml\" 2>$NULL)\"
[ \"\$files\" ] && echo \"\$MODNAME\" >> $IPDADB/$MODID/modlist || continue
for file in \$files; do
CP_MV -m \$file $IPDADB/$MODID/\$MODNAME/\$(echo \"\$file\" | sed \"s|\$MOD/||\")
done
[ $ASDK -ge 29 ] && chcon -R u:object_r:vendor_file:s0 \$MOD$MIPSV/lib*/soundfx 2>$NULL
done

for file in \$modfiles; do
[ \"\$(find $IPDADB/$MODID -type f -path \"*\$file\")\" ] || rm -f $IPMM/$MODID\$file
done

SETPERM -rp $IPMM/$MODID/system 0 0 0755 0644
if [ -d $IPMM/$MODID$MIPSV ]; then
SETPERM -rp $IPMM/$MODID$MIPSV 0 0 0755 0644 u:object_r:vendor_file:s0
[ -d $IPMM/$MODID$MIPSVE ] && SETPERM -rp $IPMM/$MODID$MIPSVE 0 0 0755 0644 u:object_r:vendor_configs_file:s0
fi

for AMODID in $IDDA $IDSIBS $IDSAQ $IDALCF; do
if [ -d $IPMM/\$AMODID ] && [ ! -f $IPMM/\$AMODID/disable ]; then
sh $IPMM/\$AMODID/post-fs-data.sh
fi
done

exit 0" > $IPMM/$MODID/post-fs-data.sh
$ECHO "[ $ASDK -ge 26 ] && LIBDIR=\"/vendor\" || LIBDIR=\"/system\"

CP_MV () {
mkdir -p \"\$(dirname \"\$3\")\"
cp -af \"\$2\" \"\$3\"
[ \"\$1\" == \"-m\" ] && rm -f \$2 || true
}

OSP_DETECT () {
local SPACES EFFECT type=\"\$1\" files=\$(find $IPMM/$MODID/system -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\")
for file in \$files; do
for OSP in \$type; do
case \$file in
*.conf) SPACES=\$(sed -n \"/^output_session_processing {/,/^}/ {/^ *\$OSP {/p}\" \$file | sed -r \"s/( *).*/\1/\")
EFFECT=\$(sed -n \"/^output_session_processing {/,/^}/ {/^\$SPACES\\\$OSP {/,/^\$SPACES}/p}\" \$file | grep -E \"^\$SPACES +[A-Za-z]+\" | sed -r \"s/( *.*) .*/\1/g\")
for EFFECT in \${EFFECT}; do
SPACES=\$(sed -n \"/^effects {/,/^}/ {/^ *\$EFFECT {/p}\" \$file | sed -r \"s/( *).*/\1/\")
[ \"\$EFFECT\" != \"atmos\" -a \"\$EFFECT\" != \"dtsaudio\" ] && sed -i \"/^effects {/,/^}/ {/^\$SPACES\$EFFECT {/,/^\$SPACES}/d}\" \$file
done;;
*.xml) EFFECT=\$(sed -n \"/^ *<postprocess>\$/,/^ *<\/postprocess>\$/ {/^ *<stream type=\\\"\$OSP\\\">\$/,/^ *<\/stream>\$/ {/<stream type=\\\"\$OSP\\\">/d; /<\/stream>/d; s/<apply effect=\\\"//g; s/\\\"\/>//g; s/ *//g; p}}\" \$file)
for EFFECT in \${EFFECT}; do
[ \"\$EFFECT\" != \"atmos\" -a \"\$EFFECT\" != \"dtsaudio\" ] && sed -i \"/^\( *\)<apply effect=\\\"\$EFFECT\\\"\/>/d\" \$file
done;;
esac
done
done
return 0
}

PATCH_CFGS () {
local first=true files=\"\" file lib=false effect=false outsp=false proxy=false replace=false libname libpath effname uid libname_sw uid_sw libname_hw uid_hw libpathsw libpathhw conf xml opt=\`getopt :fleoqpr \"\$@\"\`
eval set -- \"\$opt\"
while true; do
case \"\$1\" in
-f) files=\"placeholder\"; shift;;
-l) lib=true first=false; shift;;
-e) effect=true first=false; shift;;
-o) outsp=true conf=output_session_processing xml=postprocess first=false; shift;;
-q) outsp=true conf=pre_processing xml=preprocess first=false; shift;;
-p) proxy=true effect=false outsp=false first=false; shift;;
-r) replace=true; shift;;
--) shift; break;;
*) return 1;;
esac
done
[ -z \"\$files\" ] && files=\$(find $IPMM/$MODID/system -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\") || { files=\"\$1\"; shift; }
\$first && { lib=true; effect=true; }
if \$proxy; then
effname=\$1 uid=\${2:?}; shift 2
libname_sw=\$1 uid_sw=\${2:?}; shift 2
\$lib && { libpathsw=\$1; shift; }
libname_hw=\$1 uid_hw=\${2:?}; shift 2
\$lib && { libpathhw=\${1:?}; shift; }
else
\$outsp && { type=\${1:?}; shift; }
{ \$effect || \$outsp; } && { effname=\${1:?}; shift; }
\$effect && { uid=\${1:?}; shift; }
{ \$lib || \$effect; } && { libname=\${1:?}; shift; }
\$lib && { libpath=\${1:?}; shift; }
fi
for file in \$files; do
case \"\$file\" in
*.conf)
if \$proxy; then
if \$replace && [ \"\$(sed -n \"/^effects {/,/^}/ {/^  \$effname {/,/^  }/p}\" \$file)\" ]; then
SPACES=\$(sed -n \"/^effects {/,/^}/ {/^ *\$effname {/p}\" \$file | sed -r \"s/( *).*/\1/\")
sed -i \"/^effects {/,/^}/ {/^\$SPACES\$effname {/,/^\$SPACES}/d}\" \$file
fi
[ ! \"\$(sed -n \"/^effects {/,/^}/ {/^  \$effname {/,/^  }/p}\" \$file)\" ] && sed -i \"s/^effects {/effects {\\n  \$effname {\\n    library proxy\\n    uuid \$uid\\n\\n    libsw {\\n      library \$libname_sw\\n      uuid \$uid_sw\\n    }\\n\\n    libhw {\\n      library \$libname_hw\\n      uuid \$uid_hw\\n    }\\n  }/g\" \$file
if \$lib; then
PATCH_CFGS -fl \"\$file\" \"proxy\" \"\$LIBDIR/lib/soundfx/libeffectproxy.so\"
if \$replace; then
PATCH_CFGS -frl \"\$file\" \"\$libname_sw\" \"\$libpathsw\"
PATCH_CFGS -frl \"\$file\" \"\$libname_hw\" \"\$libpathhw\"
else
PATCH_CFGS -fl \"\$file\" \"\$libname_sw\" \"\$libpathsw\"
PATCH_CFGS -fl \"\$file\" \"\$libname_hw\" \"\$libpathhw\"
fi
fi
else
if \$lib; then
if \$replace && [ \"\$(sed -n \"/^libraries {/,/^}/ {/^ *\$libname {/,/}/p}\" \$file)\" ]; then
SPACES=\$(sed -n \"/^libraries {/,/^}/ {/^ *\$libname {/p}\" \$file | sed -r \"s/( *).*/\1/\")
sed -i \"/^libraries {/,/^}/ {/^\$SPACES\$libname {/,/^\$SPACES}/d}\" \$file
fi
[ ! \"\$(sed -n \"/^libraries {/,/^}/ {/^ *\$libname {/,/}/p}\" \$file)\" ] && sed -i \"s|^libraries {|libraries {\\n  \$libname {\\n    path \$libpath\\n  }|\" \$file
fi
if \$effect; then
if \$replace && [ \"\$(sed -n \"/^effects {/,/^}/ {/^ *\$effname {/,/}/p}\" \$file)\" ]; then
SPACES=\$(sed -n \"/^effects {/,/^}/ {/^ *\$effname {/p}\" \$file | sed -r \"s/( *).*/\1/\")
sed -i \"/^effects {/,/^}/ {/^\$SPACES\$effname {/,/^\$SPACES}/d}\" \$file
fi
[ ! \"\$(sed -n \"/^effects {/,/^}/ {/^ *\$effname {/,/}/p}\" \$file)\" ] && sed -i \"s|^effects {|effects {\\n  \$effname {\\n    library \$libname\\n    uuid \$uid\\n  }|\" \$file
fi
if \$outsp && [ \"$ASDK\" -ge 26 ]; then
local OIFS=\$IFS IFS=','
for i in \$type; do
if [ ! \"\$(sed -n \"/^\$conf {/,/^}/p\" \$file)\" ]; then
echo -e \"\\n\$conf {\\n    \$i {\\n        \$effname {\\n        }\\n    }\\n}\" >> \$file
elif [ ! \"\$(sed -n \"/^\$conf {/,/^}/ {/\$i {/,/^    }/p}\" \$file)\" ]; then
sed -i \"/^\$conf {/,/^}/ s/\$conf {/\$conf {\\n    \$i {\\n        \$effname {\\n        }\\n    }/\" \$file
elif [ ! \"\$(sed -n \"/^\$conf {/,/^}/ {/\$i {/,/^    }/ {/\$effname {/,/}/p}}\" \$file)\" ]; then
sed -i \"/^\$conf {/,/^}/ {/\$i {/,/^    }/ s/\$i {/\$i {\\n        \$effname {\\n        }/}\" \$file
fi
done
local IFS=\$OIFS
fi
fi;;
*.xml)
if \$proxy; then
if \$replace && [ \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\"\$effname\".*>/,/^ *<\/effectProxy>/p}\" \$file)\" -o \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*\/>/p}\" \$file)\" ]; then
sed -i \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\\\"\$effname\\\".*>/,/^ *<\/effectProxy>/d}\" \$file
sed -i \"/<effects>/,/<\/effects>/ {/^ *<effect name=\\\"\$effname\\\".*\/>/d}\" \$file
fi
[ ! \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\"\$effname\".*>/,/^ *<\/effectProxy>/p}\" \$file)\" -a ! \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*>/,/^ *\/>/p}\" \$file)\" ] && sed -i -e \"/<effects>/ a\        <effectProxy name=\\\"\$effname\\\" library=\\\"proxy\\\" uuid=\\\"\$uid\\\">\\n            <libsw library=\\\"\$libname_sw\\\" uuid=\\\"\$uid_sw\\\"\/>\\n            <libhw library=\\\"\$libname_hw\\\" uuid=\\\"\$uid_hw\\\"\/>\\n        <\/effectProxy>\" \$file
if \$lib; then
PATCH_CFGS -fl \"\$file\" \"proxy\" \"\$LIBDIR/lib/soundfx/libeffectproxy.so\"
if \$replace; then
PATCH_CFGS -frl \"\$file\" \"\$libname_sw\" \"\$libpathsw\"
PATCH_CFGS -frl \"\$file\" \"\$libname_hw\" \"\$libpathhw\"
else
PATCH_CFGS -fl \"\$file\" \"\$libname_sw\" \"\$libpathsw\"
PATCH_CFGS -fl \"\$file\" \"\$libname_hw\" \"\$libpathhw\"
fi
fi
else
if \$lib; then
if \$replace && [ \"\$(sed -n \"/<libraries>/,/<\/libraries>/ {/^ *<library name=\"\$libname\" path=\"\$(basename \$libpath)\"\/>/p}\" \$file)\" ]; then
sed -i \"/<libraries>/,/<\/libraries>/ {/^ *<library name=\\\"\$libname\\\" path=\\\"\$(basename \$libpath)\\\"\/>/d}\" \$file
fi
[ ! \"\$(sed -n \"/<libraries>/,/<\/libraries>/ {/^ *<library name=\"\$libname\" path=\"\$(basename \$libpath)\"\/>/p}\" \$file)\" ] && sed -i \"/<libraries>/ a\        <library name=\\\"\$libname\\\" path=\\\"\$(basename \$libpath)\\\"\/>\" \$file
fi
if \$effect; then
if \$replace && [ \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*\/>/p}\" \$file)\" -o \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\"\$effname\".*>/,/^ *<\/effectProxy>/p}\" \$file)\" ]; then
sed -i \"/<effects>/,/<\/effects>/ {/^ *<effect name=\\\"\$effname\\\".*\/>/d}\" \$file
sed -i \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\\\"\$effname\\\".*>/,/^ *<\/effectProxy>/d}\" \$file
fi
[ ! \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*\/>/p}\" \$file)\" ] && sed -i \"/<effects>/ a\        <effect name=\\\"\$effname\\\" library=\\\"\$(basename \$libname)\\\" uuid=\\\"\$uid\\\"\/>\" \$file
fi
if \$outsp && [ \"$ASDK\" -ge 26 ]; then
local OIFS=\$IFS IFS=','
for i in \$type; do
if [ ! \"\$(sed -n \"/^ *<\$xml>/,/^ *<\/\$xml>/p\" \$file)\" ]; then
sed -i \"/<\/audio_effects_conf>/i\    <\$xml>\\n       <stream type=\\\"\$type\\\">\\n            <apply effect=\\\"\$effname\\\"\/>\\n        <\/stream>\\n    <\/\$xml>\" \$file
elif [ ! \"\$(sed -n \"/^ *<\$xml>/,/^ *<\/\$xml>/ {/<stream type=\\\"\$type\\\">/,/<\/stream>/p}\" \$file)\" ]; then
sed -i \"/^ *<\$xml>/,/^ *<\/\$xml>/ s/    <\$xml>/    <\$xml>\\n        <stream type=\\\"\$type\\\">\\n            <apply effect=\\\"\$effname\\\"\/>\\n        <\/stream>/\" \$file
elif [ ! \"\$(sed -n \"/^ *<\$xml>/,/^ *<\/\$xml>/ {/<stream type=\\\"\$type\\\">/,/<\/stream>/ {/^ *<apply effect=\"\$effname\"\/>/p}}\" \$file)\" ]; then
sed -i \"/^ *<\$xml>/,/^ *<\/\$xml>/ {/<stream type=\\\"\$type\\\">/,/<\/stream>/ s/<stream type=\\\"\$type\\\">/<stream type=\\\"\$type\\\">\\n            <apply effect=\\\"\$effname\\\"\/>/}\" \$file
fi
done
local IFS=\$OIFS
fi
fi;;
esac
done
return 0
}

LEGACY_SCRIPT () {
local RUNONCE=false COUNT=1 LIBDIR=\$LIBDIR/lib/soundfx MOD=\$MOD
(. \$MOD/.aml.sh) || echo \"Error in \$MODNAME aml.sh script\" >> $IPMM/$MODID/Errors.txt
for file in \$files; do
local NAME=\$(echo \"\$file\" | sed \"s|\$MOD|system|\")
\$RUNONCE || { case \$file in
*audio_effects*) (. \$MOD/.aml.sh) || [ \"\$(grep -x \"\$MODNAME\" $IPMM/$MODID/Errors.txt)\" ] || echo \"Error in \$MODNAME aml.sh script\" >> $IPMM/$MODID/Errors.txt; COUNT=\$((\$COUNT + 1));;
esac; }
done
}

HEXUUID_CHECKER () {
UUID=\"\$1\"
HEXUUID=\"\$(echo \$UUID | sed -r -e \"s/^(..)(..)(..)(..)-(..)(..)-(..)(..)-/\4\3\2\1\6\5\8\7-/\" -e \"s/-(..)(..)-(............)\$/\2\1\3/\")\"
xxd -p \$lib | tr -d '\\n' | grep -q \"\$HEXUUID\" || continue
\$(grep -xq \"\$MODNAME\" $IPDADB/$MODID/modlist || echo \"\$MODNAME\" >> $IPDADB/$MODID/modlist)
}

(

for MOD in \$(find $IPMM/* -maxdepth 0 -type d ! -name $MODID); do
MODNAME=\"\$(basename \$MOD)\"
[ -f \"\$MOD/disable\" ] && continue
[ -f \"\$MOD/aml.sh\" ] && cp -f \$MOD/aml.sh \$MOD/.aml.sh
if [ -f \"\$MOD/.aml.sh\" ]; then
grep -qx \"\$MODNAME\" $IPDADB/$MODID/modlist || echo \"\$MODNAME\" >> $IPDADB/$MODID/modlist
if grep -qE '$IPMM/$MODID/\\$NAME|RUNONCE=|COUNT=' \$MOD/.aml.sh; then
LEGACY_SCRIPT
else
(. \$MOD/.aml.sh) || echo \"Error in \$MODNAME aml.sh script\" >> $IPMM/$MODID/Errors.txt
fi
else
libs=\"\$(find \$MOD$MIPSLS \$MOD$MIPSVLS -type f -name \"libam3daudioenhancement.so\" -o -name \"libarkamys.so\" -o -name \"libatmos.so\" -o -name \"libbassboostMz.so\" -o -name \"libdirac.so\" -o -name \"libdirac.so\" -o -name \"libdseffect.so\" -o -name \"libdtsaudio.so\" -o -name \"libhwdap.so\" -o -name \"libhwdax.so\" -o -name \"libicepower.so\" -o -name \"libjamesdsp.so\" -o -name \"libmaxxeffect-cembedded.so\" -o -name \"libsonysweffect.so\" -o -name \"libswdap.so\" -o -name \"libswdap_ds1se.so\" -o -name \"libswdax.so\" -o -name \"libswvlldp.so\" -o -name \"libv4a_fx.so\" -o -name \"libv4a_fx_ics.so\" -o -name \"libv4a_xhifi_ics.so\"  -o -name \"libv4a_re.so\" -o -name \"libdiraceffect.so\")\"
for lib in \$libs; do
libfile=\"\$(echo \$lib | sed -e \"s|\$MOD||\" -e \"s|$MIPSV|/vendor|\")\"
case \$(basename \$lib) in
libam3daudioenhancement.so) HEXUUID_CHECKER 6723dd80-f0b7-11e0-98a2-0002a5d5c51b
PATCH_CFGS am3daudioenhancement \$UUID am3daudioenhancement \$libfile;;
libv4a_fx.so) HEXUUID_CHECKER 41d3c987-e6cf-11e3-a88a-11aba5d5c51b
PATCH_CFGS v4a_standard_fx \$UUID v4a_fx \$libfile;;
libv4a_fx_ics.so) HEXUUID_CHECKER 41d3c987-e6cf-11e3-a88a-11aba5d5c51b
PATCH_CFGS v4a_standard_fx \$UUID v4a_fx \$libfile;;
libv4a_xhifi_ics.so) HEXUUID_CHECKER d92c3a90-3e26-11e2-a25f-0800200c9a66
PATCH_CFGS v4a_standard_xhifi \$UUID v4a_xhifi \$libfile;;
libv4a_re.so) HEXUUID_CHECKER 90380da3-8536-4744-a6a3-5731970e640f
PATCH_CFGS v4a_standard_re \$UUID v4a_re \$libfile;;
libhwdax.so) HEXUUID_CHECKER 9d4921da-8225-4f29-aefa-6e6f69726861
PATCH_CFGS -pl dax \$UUID dax_sw 6ab06da4-c516-4611-8166-6168726e6f69 \$(dirname \$libfile)/libswdax.so dax_hw a0c30891-8246-4aef-b8ad-696f6e726861 \$libfile;;
libswdax.so) HEXUUID_CHECKER 9d4921da-8225-4f29-aefa-6e6f69726861
PATCH_CFGS dax \$UUID dax \$libfile;;
libswdap.so) HEXUUID_CHECKER 9d4921da-8225-4f29-aefa-39537a04bcaa
PATCH_CFGS dap \$UUID dap \$libfile;;
libhwdap.so) HEXUUID_CHECKER a0c30891-8246-4aef-b8ad-d53e26da0253
PATCH_CFGS -pl dap 9d4921da-8225-4f29-aefa-6e6f69726861 dap_sw 6ab06da4-c516-4611-8166-452799218539 \$(dirname \$libfile)/libswdap.so dap_hw \$UUID \$libfile;;
libdseffect.so) HEXUUID_CHECKER 9d4921da-8225-4f29-aefa-39537a04bcaa
PATCH_CFGS dsplus \$UUID ds \$libfile;;
libswvlldp.so) HEXUUID_CHECKER 3783c334-d3a0-4d13-874f-0032e5fb80e2
PATCH_CFGS vlldp \$UUID vlldp \$libfile
PATCH_CFGS -ole music atmos 9d4921da-8225-4f29-aefa-aacb40a73593 atmos \$(dirname \$libfile)/libatmos.so;;
libicepower.so) HEXUUID_CHECKER f1c02420-777f-11e3-981f-0800200c9a66
PATCH_CFGS -l icepower \$libfile
PATCH_CFGS -e icepower_algo \$UUID icepower
PATCH_CFGS -e icepower_eq 50dbef80-4ad4-11e3-8f96-0800200c9a66 icepower
PATCH_CFGS -e icepower_test e5456320-5391-11e3-8f96-0800200c9a66 icepower
PATCH_CFGS -e icepower_load bf51a790-512b-11e3-8f96-0800200c9a66 icepower
PATCH_CFGS -e icepower_null 63509430-52aa-11e3-8f96-0800200c9a66 icepower;;
libarkamys.so) HEXUUID_CHECKER 17852d50-161e-11e2-892e-0800200c9a66
PATCH_CFGS -ole music Arkamysfx \$UUID arkamys \$libfile;;
libdirac.so) HEXUUID_CHECKER 4c6383e0-ff7d-11e0-b6d8-0002a5d5c51b
PATCH_CFGS dirac \$UUID dirac \$libfile
PATCH_CFGS -e dirac_controller b437f4de-da28-449b-9673-667f8b9643fe dirac
PATCH_CFGS -e dirac_music b437f4de-da28-449b-9673-667f8b964304 dirac;;
libdirac.so) HEXUUID_CHECKER e069d9e0-8329-11df-9168-0002a5d5c51b
PATCH_CFGS -ole music dirac \$UUID dirac \$libfile;;
libjamesdsp.so) HEXUUID_CHECKER f27317f4-c984-4de6-9a90-545759495bf2
PATCH_CFGS jamesdsp \$UUID jdsp \$libfile;;
libmaxxeffect-cembedded.so) HEXUUID_CHECKER ae12da60-99ac-11df-b456-0002a5d5c51b
PATCH_CFGS -ole music maxxaudio3 \$UUID maxxaudio3 \$libfile;;
libbassboostMz.so) HEXUUID_CHECKER 850b6319-bf66-4f93-bec0-dc6964367786
PATCH_CFGS bassboostMz \$UUID bassboostMz \$libfile
PATCH_CFGS virtualizerMz 0e9779c9-4e8f-494d-b2b1-b4ad4e37c54c virtualizerMz \$(dirname \$libfile)/libvirtualizerMz.so
PATCH_CFGS livemusicMz 0bbc89fe-52dc-4c40-8211-cae4da538b50 livemusicMz \$(dirname \$libfile)/liblivemusicMz.so
PATCH_CFGS equalizerMz 9626da93-9c71-4bb2-8e23-9fc707fb9703 equalizerMz \$(dirname \$libfile)/ibequalizerMz.so;;
libsonysweffect.so) HEXUUID_CHECKER 50786e95-da76-4557-976b-7981bdf6feb9
PATCH_CFGS -qle mic,camcorder ZNR b8a031e0-6bbf-11e5-b9ef-0002a5d5c51b znrwrapper \$(dirname \$libfile)/libznrwrapper.so
PATCH_CFGS -pl sonyeffect af8da7e0-2ca1-11e3-b71d-0002a5d5c51b sonyeffect_sw \$UUID \$libfile sonyeffect_hw f9ed8ae0-1b9c-11e4-8900-0002a5d5c51b \$(dirname \$libfile)/libsonypostprocbundle.so;;
libatmos.so) HEXUUID_CHECKER 74697567-7261-6564-6864-65726f206678
PATCH_CFGS dolbyatmos \$UUID dolbyatmos \$libfile
OSP_DETECT \"alarm notification ring\";;
libswdap_ds1se.so) HEXUUID_CHECKER 74697567-7261-6564-6864-65726f206678
PATCH_CFGS dolbyatmos \$UUID dolbyatmos \$libfile
OSP_DETECT \"alarm notification ring\";;
libdtsaudio.so) HEXUUID_CHECKER 146edfc0-7ed2-11e4-80eb-0002a5d5c51b
PATCH_CFGS -ole music dtsaudio \$UUID dtsaudio \$libfile;;
libdiraceffect.so) HEXUUID_CHECKER 3799d6d1-22c5-43c3-b3ec-d664cf8d2f0d
PATCH_CFGS dirac_gef \$UUID dirac_gef \$libfile;;
esac
done
fi
done
for i in \$(find $IPMM/$MODID/system -type f); do
j=\"\$(echo \$i | sed \"s|$IPMM/$MODID||\")\"
umount \$j
mount -o bind \$i \$j
done
[ $ASDK -ge 24 ] && killall audioserver 2>$NULL || killall mediaserver 2>$NULL
exit 0
)&" > $IPMM/$MODID/service.sh
sed -i "3aif [ -f \"$IPMM/$MODID/disable\" ]; then :; elif [ -d \"$IPMM/$MODID\" ]; then exit 0; fi" $POSTFSDATAD/$MODID.sh
chmod 0777 $POSTFSDATAD/$MODID.sh
SETPERM -mm -msg
}

IPALCF () {
if $MAGISK; then
UCSA "$MSGIP Audio Library Crackling Fix $VIPALCF?" "IPALCFS" "$IDALCF"
fi
}

IPALCFS () {
UIP "$MSGIAM Audio Library Crackling Fix"
PTMFI "$IDALCF"
MMPR -v "Audio Library Crackling Fix" "$VIPALCF" "$VCIPALCF" "Audio Library Crackling Fix For Audio Modules, Stock Equalizers Or Libraries With Problems And Crackling System Sound/Notifications"
REPLACER -a "libaudiopreprocessing.so libasphere.so libldnhncr.so libqcomvoiceprocessing.so libshoebox.so libvolumelistener.so" "$IPVLS $IPVLS64"
MOVERPATH
echo "if [ -d \"/debug_ramdisk/.magisk/mirror\" ]; then if [ -d \"/debug_ramdisk/.magisk/mirror/system\" ]; then MAGISKMP=\"/debug_ramdisk/.magisk/mirror\"; else MAGISKMP=\"\"; fi; else MAGISKMP=\"\$(realpath /dev/*/.magisk/mirror)\"; fi
AECONFXML=\"\$(find /vendor -type f -name \"*audio_effects*.xml\")\"
PAECONFXML=false
for ALLMOD in \$(ls $IPMM); do
ALLMODAECONFXML=\"\$(find $IPMM/\$ALLMOD -type f -name \"*audio_effects*.xml\")\"
if [ ! -f $IPMM/\$ALLMOD/disable ]; then
for FAECONFXML in \$ALLMODAECONFXML; do
if [ -f \$FAECONFXML ] && [ ! -f \$FAECONFXML.bak ]; then
PAECONFXML=true
cp -f \$FAECONFXML \$FAECONFXML.bak
sed -i \"/audio_pre_processing/d;/audiosphere/d;/loudness_enhancer/d;/shoebox/d;/volume_listener/d\" \$FAECONFXML
elif [ -f \$FAECONFXML ] && [ -f \$FAECONFXML.bak ]; then
PAECONFXML=true
sed -i \"/audio_pre_processing/d;/audiosphere/d;/loudness_enhancer/d;/shoebox/d;/volume_listener/d\" \$FAECONFXML
fi
done
fi
rm -rf $IPMM/$MODID$MIPSVE
done
if [ \$PAECONFXML != true ]; then
for FAECONFXML in \$AECONFXML; do
PSF=\"$IPMM/$MODID\$FAECONFXML\"
mkdir -p \`dirname \$PSF\`
cp -f \$MAGISKMP\$FAECONFXML \$PSF
sed -i \"/audio_pre_processing/d;/audiosphere/d;/loudness_enhancer/d;/shoebox/d;/volume_listener/d\" \$PSF
mkdir -p $IPMM/$MODID$MIPSV; cp -rf $IPMM/$MODID/vendor/* $IPMM/$MODID$MIPSV; rm -rf $IPMM/$MODID/vendor
done
fi" > $IPMM/$MODID/post-fs-data.sh
echo "#!$MIPSB/sh
if [ ! -d $IPMM/$MODID ] || [ -f $IPMM/$MODID/disable ] || [ -f $IPMM/$MODID/remove ]; then
AECONFXML=\"\$(find $IPMM -type f -name \"*audio_effects*.xml\")\"
for FAECONFXML in \$AECONFXML; do
if [ -f \$FAECONFXML.bak ]; then
cp -f \$FAECONFXML.bak \$FAECONFXML
rm -f \$FAECONFXML.bak
fi
done
fi
if [ ! -d $IPMM/$MODID ] || [ -f $IPMM/$MODID/remove ]; then rm -f $POSTFSDATAD/$MODID.sh; fi" > $POSTFSDATAD/$MODID.sh
chmod 0777 $POSTFSDATAD/$MODID.sh
SETPERM -mm -msg
}

IPVS () {
UCSA -ent "$MSGIP Volume Steps $VIPVS?" "IPVSS" "$IDVS"
}

IPVSS () {
UIP -s "$MSGFI Choose Variant:" "$MSGVU Edit All Lines Together" "$MSGVD Edit All Lines Separately"
MSGVS=true SETMEDIAVOLUMESTEPS=false SETCALLVOLUMESTEPS=false SETSYSTEMVOLUMESTEPS=false SETALARMVOLUMESTEPS=false MSGVSA="$MSGNIS"
if KEYCHOOSE; then
for VS in $(seq 10 5 50); do
MSGVSA="$MSGNIS"
case $VS in
"40") MSGVSA="$MSGNUS";;
esac
if $MSGVS; then
UIP -s "Choose Volume Steps:"
MSGVS=false
else
UIP -cs
fi
UIP "Step Set On ($VS)" "$MSGVU Yes" "$MSGVD No $MSGVSA"
if KEYCHOOSE; then
VOLUMESTEPSC=true SETMEDIAVOLUMESTEPS=true SETCALLVOLUMESTEPS=true SETSYSTEMVOLUMESTEPS=true SETALARMVOLUMESTEPS=true MEDIAVOLUMESTEPS="$VS" CALLVOLUMESTEPS="$VS" SYSTEMVOLUMESTEPS="$VS" ALARMVOLUMESTEPS="$VS"
break
else
VOLUMESTEPSC=false
fi
done
else
for ALLVVS in "Media" "Call" "System" "Alarm"; do
case $ALLVVS in "Alarm") MSGVSA="$MSGNUS";; esac
UIP -s "Set For $ALLVVS" "$MSGVU Yes" "$MSGVD No $MSGVSA"
if KEYCHOOSE; then
for VS in $(seq 10 5 50); do
MSGVSA="$MSGNIS"
case $VS in "50") MSGVSA="$MSGNUS";; esac
if $MSGVS; then
UIP -s "Choose Volume Steps:"
MSGVS=false
else
UIP -cs
fi
UIP "Step For $ALLVVS Set On ($VS)" "$MSGVU Yes" "$MSGVD No $MSGVSA"
if KEYCHOOSE; then
VOLUMESTEPSC=true
case $ALLVVS in
"Media") SETMEDIAVOLUMESTEPS=true MEDIAVOLUMESTEPS="$VS";; "Call") SETCALLVOLUMESTEPS=true CALLVOLUMESTEPS="$VS";; "System") SETSYSTEMVOLUMESTEPS=true SYSTEMVOLUMESTEPS="$VS";; "Alarm") SETALARMVOLUMESTEPS=true ALARMVOLUMESTEPS="$VS";;
esac
break
fi
done
fi
done
fi
if $VOLUMESTEPSC; then
UIP "$MSGIAM Volume Steps"
if $MAGISK; then
PTMFI "$IDVS"
MMPR -v "Volume Steps" "$VIPVS" "$VCIPVS" "Volume Steps"; IPVS=$IPMM/$MODID/system.prop
else
BUCKUPER -bf "$IPSBP"; IPVS=$IPSBP
fi
$SETMEDIAVOLUMESTEPS && echo -e "\nro.config.media_vol_steps=$MEDIAVOLUMESTEPS" >> $IPVS
$SETCALLVOLUMESTEPS && echo -e "\nro.config.vc_call_vol_steps=$CALLVOLUMESTEPS" >> $IPVS
$SETSYSTEMVOLUMESTEPS && echo -e "\nro.config.system_vol_steps=$SYSTEMVOLUMESTEPS" >> $IPVS
$SETALARMVOLUMESTEPS && echo -e "\nro.config.alarm_vol_steps=$ALARMVOLUMESTEPS" >> $IPVS
SETPERM -mm -msg
fi
}

IPDSM () {
UCSA "$MSGIP Disable Safemedia Message $VIPDSM?" "IPDSMS" "$IDDSM"
}

IPDSMS () {
UIP "$MSGIAM Disable Safemedia Message"
if $MAGISK; then
PTMFI "$IDDSM"
echo -e "audio.safemedia.bypass=true\npersist.audio.safemedia.bypass=true\npersist.vendor.audio.safemedia.bypass=true\nvendor.audio.safemedia.bypass=true" > $IPMM/$MODID/system.prop
MMPR -v "Disable Safemedia Message" "$VIPDSM" "$VCIPDSM" "Disable Safemedia Volume Level Warning Message"
else
BUCKUPER -bf "$IPSBP"
sed -i "/audio.safemedia.bypass/d" $IPSBP
echo -e "\n# Disable Safemedia\naudio.safemedia.bypass=true\npersist.audio.safemedia.bypass=true\npersist.vendor.audio.safemedia.bypass=true\nvendor.audio.safemedia.bypass=true" >> $IPSBP
fi
SETPERM -mm -msg
}

} #

{ #Install App From /sdcard/Applications

IPAPP () {
if [ -d $STORAGE/Applications ] && find $STORAGE/Applications -type f -name "*.apk" >$NULL; then
UCSA -ent "$MSGIP App From $STORAGE/Applications?" "IPAPPS" "AIOIARPFMD"
fi
}

IPAPPS () {
MODID="AIOIARPFMD"
UIP -s "Choose Path Variant:" "$MSGVU $MSGL Install Every App In Data" "$MSGVD Install Every App In System $MSGRI"
KEYCHOOSE && IAPPASD=true || IAPPASD=false
UIP -s "Choose Install Variant:" "$MSGVU Install Every App With Confirm" "$MSGVD Install Every App Without Confirm"
KEYCHOOSE && IEAW=true || IEAW=false
cd $STORAGE/Applications
for APPS in *; do [ -f "$APPS" ] && mv "$APPS" `echo $APPS | tr ' ' '_'`; done
for APKINPUT in $(ls $STORAGE/Applications); do
if [ -f $STORAGE/Applications/$APKINPUT ]; then
if $IEAW; then
UIP -s "Found $APKINPUT" "$MSGVU Install?" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
IPAPPSA
fi
else
IPAPPSA
fi
fi
done
}

IPAPPSA () {
PACKAGENAME="$($AAPT list -a "$STORAGE/Applications/$APKINPUT" | awk -v FS='"' '/package=/{print $2}')"
if $IAPPASD; then
APKINSTALLER -d "$STORAGE/Applications/$APKINPUT"
else
mkdir -p $LOCALTMPDIR/$PACKAGENAME; cp -f "$STORAGE/Applications/$APKINPUT" "$LOCALTMPDIR/$PACKAGENAME/$PACKAGENAME.apk"
APKINSTALLER -a "$PACKAGENAME" "$PACKAGENAME"; rm -rf $LOCALTMPDIR/$PACKAGENAME
if [ $MAGISK != true ]; then echo "$PACKAGENAME" >> $IPSSPA/AIL.txt; fi
fi
UIP "$MSGDI"
}

} #

{ #Remove/Replace/Restore Mode

GTRRRM () {
UCSA -ent "Go To Remove/Replace/Restore Mode?" "GTRRRMS" "RTSA"
}

GTRRRMS () {
RWSGTRRRM=false RMTSAV=false CAILIST=false
if [ -f $IPSSPA/Replace.txt ] && [ $BOOTMODE != true ]; then
UIP -s "Found Replace APK, Restote?" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
REPLACELIST=$(cat $IPSSPA/Replace.txt)
UIP -s "Choose Variant:" "$MSGVU Restore Every App With Confirm $MSGRI" "$MSGVD Restore Every App Without Confirm"
if KEYCHOOSE; then
RWSGTRRRM=true
fi
for FINDTRASH in $REPLACELIST; do
for NAMEPATHDELLTRASH in "$IPSA" "$IPSPA" "$IPSSPA" "$IPSSPPA" "$IPSSEA" "$IPSSEPA"; do
if [ -d $NAMEPATHDELLTRASH/$FINDTRASH ]; then
if $RWSGTRRRM; then
UCSA -s "Found ($FINDTRASH)" "Restore?" "Next $MSGNUS" "GTRRRMSAAA"
else
UIP "Found ($FINDTRASH)"
GTRRRMSAAA
fi
fi
done
done
fi
fi
if $BOOTMODE; then
RMTSAV=true
else
UIP -s "Choose Variant:" "$MSGVU Replace All Find Apps" "$MSGVD Remove All Find Apps"
if KEYCHOOSE; then
RMTSAV=true
fi
fi
if $RMTSAV; then
UIP -s "Choose Variant For Stock List & APPRMLIST.conf:" "$MSGVU Replace Every App Found Without Confirm" "$MSGVD Replace Every App Found With Confirm $MSGRI"
else
UIP -s "Choose Variant For Stock List & APPRMLIST.conf:" "$MSGVU Remove Every App Found Without Confirm" "$MSGVD Remove Every App Found With Confirm $MSGRI"
fi
KEYCHOOSE && REAFWC=true || REAFWC=false
if [ -f $STORAGE/APPRMLIST* ]; then APPRMLISTFILE="$(find $STORAGE/APPRMLIST*)" FINDAPPRMLIST=true; else for f in $(ls $STORAGE); do if [ -f $STORAGE/$f/APPRMLIST* ]; then APPRMLISTFILE="$(find $STORAGE/$f/APPRMLIST*)" FINDAPPRMLIST=true; break; else FINDAPPRMLIST=false; fi; done; fi
if $FINDAPPRMLIST; then
UIP -s "Choose Variant:" "$MSGVU Use APPRMLIST.conf & Patch List" "$MSGVD Use Only APPRMLIST.conf"
KEYCHOOSE && RMLISTCHOICEVARIANT=true || RMLISTCHOICEVARIANT=false
RMLIST=$(cat $APPRMLISTFILE)
REMOVETRASHNAME="$RMLIST"
UIP "$MSGSAPW"
GTRRRMSA
UIP "$MSGOANF"
fi
if $RMLISTCHOICEVARIANT; then
if [ -f $IPSSPA/AIL.txt ]; then
UIP -s "Found $IPSSPA/AIL.txt" "$MSGVU Use AIL.txt List" "$MSGVD No, Next List $MSGNUS"
if KEYCHOOSE; then
CAILIST=true
AILIST=$(cat $IPSSPA/AIL.txt)
REMOVETRASHNAME="$AILIST"
UIP "$MSGSAPW"
GTRRRMSA
UIP "$MSGOANF"
fi
fi
UIP -s "Choose Variant:" "$MSGVU Use Stock List" "$MSGVD No, Next List $MSGNUS"
if KEYCHOOSE; then
UIP "$MSGSAPW"
ALLLIST -s; REMOVETRASHNAME="$STOCKLIST"
GTRRRMSA
UIP "$MSGOANF"
fi
REAFWC=false
if [ $MIUI != true ]; then
UIP -s "Choose Variant:" "$MSGVU Use Launchers List" "$MSGVD No, Next List $MSGNUS"
if KEYCHOOSE; then
ALLLIST -l; REMOVETRASHNAME="$LAUNCHERLIST"
UIP "$MSGSAPW"
GTRRRMSA
UIP "$MSGOANF"
fi
UIP -s "Choose Variant:" "$MSGVU Use Cameras List" "$MSGVD No, Next List $MSGNUS"
if KEYCHOOSE; then
ALLLIST -c; REMOVETRASHNAME="$CAMERALIST"
UIP "$MSGSAPW"
GTRRRMSA
UIP "$MSGOANF"
fi
fi
UIP -s "Choose Variant:" "$MSGVU Use Experimental List" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
ALLLIST -e; REMOVETRASHNAME="$EXPERIMENTALLIST"
UIP "$MSGSAPW"
GTRRRMSA
UIP "$MSGOANF"
fi
fi
if [ "$MODID" = "RTSA" ]; then
touch $IPMM/$MODID/update
MMPR -v "Replace Trash System App" "$VAIOPFMD" "$VCAIOPFMD" "Replace Trash System App"
MOVERPATH
fi
}

GTRRRMSA () {
for FINDTRASH in $REMOVETRASHNAME; do
for NAMEPATHDELLTRASH in "$IPSA" "$IPSPA" "$IPSSPA" "$IPSSPPA" "$IPSSEA" "$IPSSEPA" "$IPVA" "$IPVPA"; do
if [ -d $MAGISKMP$NAMEPATHDELLTRASH/$FINDTRASH ] && [ ! -f $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.replace ] && [ ! -f $NAMEPATHDELLTRASH/$FINDTRASH/.replace ]; then
if $REAFWC; then
UIP "Found ($FINDTRASH)"
GTRRRMSAA
else
if $RMTSAV; then
UCSA -s "Found ($FINDTRASH)" "Replace" "Next Search $MSGNUS" "GTRRRMSAA"
else
UCSA -s "Found ($FINDTRASH)" "Remove" "Next Search $MSGNUS" "GTRRRMSAA"
fi
fi
break
UIP "Search Other App, Please Wait..."
fi
done
done
}

GTRRRMSAA () {
if $RMTSAV; then
if $MAGISK; then
MODID="RTSA"; REPLACER "$NAMEPATHDELLTRASH/$FINDTRASH"
UIP "$MSGDRP"
else
mv $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.apk $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.replace
echo "$FINDTRASH" >> $IPSSPA/Replace.txt
UIP "$MSGDRP"
fi
else
rm -rf $NAMEPATHDELLTRASH/$FINDTRASH; UIP "$MSGDRM"
if $CAILIST; then sed -i "/$FINDTRASH/d" $IPSSPA/AIL.txt; [ ! -s $IPSSPA/AIL.txt ] && rm -f $IPSSPA/AIL.txt; fi
fi
}

GTRRRMSAAA () {
sed -i "/$FINDTRASH/d" $IPSSPA/Replace.txt
mv $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.replace $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.apk
[ ! -s $IPSSPA/Replace.txt ] && rm -f $IPSSPA/Replace.txt
UIP "$MSGDRS"
}

} #

{ #AdBlock: Hosts Files

IPHF () {
if [ $BOOTMODE != true ] && [ -f $IPSE/hosts.bak ]; then
UIP -s "$MSGFI Hosts Files, Restore?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Restore Stock Hosts Files"
BUCKUPER -r "$IPSE/hosts"
UIP "$MSGDRS"
fi
else
UCSA -ent "AdBlock: Hosts Files" "IPHFS" "$IDDAB $IDVAAH $IDVSH $IDEH $IDSHH"
fi
}

IPHFS () {
ALLLIST -mmh
UIP -s "Choose Hosts File" "$MSGVU Empty Hosts $VIPDAB" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
IPESHFS
else
UIP -s "$MSGVU AdAway Hosts $VIPVAAH (10000+)" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
IPAAHFS
else
UIP -s "$MSGVU Systemless Hosts $VIPVSH (270000+)" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
IPSHFS
else
UIP -s "$MSGVU Energized Hosts $VIPEH (80000+ Or 440000+)" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
IPEHFS
else
UIP -s "$MSGVU SH Hosts $VIPSHH (120000+)" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
IPSHHFS
else
UIP -s "$MSGVU Steven Hosts $VIPSH (150000+)" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
IPSTEVENHFS
fi
fi
fi
fi
fi
fi
}

IPESHFS () {
UZTI "Hosts" "Empty Hosts Files"
if $MAGISK; then
PTMFI "$IDDAB" "$MMHOSTSLIST" "$MIPSE"
MMPR -vc "Disable Ad Blocker" "$VIPDAB" "$VCIPDAB" "DriffeX" "Restores Stock Hosts File For Disable Ad Block"
echo -e "127.0.0.1 localhost\n::1 ip6-localhost" > $IPMM/$MODID$MIPSE/hosts
else
BUCKUPER -s "$IPSE/hosts"
echo -e "127.0.0.1 localhost/n::1 ip6-localhost" > $IPSE/hosts
fi
SETPERM -mm -msg
}

IPAAHFS () {
UZTI "Hosts" "AdAway Hosts Files"
HOSTSFILE="AdAway-hosts"
if $MAGISK; then
PTMFI "$IDVAAH" "$MMHOSTSLIST" "$MIPSE"
cp -f $LOCALTMPDIR/Hosts/$HOSTSFILE $IPMM/$MODID$MIPSE/hosts
MMPR -v "AdAway Hosts" "$VIPVAAH" "$VCIPVAAH" "AdAway Hosts - Ad Blocker"
else
BUCKUPER -s "$IPSE/hosts"; cp -f $LOCALTMPDIR/Hosts/$HOSTSFILE $IPSE/hosts
fi
SETPERM -mm -msg
}

IPSHFS () {
UZTI "Hosts" "Systemless Hosts Files"
HOSTSFILE="Systemless-hosts"
if $MAGISK; then
PTMFI "$IDVSH" "$MMHOSTSLIST" "$MIPSE"
cp -f $LOCALTMPDIR/Hosts/$HOSTSFILE $IPMM/$MODID$MIPSE/hosts
MMPR -vc "Systemless Hosts - Unified" "$VIPVSH" "$VCIPVSH" "gloeyisk" "Systemless Hosts Unified - Ad Blocker"
else
BUCKUPER -s "$IPSE/hosts"; cp -f $LOCALTMPDIR/Hosts/$HOSTSFILE $IPSE/hosts
fi
SETPERM -mm -msg
}

IPEHFS () {
UIP -s "Choose Spark Or Ultimate" "$MSGVU Spark (80000+) $MSGRI" "$MSGVD Ultimate (440000+)"; KEYCHOOSE && FEHF="Spark" || FEHF="Ultimate"
UZTI "Hosts" "Energized Hosts Files"
HOSTSFILE="Energized-$FEHF-hosts"
if $MAGISK; then
PTMFI "$IDEH" "$MMHOSTSLIST" "$MIPSE"
cp -f $LOCALTMPDIR/Hosts/$HOSTSFILE $IPMM/$MODID$MIPSE/hosts
MMPR -v "$MODID" "$VIPEH" "$VCIPEH" "Energized Hosts $FEHF - Ad Blocker"
else
BUCKUPER -s "$IPSE/hosts"; cp -f $LOCALTMPDIR/Hosts/$HOSTSFILE $IPSE/hosts
fi
SETPERM -mm -msg
}

IPSHHFS () {
UZTI "Hosts" "SH Hosts Files"
HOSTSFILE="SH-hosts"
if $MAGISK; then
PTMFI "$IDSHH" "$MMHOSTSLIST" "$MIPSE"
cp -f $LOCALTMPDIR/Hosts/$HOSTSFILE $IPMM/$MODID$MIPSE/hosts
MMPR -vc "SH Hosts" "$VIPSHH" "$VCIPSHH" "Kninja" "SH Hosts - Ad Blocker"
else
BUCKUPER -s "$IPSE/hosts"; cp -f $LOCALTMPDIR/Hosts/$HOSTSFILE $IPSE/hosts
fi
SETPERM -mm -msg
}

IPSTEVENHFS () {
UZTI "Hosts" "Steven Hosts Files"
HOSTSFILE="Steven-hosts"
if $MAGISK; then
PTMFI "$IDSH" "$MMHOSTSLIST" "$MIPSE"
cp -f $LOCALTMPDIR/Hosts/$HOSTSFILE $IPMM/$MODID$MIPSE/hosts
MMPR -vc "Steven Hosts" "$VIPSH" "$VCIPSH" "Winzort" "Steven Hosts - Ad Blocker"
else
BUCKUPER -s "$IPSE/hosts"; cp -f $LOCALTMPDIR/Hosts/$HOSTSFILE $IPSE/hosts
fi
SETPERM -mm -msg
}

} #

{ #Net: GPS/WIFI/TTL/DNS/APAUSBTF

IPGPSP () {
if FINDER -aiopb "$GPSCONF"; then
UIP -s "$MSGFI GPS Patcher, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "$MSGRMIP"
BUCKUPER -r "$GPSCONF"
UIP "$MSGDRM"
fi
else
if $SNAPSOC && [ $ASDK -ge 27 ] && FINDER "$GPSCONF"; then
UCSA "$MSGIPP GPS Patcher $VIPGPSP?" "IPGPSPS" "$IDGPSP"
fi
fi
}

IPGPSPS () {
UIP "$MSGIAM GPS Patcher"
mkdir -p $LOCALTMPDIR/GPSPatcher
UIP "$MSGPNF"
for FGPSCONF in $GPSCONF; do
UIP "Found $(basename $FGPSCONF)" "$MSGPMIP"
PSF="$LOCALTMPDIR/GPSPatcher$FGPSCONF"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FGPSCONF $PSF
QCDFP "XTRA_SERVER_QUERY" "0" "# Whether to use the predefined XTRA servers below (XTRA_SERVER_), or to query them from the modem.\n# Values: 0 - use predefined, 1 - query modem"
QCDFP "XTRA_SERVER_1" "https://xtrapath1.izatcloud.net/xtra3grc.bin" "# The predefined XTRA servers 1 to be used if modem querying (XTRA_SERVER_QUERY) is off.\n# Values: URL"
QCDFP "XTRA_SERVER_2" "https://xtrapath2.izatcloud.net/xtra3grc.bin" "# The predefined XTRA servers 2 to be used if modem querying (XTRA_SERVER_QUERY) is off.\n# Values: URL"
QCDFP "XTRA_SERVER_3" "https://xtrapath3.izatcloud.net/xtra3grc.bin" "# The predefined XTRA servers 3 to be used if modem querying (XTRA_SERVER_QUERY) is off.\n# Values: URL"
QCDFP "XTRA_SERVER_4" "https://ssl.gpsonextra.net/xtra3grc.bin" "# The predefined XTRA servers 4 to be used if modem querying (XTRA_SERVER_QUERY) is off.\n# Values: URL"
QCDFP "XTRA_SERVER_5" "https://ssl.izatcloud.net/xtra3grc.bin" "# The predefined XTRA servers 5 to be used if modem querying (XTRA_SERVER_QUERY) is off.\n# Values: URL"
QCDFP "NTP_SERVER" "pool.ntp.org" "# The NTP servers used for time synchronisation.\n# Values: URL"
QCDFP "NTP_SERVER_1" "0.pool.ntp.org" "The NTP servers used for time synchronisation.\n# Values: URL"
QCDFP "NTP_SERVER_2" "1.pool.ntp.org" "The NTP servers used for time synchronisation.\n# Values: URL"
QCDFP "NTP_SERVER_3" "2.pool.ntp.org" "The NTP servers used for time synchronisation.\n# Values: URL"
QCDFP "NTP_SERVER_4" "3.pool.ntp.org" "The NTP servers used for time synchronisation.\n# Values: URL"
QCDFP "DEBUG_LEVEL" "0" "# Debugging\n# The Android logging level of the GPS service.\n# If commented out, then Android's default logging level will be used.\n# Values: 0 - none, 1 - error, 2 - warning, 3 - info, 4 - debug, 5 - verbose"
QCDFP "XTRA_CA_PATH" "/system/etc/security/cacerts" "# Certificates\n# Path to the CA certificates used to validate the XTRA data.\n# Values: correct path with certificates"
QCDFP "ERR_ESTIMATE" "0" "# Error estimation\n# Whether or not to use error estimation.\n# Values: 0 - don't use, 1 - use"
QCDFP "XTRA_VERSION_CHECK" "3" "#Version check for XTRA\n# The version of the XTRA data used. XTRA v3 supports digital signing and is advised.\n# Values: 0 - disable XTRA, 1 - automatic check, 2 - XTRA v2, 3 - XTRA v3"
QCDFP "XTRA_TEST_ENABLED" "1" "# Whether or not to test for XTRA support.\n# Values: 0 - don't test, 1 - test"
QCDFP "INTERMEDIATE_POS" "1" "Whether or not to report intermediate positions.\n# Values: 0 - don't report, 1 - report"
QCDFP "ACCURACY_THRES" "70" "# Accuracy threshold for intermediate positions.\n# Set to 0 to pass all positions.\n# Values: unknown"
QCDFP "GPS_LOCK" "0" "# Functionalities to switch off when GPS is disabled.\n# Default is to lock nothing for backward compatibility.\n# Bitmask: 0x1 - lock MO GPS, 0x2 - lock NI GPS"
QCDFP "NMEA_PROVIDER" "0" "# NMEA provider\n# Modem Processor - 1, Application Processor - 0)"
QCDFP "SGLTE_TARGET" "0" "# Whether the device supports being a SGLTE target.\n# Mark if it is a SGLTE target.\n# SGLTE - 1, nonSGLTE - 0"
QCDFP "SUPL_VER" "0x30000" "# The version of SUPL to be used.\n# Values: bitmask"
QCDFP "REPORT_POSITION_USE_SUPL_REFLOC" "1" "# Whether to report the reference SUPL location as the current position.\n# Values: 0 - don't report, 1 - report"
QCDFP "SUPL_ES" "0" "# Whether to use SUPL in an emergency situations (eg. calling emergency services).\n# Values: 0 - disable, 1 - enable"
QCDFP "USE_EMERGENCY_PDN_FOR_EMERGENCY_SUPL" "0" "# The PDN to ve used for emergency SUPL.\n# Values: 0 - emergency PDN, 1 - regular SUPL PDN"
QCDFP "SUPL_MODE" "0x3" "# Carrier-set GPS mode for SUPL.\n# If commented, will be taken from config.xml.\n# Bitmask: MSA - 0X2, MSB - 0X1"
QCDFP "SUPL_HOST" "supl.google.com" "# The SUPL server used.\n# Values: URL, IP"
QCDFP "SUPL_PORT" "7275" "# The port to connect to the SUPL server.\n# Values: port"
QCDFP "CAPABILITIES" "0x17" "# GPS features which are supported.\n# default = MSA | MSB | SCHEDULING | ON_DEMAND_TIME | GEOFENCING\n# Bitmask: 0x01 - SCHEDULING, 0x02 - MSB, 0x04 - MSA, 0x10 - ON_DEMAND_TIME, 0x20 - GEOFENCING"
QCDFP "ENABLE_WIPER" "1" "# Whether to use WiFi positioning.\n# Values: 0 - disable, 1 - enable"
QCDFP "AGPS_CERT_WRITABLE_MASK" "0" "# Bitmask of slots that are available for write/install to, where 1s indicate writable, and the default value is 0 where no slots are writable. For example, AGPS_CERT_WRITABLE_MASK of b1000001010 makes 3 slots available and the remaining 7 slots unwritable.\n# Values: bitmask"
QCDFP "AGPS_CONFIG_INJECT" "1" "# Whether to use A-GPS configuration injection: SUPL_VER, SUPL_HOST,SUPL_PORT, MO_SUPL_HOST, MO_SUPL_PORT, C2K_HOST, C2K_PORT, LPP_PROFILE, A_GLONASS_POS_PROTOCOL_SELECT\n# Values: 0 - disable, 1 - enable"
QCDFP "LPP_PROFILE" "3" "# LTE Positioning Profile Settings.\n# Values: 0 - RRLP, 1 - LPP_User_Plane, 2 - LPP_Control_Plane, 3 - LPP_Control_Plane and LPP_User_Plane"
QCDFP "A_GLONASS_POS_PROTOCOL_SELECT" "0x7" "# The A-GLONASS positioning protocol used.\n# Bitmask: 0x1 - RRC CPlane, 0x2 - RRLP UPlane, 0x4 - LLP Uplane"
QCDFP "LPPE_CP_TECHNOLOGY" "0x2" "# The LPPe control plane method.\n# Bitmask: 0x1 - DBH, 0x2 - WLAN AP measurements, 0x4 - SRN AP measurement, 0x8 - Sensor barometer measurement"
QCDFP "LPPE_UP_TECHNOLOGY" "0x2" "# The LPPe user plane method.\n# Bitmask: 0x1 - DBH, 0x2 - WLAN AP measurements, 0x4 - SRN AP measurement, 0x8 - Sensor barometer measurement"
QCDFP "AP_TIMESTAMP_UNCERTAINTY" "10" "# The AP coarse timestamp uncertainty until the GNSS receiver is able to acquire better timing information.\n# Values: 10"
QCDFP "AP_CLOCK_PPM" "100" "# Quality of APPS processor clock (in PPM).\n# Value specified is used for calculation of APPS time stamp uncertainty.\n# Values: PPM"
QCDFP "EXTERNAL_DR_ENABLED" "0" "# Whether to use the QDR configuration.\n# This settings enables QDR Configuration for automotive use case, if enabled then DR_AP_Service needs to be enabled in izat.conf\n# Recommended for automobile use cases. If used, the DR_AP_Service needs to be enabled.\n# Values: 0 - NO QDR (default), 1 - QDR enabled"
QCDFP "DR_SYNC_ENABLED" "0" "# This configuration enables the driver to make use of PPS events generated by DR_SYNC pulse Standard Linux PPS driver needs to be enabled.\n# Values: 0 - DR_SYNC pulse not available (default), 1 - DR_SYNC pulse available"
QCDFP "PPS_DEVICENAME" "/dev/pps0" "# The path to the Linux PPS device.\n# Values: path"
QCDFP "MISSING_PULSE_TIME_DELTA" "900" "# MAX ms difference to detect missing pulse.\n# Specifies time threshold in ms to validate any missing PPS pulses\n# Values: ms"
QCDFP "PROPAGATION_TIME_UNCERTAINTY" "1" "# Whether to use time uncertainty propagation logic in the case of missing PPS pulse.\n# Values: 0 - don't use, 1 - use"
UIP "$MSGFFAP"
done
if $MAGISK; then
PTMFI "$IDGPSP" "$IDAGPSP" "$MIPSVE $MIPSE"
MMPR -v "GPS Patcher" "$VIPGPSP" "$VCIPGPSP" "GPS Patcher - Patching gps.conf & Adds Correct Certificate Paths, Disables Logs, Improves Gps Communication (None), Exposes Universal Pool.Ntp.Org And Other Improvements"
cp -rf $LOCALTMPDIR/$MODID/* $IPMM/$MODID
MOVERPATH
else
BUCKUPER -s "$GPSCONF"
cp -f $LOCALTMPDIR/GPSPatcher$MIPSVE/* $IPVE; cp -f $LOCALTMPDIR/GPSPatcher$MIPSE/* $IPSE
fi
SETPERM -mm -msg
}

IPWIFIP () {
if FINDER -aiopb "$WCNSQCCFGI"; then
UIP -s "$MSGFI Wifi Patcher, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "$MSGRMIP"
BUCKUPER -r "$WCNSQCCFGI"
UIP "$MSGDRM"
fi
else
if $SNAPSOC && [ $ASDK -ge 27 ] && FINDER "$WCNSQCCFGI"; then
UCSA "$MSGIPP Wifi Patcher $VIPWIFIP?" "IPWIFIPS" "$IDWIFIP"
fi
fi
}

IPWIFIPS () {
UIP "$MSGIAM Wifi Patcher"
mkdir -p $LOCALTMPDIR/WIFIPatcher
UIP "$MSGPNF"
for FWCNSQCCFGI in $WCNSQCCFGI; do
UIP "Found $(basename $FWCNSQCCFGI)" "$MSGPMIP"
PSF="$LOCALTMPDIR/WIFIPatcher$FWCNSQCCFGI"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FWCNSQCCFGI $PSF
sed -i "/END/d" $PSF
QCDFP "gChannelBondingMode24GHz" "1" "# Configures Channel Bonding in 2.4 GHz"
QCDFP "gChannelBondingMode5GHz" "1" "# Configures Channel Bonding in 5 GHz"
QCDFP "gEnablePowerSaveOffload" "4" "# Enable Power Save Offload"
QCDFP "gForce1x1Exception" "0" "# 0: Disable force 1x1 on MTK solution AP\n# 1: Enable force 1x1 on MTK solution AP"
QCDFP "sae_enabled" "1" "# SAE WPA3\n# 0: Disable SAE WPA3\n# 1: Enable SAE WPA3"
QCDFP "gEnablefwlog" "0" "# Firmware log mode\n# Valid values are 0,1,2\n# 0=Disable, 1=WMI, 2=DIAG"
QCDFP "gEnablePacketLog" "0" "# Enable pkt log\n# 1 - enable, 0 - disable"
QCDFP "gSkipDfsChannelInP2pSearch" "0" "# Skip DFS Channel in case of P2P Search\n# 0 - disable (Scan DFS Channel in P2P Search), 1 - enable (Skip DFS Channel)"
echo -e "\nEND" >> $PSF
UIP "$MSGFFAP"
done
if $MAGISK; then
PTMFI "$IDWIFIP" "$IDAWIFIP" "$MIPSVE/wifi"
MMPR -v "Wifi Patcher" "$VIPWIFIP" "$VCIPWIFIP" "Wifi Patcher - Patching WCNSS_qcom_cfg.ini To Increase Wifi Bandwidth, Disable Unnecessary Logging And Other Improvements (Although In Fact This Module Can Return The Standard Speed On Custom)"
cp -rf $LOCALTMPDIR/$MODID/* $IPMM/$MODID
MOVERPATH
else
BUCKUPER -s "$WCNSQCCFGI"
cp -f $LOCALTMPDIR/WIFIPatcher$MIPSVE/* $IPVE; cp -f $LOCALTMPDIR/WIFIPatcher$MIPSE/* $IPSE
fi
SETPERM -mm -msg
}

IPTTLF () {
if $MAGISK; then
UCSA "$MSGIP TTL Fix $VIPTTLF?" "IPTTLFS" "$IDTTLF"
fi
}

IPTTLFS () {
UZTI "NFQTTL" "Time To Live Fix"
PTMFI "$IDTTLF" "$IDATTLF"
MMPR -vcs "Nfqttl" "$VIPTTLF" "$VCIPTTLF" "Cyborg-one" "Nfqttl Is A Module Fix Heder Field TTL" "https://github.com/cyborg-one/nfqttl"
echo "#!$MIPSB/sh
iptables -t mangle -I FORWARD -j DROP
ip6tables -t mangle -I FORWARD -j DROP
sleep 30
iptables -t mangle -D FORWARD -j DROP
ip6tables -t mangle -D FORWARD -j DROP
count=0
while true
do
if ps | grep $IPMM/$MODID/nfqttl | grep -v grep | grep -q $IPMM/$MODID/nfqttl
then
break
fi
if [ \"\$count\" -ge 8 ]
then
exit 1
fi
count=\$((\$count+1))
$IPMM/$MODID/nfqttl -d -t64 -s4
sleep 5
done
iptables -t mangle -N nfqttli
iptables -t mangle -A nfqttli -j NFQUEUE --queue-num 6464
iptables -t mangle -N nfqttlo
iptables -t mangle -A nfqttlo -j NFQUEUE --queue-num 6464
iptables -t mangle -A PREROUTING -j nfqttli
iptables -t mangle -A OUTPUT -j nfqttlo
ip6tables -t mangle -N nfqttli
ip6tables -t mangle -A nfqttli -j NFQUEUE --queue-num 6464
ip6tables -t mangle -N nfqttlo
ip6tables -t mangle -A nfqttlo -j NFQUEUE --queue-num 6464
ip6tables -t mangle -A PREROUTING -j nfqttli
ip6tables -t mangle -A POSTROUTING -j nfqttlo
exit 0" > $IPMM/$MODID/service.sh
cp -f $LOCALTMPDIR/NFQTTL/nfqttl-$ARCH $IPMM/$MODID/nfqttl
if $BOOTMODE; then
pkill -9 nfqttl
if $IPMM/$MODID/nfqttl -d -s4 >$NULL; then
UIP "Run nfqttl Success!"
else
UIP "Run nfqttl Fail!"
fi
iptables -t mangle -D PREROUTING -j nfqttli
iptables -t mangle -D OUTPUT -j nfqttlo
iptables -t mangle -F nfqttli
iptables -t mangle -X nfqttli
iptables -t mangle -F nfqttlo
iptables -t mangle -X nfqttlo
ip6tables -t mangle -D PREROUTING -j nfqttli
ip6tables -t mangle -D POSTROUTING -j nfqttlo
ip6tables -t mangle -F nfqttli
ip6tables -t mangle -X nfqttli
ip6tables -t mangle -F nfqttlo
ip6tables -t mangle -X nfqttlo
if iptables -t mangle -N nfqttli &&\
iptables -t mangle -A nfqttli -j NFQUEUE --queue-num 6464 &&\
iptables -t mangle -N nfqttlo &&\
iptables -t mangle -A nfqttlo -j NFQUEUE --queue-num 6464 &&\
iptables -t mangle -A PREROUTING -j nfqttli &&\
iptables -t mangle -A OUTPUT -j nfqttlo &&\
ip6tables -t mangle -N nfqttli &&\
ip6tables -t mangle -A nfqttli -j NFQUEUE --queue-num 6464 &&\
ip6tables -t mangle -N nfqttlo &&\
ip6tables -t mangle -A nfqttlo -j NFQUEUE --queue-num 6464 &&\
ip6tables -t mangle -A PREROUTING -j nfqttli &&\
ip6tables -t mangle -A POSTROUTING -j nfqttlo; then
UIP "Set Rule IpTables Success!"
else
UIP "Set Rule IpTables Fail!"
fi
fi
SETPERM -mm -msg
}

IPNT () {
UCSA "$MSGIP Network Tweak $VIPNT?" "IPNTS" "$IDNT"
}

IPNTS () {
NTOGoogle="8.8.8.8" NTTGoogle="8.8.4.4" NTOCloudFlare="1.1.1.1" NTTCloudFlare="1.0.0.1"
UIP -s "Choose DNS Method:" "$MSGVU Google & CloudFlare DNS" "$MSGVD Google || CloudFlare DNS"
if KEYCHOOSE; then
ONetworkTweak="$NTOGoogle" TNetworkTweak="$NTOCloudFlare"
DNSSETPROP="setprop 2001:4860:4860::8.8.8.8
setprop 2606:4700:4700::1.1.1.1"
else
UIP -s "Choose DNS Method:" "$MSGVU Google DNS" "$MSGVD CloudFlare DNS"
if KEYCHOOSE; then
ONetworkTweak="$NTOGoogle" TNetworkTweak="$NTTGoogle"
DNSSETPROP="setprop 2001:4860:4860::8888
setprop 2001:4860:4860::8844"
else
ONetworkTweak="$NTOCloudFlare" TNetworkTweak="$NTTCloudFlare"
DNSSETPROP="setprop 2606:4700:4700::1111
setprop 2606:4700:4700::1001"
fi
fi
UIP "$MSGIAM Network Tweak"
if $MAGISK; then
PTMFI "$IDNT"
$ECHO "#!$MIPSB/sh

# Set CF DNS servers address
setprop net.rmnet0.dns1 $ONetworkTweak
setprop net.rmnet0.dns2 $TNetworkTweak
setprop net.rmnet1.dns1 $ONetworkTweak
setprop net.rmnet1.dns2 $TNetworkTweak
setprop net.dns1 $ONetworkTweak
setprop net.dns2 $TNetworkTweak
setprop net.gprs.dns1 $ONetworkTweak
setprop net.gprs.dns2 $TNetworkTweak
setprop net.wcdma.dns1 $ONetworkTweak
setprop net.wcdma.dns2 $TNetworkTweak
setprop net.hspa.dns1 $ONetworkTweak
setprop net.hspa.dns2 $TNetworkTweak
setprop net.hsdpa.dns1 $ONetworkTweak
setprop net.hsdpa.dns2 $TNetworkTweak
setprop net.lte.dns1 $ONetworkTweak
setprop net.lte.dns2 $TNetworkTweak
setprop net.ltea.dns1 $ONetworkTweak
setprop net.ltea.dns2 $TNetworkTweak
setprop net.ppp0.dns1 $ONetworkTweak
setprop net.ppp0.dns2 $TNetworkTweak
setprop net.pdpbr1.dns1 $ONetworkTweak
setprop net.pdpbr1.dns2 $TNetworkTweak
setprop net.wlan0.dns1 $ONetworkTweak
setprop net.wlan0.dns2 $TNetworkTweak
setprop net.eth0.dns1 $ONetworkTweak
setprop net.eth0.dns2 $TNetworkTweak

$DNSSETPROP

# Edit the resolv conf file if it exist
if [ -a $MIPSE/resolv.conf ]; then
mkdir -p $IPMM/$MODID$MIPSE
printf \"nameserver $ONetworkTweak\\nnameserver $TNetworkTweak\" >> $IPMM/$MODID$MIPSE/resolv.conf
chmod 0644 $IPMM/$MODID$MIPSE/resolv.conf
fi

echo \"0\" > /proc/sys/net/ipv4/tcp_timestamps
echo \"1\" | tee /proc/sys/net/ipv4/tcp_tw_reuse /proc/sys/net/ipv4/tcp_sack /proc/sys/net/ipv4/tcp_tw_recycle /proc/sys/net/ipv4/tcp_window_scaling
echo \"5\" > /proc/sys/net/ipv4/tcp_keepalive_probes
echo \"30\" | tee /proc/sys/net/ipv4/tcp_keepalive_intvl /proc/sys/net/ipv4/tcp_fin_timeout
echo \"404480\" | tee /proc/sys/net/core/wmem_max /proc/sys/net/core/rmem_max
echo \"256960\" | tee /proc/sys/net/core/rmem_default /proc/sys/net/core/wmem_default
echo \"4096 16384 404480\" > /proc/sys/net/ipv4/tcp_wmem
echo \"4096 87380 404480\" > /proc/sys/net/ipv4/tcp_rmem" > $IPMM/$MODID/post-fs-data.sh
MSSERVICE -s "iptables -t nat -A OUTPUT -p tcp --dport 53 -j DNAT --to-destination $ONetworkTweak:53; iptables -t nat -A OUTPUT -p udp --dport 53 -j DNAT --to-destination $TNetworkTweak:53; iptables -t nat -I OUTPUT -p tcp --dport 53 -j DNAT --to-destination $ONetworkTweak:53; iptables -t nat -I OUTPUT -p udp --dport 53 -j DNAT --to-destination $TNetworkTweak:53"
MMPR -vc "Network Tweak" "$VIPNT" "$VCIPNT" "IMMIX" "Various Network Tweaks Which Will Help To Get Better Internet Connectivity And Low Ping"
PINT=$IPMM/$MODID/system.prop
else
BUCKUPER -bf "$IPSBP"; PINT=$IPSBP
fi
echo -e "\n# Internet Tweaks
net.tcp.buffersize.default=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.wifi=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.lte=524288,1048576,2097152,524288,1048576,2097152
net.tcp.buffersize.umts=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.evdo=4096,87380,563200,4096,16384,262144
net.tcp.buffersize.evdo_b=6144,262144,1048576,6144,262144,1048576
net.tcp.buffersize.gprs=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.edge=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.hsdpa=6144,87380,1048576,6144,87380,1048576
net.tcp.buffersize.hspa=6144,87380,524288,6144,16384,262144
net.tcp.buffersize.hspap=4096,87380,1220608,4096,16384,393216
net.tcp.buffersize.hsupa=4096,87380,704512,4096,16384,262144
ro.ril.hsxpa=2
ro.ril.hspa=2
ro.ril.lte=2
ro.ril.ltea=2
ro.ril.hep=0
ro.ril.def.agps.mode=2
ro.ril.enable.3g.prefix=1
ro.ril.enable.4g.prefix=1
ro.ril.htcmaskw1.bitmask=4294967295
ro.ril.htcmaskw1=14449
ro.ril.enable.dtm=1
ro.ril.hspaclass=15
ro.ril.lteclass=15
ro.ril.gprsclass=15
ro.ril.hsupa.category=10
ro.ril.hsdpa.category=30
ro.ril.lte.category=10
ro.ril.ltea.category=30
ro.ril.enable.a51=1
ro.ril.enable.a52=1
ro.ril.enable.a53=1
ro.ril.enable.a54=1
ro.ril.enable.a55=1

# Wireless + TCP Speed & Security Tweaks
net.core.wmem_max=1048576
net.core.rmem_max=1048576
net.core.rmem_default=262144
net.core.wmem_default=262144
net.core.optmem_max=20480
net.unix.max_dgram_qlen=50
net.ipv4.tcp_ecn=0
net.ipv4.route.flush=1
net.ipv4.tcp_rfc1337=1
net.ipv4.ip_no_pmtu_disc=0
net.ipv4.tcp_sack=1
net.ipv4.tcp_fack=1
net.ipv4.tcp_window_scaling=1
net.ipv4.tcp_timestamps=1
net.ipv4.tcp_rmem=4096 39000 187000
net.ipv4.tcp_wmem=4096 39000 187000
net.ipv4.tcp_mem=187000 187000 187000
net.ipv4.tcp_no_metrics_save=1
net.ipv4.tcp_moderate_rcvbuf=1
net.ipv6.tcp_ecn=0
net.ipv6.route.flush=1
net.ipv6.tcp_rfc1337=1
net.ipv6.ip_no_pmtu_disc=0
net.ipv6.tcp_sack=1
net.ipv6.tcp_fack=1
net.ipv6.tcp_window_scaling=1
net.ipv6.tcp_timestamps=1
net.ipv6.tcp_rmem=4096 39000 187000
net.ipv6.tcp_wmem=4096 39000 187000
net.ipv6.tcp_mem=187000 187000 187000
net.ipv6.tcp_no_metrics_save=1
net.ipv6.tcp_moderate_rcvbuf=1
net.tethering.noprovisioning=true

# DNS Tweaks
net.rmnet0.dns1=$ONetworkTweak
net.rmnet0.dns2=$TNetworkTweak
net.rmnet1.dns1=$ONetworkTweak
net.rmnet1.dns2=$TNetworkTweak
net.dns1=$ONetworkTweak
net.dns2=$TNetworkTweak
net.gprs.dns1=$ONetworkTweak
net.gprs.dns2=$TNetworkTweak
net.wcdma.dns1=$ONetworkTweak
net.wcdma.dns2=$TNetworkTweak
net.hspa.dns1=$ONetworkTweak
net.hspa.dns2=$TNetworkTweak
net.hsdpa.dns1=$ONetworkTweak
net.hsdpa.dns2=$TNetworkTweak
net.lte.dns1=$ONetworkTweak
net.lte.dns2=$TNetworkTweak
net.ltea.dns1=$ONetworkTweak
net.ltea.dns2=$TNetworkTweak
net.ppp0.dns1=$ONetworkTweak
net.ppp0.dns2=$TNetworkTweak
net.pdpbr1.dns1=$ONetworkTweak
net.pdpbr1.dns2=$TNetworkTweak
net.wlan0.dns1=$ONetworkTweak
net.wlan0.dns2=$TNetworkTweak
net.eth0.dns1=$ONetworkTweak
net.eth0.dns2=$TNetworkTweak

# Signal Tweaks
persist.cust.tel.eons=1
ro.config.hw_fast_dormancy=1
ro.config.combined_signal=true
telephony.lteOnCdmaDevice=1
ro.telephony.default_network=33,33

# Support For IPV4 and IPV6
persist.telephony.support.ipv6=1
persist.telephony.support.ipv4=1" >> $PINT
SETPERM -mm -msg
}

IPAPAUSBTF () {
if [ -d $IPDSNS ]; then
UCSA "$MSGIPL AP And USB Tethering Fix $VIPAPAUSBTF?" "IPAPAUSBTFS" "$IDAPAUSBTF"
fi
}

IPAPAUSBTFS () {
UIP "$MSGIAM AP And USB Tethering Fix"
if $MAGISK; then
PTMFI "$IDAPAUSBTF" "$IDAAPAUSBTF"
MMPR -v "AP And USB Tethering Fix" "$VIPAPAUSBTF" "$VCIPAPAUSBTF" "Access Point & USB Tethering Fix If Crash SUI Or If Rom Not Boot, Reboot & Etc"
MSSERVICE -s "rm -rf $IPDSNS/*; chmod 0400 $IPDSNS"
fi
rm -rf $IPDSNS/*; chmod 0400 $IPDSNS
UIP "$MSGDI"
}

} #

{ #Utilities: BB/SELS/CC/MMFR/JITC/Detach/PIF/LSP/WOL

IPBBB () {
if FINDER -aiop "$SYSTEM/$BUSYBOX/busybox"; then
UIP -s "$MSGFI Brutal BusyBox In $BUSYBOX, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Remove Symlinking BusyBox Applets"
for applet in $($SYSTEM/$BUSYBOX/busybox --list); do
rm -f $SYSTEM/$BUSYBOX/$applet
done
UIP "Remove BusyBox"
rm -f $SYSTEM/$BUSYBOX/busybox
UIP "$MSGDRM"
fi
else
UCSA "$MSGIP Brutal BusyBox $VIPBBB?" "IPBBBS" "$IDBBB"
fi
}

IPBBBS () {
UIP "$MSGIAM Brutal BusyBox"
if $MAGISK; then
PTMFI "$IDBBB" "$IDABBB" "$IPPSXBM"
MMPR -vcs "Brutal BusyBox" "$VIPBBB" "$VCIPBBB" "FeraVolt" "Brutal Busybox With Almost All Available Applets. Compiled With NDK Clang + LTO + Ofast + llvm Polly. Has All Android NDK Patches. ARMv7/ARMv8." "https://github.com/feravolt/Brutal_busybox"
FIPBB=$IPMM/$MODID$IPPSXBM
if [ -d $IPSB ] && [ ! -d $IPSXB ]; then echo -e "#!$MIPSB/sh\nfor sd in $MIPSB/*; do\nrm -f $IPMM/$MODID/\${sd};\ndone;" > $IPMM/$MODID/post-fs-data.sh; fi
else
FIPBB=$IPPSXB
fi
cp -f $BB/busybox $FIPBB
UIP "Setting BusyBox Permissions"
chmod 0777 $FIPBB/busybox
UIP "Symlinking BusyBox Applets"
$FIPBB/busybox --install -s $FIPBB
SETPERM -mm -msg
UIP "Usage:" "Run \"su -c busybox\" In Terminal On BOOTMODE"
}

IPSELS () {
if $MAGISK; then
PAI=false
UCSA "$MSGIP SELinux Switcher $VIPSELS?" "IPSELSS" "$IDSELS"
fi
}

IPSELSS () {
PTMFI "$IDSELS" "$IDASELS"
SLSP="Permissive" SLSE="Enforcing"
CHECKER "-sel"
if $PAI; then
SLSC="$SLSP" SLSCN="0"
else
UIP "Change SELinux" "SELinux Now: $SELINUXS" "$MSGVU In $SLSP" "$MSGVD In $SLSE"
if KEYCHOOSE; then SLSC="$SLSP" SLSCN="0"; else SLSC="$SLSE" SLSCN="1"; fi
fi
UIP "$MSGIAM Switcher Switcher"
MMPR -v "SELinux Switcher" "$VIPSELS" "$VCIPSELS" "SELinux Switcher - Set On: $SLSC"
echo -e "setenforce $SLSCN\necho -n $SLSCN > /sys/fs/selinux/enforce" > $IPMM/$MODID/service.sh
if $BOOTMODE; then
setenforce $SLSCN
echo -n $SLSCN > /sys/fs/selinux/enforce
UIP "SELinux Will Now Be In $SLSC"
fi
SETPERM -mm -msg
}

IPCC () {
if $MAGISK; then
UCSA "$MSGIP Cache Cleaner $VIPCC?" "IPCCS" "$IDCC"
fi
}

IPCCS () {
UIP "$MSGIAM Cache Cleaner"
PTMFI -nm "$IDCC" "$MIPSB"
MMPR -v "Cache Cleaner" "$VIPCC" "$VCIPCC" "Cache Cleaner For Remove More Empty/TMP/Trash Folder & Files - Usage: Run \"su -c CC\" In Terminal On BOOTMODE Or Run \"/*/CC\" In RECOVERY Terminal"
$ECHO "#!$MIPSB/sh

SPINNER () {
case \${SPIN} in
'|') SPIN='/';;
'/') SPIN='-';;
'-') SPIN='\\\';;
'\\\') SPIN='|';;
*) SPIN='\\\';;
esac
printf \"\r\${@} [\${SPIN}] \"
}

RMLOG () {
DF -s
clear

KLRMLF=\"
LOG
LOG.old
carrier_services*.log
eventlog.store*.log
flogger_bugle.log*
jni_log_*
log-*
logs_upload_attempt.log
play_logger_context.pb
play_metalog.log
sys_log_*
userlog-*.temp
\"

KLRML=\"
$IPDM/Stats-data
$IPDS/dropbox
$IPDS/graphicsstats
$IPDS/log-files.xml
$IPDS/procexitstore
$IPDS/procstats
$IPDS/shutdown-checkpoints
$IPDS/syncmanager-log
$IPDS/uiderrors.txt
$IPDS/usagestats
$IPDSUDE/0/com.android.shell/files/bugreports
$IPDSUDE/0/com.android.systemui/files/log_buffers.txt
$STORAGE/Download/MGC_CRASH_LOG
$STORAGE/MIUI/.debug_log
$STORAGE/mtklog
/data/anr
/data/log
/data/log_other_mode
/data/tombstones
/data/vendor/gps/log
/data/vendor/ssrdump
/data/vendor/tombstones
/dev/log
\"

MSGCC=true
for LOGCLEANER in \$KLRMLF; do
SPINNER && if \$MSGCC; then echo \"$MSGSD Remove Logs In /data/user & $IPDSUDE...\"; MSGCC=false; fi && find /data/user/0 $IPDSUDE/0 -depth -type f -name \$LOGCLEANER -exec rm -rf {} \;
done

for kll in \$KLRML; do if [ -d \$kll ]; then echo \"$MSGSD Found Logs In \$kll\"; rm -rf \$kll/*; elif [ -f \$kll ]; then echo \"$MSGSD Found \$kll\"; rm -f \$kll; fi; done
DF -e
echo \"$MSGSD Other Logs Not Found\"
}

CC () {
DF -s
clear

if [ $MIUI != true ] && [ -d $STORAGE/MIUI ]; then
rm -rf $STORAGE/MIUI
fi

RMFILELIST=\"
baidu
dctp
did
dmesg.log
flamegapps_debug_logs.tar.gz
journal*.tmp
miad
open_gapps_debug.logs.tar.gz
open_gapps_log.txt
ramdump
zlsdk.bin
\"

RMFOLDERLIST=\"
.AICPROMStats
.DataStorage
.UTSystemConfig
.com.android.providers.downloads.ui
.gs
.gs_fs*
.temp
.thumbnails
.tmfs
.vdevdir
.xlDownload
Crash_Reports
app_webview
cache
code_cache
dalvik-cache
no_backup
package_cache
resource-cache
thumbs
\"

echo \"$MSGSD Search In /data...\"

VMDLTMP=\"\$(find /data -type d -name vmdl*.tmp)\"
for f in \$VMDLTMP; do
echo \"$MSGSD Found \$f\"
rm -rf \$f
echo \"$MSGSD Remove Done\"
done

MSGCC=true
for FILECLEANER in \$RMFILELIST; do
SPINNER && if \$MSGCC; then echo \"$MSGSD Remove Trash Files...\"; MSGCC=false; fi && find /data -depth -type f -name \$FILECLEANER -exec rm -f {} \;
done

MSGCC=true
for FOLDERCLEANER in \$RMFOLDERLIST; do
SPINNER && if \$MSGCC; then echo \"$MSGSD Remove Trash/Cache/TMP Folders...\"; MSGCC=false; fi && find /data -depth -type d -name \$FOLDERCLEANER -exec rm -rf {} \;
done

CCSDAS=\$(ls $STORAGE/Android/data)
for CCF in \$CCSDAS; do
if find $IPDD/\$CCF -type d -name \$CCF; then
SPINNER
else
SPINNER && rm -rf $STORAGE/Android/data/\$CCF
fi
done

RMEF
DF -e
echo \"$MSGSD Please, Reboot Device!\"
}

RMEF () {
SPINNER && echo \"$MSGSD Remove Empty Files...\"
\$FIND $STORAGE/ -depth -type f -not -name .nomedia -empty -exec rm -f {} \;
SPINNER && echo \"$MSGSD Remove Empty Folders...\"
case \$1 in
-l) RMEFP=\"$STORAGE/\";;
*) RMEFP=\"/data/\";;
esac
\$FIND \$RMEFP -depth -type d -empty -exec rmdir {} \;
echo \"$MSGSD Remove Done\"
}

VMDL () {
DF -s
VMDLTMP=\"\$(find $IPDA -type d -name \"vmdl*.tmp\")\"
for f in \$VMDLTMP; do
echo \"$MSGSD Found \$f\"
rm -rf \$f
echo \"$MSGSD Remove Done.\"
done
DF -e
echo \"$MSGSD Please, Reboot Device!\"
}

DF () {
case \$1 in
-s) eval \$(echo \$(df -k /data) | awk '{print \"FA=\" \$11}');;
-e) eval \$(echo \$(df -k /data) | awk '{print \"SA=\" \$11}')
CA=\"\$(echo \$((\$SA-\$FA)) | awk '{\$1/=1024;printf \"%.2fMB\n\",\$1}')\"
if [[ \$CA = *-* ]]; then echo \"$MSGSD Memory Changed: \$CA\" | sed s/-/+/g; else echo \"$MSGSD Memory Changed: -\$CA\"; fi;;
esac
}

RMMB () {
DF -s
clear
for rmmb in \$(ls /data); do
case \$rmmb in
magisk_backup_*) echo \"$MSGSD Remove \$rmmb\"; rm -rf /data/\$rmmb;;
esac
done
DF -e
echo \"$MSGSD Other Magisk Backup Not Found\"
}

RMOTHER () {
DF -s
clear
case \$1 in
-lp) rm -f $IPDLTMP/*;;
esac
for f in \$RM; do
echo \"$MSGSD Found \$f\"
rm -rf \$f
echo \"$MSGSD Remove Done\"
done
DF -e
}

OPTIONS () {
echo \"$MSGSD Please Wait...\"

VMDLC=false
VMDLTMP=\"\$(find $IPDA -type d -name vmdl*.tmp)\"
for f in \$VMDLTMP; do VMDLC=true; break; done

TRASHEDF=false
TRASHED=\$(find $STORAGE/ -maxdepth 5 -type f -name .trashed*)
for f in \$TRASHED; do TRASHEDF=true; break; done

LPC=false
LP=\"\$(find /data/ru.* $IPDM/ru.* $IPDM/*-*-*-*-*/prefs/ru.* -type d -name ru.* 2>$NULL)\"
for f in \$LP; do LPC=true; break; done

DELETEDC=false
DELETED=\"\$(find /data/user/0 -type d -name *==deleted==*)\"
for f in \$DELETED; do DELETEDC=true; break; done

MMB=false
for rmmb in \$(ls /data); do
case \$rmmb in
magisk_backup_*) MMB=true; break;;
esac
done

clear
echo -e \"$MSGCS\\n$MSGSD Cache Cleaner $VIPCC\"

if [ -f $IPMM/$IDBBB$MIPSB/busybox ]; then
FIND=\"$IPMM/$IDBBB$MIPSB/busybox find\"
elif [ -f $IPMM/$IDBBB$MIPSXB/busybox ]; then
FIND=\"$IPMM/$IDBBB$MIPSXB/busybox find\"
elif [ -f $IPDADB/magisk/busybox ]; then
FIND=\"$IPDADB/magisk/busybox find\"
elif [ -f $IPDMM/busybox ]; then
FIND=\"$IPDMM/busybox find\"
else
echo -e \"$MSGSD Busybox Not Found!\\n$MSGSD Use Stock Find\"
FIND=\"find\"
fi

local opt=\"\"
while :; do
echo -n \"$MSGCS
$MSGSD Choose Varian:
$MSGCS
c) Cache Cleaner
e) Remove Empty Files/Folders (All In /data)
el) Remove Empty Files/Folders (Only In /sdcard)
l) Remove Logs\\n\"
\$TRASHEDF && echo -e \"t) Remove .trashed Files\"
\$MMB && echo -e \"m) Remove All Magisk Backup\"
\$VMDLC && echo -e \"v) Remove VMDLTMP\"
\$LPC && echo -e \"lp) Remove All Lucky Patcher Files\"
\$DELETEDC && echo -e \"d) Remove All Deleted Folders\"
echo \"r) Reboot Device
q) Quit
$MSGCS
?)\"
read opt
echo
case \$opt in
c | C) CC;;
e | E) clear; RMEF;;
el | EL) clear; RMEF -l;;
l | L) RMLOG;;
t | T) \$TRASHEDF && RM=\$TRASHED; RMOTHER;;
m | M) \$MMB && RMMB;;
v | V) \$VMDLC && VMDL;;
lp | LP) \$LPC && RM=\$LP; RMOTHER -lp;;
d | D) \$DELETEDC && RM=\$DELETED; RMOTHER;;
r | R) reboot;;
q | Q) exit 0;;
*) OPTIONS;;
esac
break
done
echo -n \"$MSGCS
$MSGSD Press <Enter> To Continue Or Write \\\"q <Enter>\\\" To Quit \"
read opt
[ -z \"\$opt\" ] || exit 0
echo
OPTIONS
}

ID=\"\$(id -u)\"
case \$ID in
0) OPTIONS;;
*) echo -e \"$MSGSD Superuser (su) Rights Is Needed!\"; exit 1;;
esac" | tee /data/CC $IPMM/$MODID$MIPSB/CC >$NULL
MSSERVICE -u "rm -f /data/CC" "CC"
sed -i "s/#!\/system\/bin\/sh/#!\/sbin\/sh/g" /data/CC; sed -i '/ID/,/esac/d' /data/CC
SETPERM -s /data/CC 0 0 0700
SETPERM -mm -msg
UIP "Usage:" "Run \"su -c CC\" In Terminal On BOOTMODE" "Or Run \"/*/CC\" In RECOVERY Terminal"
WCANFTP "-bb"
}

IPMMFR () {
if $MAGISK; then
UCSA "$MSGIP Magisk Manager For Recovery $VIPMMFR?" "IPMMFRS" "$IDMMFR"
fi
}

IPMMFRS () {
UIP "$MSGIAM Magisk Manager For Recovery"
PTMFI "$IDMMFR" "$IDAMMFR" "$MIPSB"
$ECHO "#!$MIPSB/sh
ID=\"\$(id -u)\"
case \$ID in
0) OPTIONS;;
*) echo -e \"$MSGSD Superuser (su) Rights Is Needed!\"; exit 1;;
esac

MMODULES () { ls -1 $IPMM || echo \"$MSGSD <None>\"; }

MCHANGER () {
local input=\"\" MODULES=\"\" FILE=\"\$1\" PRESENT=\"\$2\" ABSENT=\"\$3\"
for MODULES in \$(MMODULES | grep -v \<None\> || :); do
echo -n \"$MSGSD \$MODULES [\"
[ -f $IPMM/\$MODULES/\$FILE ] && echo \"\$PRESENT]\" || echo \"\$ABSENT]\"
done
echo -en \"\\n$MSGSD Input Pattern(s) (NAME Or GBoardThemes|GBoardT|GBoa):\"
read input
echo
for MODULES in \$(MMODULES | grep -v \<None\> || :); do
if echo \$MODULES | grep -Eq \"\${input:-_noMatch_}\"; then
[ -f $IPMM/\$MODULES/\$FILE ] && { rm $IPMM/\$MODULES/\$FILE; echo \"\$MODULES [\$ABSENT]\"; } \
|| { touch $IPMM/\$MODULES/\$FILE; echo \"\$MODULES [\$PRESENT]\"; }
fi
done
}

MMNT () {
echo -e \"$MSGSD Status Magisk Mount\\n\"
[ -f $IPDADB/magisk.img ] && { MCHANGER auto_mount ON OFF || :; } \
|| MCHANGER skip_mount OFF ON
}

MDISABLE () {
echo -e \"$MSGSD Status ON/OFF\\n\"
MCHANGER disable OFF ON
}

MREMOVE () {
echo -e \"$MSGSD Mark For Removal ([X])\\n\"
MCHANGER remove X \" \"
}

MCORE () {
if [ \$MAGISKVC -le 20414 ]; then
if [ -f /cache/.disable_magisk ] || [ -f /data/cache/.disable_magisk ]; then
rm -f /data/cache/.disable_magisk /cache/.disable_magisk 2>$NULL || :
OPTIONS
else
touch /data/cache/.disable_magisk /cache/.disable_magisk 2>$NULL || :
OPTIONS
fi
else
local MODULES=\"\"
if [ ! -f $IPDADB/magiskcore ]; then
for MODULES in \$(MMODULES | grep -v \<None\> || :); do
touch $IPMM/\$MODULES/disable
done
touch $IPDADB/magiskcore
OPTIONS
else
for MODULES in \$(MMODULES | grep -v \<None\> || :); do
rm -f $IPMM/\$MODULES/disable
done
rm -f $IPDADB/magiskcore
OPTIONS
fi
fi
}

OPTIONS () {
if [ -f /cache/.disable_magisk ] || [ -f /data/cache/.disable_magisk ] || [ -f $IPDADB/magiskcore ]; then MCS=\"[ON]\"; else MCS=\"[OFF]\"; fi
if [ -d $IPDMM ] && [ -f $IPDMM/util_functions.sh ]; then
MAGISKVC=\"\$(grep -m1 \"^MAGISK_VER_CODE=\" \"$IPDMM/util_functions.sh\") | cut -d= -f2\"
elif [ -d $IPDADB/magisk ] && [ -f $IPDADB/magisk/util_functions.sh ]; then
MAGISKVC=\"\$(grep -m1 \"^MAGISK_VER_CODE=\" \"$IPDADB/magisk/util_functions.sh\" | cut -d= -f2)\"
else
echo -e \"$MSGSD No Magisk Installation Found Or Installed Version Is Not Supported!\\n\"
exit 1
fi
clear
echo -e \"$MSGCS\\n$MSGSD Magisk Manager For Recovery $VIPMMFR\"
local opt=\"\"
while :; do
echo -n \"$MSGCS
$MSGSD Choose Varian:
$MSGCS
l) List Installed Modules
c) Magisk Core \$MCS
m) Mount Modules
d) Disable Modules
r) Remove Modules
q) Quit
$MSGCS
?)\"
read opt
echo
case \$opt in
l | L) echo -e \"$MSGSD Installed Modules:\\n\"; MMODULES;;
c | C) MCORE;;
m | M) MMNT;;
d | D) MDISABLE;;
r | R) MREMOVE;;
q | Q) exit 0;;
*) OPTIONS;;
esac
break
done
echo -n \"$MSGCS
$MSGSD Press <Enter> To Continue Or Write \\\"q <Enter>\\\" To Quit \"
read opt
[ -z \"\$opt\" ] || exit 0
echo
OPTIONS
}" | tee /data/MMFR $IPMM/$MODID$MIPSB/MMFR >$NULL
sed -i "s/#!\/system\/bin\/sh/#!\/sbin\/sh/g" /data/MMFR; sed -i '/ID/,/esac/d' /data/MMFR
SETPERM -s /data/MMFR 0 0 0700
MMPR -v "Magisk Manager For Recovery" "$VIPMMFR" "$VCIPMMFR" "Magisk Manager For Recovery - Usage: Run \"su -c MMFR\" In Terminal On BOOTMODE Or Run \"/*/MMFR\" In RECOVERY Terminal"
MSSERVICE -u "rm -f /data/MMFR" "MMFR"
SETPERM -mm -msg
UIP "Usage:" "Run \"su -c MMFR\" In Terminal On BOOTMODE" "Or Run \"/*/MMFR\" In RECOVERY Terminal"
}

IPJITC () {
if [ $ASDK -ge 27 ] && $MAGISK; then
UCSA "$MSGIP Just In Time Compiler $VIPJITC?" "IPJITCS" "$IDJITC"
fi
}

IPJITCS () {
UIP "$MSGIAM Just In Time Compiler"
PTMFI "$IDJITC" "$IDAJITC" "$MIPSB"
$ECHO "#!$MIPSB/sh

DF () {
case \$1 in
-s) eval \$(echo \$(df -k /data) | awk '{print \"FA=\" \$11}');;
-e) eval \$(echo \$(df -k /data) | awk '{print \"SA=\" \$11}')
CA=\"\$(echo \$((\$SA-\$FA)) | awk '{\$1/=1024;printf \"%.2fMB\n\",\$1}')\"
[[ \$CA = *-* ]] && echo \"$MSGSD Memory Changed: \$CA\" | sed s/-/+/g || echo \"$MSGSD Memory Changed: -\$CA\";;
esac
}

OPTIONS () {
clear
echo -e \"$MSGCS\\n$MSGSD Just In Time Compiler $VIPJITC\"
local opt=\"\"
while :; do
echo -n \"$MSGCS
$MSGSD Choose Varian:
$MSGCS
f) Full ReGenerate (Always First Time)
l) Lite ReGenerate (After OTA/Update APK)
d) Dexopt Optimization (Always)
r) Reset
q) Quit
$MSGCS
?)\"
read opt
echo
case \$opt in
f | F) clear; echo Starting Optimization...; DF -s; cmd package compile -a -f -m everything; echo Optimization Finish; DF -e;;
l | L) clear; echo Starting Optimization...; DF -s; cmd package compile -a -m everything; echo Optimization Finish; DF -e;;
d | D) clear; echo Starting Dexopt Optimization...; DF -s; cmd package bg-dexopt-job >$NULL; echo Dexopt Optimization Finish; DF -e;;
r | R) clear; echo Starting Reset...; DF -s; cmd package compile -a --reset; echo Reset Finish; DF -e;;
q | Q) exit 0;;
*) OPTIONS;;
esac
break
done
echo -n \"$MSGCS
$MSGSD Press <Enter> To Continue Or Write \\\"q <Enter>\\\" To Quit \"
read opt
[ -z \"\$opt\" ] || exit 0
echo
OPTIONS
}

ID=\"\$(id -u)\"
case \$ID in
0) OPTIONS;;
*) echo -e \"$MSGSD Superuser (su) Rights Is Needed!\"; exit 1;;
esac" > $IPMM/$MODID$MIPSB/JITC
MMPR -v "Just In Time Compiler" "$VIPJITC" "$VCIPJITC" "Just In Time Compiler For Force ReGenerate vdex/odex/art Files & Adding A Little Speed Open/Usage All Apps - Usage: Run \"su -c JITC\" In Terminal On BOOTMODE"
echo -e "dalvik.vm.dex2oat-filter=everything
dalvik.vm.dex2oat-threads=8
dalvik.vm.dex2oat32.enabled=true
dalvik.vm.dex2oat64.enabled=true
dalvik.vm.dexopt.secondary=true
dalvik.vm.image-dex2oat-filter=everything
dalvik.vm.image-dex2oat-threads=8
dalvik.vm.systemuicompilerfilter=everything
pm.dexopt.ab-ota=everything
pm.dexopt.bg-dexopt=everything
pm.dexopt.install=everything" > $IPMM/$MODID/system.prop
REPLACER -f "AppBooster"
SETPERM -mm -msg
UIP "Usage:" "Run \"su -c JITC\" In Terminal On BOOTMODE"
}

IPDETACH () {
if $MAGISK && $FINDGAPPS && [ $MAGISKFIRSTTIME != true ] && $ZYGISK; then
UCSA "$MSGIPO Zygisk Detach $VIPDETACH?" "IPDETACHS" "$IDDETACH"
fi
}

IPDETACHS () {
UZTI -i "Detach" "Zygisk Detach"
IPDETACHAS
}

IPDETACHAS () {
UZTI "DetachApp" "Zygisk Detach Apk"
PTMFI -nm "$IDDETACHA" "$MIPSPA/Detach"
cp -f $LOCALTMPDIR/DetachApp/Detach.apk $IPMM/$MODID$MIPSPA/Detach
APKPERM "$IPMM/$MODID$MIPSPA/Detach/Detach.apk" "$IPMM/$MODID$MIPSEP"; HAPWL "$IPMM/$MODID$MIPSES"; MKSCXML "$IPMM/$MODID$MIPSES"
MMPR -vc "zygisk-detach-app" "$VIPDETACHA" "$VCIPDETACHA" "j-hc" "Zygisk Detach App For Zygisk Detach Module"
SETPERM -mm -msg
}

IPPIF () {
if [ $ASDK -ge 27 ] && $MAGISK && $FINDGAPPS && [ $MAGISKFIRSTTIME != true ] && $ZYGISK; then
UCSA "$MSGIPO Zygisk Play Integrity Fix $VIPPIF?" "IPPIFS" "$IDPIF"
fi
}

IPPIFS () {
UZTI -i "PIF" "Zygisk Play Integrity Fix"
}

IPLSP () {
if [ $ASDK -ge 27 ] && $MAGISK && [ $MAGISKFIRSTTIME != true ] && $ZYGISK; then
UCSA "$MSGIPO Zygisk LSPosed $VIPLSP?" "IPLSPS" "$IDLSP"
fi
}

IPLSPS () {
UZTI -i "LSPosed" "Zygisk LSPosed"
}

IPWOL () {
if $MAGISK; then
UCSA "$MSGIP Wake On Lan $VIPWOL?" "IPWOLS" "$IDWOL"
fi
}

IPWOLS () {
UIP "$MSGIAM Wake On Lan"
PTMFI -nm  "$IDWOL" "$MIPSB"
cp -rf $WOL $IPMM/$MODID$MIPSB/wolup
$ECHO "#!$MIPSB/sh

ADDMANUALLY() {
clear
echo \"$MSGSD Add New Device Manually\"
echo -n \"$MSGSD Enter IP Address: \"
read IP; [ -z \"\$IP\" ] && IP=\"192.168.1.1\"
echo -n \"$MSGSD Enter MAC Address: \"
read MAC; [ -z \"\$MAC\" ] && MAC=\"DO:LB:AY:OB:IN:AA\"
echo -n \"$MSGSD Enter Port (Default Is 9): \"
read PORT; [ -z \"\$PORT\" ] && PORT=9
echo -n \"$MSGSD Enter Ping Port (Default Is 9): \"
read PINGPORT; [ -z \"\$PINGPORT\" ] && PINGPORT=9
echo -n \"$MSGSD Enter Name (Default Is NONAME): \"
read NAME; [ -z \"\$NAME\" ] && NAME=NONAME
echo \"\$IP|\$MAC|\$PORT|\$PINGPORT|\$NAME\" >> \"\$WOL_FILE\"
echo \"$MSGSD Device Saved!\"
SHOWDEVICES
}

ADDFROMLAN() {
clear
echo \"$MSGSD Devices From Local Network\"
TMP_FILE=\"$IPDLTMP/lan_scan.txt\" INDEX=1
> \"\$TMP_FILE\"

ip neigh | while read -r LINE; do
IP=\$(echo \"\$LINE\" | awk '{print \$1}') MAC=\$(echo \"\$LINE\" | awk '{print \$5}')
if [ \"\$MAC\" != \"FAILED\" ] && [ -n \"\$MAC\" ]; then
echo \"$MSGSD \$INDEX) IP: \$IP | MAC: \$MAC\"
echo \"\$IP|\$MAC\" >> \"\$TMP_FILE\"
INDEX=\$((INDEX + 1))
fi
done

if [ ! -s \"\$TMP_FILE\" ]; then
echo \"$MSGSD No Devices Found On The Network\"
return
fi

echo -n \"$MSGSD Select Device Number (Or Press Enter To Cancel): \"
read CHOICE
[ -z \"\$CHOICE\" ] && return

SELECTED=\$(sed -n \"\${CHOICE}p\" \"\$TMP_FILE\") IP=\$(echo \"\$SELECTED\" | cut -d'|' -f1) MAC=\$(echo \"\$SELECTED\" | cut -d'|' -f2)

echo -n \"$MSGSD Enter Port (Default Is 9): \"
read PORT; [ -z \"\$PORT\" ] && PORT=9
echo -n \"$MSGSD Enter WOL Port (Default Is 9): \"
read PINGPORT; [ -z \"\$PINGPORT\" ] && PINGPORT=9
echo -n \"$MSGSD Enter Name (Default Is NONAME): \"
read NAME; [ -z \"\$NAME\" ] && NAME=NONAME
echo \"\$IP|\$MAC|\$PORT|\$PINGPORT|\$NAME\" >> \"\$WOL_FILE\"
echo \"$MSGSD Device Added From LAN!\"
rm -f \"\$TMP_FILE\"
SHOWDEVICES
}

SHOWDEVICES() {
clear
if [ ! -f \"\$WOL_FILE\" ] || [ ! -s \"\$WOL_FILE\" ]; then
echo \"$MSGSD No Saved Devices. Add One Using Option (f)\"
return
fi

echo \"$MSGSD Saved Devices List\"
local INDEX=1
while IFS='|' read -r IP MAC PORT PINGPORT NAME; do
echo \"$MSGSD \$INDEX) \$IP|\$MAC|\$PORT|\$PINGPORT|\$NAME\"
INDEX=\$((INDEX + 1))
done < \"\$WOL_FILE\"

echo -n \"$MSGSD Select Device Number To Send WOL (Or Press Enter To Exit): \"
read CHOICE

if [ -z \"\$CHOICE\" ]; then return; fi

local LINE=\$(sed -n \"\${CHOICE}p\" \"\$WOL_FILE\")
IP=\$(echo \"\$LINE\" | cut -d'|' -f1) MAC=\$(echo \"\$LINE\" | cut -d'|' -f2) PORT=\$(echo \"\$LINE\" | cut -d'|' -f3) PINGPORT=\$(echo \"\$LINE\" | cut -d'|' -f4) NAME=\$(echo \"\$LINE\" | cut -d'|' -f5)

echo -e \"$MSGSD Waking Up: \$IP|\$MAC|\$PORT|\$PINGPORT|\$NAME\"
\$WOL \"\$MAC\" -i \"\$IP\" -p \"\$PORT\" >$NULL 2>&1
}

PINGDEVICE() {
clear
if [ ! -f \"\$WOL_FILE\" ] || [ ! -s \"\$WOL_FILE\" ]; then
echo \"$MSGSD No Saved Devices. Add One Using Option (f)\"
return
fi

echo \"$MSGSD Saved Devices List For Ping\"
local INDEX=1
while IFS='|' read -r IP MAC PORT PINGPORT NAME; do
echo \"$MSGSD \$INDEX) \$IP|\$MAC|\$PORT|\$PINGPORT|\$NAME\"
INDEX=\$((INDEX + 1))
done < \"\$WOL_FILE\"

echo -n \"$MSGSD Select Device Number To Ping (Or Press Enter To Cancel): \"
read CHOICE

[ -z \"\$CHOICE\" ] && return

local LINE=\$(sed -n \"\${CHOICE}p\" \"\$WOL_FILE\")
IP=\$(echo \"\$LINE\" | cut -d'|' -f1) PINGPORT=\$(echo \"\$LINE\" | cut -d'|' -f4)

echo \"$MSGSD Pinging \$IP...\"
nc -z \"\$IP\" \"\$PINGPORT\" >$NULL 2>&1

if [ \$? -eq 0 ]; then
echo \"\$MSGSD Device Is ONLINE And Responding On Port \$PINGPORT\"
else
echo \"$MSGSD nc Failed, Trying Regular Ping...\"
ping -c 1 -W 1 \"\$IP\" >$NULL 2>&1
if [ \$? -eq 0 ]; then
echo \"$MSGSD Device Is ONLINE And Responding On Port \$PINGPORT\"
else
echo \"$MSGSD Device Is OFFLINE Or Not Responding On Port \$PINGPORT\"
fi
fi
}

OPTIONS() {
clear
echo -e \"$MSGCS\n$MSGSD Wake On Lan $VIPWOL\"
local opt=\"\"
while :; do
echo -n \"$MSGCS
$MSGSD Choose Varian:
$MSGCS
m) Add Device Manually
l) Add Device From Local Network
s) Show Device List And Send WOL
p) Ping Device From List
q) Quit
$MSGCS
?\"
read opt
echo
case \$opt in
m | M) ADDMANUALLY;;
l | L) ADDFROMLAN;;
s | S) SHOWDEVICES;;
p | P) PINGDEVICE;;
q | Q) exit 0;;
*) OPTIONS;;
esac
break
done

echo -n \"$MSGCS
$MSGSD Press <Enter> To Continue Or Write \\\"q <Enter>\\\" To Quit \"
read opt
[ -z \"\$opt\" ] || exit 0
OPTIONS
}

ID=\"\$(id -u)\"
case \$ID in
0) if realpath $STORAGE/*/.WOL_DEVICES.txt >$NULL; then WOL_FILE=\"\$(realpath $STORAGE/*/.WOL_DEVICES.txt)\"; else WOL_FILE=\"$STORAGE/.WOL_DEVICES.txt\"; fi; WOL=\"$IPMM/$MODID$MIPSB/wolup\"; OPTIONS;;
*) echo -e \"$MSGSD Superuser (su) Rights Is Needed!\"; exit 1;;
esac" > $IPMM/$MODID$MIPSB/WOL
MMPR -v "Wake On Lan" "$VIPWOL" "$VCIPWOL" "Wake On Lan - Usage: Run \"su -c WOL\" In Terminal On BOOTMODE"
SETPERM -mm -msg
UIP "Usage:" "Run \"su -c WOL\" In Terminal On BOOTMODE"
WCANFTP "-bb"
}

} #

{ #Other: FA/LED/PSS/UAA/SBU/SHS

IPFPA () {
if FINDER -aiopb "$UINPUTKL"; then
UIP -s "$MSGFI Fingerprint Actions, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "$MSGRMIP"
BUCKUPER -r "$UINPUTKL"
UIP "$MSGDRM"
fi
else
if FINDER "$UINPUTKL"; then
UCSA -ent "$MSGIPP Fingerprint Actions $VIPFPA?" "IPFPAS" "$IDFPA"
fi
fi
}

IPFPAS () {
MSGPF=true
for NAMEKEYFUNCTION in "POWER" "WAKEUP" "HOME" "MUSIC" "CAMERA" "EXPLORER" "BACK" "MENU" "APP_SWITCH" "MEDIA_PLAY_PAUSE" "VOICE_ASSIST" "CALENDAR" "CALL" "CONTACTS" "CALCULATOR" "ENDCALL" "HEADSETHOOK" "ENVELOPE"; do
MSGPFA="$MSGNIS"
case $NAMEKEYFUNCTION in
"POWER") APF="Button Power";; "WAKEUP") APF="Action Wake Up";; "HOME") APF="Action Home";; "MUSIC") APF="Launch Music Player";; "CAMERA") APF="Launch Camera";; "EXPLORER") APF="Launch Explorer";; "BACK") APF="Action Back";; "MENU") APF="Action Menu";; "APP_SWITCH") APF="Action App Switch/Recent/Split Screen";; "MEDIA_PLAY_PAUSE") APF="Action Media Play/Pause";; "VOICE_ASSIST") APF="Launch Voice Assistant";; "CALENDAR") APF="Launch Calendar";; "CALL") APF="Launch Dialer";; "CONTACTS") APF="Launch Contacts";; "CALCULATOR") APF="Launch Calculator";; "ENDCALL") APF="End Call";; "HEADSETHOOK") APF="Play/Pause/Open Music Player/End Call";; "ENVELOPE") APF="Launch Gmail/Mail" MSGPFA="$MSGNUS";; *) APF=false;;
esac
if $MSGPF; then
UIP -s "Choose Fingerprint Action Variant"
MSGPF=false
else
UIP -cs
fi
UIP "$APF" "$MSGVU Yes" "$MSGVD No $MSGPFA"
if KEYCHOOSE; then
FINGERVARIANT=true
break
else
FINGERVARIANT=false
fi
done
if $FINGERVARIANT; then
UIP "$MSGIAM Fingerprint Actions"
mkdir -p $LOCALTMPDIR/FingerprintActions
UIP "$MSGPNF"
for FUINPUTKL in $UINPUTKL; do
UIP "Found $(basename $FUINPUTKL)" "$MSGPMIP"
PSF="$LOCALTMPDIR/FingerprintActions$FUINPUTKL"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FUINPUTKL $PSF
sed -i "/96/d;/102/d" $PSF
echo -e "\nkey 96 $NAMEKEYFUNCTION\nkey 102 $NAMEKEYFUNCTION" >> $PSF
UIP "$MSGFFAP"
done
if $MAGISK; then
PTMFI "$IDFPA"
cp -rf $LOCALTMPDIR/$MODID/* $IPMM/$MODID
MMPR -v "Fingerprint Actions" "$VIPFPA" "$VCIPFPA" "This Module Makes The Fingerprint Scanner Work Like The Power Button/Lock/Unlock The Screen/Reboot Menu With A Long Press/etc - Set On: $NAMEKEYFUNCTION"
MOVERPATH
else
BUCKUPER -s "$IPSUKL/uinput-fpc.kl $IPSUKL/uinput-gf.kl $IPSUKL/uinput-goodix.kl $IPVUKL/uinput-fpc.kl $IPVUKL/uinput-gf.kl $IPVUKL/uinput-goodix.kl"
cp -f $LOCALTMPDIR/FingerprintActions$MIPSVUKL/* $IPSUKL; cp -f $LOCALTMPDIR/FingerprintActions$MIPSUKL/* $IPVUKL
fi
SETPERM -mm -msg
fi
}

IPLEDLO () {
if $MAGISK; then
if [ -f $LEDMBRED ] || [ -f $LEDMBGREEN ] || [ -f $LEDMBBLUE ] || [ -f $LEDMBWHITE ]; then
UCSA "$MSGIPL LED Light Off $VIPLEDLO?" "IPLEDLOS" "$IDLEDLO"
fi
fi
}

IPLEDLOS () {
UIP "$MSGIAM LED Light Off"
PTMFI "$IDLEDLO" "$IDALEDLO $IDLEDLA"
echo "echo \"0\" | tee $LEDMBRED $LEDMBGREEN $LEDMBBLUE $LEDMBWHITE" > $IPMM/$MODID/service.sh
MMPR -v "LED Light Off" "$VIPLEDLO" "$VCIPLEDLO" "LED Light Off"; SETPERM -mm -msg
}

IPLEDLA () {
if $MAGISK; then
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ] || [ -f $FLASHLIGHT ] || [ -f $BUTTONBACKLIGHT ]; then
UCSA -ent "$MSGIPL LED Light Animation $VIPLEDLA?" "IPLEDLAS" "$IDLEDLA"
fi
fi
}

IPLEDLAS () {

LEDSTANDART="if [ -f $LEDWHITE ]; then
ANIMSPEED=\"0 1 2 3 4 5 6 7 8 9 10 9 8 7 6 5 4 3 2 1 0\" ANIMCOUNT=\"\$(seq 10)\"
elif [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ]; then
ANIMSPEED=\"0 1 0 0 1 0 0 1 0\" ANIMCOUNT=\"\$(seq 10)\"
fi"

mkdir -p $LOCALTMPDIR/$IDLEDLA
echo "$LEDSTANDART
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
if [ -f $LEDWHITE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDWHITE $FLASHLIGHT $BUTTONBACKLIGHT
fi
if [ -f $LEDRED ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDRED $FLASHLIGHT $BUTTONBACKLIGHT
fi
if [ -f $LEDGREEN ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDGREEN $FLASHLIGHT $BUTTONBACKLIGHT
fi
if [ -f $LEDBLUE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDBLUE $FLASHLIGHT $BUTTONBACKLIGHT
fi
done
done" > $LOCALTMPDIR/$IDLEDLA/serviceledflashbutton.sh

echo "$LEDSTANDART
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
if [ -f $LEDWHITE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDWHITE $FLASHLIGHT
fi
if [ -f $LEDRED ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDRED $FLASHLIGHT
fi
if [ -f $LEDGREEN ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDGREEN $FLASHLIGHT
fi
if [ -f $LEDBLUE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDBLUE $FLASHLIGHT
fi
done
done" > $LOCALTMPDIR/$IDLEDLA/serviceledflash.sh

echo "$LEDSTANDART
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
if [ -f $LEDWHITE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDWHITE $BUTTONBACKLIGHT
fi
if [ -f $LEDRED ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDRED $BUTTONBACKLIGHT
fi
if [ -f $LEDGREEN ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDGREEN $BUTTONBACKLIGHT
fi
if [ -f $LEDBLUE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDBLUE $BUTTONBACKLIGHT
fi
done
done" > $LOCALTMPDIR/$IDLEDLA/serviceledbutton.sh

echo "$LEDSTANDART
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
if [ -f $LEDWHITE ]; then
sleep 0.1
echo \$ADDSTRING > $LEDWHITE
elif [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ]; then
sleep 0.1
echo \$ADDSTRING > $LEDRED
sleep 0.1
echo \$ADDSTRING > $LEDGREEN
sleep 0.1
echo \$ADDSTRING > $LEDBLUE
fi
done
done" > $LOCALTMPDIR/$IDLEDLA/serviceled.sh

echo "ANIMSPEED=\"0 1 0 0 0 1 0 0 0 1 0\" ANIMCOUNT=\"\$(seq 10)\"
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
sleep 0.1
echo \$ADDSTRING | tee $FLASHLIGHT $BUTTONBACKLIGHT
done
done" > $LOCALTMPDIR/$IDLEDLA/serviceflashbutton.sh

echo "ANIMSPEED=\"0 1 0 0 0 1 0 0 0 1 0\" ANIMCOUNT=\"\$(seq 10)\"
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
sleep 0.1
echo \$ADDSTRING > $FLASHLIGHT
done
done" > $LOCALTMPDIR/$IDLEDLA/serviceflash.sh

echo "ANIMSPEED=\"0 1 0 0 1 0 0 1 0\" ANIMCOUNT=\"\$(seq 10)\"
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
sleep 0.1
echo \$ADDSTRING > $BUTTONBACKLIGHT
done
done" > $LOCALTMPDIR/$IDLEDLA/servicebutton.sh

UIP -s "Test Or Flash?" "$MSGVU Test" "$MSGVD Flash"
KEYCHOOSE && TEST=true || TEST=false
UIP -s "Choose Animation Variant"
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ]; then
UCSA -led "serviceled" "Only LED"
fi

if [ $ANIMATIONVARIANT != true ] && [ -f $FLASHLIGHT ]; then
UCSA -led "serviceflash" "Only Flash"
fi

if [ $ANIMATIONVARIANT != true ] && [ -f $BUTTONBACKLIGHT ]; then
UCSA -led "servicebutton" "Only Buttons"
fi

if [ $ANIMATIONVARIANT != true ] && [ -f $FLASHLIGHT ]; then
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ]; then
UCSA -led "serviceledflash" "LED And Flash"
fi
fi

if [ $ANIMATIONVARIANT != true ] && [ -f $FLASHLIGHT ] && [ -f $BUTTONBACKLIGHT ]; then
UCSA -led "serviceflashbutton" "Flash And Buttons"
fi

if [ $ANIMATIONVARIANT != true ] && [ -f $BUTTONBACKLIGHT ]; then
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ]; then
UCSA -led "serviceledbutton" "LED And Buttons"
fi
fi

if [ $ANIMATIONVARIANT != true ] && [ -f $FLASHLIGHT ] && [ -f $BUTTONBACKLIGHT ]; then
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ]; then
UCSA -led "serviceledflashbutton" "LED, Flash, Buttons"
fi
fi

if $ANIMATIONVARIANT; then
UIP "$MSGIAM LED Light Animation"
PTMFI "$IDLEDLA" "$IDLEDLO"
MMPR -v "LED Light Animation" "$VIPLEDLA" "$VCIPLEDLA" "LED Light Animation At Boot Time"
cp -f $LOCALTMPDIR/$MODID/$NLEDLO.sh $IPMM/$MODID/service.sh
SETPERM -mm -msg
fi
}

IPPSS () {
UCSA "$MSGIPL Proximity Sensor Switcher $VIPPSS?" "IPPSSS" "$IDPSS"
}

IPPSSS () {
UIP -s "Choose Variant:" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then PSSV="true" MSGPSS="Enable"; else PSSV="false" MSGPSS="Disable"; fi
UIP "$MSGIAM Proximity Sensor Switcher"
if $MAGISK; then
PTMFI "$IDPSS" "$IDAPSS"
echo -e "ro.sony.sensors.proximity=$PSSV\nro.qti.sensors.proximity=$PSSV\nro.vendor.sensors.proximity=$PSSV\nvendor.sensor.proximity_fusion.enabled=$PSSV\nhw.sensors.proximity=$PSSV\ndevice.sensors.proximity.enabled=$PSSV" > $IPMM/$MODID/system.prop
MMPR -v "Proximity Sensor Switcher" "$VIPPSS" "$VCIPPSS" "Proximity Sensor Switcher If Sensor Problem, Protect Glass & Etc - Set On: $MSGPSS"
else
BUCKUPER -bf "$IPSBP"
sed -i "/sensors.proximity/d;sensor.proximity_fusion/d" $IPSBP
echo -e "\n# Proximity Sensor Switcher\nro.sony.sensors.proximity=$PSSV\nro.qti.sensors.proximity=$PSSV\nro.vendor.sensors.proximity=$PSSV\nvendor.sensor.proximity_fusion.enabled=$PSSV\nhw.sensors.proximity=$PSSV\ndevice.sensors.proximity.enabled=$PSSV" >> $IPSBP
fi
SETPERM -mm -msg
}

IPUAA () {
if $MAGISK && [ $BOOTMODE != true ]; then
UCSA "$MSGIP Unfreeze All Applications?" "IPUAAS"
fi
}

IPUAAS () {
UIP "$MSGIAM Unfreeze All Applications"
PTMFI "$IDUAA"
MSSERVICE -s "for APPS in \$(pm list packages -d | cut -f 2 -d \":\"); do \$(pm enable \$APPS); done; rm -rf $IPMM/$MODID"
MMPR -v "Unfreeze All Applications" "$VIPUAA" "$VCIPUAA" "Unfreeze All Applications If Frozen"; SETPERM -mm -msg
}

SBATTERYSTATUS () {
BATTERYSTAT="/sys/class/power_supply/battery/uevent"
if [ -f $BATTERYSTAT ]; then
UCSA "Show Battery Status?" "SBATTERYSTATUSS"
fi
}

SBATTERYSTATUSS () {
POWERSUPPLYCHARGEFULLDESIGNC="$(GET_FILE_PROP -s "$BATTERYSTAT" "POWER_SUPPLY_CHARGE_FULL_DESIGN")"
POWERSUPPLYCONSTANTCHARGECURRENTMAXC="$(GET_FILE_PROP -s "$BATTERYSTAT" "POWER_SUPPLY_CONSTANT_CHARGE_CURRENT_MAX")"
if [ -n "$POWERSUPPLYCHARGEFULLDESIGNC" ]; then
POWERSUPPLYCHARGEFULLDESIGN="$POWERSUPPLYCHARGEFULLDESIGNC"
else
POWERSUPPLYCHARGEFULLDESIGN="$POWERSUPPLYCONSTANTCHARGECURRENTMAXC"
fi
BATTERYREMAINING="$(GET_FILE_PROP -s "$BATTERYSTAT" "POWER_SUPPLY_CHARGE_FULL")"
BATTERYREMAINING="$((BATTERYREMAINING/1000))"
POWERSUPPLYCHARGECOUNTER="$(GET_FILE_PROP -s "$BATTERYSTAT" "POWER_SUPPLY_CHARGE_COUNTER")"
POWERSUPPLYCHARGECOUNTER="$((POWERSUPPLYCHARGECOUNTER/1000))"
POWERSUPPLYCAPACITY="$(GET_FILE_PROP -s "$BATTERYSTAT" "POWER_SUPPLY_CAPACITY")"
POWERSUPPLYCYCLECOUNT="$(GET_FILE_PROP -s "$BATTERYSTAT" "POWER_SUPPLY_CYCLE_COUNT")"
POWER_SUPPLY_TEMP="$(GET_FILE_PROP -s "$BATTERYSTAT" "POWER_SUPPLY_TEMP")"
POWER_SUPPLY_TEMP="$((POWER_SUPPLY_TEMP/10))"
POWERSUPPLYCHARGEFULLDESIGN="$((POWERSUPPLYCHARGEFULLDESIGN/1000))"
CURRENTMAXMAH="$((POWERSUPPLYCHARGEFULLDESIGN - BATTERYREMAINING))"
CURRENTMAXMAHA="$((100-BATTERYREMAINING*100/POWERSUPPLYCHARGEFULLDESIGN))"
UIP "Declared Capacity: $POWERSUPPLYCHARGEFULLDESIGN mAh" "Current Capacity: $BATTERYREMAINING mAh" "Current Charge: $POWERSUPPLYCHARGECOUNTER mAh ($POWERSUPPLYCAPACITY%)" "Lost Capacity: $CURRENTMAXMAH mAh ($CURRENTMAXMAHA%)" "Charge Cycle: $POWERSUPPLYCYCLECOUNT" "Temperature: $POWER_SUPPLY_TEMP°C"
}

SHEALTHSTORAGE () {
if [ -e /sys/devices/platform/*ufs/health_descriptor ] || [ -e /sys/devices/platform/soc/*ufshc/health* ]; then
MSGROM="UFS"
UCSA "Show $MSGROM Health?" "SHEALTHSTORAGES"
elif [ -e /sys/class/mmc_host/mmc0/mmc0:0001 ]; then
MSGROM="EMMC"
UCSA "Show $MSGROM Health?" "SHEALTHSTORAGES"
fi
}

SHEALTHSTORAGES () {
for HLT in "/sys/devices/platform/*ufs/health_descriptor/life_time_estimation_a" "/sys/devices/platform/soc/*ufshc/health_descriptor/life_time_estimation_a" "/sys/devices/platform/soc/*ufshc/health/lifetimeA" "/sys/class/mmc_host/mmc0/mmc0:0001/life_time"; do
if [ -f $HLT ]; then HLT=$(cat $HLT); break; fi
done

for HEOL in "/sys/devices/platform/*ufs/health_descriptor/eol_info" "/sys/devices/platform/soc/*ufshc/health_descriptor/eol_info" "/sys/devices/platform/soc/*ufshc/health/eol" "/sys/class/mmc_host/mmc0/mmc0:0001/pre_eol_info"; do
if [ -f $HEOL ]; then HEOL=$(cat $HEOL); break; fi
done

case $HLT in
"0x00") MSGHLT="Like New";;
"0x01") MSGHLT="0-10%";;
"0x02") MSGHLT="10-20%";;
"0x03") MSGHLT="20-30%";;
"0x04") MSGHLT="30-40%";;
"0x05") MSGHLT="40-50%";;
"0x06") MSGHLT="50-60%";;
"0x07") MSGHLT="60-70%";;
"0x08") MSGHLT="70-80%";;
"0x09") MSGHLT="80-90%";;
"0x0A") MSGHLT="90-100%";;
"0x0B") MSGHLT="Death";;
*) MSGHLT="Unknown";;
esac

case $HEOL in
"0x00") MSGHEOL="Like New";;
"0x01") MSGHEOL="Normal";;
"0x02") MSGHEOL="Most Of The Blocks In The Reserve Are Used Up";;
"0x03") MSGHEOL="Close To Death";;
"0х04" | "0хFF") MSGHEOL="Death";;
*) MSGHEOL="Unknown";;
esac

if [ -f /proc/hwinfo ]; then
DDR="$(grep DDR /proc/hwinfo)"
UFS="$(grep UFS /proc/hwinfo)"
EMMC="$(grep EMMC /proc/hwinfo)"
UIP "$DDR" "$EMMC$UFS"
fi

for SD in "/sys/devices/platform/*ufs/string_descriptors" "/sys/devices/platform/soc/*ufshc/string_descriptors" "/sys/devices/platform/*ufs" "/sys/devices/platform/soc/*ufshc" "/sys/class/mmc_host/mmc0/mmc0:0001"; do
if [ -f $SD/manufacturer_name ]; then SDMN=$(cat $SD/manufacturer_name); if [ "$EMMC" ] || [ "$UFS" ]; then :; else UIP "$MSGROM Brand Name: $SDMN"; fi; fi
if [ -f $SD/vendor ]; then SDMN=$(cat $SD/vendor); if [ "$EMMC" ] || [ "$UFS" ]; then :; else UIP "$MSGROM Brand Name: $SDMN"; fi; fi
if [ -f $SD/manfid ]; then SDPN=$(cat $SD/manfid); if [ "$EMMC" ] || [ "$UFS" ]; then :; else UIP "$MSGROM Brand Name: $SDMN"; fi; fi
if [ -f $SD/product_name ]; then SDPN=$(cat $SD/product_name); UIP "$MSGROM Chip Model: $SDPN"; fi
if [ -f $SD/model ]; then SDPN=$(cat $SD/model); UIP "$MSGROM Chip Model: $SDPN"; fi
if [ -f $SD/name ]; then SDPN=$(cat $SD/name); UIP "$MSGROM Chip Model: $SDPN"; fi
if [ -f $SD/product_revision ]; then SDPR=$(cat $SD/product_revision); UIP "$MSGROM Revision: $SDPR"; fi
if [ -f $SD/rev ]; then SDPR=$(cat $SD/rev); UIP "$MSGROM Revision: $SDPR"; fi
if [ -f $SD/serial_number ]; then SDSN=$(cat $SD/serial_number); UIP "$MSGROM Serial Number: $SDSN"; fi
if [ -f $SD/serial ]; then SDSN=$(cat $SD/serial); UIP "$MSGROM Serial Number: $SDSN"; fi
done

if [ "$EMMC" ] || [ "$UFS" ] || [ "$SDMN" ]; then :; else UIP "$MSGROM Brand Name: Unknown"; fi
[ "$SDPN" ] && : || UIP "$MSGROM Chip Model: Unknown"
[ "$SDPR" ] && : || UIP "$MSGROM Revision: Unknown"
[ "$SDSN" ] && : || UIP "$MSGROM Serial Number: Unknown"

UIP "Wear Level: $MSGHLT" "EOL Info: $MSGHEOL"
}

RPASSF () {
if [ $BOOTMODE != true ] && [ -d $IPDS ]; then
if [ -f $IPDS/*.key ] || [ -f $IPDS/locksettings* ]; then
UCSA "Reset Screen Lock?" "RPASSFS"
fi
fi
}

RPASSFS () {
UIP "Remove Password Files"
rm -f $IPDS/*.key $IPDS/locksettings*
UIP "$MSGDRM"
}

RSWIFTO () {
if [ $BOOTMODE != true ] && [ -d $IPMM/swift_installer ] && [ $ASDK -le 30 ] && [ $ASDK -ge 27 ]; then
UCSA "$MSGL Remove All Swift Installer Overlays?" "RSWIFTOS"
fi
}

RSWIFTOS () {
MODID="swift_installer"
UIP "Swift Installer Overlays Remover"
[ -d "$STORAGE/.swift" ] && UIP "Removing Temporary Overlays Folder" && rm -rf $STORAGE/.swift
UIP "Removing Overlays From $IPSA"
for OVERLAY in $(ls $IPSA | grep .swiftinstaller.overlay); do
rm -rf $IPSA/$OVERLAY
done
REMOVER -rm "$IPMM/$MODID"
UIP "Clear Cache In $IPDRESC"
rm -rf $IPDRESC/*swiftinstaller.overlay*
UIP "Removing Overlays Saved State"
rm -rf $IPDS/overlays.xml
UIP "$MSGDRM"
}

GTRMFL () {
if [ $BOOTMODE != true ] && [ -f $STORAGE/FILERMLIST.sh ]; then
UCSA "$MSGL FILERMLIST.sh For Remove Files?" "GTRMFLS"
fi
}

GTRMFLS () {
FILERMLIST=$(cat $STORAGE/FILERMLIST.sh)
for f in $FILERMLIST; do
if [ -e $SYSTEM/$f ]; then
UIP "Found $SYSTEM/$f"
rm -rf $SYSTEM/$f
elif [ -e $VENDOR/$f ]; then
UIP "Found $VENDOR/$f"
rm -rf $VENDOR/$f
fi
done
}

RWFS () {
if [ $BOOTMODE != true ]; then
if [ -f $IPDSU/wallpaper ] || [ -f $IPDSU/wallpaper_orig ]; then
UCSA "$MSGL Remove Wallpaper (Fix Softloop)?" "RWFSS"
fi
fi
}

RWFSS () {
UIP "Remove Wallpaper"
rm -f $IPDSU/wallpaper*
UIP "$MSGDRM"
}

RRTPXML () {
if [ $BOOTMODE != true ] && [ -f $IPDMDE/0/apexdata/com.android.permission/runtime-permissions.xml ]; then
UCSA "$MSGL Remove runtime-permissions.xml (If UI Softloop)?" "RRTPXMLS"
fi
}

RRTPXMLS () {
UIP "Removing runtime-permissions.xml"
rm -f $IPDMDE/0/apexdata/com.android.permission/runtime-permissions.xml
UIP "$MSGDRM"
}

RAPEXA () {
if [ $BOOTMODE != true ] && [ -d /data/apex/active ]; then
UCSA "$MSGL Remove Apex Active (If Logoloop)?" "RAPEXAS"
fi
}

RAPEXAS () {
UIP "Removing Apex Active"
rm -rf /data/apex/active
UIP "$MSGDRM"
}

} #

{ #Tweaks: FGS/EHAP/FFE/E4KIYT/KL/4XMSAA/HWO/UGMSD/USGP

IPFGS () {
if $MAGISK; then
if $BOOTMODE; then
UCSA "Run And Install Force Google Sync?" "IPFGSS" "$IDFGS"
else
UCSA "$MSGIP Force Google Sync $VIPFGS?" "IPFGSS" "$IDFGS"
fi
fi
}

IPFGSS () {
if $BOOTMODE; then
UIP "Force Google Sync In Progress, Wait..."
bmgr run >$NULL
UIP "Running Incremental Backup For Requested Packages"
bmgr backupnow appdata >$NULL
UIP "Running Incremental Backup For All Packages"
bmgr backupnow --all >$NULL
UIP "Force Google Sync Done" "Check The Settings" "After A Couple Of Minutes Everything Is In Sync"
UCSA "$MSGIP Force Google Sync $VIPFGS?" "IPFGSS" "$IDFGS"
fi
if [ $BOOTMODE != true ] || KEYCHOOSE; then
UIP "$MSGIAM Force Google Sync After Boot"
PTMFI "$IDFGS"
MSSERVICE -s "bmgr run; bmgr backupnow appdata; bmgr backupnow --all"
MMPR -v "Force Google Sync" "$VIPFGS" "$VCIPFGS" "Force Google Sync After Boot"; SETPERM -mm -msg
fi
}

IPEHAP () {
if $MAGISK && [ "$ASDK" -ge 30 ]; then
UCSA "$MSGIP Enabling Hidden Api Policy $VIPEHAP?" "IPEHAPS" "$IDEHAP"
fi
}

IPEHAPS () {
UIP "$MSGIAM Enabling Hidden Api Policy"
PTMFI "$IDEHAP"
MSSERVICE -s "$SPGLOBAL hidden_api_policy 1; $SPGLOBAL hidden_api_policy_pre_p_apps 1; $SPGLOBAL hidden_api_policy_p_apps 1"
MMPR -v "Enabling Hidden Api Policy" "$VIPEHAP" "$VCIPEHAP" "Enabling Hidden Api Policy"; SETPERM -mm -msg
}

IPFUSS () {
$MAGISK && UCSA "$MSGIP Force Unknown Sources Switcher $VIPFUSS?" "IPFUSSS" "$IDFUSS"
}

IPFUSSS () {
UIP "$MSGIAM Force Unknown Sources Switcher"
PTMFI "$IDFUSS" "$IDAFUSS"
MSSERVICE "$SPSECURE install_non_market_apps 0; $SPSECURE unknown_sources_default_reversed 1" "$SPSECURE install_non_market_apps 1; $SPSECURE unknown_sources_default_reversed 0" "FUSS"
MMPR -v "Force Unknown Sources Switcher" "$VIPFUSS" "$VCIPFUSS" "Force Install Apps From Unknown Sources"; SETPERM -mm -msg
}

IPMUS () {
[ $ALLUI != true ] && UCSA "$MSGIP Multi Users Switcher $VIPMUS?" "IPMUSS" "$IDMUS"
}

IPMUSS () {
UIP -s "Choose Variant:" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then
MUSSFC="1" MUSSSC="0" MUSFWMU="10" MSGMUS="Enable"
else
MUSSFC="0" MUSSSC="1" MUSFWMU="1" MSGMUS="Disable"
fi
UIP "$MSGIAM Multi Users Switcher"
if $MAGISK; then
PTMFI "$IDMUS" "$IDAMUS"
MSSERVICE "$SPGLOBAL guest_user_enabled $MUSSSC" "$SPGLOBAL guest_user_enabled $MUSSFC" "MUS"
echo -e "fw.max_users=$MUSFWMU\nfw.show_multiuserui=$MUSSFC" > $IPMM/$MODID/system.prop
MMPR -v "Multi Users Switcher" "$VIPMUS" "$VCIPMUS" "Multi Users Switcher - Set On: $MSGMUS"
else
BUCKUPER -bf "$IPSBP"
sed -i "/fw.max_users/d;fw.show_multiuserui/d" $IPSBP
echo -e "\n# Multi Users Switcher\nfw.max_users=$MUSFWMU\nfw.show_multiuserui=$MUSSFC" >> $IPSBP
fi
SETPERM -mm -msg
}

IPFFE () {
UCSA "$MSGIP Force Fake Encryption $VIPFFE?" "IPFFES" "$IDFFE"
}

IPFFES () {
UIP "$MSGIAM Force Fake Encryption"
if $MAGISK; then
PTMFI "$IDFFE"
echo "ro.crypto.state=encrypted" > $IPMM/$MODID/system.prop
MMPR -v "Force Fake Encryption" "$VIPFFE" "$VCIPFFE" "Force Fake Encryption"
else
BUCKUPER -bf "$IPSBP"
sed -i "/ro.crypto.state/d" $IPSBP
echo -e "\n# Force Fake Encryption\nro.crypto.state=encrypted" >> $IPSBP
fi
SETPERM -mm -msg
}

IPE4KIYT () {
UCSA "$MSGIP Enable 4K In YouTube $VIPE4KIYTS?" "IPE4KIYTS" "$IDE4KIYT"
}

IPE4KIYTS () {
UIP "$MSGIAM Enable 4K In YouTube"
if $MAGISK; then
PTMFI "$IDE4KIYT"
echo "sys.display-size=3840x2160" > $IPMM/$MODID/system.prop
MMPR -v "Enable 4K In YouTube" "$VIPE4KIYT" "$VCIPE4KIYT" "Enable 4K In YouTube"
else
BUCKUPER -bf "$IPSBP"
sed -i "/sys.display-size/d" $IPSBP
echo -e "\n# Enable 4K In YouTube\nsys.display-size=3840x2160" >> $IPSBP
fi
SETPERM -mm -msg
}

IPFUSEPD () {
[ "$ASDK" -ge 30 ] && UCSA "$MSGIP FUSE Passthrough Disabler $VIPFUSEPD?" "IPFUSEPDS" "$IDFUSEPD"
}

IPFUSEPDS () {
UIP "$MSGIAM FUSE Passthrough Disabler"
if $MAGISK; then
PTMFI "$IDFUSEPD"
echo -e "persist.sys.fflag.override.settings_fuse=false\npersist.sys.fuse.passthrough.enable=false\npersist.sys.isolated_storage=false" > $IPMM/$MODID/system.prop
MMPR -v "FUSE Passthrough Disabler" "$VIPFUSEPD" "$VCIPFUSEPD" "FUSE Passthrough Disabler - Disables FUSE File System With Access Restrictions On Android 11+ And Enable Support SDCardFS File System To Restore Speed In Some Cases"
else
BUCKUPER -bf "$IPSBP"
sed -i "/sys.display-size/d" $IPSBP
echo -e "\n# FUSE Passthrough Disabler\npersist.sys.fflag.override.settings_fuse=false\npersist.sys.fuse.passthrough.enable=false\npersist.sys.isolated_storage=false" >> $IPSBP
fi
SETPERM -mm -msg
}

IPKL () {
if FINDER -aiop "$IPSB/KL"; then
UIP -s "$MSGFI Kill Logger, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Restore Stock Files"
RSKL=$(ls $IPSB/KL/bin)
cp -f $IPSB/KL/bin/* $IPSB
for f in $RSKL; do chmod 0777 $IPSB/$f; done
RSKL=$(ls $IPSB/KL/init)
cp -f $IPSB/KL/init/* $IPSEI
for f in $RSKL; do chmod 0777 $IPSEI/$f; done
rm -rf $IPSB/KL
UIP "$MSGDRS"
fi
else
UCSA -eno "$MSGIP Kill Logger $VIPKL?" "IPKLS" "$IDKL"
fi
}

IPKLS () {
KLLOGCAT=false
if [ -f $IPSB/logcat ]; then UIP -s "You Need logcat?" "$MSGVU Yes, Need" "$MSGVD No Need"; KEYCHOOSE && : || KLLOGCAT=true
UIP "$MSGIAM Kill Logger"
if $MAGISK; then
PTMFI "$IDKL" "$IDAKL" "$MIPSB $MIPSEI"
MMPR -vc "KillLogger" "$VIPKL" "$VCIPKL" "mrfrost475" "This Module Deletes The Files Responsible For The Dump, Logcat, And Bug Reports Also Prescribes Logcat Ban In build.prop"
KLIPP=$IPMM/$MODID/system.prop
MSSERVICE "$SPGLOBAL dropbox_max_files 1; $SPGLOBAL activity_starts_logging_enabled 1; echo \"1\" | tee /sys/block/mmcblk0/queue/iostats /sys/block/mmcblk1/queue/iostats" "$SPGLOBAL dropbox_max_files 0; $SPGLOBAL activity_starts_logging_enabled 0; echo \"0\" | tee /sys/block/mmcblk0/queue/iostats /sys/block/mmcblk1/queue/iostats" "KL"
else
BUCKUPER -bf "$IPSBP"; KLIPP=$IPSBP
fi
UIP "Create Daemons Dummy Files In $MIPSB"
if $KLLOGCAT; then if $MAGISK; then echo '' > $IPMM/$MODID$MIPSB/logcat; else mkdir -p $IPSB/KL; cp -f $IPSB/logcat $IPSB/KL; echo '' > $IPSB/logcat; fi; fi; fi

KLDL="
DumpSystemInfo
aee_dumpstate
atrace
bugreport
bugreportz
cnss_diag
cplog
crash_dump32
crash_dump64
dataLogDaemon
debuggerd
debuggerd64
dexdump
dexoptanalyzer
diag_socket_log
dmesg
dmlog
dumpkmap
dumpleases
dumpstate
emdlogger1
emdlogger2
emdlogger3
emdlogger5
hcidump
hexdump
i2cdump
klogd
lastlog.sh
log
log_ctr
log_service
logd
logger
loggerlauncher
logname
logread
logwrapper
lpdump
lpdumpd
mdlogger
memorydumper
minidumpd
mobile_log_d
nanddump
notify_traceur.sh
oatdump
outdump
setlogcons
subsystem_ramdump
svlogd
tcpdump
tombstoned
trace.sh
traced
traced_probes
traceroute
traceroute6
wpdiagd
xlog
ylog
ylogbox
ylogctl
ylogdebug.sh
ylogkat
"
for kll in $KLDL; do if [ -f $IPSB/$kll ]; then if $MAGISK; then touch $IPMM/$MODID$MIPSB/$kll; else mkdir -p $IPSB/KL/bin; cp -f $IPSB/$kll $IPSB/KL/bin; echo '' > $IPSB/$kll; fi; fi; done

KLDL="
atrace.rc
atrace_userdebug.rc
bugreport.rc
dataLogDaemon.rc
debuggerd.rc
debuggerd64.rc
dumpstate.rc
emdlogger1.rc
emdlogger2.rc
emdlogger5.rc
log_service.rc
logd.rc
lpdumpd.rc
mdlogger.rc
mobile_log_d.rc
modemlog_connmgr_service.rc
slogmodem.rc
tombstoned.rc
traceur.rc
ylog.rc
"
for kll in $KLDL; do if [ -f $IPSEI/$kll ]; then if $MAGISK; then touch $IPMM/$MODID$MIPSEI/$kll; else mkdir -p $IPSB/KL/init; cp -f $IPSEI/$kll $IPSB/KL/init; echo '' > $IPSEI/$kll; fi; fi; done

echo -e "\n# KillLogger
av.debug.disable.pers.cache=true
config.disable_rtt=true
dalvik.vm.checkjni=false
dalvik.vm.verify-bytecode=false
db.log.slow_query_threshold=0
debug.als.logs=0
debug.atrace.tags.enableflags=0
debug.egl.profiler=0
debug.enable.gamed=0
debug.enable.wl_log=0
debug.hwc.otf=0
debug.hwc_dump_en=0
debug.qualcomm.sns.daemon=0
debug.qualcomm.sns.hal=0
debug.qualcomm.sns.libsensor1=0
debug.sf.ddms=0
debug.sf.disable_backpressure=1
debug.sf.dump=0
debug.sf.gpu_comp_tiling=0
debug.sf.recomputecrop=0
debug.svi.logs=0
debug_test=0
debugtool.anrhistory=0
hwui.use_gpu_pixel_buffers=false
libc.debug.malloc=0
live.logcat=disable
log.cffdump=0
log.cffdump_no_memzero=0
log.cffdump_with_ifh=0
log.dumpx=0
log.pm4=0
log.pm4mem=0
log.primitives=0
log.resolves=0
log.sc_dev=0
log.shaders=0
log.tag.EDEN=OFF
log.tag.NPUC=OFF
log.tag.stats_log=0
log_ao=0
log_audiodecnode=0
log_audiooutput=0
log_basedecnode=0
log_datapath=0
log_fps_interval=0
log_frame_info=0
log_metadatadriver=0
log_mp4dectime=0
log_mp4parsernode=0
log_omxmp4=0
log_outputnode=0
log_outputnodeinputport=0
log_playerdriver=0
log_playerengine=0
log_posttime=0
log_profile=0
log_surfaceoutput=0
log_videodecnode=0
logcast.live=disable
logcat.live=disable
logd.logpersistd.enable=false
logd.statistics=0
media.stagefright.log-uri=0
net.ipv4.tcp_no_metrics_save=1
persist.android.strictmode=0
persist.brcm.cp_crash=none
persist.brcm.log=none
persist.data.qmi.adb_logmask=0
persist.debug.sensors.hal=0
persist.debug.trace=0
persist.debug.wfd.enable=0
persist.ims.disableADBLogs=1
persist.ims.disableDebugLogs=1
persist.ims.disableIMSLogs=0
persist.ims.disableQXDMLogs=0
persist.ims.disabled=1
persist.ims.enableADBLogs=0
persist.ims.enableDebugLogs=0
persist.log.tag.AnalyticsService=S
persist.log.tag.CHIUSECASE=S
persist.log.tag.CVP=S
persist.log.tag.CamX=S
persist.log.tag.CompatibilityChangeReporter=S
persist.log.tag.ContrastColorUtil=S
persist.log.tag.DeviceStatisticsService=S
persist.log.tag.DrmLibTime=S
persist.log.tag.FastChargingPreferenceController=S
persist.log.tag.IntervalStats=S
persist.log.tag.KernelCpuUidActiveTimeReader=S
persist.log.tag.NearbySharing=S
persist.log.tag.OpenGLRenderer=S
persist.log.tag.QC-time-services=S
persist.log.tag.ResourcesCompat=S
persist.log.tag.SQLiteLog=S
persist.log.tag.SYNX-UMD=S
persist.log.tag.Tracer=S
persist.log.tag.TrafficStats=S
persist.log.tag.b/223498680=S
persist.log.tag.bt_stack=S
persist.log.tag.cnss-daemon=S
persist.log.tag.ultrasound_extn=S
persist.log.tag.wificond=S
persist.oem.dump=0
persist.sample.eyetracking.log=0
persist.sys.dun.override=0
persist.sys.loglevel=0
persist.sys.offlinelog.kernel=1
persist.sys.offlinelog.logcat=1
persist.traced.enable=0
persist.vendor.ims.disableADBLogs=1
persist.vendor.ims.disableDebugLogs=1
persist.vendor.ims.disableIMSLogs=1
persist.vendor.ims.disableQXDMLogs=1
persist.vendor.ssr.enable_ramdumps=0
persist.vendor.verbose_logging_enabled=false
profiler.debugmonitor=false
profiler.force_disable_err_rpt=1
profiler.force_disable_ulog=1
profiler.hung.dumpdobugreport=false
ro.config.nocheckin=1
ro.debuggable=0
ro.kernel.android.checkjni=0
ro.kernel.checkjni=0
ro.kernel.qemu.gles=0
ro.logd.size.stats=0
ro.logd.size=0
ro.sf.battery.log.enabled=0
ro.sf.battery_log=0
rw.logger=0
sdm.debug.disable_inline_rotator=1
sdm.debug.disable_skip_validate=1
sys.games.gt.prof=1
sys.hwc.gpu_perf_mode=0
sys.log.app=0
vidc.debug.level=0" >> $KLIPP
SETPERM -mm -msg
}

IPF4XMSAAS () {
UCSA "$MSGIP Force 4X MSAA Switcher $VIPF4XMSAAS?" "IPF4XMSAASS" "$IDF4XMSAAS"
}

IPF4XMSAASS () {
UIP -s "Choose Variant:" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then MSAASV="true" MSGMSAAS="Enable"; else MSAASV="false" MSGMSAAS="Disable"; fi
UIP "$MSGIAM Force 4X MSAA Switcher"
if $MAGISK; then
PTMFI "$IDF4XMSAAS" "$IDAF4XMSAAS"
echo "debug.egl.force_msaa=$MSAASV" > $IPMM/$MODID/system.prop
MMPR -v "Force MSAA Switcher" "$VIPF4XMSAAS" "$VCIPF4XMSAAS" "Force 4X MSAA Switcher In Developer Settings After ReBoot - Set On: $MSGMSAAS"
else
BUCKUPER -bf "$IPSBP"
sed -i "/debug.egl.force_msaa/d" $IPSBP
echo -e "\n# Force 4X MSAA Switcher\ndebug.egl.force_msaa=$MSAASV" >> $IPSBP
fi
SETPERM -mm -msg
}

IPFHWOS () {
if $MAGISK && [ $ONEUI != true ]; then
UCSA "$MSGIP Force HW Overlays Switcher $VIPFHWOS?" "IPFHWOSS" "$IDFHWOS"
fi
}

IPFHWOSS () {
UIP -s "Choose Variant:" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then FHWOSV="1" MSGFHWOS="Enable"; else FHWOSV="0" MSGFHWOS="Disable"; fi
UIP "$MSGIAM Force HW Overlays Switcher"
PTMFI "$IDFHWOS" "$IDAFHWOS"
MSSERVICE -s "service call SurfaceFlinger 1008 i32 $FHWOSV"
MMPR -v "Force HW Overlays Switcher" "$VIPFHWOS" "$VCIPFHWOS" "Force HW Overlays Switcher In Developer Settings After ReBoot - Set On: $MSGFHWOS"; SETPERM -mm -msg
}

IPFDEVADB () {
$MAGISK && UCSA -eno "$MSGIP Force Activate DEV & ADB $VIPFDEVADB?" "IPFDEVADBS" "$IDFDEVADB"
}

IPFDEVADBS () {
UIP -s "Enabled ADB WIFI?" "$MSGVU Yes" "$MSGVD No $MSGNIS"; KEYCHOOSE && ADBWIFI="; sleep 20; $SPGLOBAL adb_wifi_enabled 1" || ADBWIFI=
UIP -s "Disable ro.secure (CTS May Failed)?" "$MSGVU Yes" "$MSGVD No $MSGNIS"; KEYCHOOSE && ADBRS="ro.secure=0\nro.adb.secure=0" || ADBRS=
UIP -s "Use ro.debuggable (DEV May Crash)?" "$MSGVU Yes" "$MSGVD No $MSGEEFTC"; KEYCHOOSE && ADBRD="ro.debuggable=1" || ADBRD=
UIP "$MSGIAM Force Activate DEV & ADB"
PTMFI "$IDFDEVADB"
MSSERVICE -s "$SPGLOBAL development_settings_enabled 1; $SPGLOBAL adb_enabled 1; $SPGLOBAL verifier_verify_adb_installs 0$ADBWIFI"
echo -e "persist.security.adbinput=1
persist.security.adbinstall=1
persist.service.adb.enable=1
persist.service.debuggable=1
persist.sys.usb.config=adb
service.adb.tcp.port=5555
$ADBRS
$ADBRD" > $IPMM/$MODID/system.prop
MMPR -v "Force DEV & ADB" "$VIPFDEVADB" "$VCIPFDEVADB" "Force Activate Developer Settings & ADB/ADB Wifi With Port 5555"; SETPERM -mm -msg
}

IPUSBSUC () {
if [ -f $IPDSDE/0/UsbDeviceManagerPrefs.xml ]; then
UCSA "$MSGIP USB Screen Unlocked Config $VIPUSBSUC?" "IPUSBSUCS" "$IDUSBSUC"
fi
}

IPUSBSUCS () {
UCSA -a "MTP Tethering MIDI PTP" "USB Config" "Config:" "PTP"
if $UCSFNM; then
UIP "$MSGIAM USB Screen Unlocked Config"
case $UCSFNMC in "MTP") USBSUC="mtp";; "Tethering") USBSUC="rndis";; "MIDI") USBSUC="midi";; "PTP") USBSUC="ptp";; esac
if $MAGISK; then
PTMFI "$IDUSBSUC" "$IDAUSBSUC"
MSSERVICE -s "echo \"<?xml version='1.0' encoding='utf-8' standalone='yes' ?>\n<map>\n    <string name=\\\"usb-screen-unlocked-config-0\\\">$USBSUC</string>\n</map>\" > $IPDSDE/0/UsbDeviceManagerPrefs.xml"
MMPR -v "USB Screen Unlocked Config" "$VIPUSBSUC" "$VCIPUSBSUC" "USB Screen Unlocked Config Set On: $UCSFNMC"
fi
echo -e "<?xml version='1.0' encoding='utf-8' standalone='yes' ?>\n<map>\n    <string name=\"usb-screen-unlocked-config-0\">$USBSUC</string>\n</map>" > $IPDSDE/0/UsbDeviceManagerPrefs.xml
SETPERM -mm -msg
fi
}

IPFULIRS () {
if CHECKER "-device" "dipper" || CHECKER "-device" "beryllium"; then
if FINDER -aiopb "$IPPVO/FaceUnlockService__auto_generated_rro_vendor.apk"; then
if [ $MIUI != true ]; then
UIP -s "$MSGFI Face UnLock IR Switcher, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "$MSGRMIP"
BUCKUPER -r "$IPPVO/FaceUnlockService__auto_generated_rro_vendor.apk"
UIP "$MSGDRM"
fi
else
if [ -f $IPSEP/com.motorola.faceunlock.xml ] || [ -f $IPSEP/privapp-permissions-org.pixelexperience.faceunlock.xml ] || [ -f $IPSEP/privapp-permissions-com.crdroid.faceunlock.xml ] || [ -f $IPSEP/privapp-permissions-com.spark.faceunlock.xml ] || [ -f $IPSEP/privapp-permissions-com.aospextended.faceunlock.xml ] || [ -f $IPSEP/privapp_whitelist_co.aospa.sense.xml ]; then
UCSA "$MSGIP Face UnLock IR Switcher $VIPFULIRS?" "IPFULIRSS" "$IDFULIRS"
fi
fi
fi
fi
}

IPFULIRSS () {
UIP -s "Choose Variant:" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then FULIRSV="5" MSGFULIRS="Enable"; else FULIRSV= MSGFULIRS="Disable"; fi
UZTI "FULIRS" "Face UnLock IR Switcher"
if [ -f $IPSEP/com.motorola.faceunlock.xml ]; then
FUPNXML="com.motorola.faceunlock"
elif [ -f $IPSEP/privapp-permissions-org.pixelexperience.faceunlock.xml ]; then
FUPNXML="org.pixelexperience.faceunlock"
elif [ -f $IPSEP/privapp-permissions-com.crdroid.faceunlock.xml ]; then
FUPNXML="com.crdroid.faceunlock"
elif [ -f $IPSEP/privapp-permissions-com.spark.faceunlock.xml ]; then
FUPNXML="com.spark.faceunlock"
elif [ -f $IPSEP/privapp-permissions-com.aospextended.faceunlock.xml ]; then
FUPNXML="com.aospextended.faceunlock"
elif [ -f $IPSEP/privapp_whitelist_co.aospa.sense.xml ]; then
FUPNXML="co.aospa.sense"
fi
if $MAGISK; then
PTMFI "$IDFULIRS" "$IDAFULIRS"
echo -e "vendor.camera.aux.packagelist=com.android.camera,org.codeaurora.snapcam,org.lineageos.aperture,$FUPNXML\nro.face_unlock_service.enabled=true" > $IPMM/$MODID/system.prop
if [ -f $IPSEP/com.motorola.faceunlock.xml ]; then
echo -e "\nro.face.moto_unlock_service.cam_id=$FULIRSV" >> $IPMM/$MODID/system.prop
elif [ -f $IPSEP/privapp_whitelist_co.aospa.sense.xml ]; then
echo -e "\nro.face.sense_service.camera_id=$FULIRSV" >> $IPMM/$MODID/system.prop
else
mkdir -p $IPMM/$MODID$MIPPVO
cp -f $LOCALTMPDIR/FULIRS/FaceUnlockService-$FUPNXML-$MSGFULIRS.apk $IPMM/$MODID$MIPPVO/FaceUnlockService__auto_generated_rro_vendor.apk
fi
MMPR -v "Face UnLock IR Switcher" "$VIPFULIRS" "$VCIPFULIRS" "Face UnLock IR Switcher For MI8/POCOF1 - Set On: $MSGFULIRS"
else
BUCKUPER -bf "$IPSBP"
sed -i "/vendor.camera.aux.packagelist/d" $IPSBP
echo -e "\n# Face UnLock IR Switcher\nvendor.camera.aux.packagelist=com.android.camera,org.codeaurora.snapcam,org.lineageos.aperture,$FUPNXML\nro.face_unlock_service.enabled=true" >> $IPSBP
if [ -f $IPSEP/com.motorola.faceunlock.xml ]; then
sed -i "/ro.face.moto_unlock_service.cam_id/d" $IPSBP
echo -e "\nro.face.moto_unlock_service.cam_id=$FULIRSV" >> $IPSBP
elif [ -f $IPSEP/privapp_whitelist_co.aospa.sense.xml ]; then
sed -i "/ro.face.sense_service.camera_id/d" $IPSBP
echo -e "\nro.face.sense_service.camera_id=$FULIRSV" >> $IPSBP
else
BUCKUPER -s "$IPPVO/FaceUnlockService__auto_generated_rro_vendor.apk"
cp -f $LOCALTMPDIR/FULIRS/FaceUnlockService-$FUPNXML-$MSGFULIRS.apk $IPPVO/FaceUnlockService__auto_generated_rro_vendor.apk
fi
fi
SETPERM -mm -msg
WCANFTP "-sl"
}

IPFDPP () {
$MAGISK && UCSA "$MSGIP Force Disabling Play Protect $VIPFDPP?" "IPFDPPS" "$IDFDPP"
}

IPFDPPS () {
UIP "$MSGIAM Force Disabling Play Protect"
PTMFI "$IDFDPP"
MSSERVICE -s "$SPGLOBAL upload_apk_enable 0; $SPGLOBAL package_verifier_enable 0; $SPGLOBAL package_verifier_user_consent -1; $SPGLOBAL verifier_verify_adb_installs 0"
MMPR -v "Force Disabling Play Protect" "$VIPFDPP" "$VCIPFDPP" "Force Disabling Play Protect"; SETPERM -mm -msg
}

IPUGMSD () {
if $MAGISK && $FINDGAPPS && [ $ASDK -ge 23 ]; then
UCSA "$MSGIPP Universal GMS Doze $VIPUGMSD?" "IPUGMSDS" "$IDUGMSD"
fi
}

IPUGMSDS () {
UIP "$MSGIAM Universal GMS Doze"
PTMFI "$IDUGMSD" "$IDAUGMSD"
UIP "$MSGPNF"
LOCATION=$(XML=$(find $ALLDP -name "*.xml"); for i in $XML; do if grep -q 'allow-unthrottled-location package="com.google.android.gms"' $MAGISKMP$i 2>$NULL; then echo "$i"; fi; done)
SAVE=$(XML=$(find $ALLDP -name "*.xml"); for i in $XML; do if grep -q 'allow-in-power-save package="com.google.android.gms"' $MAGISKMP$i 2>$NULL; then echo "$i"; fi; done)
IGNORE=$(XML=$(find $ALLDP -name "*.xml"); for i in $XML; do if grep -q 'allow-ignore-location-settings package="com.google.android.gms"' $MAGISKMP$i 2>$NULL; then echo "$i"; fi; done)
for i in $LOCATION $SAVE $IGNORE; do
if [ ! -f $IPMM/$MODID$i ]; then
UIP "Found $(basename $i)" "$MSGPMIP"
mkdir -p `dirname $IPMM/$MODID$i`
cp -f $i $IPMM/$MODID$i
sed -i '/allow-unthrottled-location package="com.google.android.gms"/d;/allow-in-power-save package="com.google.android.gms"/d;/allow-ignore-location-settings package="com.google.android.gms"/d' $IPMM/$MODID$i
UIP "$MSGFFAP"
fi
done
echo "#!$MIPSB/sh
if [ -d $IPMM/$MODID ] && [ ! -f $IPMM/$MODID/disable ]; then
LOCATION=\$(XML=\$(find $IPMM -name \"*.xml\"); for i in \$XML; do if grep -q 'allow-unthrottled-location package=\"com.google.android.gms\"' \$i 2>$NULL; then echo \"\$i\"; fi; done)
SAVE=\$(XML=\$(find $IPMM -name \"*.xml\"); for i in \$XML; do if grep -q 'allow-in-power-save package=\"com.google.android.gms\"' \$i 2>$NULL; then echo \"\$i\"; fi; done)
IGNORE=\$(XML=\$(find $IPMM -name \"*.xml\"); for i in \$XML; do if grep -q 'allow-ignore-location-settings package=\"com.google.android.gms\"' \$i 2>$NULL; then echo \"\$i\"; fi; done)
for i in \$LOCATION \$SAVE \$IGNORE; do
SEARCH=\$(echo \"\$i\" | sed -e 's/\// /g' | awk '{print \$4}')
sed -i '/allow-in-power-save package=\"com.google.android.gms\"/d;/allow-in-power-save package=\"com.google.android.gms\"/d;/allow-in-data-usage-save package=\"com.google.android.gms\"/d' \$i
done
sleep 1m
pm disable com.google.android.gms/com.google.android.gms.auth.managed.admin.DeviceAdminReceiver
pm disable com.google.android.gms/com.google.android.gms.mdm.receivers.MdmDeviceAdminReceiver
dumpsys deviceidle whitelist -com.google.android.gms
dumpsys deviceidle whitelist -com.android.vending
dumpsys deviceidle whitelist -com.sec.android.app.samsungapps
find $IPDD -type f -name '*gms*' -delete
elif [ ! -d $IPMM/$MODID ]; then
sleep 1m
pm enable com.google.android.gms/com.google.android.gms.auth.managed.admin.DeviceAdminReceiver
pm enable com.google.android.gms/com.google.android.gms.mdm.receivers.MdmDeviceAdminReceiver
dumpsys deviceidle whitelist +com.google.android.gms
dumpsys deviceidle whitelist +com.android.vending
dumpsys deviceidle whitelist +com.sec.android.app.samsungapps
find $IPDD -type f -name '*gms*' -delete
rm -f $POSTFSDATAD/UGMSD.sh
fi" > $POSTFSDATAD/UGMSD.sh
MMPR -vc "Universal GMS Doze" "$VIPUGMSD" "$VCIPUGMSD" "gloeyisk" "Patches Google Play Services App And Certain Processes/Services To Be Able To Use Battery Optimization"
MOVERPATH; SETPERM -mm -msg
}

IPUSGP () {
if [ $ASDK -ge 27 ] && $MAGISK && $FINDGAPPS && [ $MAGISKFIRSTTIME != true ] && $ZYGISK; then
UCSA "$MSGIPO Zygisk Pixelify Photos $VIPUSGP?" "IPUSGPS" "$IDUSGP"
fi
}

IPUSGPS () {
UZTI -i "PP" "Zygisk Pixelify Photos"
}

IPGPUR () {
if [ "$ASDK" -ge 29 ]; then
UCSA -ent "$MSGIP GPU Rendering $VIPGPUR?" "IPGPURS" "$IDGPUR"
fi
}

IPGPURS () {
if grep -E "ro.build.kernel.version=5.10.*|ro.build.kernel.version=5.15.*|ro.build.kernel.version=6.*|ro.build.kernel.id=5.10.*|ro.build.kernel.id=5.15.*|ro.build.kernel.id=6.*" $ALLPROP >$NULL; then
UCSA -a "OpenGL OpenGL-Skia OpenGL-Skia-Vulkan" "Choose GPU Rendering" "Rendering:" "OpenGL-Skia-Vulkan"
else
UCSA -a "OpenGL OpenGL-Skia" "Choose GPU Rendering" "Rendering:" "OpenGL-Skia"
fi
if $UCSFNM; then
UIP "$MSGIAM GPU Rendering"
case $UCSFNMC in "OpenGL") GPURV="opengl";; "OpenGL-Skia") GPURV="skiagl";; "OpenGL-Skia-Vulkan") GPURV="skiavk";; esac
if $MAGISK; then
PTMFI "$IDGPUR"
echo -e "debug.hwui.renderer=$GPURV\ndebug.composition.type=$GPURV" > $IPMM/$MODID/system.prop
MMPR -v "GPU Rendering" "$VIPGPUR" "$VCIPGPUR" "GPU Rendering - Set On: $UCSFNMC"
else
BUCKUPER -bf "$IPSBP"
sed -i "/debug.hwui.renderer/d;debug.composition.type/d" $IPSBP
echo -e "\n# GPU Rendering\ndebug.hwui.renderer=$GPURV\ndebug.composition.type=$GPURV" >> $IPSBP
fi
SETPERM -mm -msg
fi
}

IPSBT () {
if FINDER -aiop "$IPPSO/ShutdownBatteryTemperature*.apk"; then
UCSA -rm "Shutdown Battery Temperature" "$IPPSO/ShutdownBatteryTemperature*.apk"
else
if [ "$ASDK" -ge 27 ]; then UCSA -ent "$MSGIP Shutdown Battery Temperature $VIPSBT?" "IPSBTS" "$IDSBT"; fi
fi
}

IPSBTS () {
UCSA -a "50 55 60 65 70 75 80" "Choose Variant" "Max Temperature:" "80"; SINNIV=$UCSFNMC
if $UCSFNM; then
UZTI "SBT" "Shutdown Battery Temperature"
if $MAGISK; then
PTMFI "$IDSBT" "$IDASBT" "$MIPPSO"
cp -f $LOCALTMPDIR/SBT/ShutdownBatteryTemperature-$SINNIV.apk $IPMM/$MODID$MIPPSO
MMPR -v "Shutdown Battery Temperature" "$VIPSBT" "$VCIPSBT" "Shutdown Battery Temperature - Set On: $SINNIV"
else
cp -f $LOCALTMPDIR/SBT/ShutdownBatteryTemperature-$SINNIV.apk $IPPSO
fi
SETPERM -mm -msg
fi
}

IPFDS () {
$MAGISK && UCSA "$MSGIP Force Deep Sleep $VIPFDS?" "IPFDSS" "$IDFDS"
}

IPFDSS () {
UIP -s "Choose Variant:" "Light Idle" "Deep Idle"
if KEYCHOOSE; then
MSGFDS="Light Idle"
FDSC="$SPGLOBAL device_idle_constants light_after_inactive_to=5000,light_pre_idle_to=30000,light_idle_to=43200000,light_idle_factor=2.0,light_max_idle_to=86400000,light_idle_maintenance_min_budget=10000,light_idle_maintenance_max_budget=30000,min_light_maintenance_time=10000,min_deep_maintenance_time=30000,inactive_to=2592000000,sensing_to=0,locating_to=0,location_accuracy=2000,motion_inactive_to=2592000000,idle_after_inactive_to=1800000,idle_pending_to=300000,max_idle_pending_to=600000,idle_pending_factor=2.0,quick_doze_delay_to=86400000,idle_to=3600000,max_idle_to=21600000,idle_factor=2.0,min_time_to_alarm=60000,max_temp_app_whitelist_duration=300000,mms_temp_app_whitelist_duration=60000,sms_temp_app_whitelist_duration=20000,notification_whitelist_duration=30000,wait_for_unlock=false,pre_idle_factor_long=1.67,pre_idle_factor_short=0.33"
else
MSGFDS="Deep Idle"
FDSC="$SPGLOBAL device_idle_constants light_after_inactive_to=30000,light_pre_idle_to=35000,light_idle_to=30000,light_idle_factor=1.7,light_max_idle_to=50000,light_idle_maintenance_min_budget=28000,light_idle_maintenance_max_budget=300000,min_light_maintenance_time=5000,min_deep_maintenance_time=10000,inactive_to=30000,sensing_to=0,locating_to=0,location_accuracy=2000,motion_inactive_to=86400000,idle_after_inactive_to=0,idle_pending_to=30000,max_idle_pending_to=60000,idle_pending_factor=2.1,quick_doze_delay_to=60000,idle_to=3600000,max_idle_to=21600000,idle_factor=1.7,min_time_to_alarm=1800000,max_temp_app_whitelist_duration=20000,mms_temp_app_whitelist_duration=20000,sms_temp_app_whitelist_duration=10000,notification_whitelist_duration=20000,wait_for_unlock=true,pre_idle_factor_long=1.67,pre_idle_factor_short=0.33"
fi
UIP "$MSGIAM Force Deep Sleep"
PTMFI "$IDFDS"
echo "$SPGLOBAL aggressive_idle_enabled 1
$SPGLOBAL aggressive_standby_enabled 1
$SDGLOBAL device_idle_constants
$SDGLOBAL device_idle_constants_user
dumpsys deviceidle force-idle
dumpsys deviceidle enable light
dumpsys deviceidle enable deep
$FDSC" > $IPMM/$MODID/service.sh
MMPR -v "Force Deep Sleep" "$VIPFDS" "$VCIPFDS" "Force And Enhancement Deep Sleep - Set On: $MSGFDS"; SETPERM -mm -msg
}

} #

{ #Overlay Compile

ROUNDEDUIC () {
UCSA "Rounded UI Compile" "ROUNDEDUICS"
}

ROUNDEDUICS () {
UIP "$MSGSC"
ORSLL3="$AIOMC/RoundedUI/RoundedSLLauncher3"
ORSLLQ="$AIOMC/RoundedUI/RoundedSLLawnchairQ"
ORSLLR="$AIOMC/RoundedUI/RoundedSLLawnchairR"
ORSLOP="$AIOMC/RoundedUI/RoundedSLOnePlus"
ORSLOUI="$AIOMC/RoundedUI/RoundedSLOneUI"
ORSLP="$AIOMC/RoundedUI/RoundedSLPixel"
ORSLPD="$AIOMC/RoundedUI/RoundedSLPixelated"
ORSLM="$AIOMC/RoundedUI/RoundedSLMoto"
ORSLA="$AIOMC/RoundedUI/RoundedSLAsus"
ORUIONE="$AIOMC/RoundedUI/RoundedUIAndroid"
ORUITWO="$AIOMC/RoundedUI/RoundedUISUI"

for ROUNDEDSIZE in "30dip" "33dip"; do

ROUNDEDUISTRING="abc_control_corner_material
abc_dialog_corner_radius_material
borderless_button_radius
car_button_radius
car_radius_1
car_radius_2
car_radius_3
cardview_default_elevation
cardview_default_radius
chooser_corner_radius
compat_control_corner_material
config_bottomDialogCornerRadius
config_buttonCornerRadius
config_dialogCornerRadius
config_progressBarCornerRadius
control_corner_material
control_corner_radius
corner_size
date_picker_day_selector_radius
default_dialog_corner_radius
default_magnifier_corner_radius
dialog_corner_radius
fingerprint_dialog_corner_size
global_actions_corner_radius
halo_inner_radius
lb_action_button_corner_radius
lb_rounded_rect_corner_radius
leanback_dialog_corner_radius
logout_button_corner_radius
mtrl_badge_radius
mtrl_btn_corner_radius
mtrl_card_corner_radius
notification_action_button_radius
notification_corner_radius
notification_custom_view_corner_radius
notification_group_overflow_bg_radius
notification_item_bg_radius
notification_scrim_corner_radius
notification_shadow_radius
ongoing_appops_chip_bg_corner_radius
overlay_button_corner_radius
panel_content_corner_radius
pip_corner_radius
progress_bar_corner_material
qs_control_brightness_corner_radius
qs_control_corner_general_radius
qs_control_customizer_others_bg_radius
qs_corner_radius
qs_footer_action_corner_radius
qs_security_footer_corner_radius
recents_onboarding_toast_arrow_corner_radius
rect_button_radius
rounded_corner_radius
rounded_corner_radius_bottom
rounded_corner_radius_top
rounded_slider_background_rounded_corner
rounded_slider_corner_radius
screenrecord_status_icon_bg_radius
screenrecord_status_icon_height
screenrecord_status_icon_width
screenshot_action_container_corner_radius
screenshot_button_corner_radius
searchbar_corner_radius
seek_bar_corner_radius
subtitle_corner_radius
subtitle_shadow_radius
system_app_widget_inner_radius
task_card_menu_corner_radius
timepicker_center_dot_radius
timepicker_selector_dot_radius
timepicker_selector_radius
tooltip_corner_radius
volume_dialog_panel_width_half
volume_dialog_slider_corner_radius
volume_ringer_drawer_item_size_half"

ROUNDEDLSTRING="all_apps_scrim_view_corner_radius
arrow_toast_corner_radius
bg_round_rect_radius
bg_searchbox_radius
clear_all_button_radius
grid_visualization_rounding_radius
oneplus_contorl_layout_margin_bottom1
oneplus_contorl_radius_r0
oneplus_contorl_radius_r12
oneplus_contorl_radius_r16
oneplus_contorl_radius_r2
oneplus_contorl_radius_r32
oneplus_contorl_radius_r4
oneplus_contorl_radius_r8
op_control_menu_radius
op_control_radius_r0
op_control_radius_r12
op_control_radius_r16
op_control_radius_r2
op_control_radius_r32
op_control_radius_r4
op_control_radius_r8
popup_arrow_corner_radius
popup_container_with_arrow_round_rect_radius
recents_grid_task_view_focused_frame_rounded_corners_radius
recents_grid_task_view_rounded_corners_radius
recents_task_view_shadow_rounded_corners_radius
sesl_menu_popup_corner_radius
task_corner_radius
task_corner_radius_17819
task_corner_radius_oneui
task_corner_radius_small
tooltip_body_corner_radius
wallpaper_picker_list_item_rect_radius
wallpaper_picker_preview_bg_radius
widget_list_top_bottom_corner_radius
widget_preview_corner_radius
window_corner_radius
window_corner_radius_17819
window_corner_radius_18857
window_corner_radius_18865
window_corner_radius_19801
window_corner_radius_19801_fhd
window_corner_radius_19811
window_corner_radius_19811_fhd
window_corner_radius_19821
window_corner_radius_19855
window_corner_radius_19855_fhd
window_corner_radius_19863
window_corner_radius_8998
window_corner_radius_fhd
workspace_bg_round_rect_radius"

AMXML "com.android.roundedui" "$VIPRUI" "$VCIPRUI" "android" "Android Rounded - $ROUNDEDSIZE" "$ORUIONE"
SXML -d "$ROUNDEDUISTRING" "$ROUNDEDSIZE" "$ORUIONE$RVDXML"
AMXML "com.android.systemui.roundedui" "$VIPRUI" "$VCIPRUI" "com.android.systemui" "SUI Rounded - $ROUNDEDSIZE" "$ORUITWO"
SXML -d "$ROUNDEDUISTRING" "$ROUNDEDSIZE" "$ORUITWO$RVDXML"
SXML -b "config_pipEnableRoundCorner" "true" "$ORUITWO$RVBXML"

echo "$MSGCXML
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/colorPrimary\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"?android:attr/dialogCornerRadius\" android:bottomRightRadius=\"0dp\" android:topRightRadius=\"0dp\" />
</shape>" > $ORUITWO/res/drawable/rounded_bg.xml

echo "$MSGCXML
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/colorPrimaryDark\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"0dp\" android:bottomRightRadius=\"0dp\" android:topRightRadius=\"0dp\" />
</shape>" > $ORUITWO/res/drawable/rounded_bg_bottom.xml

echo "$MSGCXML
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/panelColorBackground\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"0dp\" android:bottomRightRadius=\"?android:attr/dialogCornerRadius\" android:topRightRadius=\"0dp\" />
</shape>" > $ORUITWO/res/drawable/rounded_bg_bottom_background.xml

echo "$MSGCXML
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/colorBackgroundFloating\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"?android:attr/dialogCornerRadius\" android:bottomRightRadius=\"?android:attr/dialogCornerRadius\" android:topRightRadius=\"?android:attr/dialogCornerRadius\" />
</shape>" > $ORUITWO/res/drawable/rounded_bg_full.xml

echo "$MSGCXML
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/colorPrimaryDark\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"0dp\" android:bottomRightRadius=\"?android:attr/dialogCornerRadius\" android:topRightRadius=\"0dp\" />
</shape>" > $ORUITWO/res/drawable/rounded_full_bg_bottom.xml

echo "$MSGCXML
<ripple xmlns:android=\"http://schemas.android.com/apk/res/android\"
		android:color=\"?android:attr/colorControlHighlight\">
	<item android:id=\"@android:id/mask\">
		<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">
			<solid android:color=\"#FFFFFFFF\"/>
			<corners android:radius=\"?android:attr/dialogCornerRadius\"/>
		</shape>
	</item>
	<item android:id=\"@android:id/background\">
		<shape android:shape=\"rectangle\">
			<solid android:color=\"?android:attr/colorBackgroundFloating\"/>
			<corners android:radius=\"?android:attr/dialogCornerRadius\"/>
		</shape>
	</item>
</ripple>" > $ORUITWO/res/drawable/rounded_ripple.xml

echo "$MSGCXML
<shape
  xmlns:android=\"http://schemas.android.com/apk/res/android\">
	<solid android:color=\"?android:colorPrimaryDark\" />
	<corners android:radius=\"$ROUNDEDSIZE\" />
</shape>" > $ORUITWO/res/drawable/brightness_mirror_background.xml

echo "$MSGCXML
<shape
  xmlns:android=\"http://schemas.android.com/apk/res/android\">
	<solid android:color=\"?android:attr/panelColorBackground\" />
	<corners android:radius=\"$ROUNDEDSIZE\" />
</shape>" > $ORUITWO/res/drawable/popup_background_material.xml

APKBUILDER "$ORUIONE $ORUITWO" "$ROUNDEDSIZE"

for LAUNCHERPNAME in "com.pixelated.launcher" "com.motorola.launcher3" "com.android.launcher3" "ch.deletescape.lawnchair.ci" "app.lawnchair" "net.oneplus.launcher" "com.sec.android.app.launcher" "com.google.android.apps.nexuslauncher" "com.asus.launcher"; do
case $LAUNCHERPNAME in
"com.pixelated.launcher") LAUNCHERPATH="$ORSLPD" LAUNCHERNAME="Pixelated Launcher";;
"com.motorola.launcher3") LAUNCHERPATH="$ORSLM" LAUNCHERNAME="Mototola Launcher";;
"com.android.launcher3") LAUNCHERPATH="$ORSLL3" LAUNCHERNAME="Launcher3";;
"ch.deletescape.lawnchair.ci") LAUNCHERPATH="$ORSLLQ" LAUNCHERNAME="Lawnchair Q";;
"app.lawnchair") LAUNCHERPATH="$ORSLLR" LAUNCHERNAME="Lawnchair R/S/SL/T";;
"net.oneplus.launcher") LAUNCHERPATH="$ORSLOP" LAUNCHERNAME="OnePlus Launcher";;
"com.sec.android.app.launcher") LAUNCHERPATH="$ORSLOUI" LAUNCHERNAME="OneUI Launcher";;
"com.google.android.apps.nexuslauncher") LAUNCHERPATH="$ORSLP" LAUNCHERNAME="Pixel Launcher";;
"com.asus.launcher") LAUNCHERPATH="$ORSLA" LAUNCHERNAME="Asus Launcher";;
esac
AMXML "$LAUNCHERPNAME.roundedui" "$VIPRUI" "$VCIPRUI" "$LAUNCHERPNAME" "$LAUNCHERNAME Rounded - $ROUNDEDSIZE" "$LAUNCHERPATH"
SXML -d "$ROUNDEDUISTRING $ROUNDEDLSTRING" "$ROUNDEDSIZE" "$LAUNCHERPATH$RVDXML"
APKBUILDER "$LAUNCHERPATH" "$ROUNDEDSIZE"
done
done
UIP "$MSGEC"
}

PILLSOVERLAYC () {
UCSA "Pills Compile" "PILLSOVERLAYCS"
}

PILLSOVERLAYCS () {
UIP "$MSGSC"
OPTO="$AIOMC/Pills/Pills"

for PILLSFATSIZE in "0dip" "1dip" "2dip" "3dip" "4dip"; do
for PILLSWIDTHSIZE in "0dip" "60dip" "120dip" "180dip" "240dip" "300dip" "8dip"; do
AMXML "com.android.systemui.pills" "$VIPP" "$VCIPP" "com.android.systemui" "Pills - $PILLSFATSIZE/$PILLSWIDTHSIZE" "$OPTO" "com.android.internal.navigation_bar_mode"
echo "$MSGCXML
<resources>
	<dimen name=\"navigation_handle_radius\">$PILLSFATSIZE</dimen>
	<dimen name=\"navigation_home_handle_width\">$PILLSWIDTHSIZE</dimen>
</resources>" > $OPTO$RVDXML
APKBUILDER "$OPTO" "$PILLSFATSIZE-$PILLSWIDTHSIZE"
done
done

NBMGO="$AIOMC/Pills/PillsImmersive"
AMXML "com.android.internal.systemui.navobar.gestural" "$VIPP" "$VCIPP" "android" "Pills Immersive" "$NBMGO"
SXML -i "config_navBarInteractionMode config_navBarOpacityMode" "2" "$NBMGO$RVIXML"
echo "$MSGCXML
<resources>
	<bool name=\"config_allowSeamlessRotationDespiteNavBarMoving\">true</bool>
	<bool name=\"config_navBarAlwaysShowOnSideEdgeGesture\">true</bool>
	<bool name=\"config_navBarCanMove\">false</bool>
	<bool name=\"config_navBarNeedsScrim\">false</bool>
	<bool name=\"config_navBarTapThrough\">true</bool>
</resources>" > $NBMGO$RVBXML
for PILLSIMMERSIVE in "48.0dip" "0.0dip"; do
echo "$MSGCXML
<resources>
	<dimen name=\"config_backGestureInset\">24.0dip</dimen>
	<dimen name=\"navigation_bar_frame_height\">$PILLSIMMERSIVE</dimen>
	<dimen name=\"navigation_bar_gesture_height\">32.0dip</dimen>
	<dimen name=\"navigation_bar_height\">0.0dip</dimen>
	<dimen name=\"navigation_bar_height_portrait\">0.0dip</dimen>
	<dimen name=\"navigation_bar_height_landscape\">0.0dip</dimen>
	<dimen name=\"navigation_bar_width\">0.0dip</dimen>
	<dimen name=\"navigation_bar_frame_height_landscape\">48.0dip</dimen>
</resources>" | tee $NBMGO$RVDXML $NBMGO/res/values-440dpi-v4/dimens.xml $NBMGO/res/values-sw600dp-v13/dimens.xml $NBMGO/res/values-sw900dp-v13/dimens.xml $NBMGO/res/values-xhdpi-v4/dimens.xml $NBMGO/res/values-xxhdpi-v4/dimens.xml $NBMGO/res/values-xxxhdpi-v4/dimens.xml >$NULL
APKBUILDER "$NBMGO" "$PILLSIMMERSIVE"
done

for PILLSLIGHTCOLORS in "ff1a73e8" "ffb31818" "ff1ed760" "ffffa842" "ffff8055" "ffa86bd5" "ffff4151" "ff5e97f6" "ff47ae84"; do
for PILLSDARKCOLORS in "ff1a73e8" "ffb31818" "ff1ed760" "ffffa842" "ffff8055" "ffa86bd5" "ffff4151" "ff5e97f6" "ff47ae84"; do
OPCO="$AIOMC/Pills/PillsColors"
AMXML "com.android.internal.systemui.pill.colors" "$VIPPC" "$VCIPPC" "com.android.systemui" "Pill Colors - $PILLSLIGHTCOLORS-$PILLSDARKCOLORS" "$OPCO"
echo "$MSGCXML
<resources>
	<color name=\"navigation_bar_home_handle_light_color\">#$PILLSLIGHTCOLORS</color>
	<color name=\"navigation_bar_home_handle_dark_color\">#$PILLSDARKCOLORS</color>
</resources>" > $OPCO/res/values/colors.xml
APKBUILDER "$OPCO" "$PILLSLIGHTCOLORS-$PILLSDARKCOLORS"
done
done

for PILLSHEIGHTSIZE in "0dip" "1dip" "2dip" "3dip" "4dip" "5dip" "6dip" "7dip" "8dip" "9dip" "10dip"; do
OPHO="$AIOMC/Pills/PillsHeight"
AMXML "com.android.systemui.pills.height" "$VIPPC" "$VCIPPC" "com.android.systemui" "Pills Height - $PILLSHEIGHTSIZE" "$OPHO" "com.android.internal.margin.navigation_bar_mode"
SXML -d "navigation_handle_bottom" "$PILLSHEIGHTSIZE" "$OPHO$RVDXML"
APKBUILDER "$OPHO" "$PILLSHEIGHTSIZE"
done
UIP "$MSGEC"
}

SINNIC () {
UCSA "System Increase Number Notification Icons Compile" "SINNICS"
}

SINNICS () {
UIP "$MSGSC"
SUISINNI="$AIOMC/SINNI/SystemIncreaseNumberNotificationIcons"
AMXML "com.android.systemui.system.increase.number.notification.icons" "$VIPSINNI" "$VCIPSINNI" "com.android.systemui" "System Increase Number Notification Icons" "$SUISINNI"
for f in 1 2 3 4 5 6 7 8 9 10; do
echo "$MSGCXML
<resources>
	<integer name=\"config_maxVisibleNotificationIconsWhenDark\">$f</integer>
	<integer name=\"config_maxVisibleNotificationIcons\">$f</integer>
	<integer name=\"config_maxVisibleStatusIcons\">$f</integer>
	<integer name=\"max_notif_icons_on_aod\">$f</integer>
	<integer name=\"max_notif_icons_on_lockscreen\">$f</integer>
	<integer name=\"max_notif_static_icons\">$f</integer>
</resources>" > $SUISINNI$RVIXML
APKBUILDER "$SUISINNI" "$f"
done
UIP "$MSGEC"
}

QUICKSTEPC () {
UCSA "Quick Step Compile" "QUICKSTEPCS"
}

QUICKSTEPCS () {
UIP "$MSGSC"
OSL="$AIOMC/QuickStepRecentsProvider/QuickStepRecentsProvider"
for QSRP in "com.pixelated.launcher" "com.pixelated.launcher" "com.motorola.launcher3" "com.android.launcher3" "ch.deletescape.lawnchair.ci" "net.oneplus.launcher" "com.sec.android.app.launcher" "com.google.android.apps.nexuslauncher" "com.asus.launcher" "app.lawnchair" "app.lawnchair.debug"; do
AMXML "com.android.quickstep.recents.overlay" "v1.4" "5" "android" "QuickStep Recents Provider" "$OSL"
SXML -b "config_swipe_up_gesture_setting_available config_custom_swipe_up_gesture_setting_available" "true" "$OSL$RVBXML"
SXML -s "config_recentsComponentName" "$QSRP/com.android.quickstep.RecentsActivity" "$OSL$RVSXML"
APKBUILDER "$OSL" "$QSRP"
done
UIP "$MSGEC"
}

BIPC () {
UCSA "Burn In Protection Compile" "BIPCS"
}

BIPCS () {
UIP "$MSGSC"
BIPAO="$AIOMC/BurnInProtection/AndroidBurnInProtection" BIPSUIO="$AIOMC/BurnInProtection/SUIBurnInProtection"
for SHIFTINTERVAL in 20 40 60; do
for HORIZONTALSWIFT in 4dip 6dip; do
for VERTICALSWIFT in 4dip 6dip; do
for AODHORIZONTALSWIFT in 20dip 30dip 40dip; do
for AODVERTICALSWIFT in 20dip 30dip 40dip; do
AMXML "com.android.burn.in.protection" "$VIPBIP" "$VCIPBIP" "android" "Android Burn In Protection" "$BIPAO" "com.android.internal.display_cutout_emulation"
AMXML "com.android.systemui.burn.in.protection" "$VIPBIP" "$VCIPBIP" "com.android.systemui" "SUI Burn In Protection" "$BIPSUIO"
SXML -b "config_disableStatusBarBurnInProtection config_enableBurnInProtection config_enableSmartPixels config_navigation_bar_enable_auto_dim_no_visible_wallpaper config_statusBarBurnInProtection config_supportSmartPixels" "true" "$BIPAO$RVBXML"
SXML -b "config_disableStatusBarBurnInProtection config_enableBurnInProtection config_enableSmartPixels config_navigation_bar_enable_auto_dim_no_visible_wallpaper config_statusBarBurnInProtection config_supportSmartPixels" "true" "$BIPSUIO$RVBXML"
echo "$MSGCXML
<resources>
	<integer name=\"config_burnInProtectionMaxHorizontalOffset\">15</integer>
	<integer name=\"config_burnInProtectionMaxRadius\">-1</integer>
	<integer name=\"config_burnInProtectionMaxVerticalOffset\">40</integer>
	<integer name=\"config_burnInProtectionMinHorizontalOffset\">-15</integer>
	<integer name=\"config_burnInProtectionMinVerticalOffset\">-40</integer>
	<integer name=\"config_shift_interval\">$SHIFTINTERVAL</integer>
	<integer name=\"config_statusBarBurnInProtectionShiftInterval\">$SHIFTINTERVAL</integer>
</resources>" | tee $BIPAO$RVIXML $BIPSUIO$RVIXML >$NULL
echo "$MSGCXML
<resources>
	<dimen name=\"burn_in_prevention_offset_x\">$AODHORIZONTALSWIFT</dimen>
	<dimen name=\"burn_in_prevention_offset_y\">$AODVERTICALSWIFT</dimen>
	<dimen name=\"burn_in_prevention_offset_y_large_clock\">$AODVERTICALSWIFT</dimen>
	<dimen name=\"default_burn_in_prevention_offset\">$AODVERTICALSWIFT</dimen>
	<dimen name=\"horizontal_max_swift\">$HORIZONTALSWIFT</dimen>
	<dimen name=\"udfps_burn_in_offset_x\">$HORIZONTALSWIFT</dimen>
	<dimen name=\"udfps_burn_in_offset_y\">$VERTICALSWIFT</dimen>
	<dimen name=\"vertical_max_swift\">$VERTICALSWIFT</dimen>
</resources>" | tee $BIPAO$RVDXML $BIPSUIO$RVDXML >$NULL
APKBUILDER "$BIPAO $BIPSUIO" "$SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT"
done
done
done
done
done
UIP "$MSGEC"
}

FACEUNLOCKSERVICEC () {
UCSA "Face Unlock Service Compile" "FACEUNLOCKSERVICECS"
}

FACEUNLOCKSERVICECS () {
UIP "$MSGSC"
OFULS="$AIOMC/FaceUnlockService/FaceUnlockService"
for FULS in "org.pixelexperience.faceunlock" "com.crdroid.faceunlock" "com.spark.faceunlock" "com.aospextended.faceunlock"; do
for SFULS in "5" "-1"; do
case $SFULS in "5") VSFULS="true";; "-1") VSFULS="false";; esac
AMXML "$FULS.auto_generated_rro_vendor__" "$VIPFULIRS" "$VCIPFULIRS" "$FULS" "IR Face Unlock Service Switcher" "$OFULS"
SXML -b "use_alternative_vendor_impl" "$VSFULS" "$OFULS$RVBXML"
SXML -i "override_front_cam_id" "$SFULS" "$OFULS$RVIXML"
case $SFULS in "5") SFULS="Enable";; "-1") SFULS="Disable";; esac
APKBUILDER "$OFULS" "$FULS-$SFULS"
done
done
UIP "$MSGEC"
}

NSPC () {
UCSA "Notification Side Paddings Compile" "NSPCS"
}

NSPCS () {
UIP "$MSGSC"
NSPCO="$AIOMC/NotificationSidePaddings/NotificationSidePaddings"
for NSPCOSA in 0dip 5dip 10dip 15dip 20dip 25dip 30dip; do
for NSPCOS in 0dip 5dip 10dip 15dip 20dip 25dip 30dip; do
AMXML "com.android.systemui.notification.side.paddings" "$VIPNSP" "$VCIPNSP" "com.android.systemui" "Notification Side Paddings" "$NSPCO"
echo "$MSGCXML
<resources>
	<dimen name=\"notification_side_paddings\">$NSPCOS</dimen>
	<dimen name=\"qs_header_image_side_margin\">$NSPCOS</dimen>
	<dimen name=\"qs_notification_padding\">$NSPCOSA</dimen>
</resources>" > $NSPCO$RVDXML
APKBUILDER "$NSPCO" "$NSPCOS-$NSPCOSA"
done
done
UIP "$MSGEC"
}

SBPC () {
UCSA "Status Bar Padding Compile" "SBPCS"
}

SBPCS () {
UIP "$MSGSC"
SBPCSO="$AIOMC/StatusBarPadding/StatusBarPadding"
AMXML "com.android.systemui.status.bar.padding" "$VIPSBP" "$VCIPSBP" "com.android.systemui" "Status Bar Padding" "$SBPCSO"
for SCSBPCO in 0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip; do
for SCSBPCT in 0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip; do
echo "$MSGCXML
<resources>
	<dimen name=\"status_bar_padding_start\">$SCSBPCO</dimen>
	<dimen name=\"status_bar_padding_end\">$SCSBPCT</dimen>
</resources>" > $SBPCSO$RVDXML
APKBUILDER "$SBPCSO" "$SCSBPCO-$SCSBPCT"
done
done
UIP "$MSGEC"
}

CSBISC () {
UCSA "Status Bar Icon Space Compile" "CSBISCS"
}

CSBISCS () {
UIP "$MSGSC"
ASBISDS="$AIOMC/StatusBarIconSpace/AndroidStatusBarIconSpace" SUISBISDS="$AIOMC/StatusBarIconSpace/SUIStatusBarIconSpace"

for f in 14dip 15dip 16dip 17dip 18dip 19dip 20dip; do
AMXML "com.android.status.bar.icon.space" "$VIPSBISP" "$VCIPSBISP" "android" "Android Status Bar Icon Space - $f" "$ASBISDS"
SXML -d "status_bar_icon_size" "$f" "$ASBISDS$RVDXML"
APKBUILDER "$ASBISDS" "$f"
done

for f in -4dip -3dip -2dip -1dip 0dip 1dip 2dip 3dip 4dip; do
for r in 0dip 1dip 2dip 3dip 4dip; do
AMXML "com.android.systemui.status.bar.icon.space" "$VIPSBISP" "$VCIPSBISP" "com.android.systemui" "SUI Status Bar Icon Space - $f" "$SUISBISDS"
echo "$MSGCXML
<resources>
	<dimen name=\"status_bar_left_clock_end_padding\">2dip</dimen>
	<dimen name=\"signal_cluster_battery_padding\">$r</dimen>
	<dimen name=\"status_bar_clock_starting_padding\">2dip</dimen>
	<dimen name=\"status_bar_system_icon_spacing\">$f</dimen>
</resources>" > $SUISBISDS$RVDXML
APKBUILDER "$SUISBISDS" "$f-$r"
done
done
UIP "$MSGEC"
}

COSBCSC () {
UCSA "Status Bar Clock Size Compile" "COSBCSCS"
}

COSBCSCS () {
UIP "$MSGSC"
PCOSBCSS="$AIOMC/StatusBarClockSize/StatusBarClockSize"
for f in 10sp 11sp 12sp 13sp 14sp 15sp 16sp 17sp 18sp 19sp 20sp; do
AMXML "com.android.systemui.status.bar.clock.size" "$VIPSBCS" "$VCIPSBCS" "com.android.systemui" "Status Bar Clock Size - $f" "$PCOSBCSS"
SXML -d "status_bar_clock_size" "$f" "$PCOSBCSS$RVDXML"
APKBUILDER "$PCOSBCSS" "$f"
done
UIP "$MSGEC"
}

QSCIARC () {
UCSA "QS Count Icon And Rows Compile" "QSCIARCS"
}

QSCIARCS () {
UIP "$MSGSC"
QSCIAR="$AIOMC/QSCountIconAndRows/QSCountIconAndRows"
AMXML "com.android.systemui.qs.count.icon.and.rows" "$VIPQSCIAR" "$VCIPQSCIAR" "com.android.systemui" "QS Count Icon And Rows" "$QSCIAR"

for SUIQSNC in 2 3 4; do
for SUIQSMR in $(seq 1 1 10); do
QQSPMTL="4" SUIQSNCL="4"
case $SUIQSNC in
"2") QQSPMTP="4";;
"3") QQSPMTP="6";;
"4") QQSPMTP="8";;
esac
echo "$MSGCXML
<resources>
	<integer name=\"quick_qs_panel_max_tiles\">$QQSPMTP</integer>
	<integer name=\"quick_settings_max_rows\">$SUIQSMR</integer>
	<integer name=\"quick_settings_num_columns\">$SUIQSNC</integer>
</resources>" > $QSCIAR$RVIXML
echo "$MSGCXML
<resources>
	<integer name=\"quick_qs_panel_max_tiles\">$QQSPMTL</integer>
	<integer name=\"quick_settings_num_columns\">$SUIQSNCL</integer>
</resources>" > $QSCIAR/res/values-land/integers.xml
APKBUILDER "$QSCIAR" "$SUIQSNC-$SUIQSMR"
done
done

for SUIQSC in $(seq 4 1 10); do
for SUIQSCP in $(seq 4 1 10); do
for SUIQSCL in $(seq 4 1 10); do
for SUIQSRP in $(seq 1 1 3); do
for SUIQSRL in $(seq 1 1 3); do
echo "$MSGCXML
<resources>
	<integer name=\"quick_qs_panel_max_columns\">$SUIQSC</integer>
	<integer name=\"config_qs_columns_portrait\">$SUIQSCP</integer>
	<integer name=\"config_qs_columns_landscape\">$SUIQSCL</integer>
	<integer name=\"config_qs_rows_portrait\">$SUIQSRP</integer>
	<integer name=\"config_qs_rows_landscape\">$SUIQSRL</integer>
</resources>" > $QSCIAR$RVIXML
APKBUILDER "$QSCIAR" "$SUIQSC-$SUIQSCP-$SUIQSCL-$SUIQSRP-$SUIQSRL"
done
done
done
done
done
UIP "$MSGEC"
}

CSBISIZEC () {
UCSA "Status Bar Notification Icon Size Compile" "CSBISIZECS"
}

CSBISIZECS () {
UIP "$MSGSC"
SBISS="$AIOMC/StatusBarNotificationIconSize/StatusBarNotificationIconSize"
AMXML "com.android.systemui.status.bar.notification.icon.size" "$VIPSBNISI" "$VCIPSBNISI" "com.android.systemui" "Status Bar Notification Icon Size" "$SBISS"
for SBISSC in 12dip 13dip 14dip 15dip 16dip 17dip 18dip; do
SXML -d "status_bar_icon_drawing_size" "$SBISSC" "$SBISS$RVDXML"
APKBUILDER "$SBISS" "$SBISSC"
done
UIP "$MSGEC"
}

CSBPDC () {
UCSA "Status Bar Privacy Dot Compile" "CSBPDCS"
}

CSBPDCS () {
UIP "$MSGSC"
CSBPDPO="$AIOMC/StatusBarPrivacyDot/StatusBarPrivacyDot"
AMXML "com.android.systemui.status.bar.privacy.dot.disable" "$VIPSBPD" "$VCIPSBPD" "com.android.systemui" "Status Bar Privacy Dot - Disable" "$CSBPDPO-Disable"
AMXML "com.android.systemui.status.bar.privacy.dot.optimized" "$VIPSBPD" "$VCIPSBPD" "com.android.systemui" "Status Bar Privacy Dot - Optimized" "$CSBPDPO-Optimized"
echo "$MSGCXML
<resources>
	<dimen name=\"ongoing_appops_chip_bg_corner_radius\">30dip</dimen>
	<dimen name=\"ongoing_appops_chip_icon_margin\">3.25dip</dimen>
	<dimen name=\"ongoing_appops_chip_max_width\">56dip</dimen>
	<dimen name=\"ongoing_appops_chip_min_width\">24dip</dimen>
	<dimen name=\"ongoing_appops_chip_side_padding\">4dip</dimen>
	<dimen name=\"ongoing_appops_dot_diameter\">5dip</dimen>
	<dimen name=\"ongoing_appops_dot_min_padding\">15dip</dimen>
</resources>" | tee $CSBPDPO-Disable$RVDXML $CSBPDPO-Optimized$RVDXML >$NULL
SXML -b "config_enablePrivacyDot" "false" "$CSBPDPO-Disable$RVBXML"
APKBUILDER "$CSBPDPO-Disable $CSBPDPO-Optimized"
UIP "$MSGEC"
}

CEQRCSOLSC () {
UCSA "QR Code Scanner On Lock Screen Compile" "CEQRCSOLSCS"
}

CEQRCSOLSCS () {
UIP "$MSGSC"
OCEQRCSOLS="$AIOMC/QRCodeScannerOnLockScreen/QRCodeScannerOnLockScreen"
for OCEQRCSOLSC in "false" "true"; do
case $OCEQRCSOLSC in
"true") OCEQRCSOLSN="Enable" OCEQRCSOLSNA="enable";;
"false") OCEQRCSOLSN="Disable" OCEQRCSOLSNA="disable";;
esac
AMXML "com.android.$OCEQRCSOLSNA.qr.code.scanner.on.lock.screen" "$VIPQRCSOLS" "$VCIPQRCSOLS" "android" "$OCEQRCSOLSN QR Code Scanner On Lock Screen" "$OCEQRCSOLS"
SXML -b "config_enableQrCodeScannerOnLockScreen" "$OCEQRCSOLSC" "$OCEQRCSOLS$RVBXML"
APKBUILDER "$OCEQRCSOLS" "$OCEQRCSOLSN"
done
UIP "$MSGEC"
}

QSSNSC () {
UCSA "QS Split Notification Compile" "QSSNSCS"
}

QSSNSCS () {
UIP "$MSGSC"
QSSNSCP="$AIOMC/QSSplitNotification/QSSplitNotification"
AMXML "com.android.systemui.disable.qs.split.notification" "$VIPQSSN" "$VCIPQSSN" "com.android.systemui" "Disable QS Split Notification" "$QSSNSCP-Disable"
echo "$MSGCXML
<resources>
	<bool name=\"config_use_split_notification_shade\">false</bool>
	<bool name=\"config_skinnyNotifsInLandscape\">true</bool>
	<bool name=\"can_use_one_handed_bouncer\">false</bool>
</resources>" > $QSSNSCP-Disable/res/values-land/bools.xml
APKBUILDER "$QSSNSCP-Disable"
AMXML "com.android.systemui.enable.qs.split.notification" "$VIPQSSN" "$VCIPQSSN" "com.android.systemui" "Enable QS Split Notification" "$QSSNSCP-Enable"
echo "$MSGCXML
<resources>
	<bool name=\"config_use_split_notification_shade\">true</bool>
	<bool name=\"config_skinnyNotifsInLandscape\">false</bool>
	<bool name=\"can_use_one_handed_bouncer\">true</bool>
</resources>" > $QSSNSCP-Enable/res/values-land/bools.xml
SXML -d "qs_header_system_icons_area_height qs_panel_padding_top" "0.0dip" "$QSSNSCP-Enable/res/values-land/dimens.xml"
echo "$MSGCXML
<resources>
	<integer name=\"quick_settings_num_columns\">2</integer>
	<integer name=\"quick_qs_panel_max_rows\">2</integer>
	<integer name=\"quick_qs_panel_max_tiles\">6</integer>
</resources>" > $QSSNSCP-Enable/res/values-land/integers.xml
APKBUILDER "$QSSNSCP-Enable"
UIP "$MSGEC"
}

SBNIDSC () {
UCSA "Status Bar Notification Icon Dot Size Compile" "SBNIDSCS"
}

SBNIDSCS () {
UIP "$MSGSC"
SSBNIDS="$AIOMC/SBNIDS/StatusBarNotificationIconDotSize"
AMXML "com.android.systemui.status.bar.notification.icon.dot.size" "$VIPSBNIDS" "$VCIPSBNIDS" "com.android.systemui" "Status Bar Notification Icon Dot Size" "$SSBNIDS"
for d in 0dip 1dip 2dip 3dip 4dip 5dip 6dip; do
SXML -d "overflow_dot_radius" "$d" "$SSBNIDS$RVDXML"
APKBUILDER "$SSBNIDS" "$d"
done
UIP "$MSGEC"
}

LSUSC () {
UCSA "Lock Screen User Switcher Compile" "LSUSCS"
}

LSUSCS () {
UIP "$MSGSC"
SLSUS="$AIOMC/LSUS/LockScreenUserSwitcher"
AMXML "com.android.systemui.lock.screen.user.switcher" "$VIPLSUS" "$VCIPLSUS" "com.android.systemui" "Lock Screen User Switcher" "$SLSUS"
SXML -b "config_enableBouncerUserSwitcher" "false" "$SLSUS$RVBXML"
APKBUILDER "$SLSUS" "Disable"
SXML -b "config_enableBouncerUserSwitcher" "true" "$SLSUS$RVBXML"
APKBUILDER "$SLSUS" "Enable"
UIP "$MSGEC"
}

AODSDC () {
UCSA "AOD State Doze Compile" "AODSDCS"
}

AODSDCS () {
UIP "$MSGSC"
AODSD="$AIOMC/AODSD/AODStateDoze"
AMXML "com.android.systemui.aod.state.doze" "$VIPAODSD" "$VCIPAODSD" "com.android.systemui" "AOD State Doze" "$AODSD"
SXML -b "doze_display_state_supported" "false" "$AODSD$RVBXML"
APKBUILDER "$AODSD" "Disable"
SXML -b "doze_display_state_supported" "true" "$AODSD$RVBXML"
APKBUILDER "$AODSD" "Enable"
UIP "$MSGEC"
}

AODSC () {
UCSA "AOD Switcher Compile" "AODSCS"
}

AODSCS () {
UIP "$MSGSC"
AODS="$AIOMC/AODS/AODSwitcher"
AMXML "com.android.aod.switcher" "$VIPAODS" "$VCIPAODS" "android" "AOD State Doze" "$AODS"
SXML -b "config_dozeAlwaysOnDisplayAvailable" "false" "$AODS$RVBXML"
APKBUILDER "$AODS" "Disable"
SXML -b "config_dozeAlwaysOnDisplayAvailable" "true" "$AODS$RVBXML"
APKBUILDER "$AODS" "Enable"
UIP "$MSGEC"
}

SBTC () {
UCSA "Shutdown Battery Temperature Compile" "SBTCS"
}

SBTCS () {
UIP "$MSGSC"
SBT="$AIOMC/SBT/ShutdownBatteryTemperature"
AMXML "com.android.shutdown.battery.temperature" "$VIPSBT" "$VCIPSBT" "android" "Shutdown Battery Temperature" "$SBT"
for SBTC in 500 550 600 650 700 750 800; do
case $SBTC in
"500") SBTCA="50";;
"550") SBTCA="55";;
"600") SBTCA="60";;
"650") SBTCA="65";;
"700") SBTCA="70";;
"750") SBTCA="75";;
"800") SBTCA="80";;
esac
SXML -i "config_shutdownBatteryTemperature" "$SBTC" "$SBT$RVIXML"
APKBUILDER "$SBT" "$SBTCA"
done
UIP "$MSGEC"
}

} #

} #

{ #Presets

PRESETS () {
GESTURES=true
if [ -d $IPMM ] && $MAGISK; then for MMC in $(ls $IPMM); do if [ -d "$IPMM/$MMC" ]; then CEMODID= SCEMODID= MSGCEMODID=; if [ "$MODIDVAR" ]; then MMUPD_LIST; else UCSA -ent "Checking Update Or ReInstall?" "MMUPD_LIST" && break; fi; fi; done; fi
UIP -s "UI: Show All Categories" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then
if [ $ONEUI != true ]; then
UCSA -ent "UI: Pills/NavigationBar/Gestures" "UI_PRESETS1"
fi
if [ $ALLUI != true ]; then
UCSA -ent "UI: StatusBar/QuickSettings" "UI_PRESETS2"
fi
UCSA -ent "UI: LockScreen/AlwaysOnDisplay" "UI_PRESETS3"
UCSA -ent "UI: Gboard/GboardThemes" "UI_PRESETS4"
UCSA -ent "UI: BootAnimation/MediaUISounds/Emoji" "UI_PRESETS5"
UCSA -ent "UI: RoundedUI/BIP/BackgroundBlur/Other" "UI_PRESETS6"
fi
UCSA -ent "Audio: VFX(P)/DOLBY/AIST/SAQ/SIB/AML/ALCF/VS/DSM" "AUDIO_PRESETS"
if [ -d $STORAGE/Applications ] && find $STORAGE/Applications -type f -name "*.apk" >$NULL; then IPAPP; fi
GTRRRM
UCSA -ent "Net: GPS/WIFI/TTL/DNS/APAUSBTF" "NET_PRESETS"
UCSA -ent "Utilities: BB/SELS/CC/MMFR/JITC/Detach/PIF/LSP/WOL" "UTILITIES_PRESETS"
UCSA -ent "Other: FA/LED/PSS/UAA/SBU/SHS" "OTHER_PRESETS"
IPHF
UCSA -ent "Tweaks: FGS/EHAP/FFE/E4KIYT/KL/4XMSAA/HWO/UGMSD/USGP" "TWEAKS_PRESETS"
}

UI_PRESETS1 () {
IPP
IPPC
IPPH
IPNBVS
IPBGD
IPFNS
}

UI_PRESETS2 () {
IPSINNI
IPSBNISI
IPSBCS
IPSBP
IPSBPD
IPSBNIDS
IPSBISP
IPWFAMDQSOS
IPFDNI
IPNSP
IPQSCIAR
IPQSSN
IPQSCP
}

UI_PRESETS3 () {
IPQRCSOLS
IPLSUS
IPAODS
IPAODSD
IPAODALSAF
}

UI_PRESETS4 () {
IPGBNBS
IPGBRC
IPGBT
IPGBSTS
}

UI_PRESETS5 () {
IPBA
IPMUIS
IPIOSEMOJI
}

UI_PRESETS6 () {
IPRUI
IPBIP
IPBB
IPSUIRSRS
IPGPPM
IPFDM
IPAS
IPFDPIS
}

AUDIO_PRESETS () {
IPVFX
IPVFXDAK
IPDA
IPAIST
IPSAQ
IPSIB
IPAML
IPALCF
IPVS
IPDSM
}

NET_PRESETS () {
IPGPSP
IPWIFIP
IPTTLF
IPNT
IPAPAUSBTF
}

UTILITIES_PRESETS () {
IPBBB
IPSELS
IPCC
IPMMFR
IPDETACH
IPPIF
IPJITC
IPLSP
IPWOL
}

OTHER_PRESETS () {
IPFPA
IPLEDLO
IPLEDLA
IPPSS
IPUAA
SBATTERYSTATUS
SHEALTHSTORAGE
RPASSF
RSWIFTO
GTRMFL
RWFS
RRTPXML
RAPEXA
}

TWEAKS_PRESETS () {
IPFGS
IPEHAP
IPFUSS
IPMUS
IPFFE
IPE4KIYT
IPFUSEPD
IPKL
IPF4XMSAAS
IPFHWOS
IPFDEVADB
IPUSBSUC
IPFULIRS
IPFDPP
IPUGMSD
IPUSGP
IPGPUR
IPSBT
IPFDS
}

OVERLAY_PRESETS () {
ROUNDEDUIC
PILLSOVERLAYC
SINNIC
QUICKSTEPC
BIPC
FACEUNLOCKSERVICEC
NSPC
SBPC
CSBISC
COSBCSC
QSCIARC
CSBISIZEC
CSBPDC
CEQRCSOLSC
QSSNSC
SBNIDSC
LSUSC
AODSDC
AODSC
SBTC
}

} #

AIOPFMD