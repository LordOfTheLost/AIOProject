#!/sbin/sh

VAIOPFMD="16.09.22 (86)"

{ #TMPDIR, Magisk Default Var, BB & Other Useful Links
IPDLTMP="/data/local/tmp"
TMPDIR="$IPDLTMP/AIOPFMD"
ALTTMPDIR="/dev/AIOPFMD"
NVBASE="/data/adb"
IPDMM="/data/magisk"
SERVICED="$NVBASE/service.d"
POSTFSDATAD="$NVBASE/post-fs-data.d"
MODPATH="$NVBASE/modules"
MODPATHUPD="$NVBASE/modules_update"
OUTFD="$2"
ZIPFILE="$3"
ADDONS="$ALTTMPDIR/Addons"
BB="$ALTTMPDIR/BB"
UNTARXZ="$BB/tar"
UNZIP="$BB/unzip"
ECHO="$BB/echo"
HEAD="$BB/head"
ZIPALIGN="$ADDONS/zipalign"
ZIPPACKER="$ADDONS/zip"
} #

{ #Version Or Date Of Patches In This Patch
#UI: Pills/NavBar/Gboard/Themes/BA/Sounds
IDPO="Pills"; VIPPO="v2.0"
IDPCO="PillsColors"; VIPPCO="v1.5"
IDPHOS="PillsHeight"; VIPPHO="v1.4"
IDPSHNB="ShowHideNavigationBar"; VIPPSHNB="v1.0"
IDBGDS="BackGestureDisabler"; VIPBGD="v1.0"
IDGBNBS="GboardNavBarSpacing"; VIPGBNBS="v1.2"
IDGBRC="GBoardRoundedCorners"; VIPGBRC="v1.1"
IDGBT="GBoardThemes"; VIPGBT="v1.4"
IDGBSTE="GboardSilkThemeChanger"; VIPGBSTE="v1.1"
IDSBINNI="SBINNI"; VIPSBINNI="v1.9"
IDGPPM="GPayPowerMenu"; VIPGPPM="v1.1"
IDRUI="RoundedUI"; VIPRUI="v3.1"
IDBIP="BurnInProtection"; VIPBIP="v1.9"
IDNSP="NotificationSidePaddings"; VIPNSP="v1.4"
IDSBISP="StatusBarIconSpace"; VIPSBISP="v1.3"
IDSBISI="StatusBarIconSize"; VIPSBISI="v1.1"
IDSBCS="StatusBarClockSize"; VIPSBCS="v1.1"
IDSUE="SingleUserEnabler"; VIPSUE="v1.1"
IDSBP="StatusBarPadding"; VIPSBP="v1.6"
IDQSCP="QSContentPadding"; VIPQSCP="v1.1"
IDSUIRSRS="SUIRoundedSize"; VIPSUIRSRS="v1.2"
IDQSCIAR="QSCountIconAndRows"; VIPQSCIAR="v1.6"
IDSBPD="StatusBarPrivacyDot"; VIPSBPD="v1.1"
IDEBB="BackgroundBlur"; VIPEBB="v1.1"
IDBA="BootAnimation"; VIPBA="v1.9"
IDIOSEMOJI="IOSEmoji"; VIPIOSEMOJI="v1.1"
IDMUIS="MediaUISounds"; VIPMUIS="v1.9"
IDFDNI="ForceDisableNotificationIcons"; VIPFDNI="v1.0"
IDWFAMDQSOS="WFAMDQSOS"; VIPWFAMDQSOS="v1.1"
#Launchers: Shady/Lawnchair/Sushi
IDSSL="Systemless_ShadyLauncher"; VIPSSLQ="v1.5"; VCIPSSLQ="15"; VIPSSLR="v2021.11.28"; VCIPSSLR="20211128"
IDSL="Systemless_Lawnchair"; VIPSL="v2.6"; VIPASLSL="12.1.0 Alpha 4"
IDSSUL="Systemless_SushiLauncher"; VIPSSUL="v1.4"; VIPSSULA="v5.0"
#Audio: VFX(P)/DOLBY/NLS/AIST/SAQ/IB/AML/ALCF
IDVFX="V4AFX"; VIPVFX="v1.4"
IDVFXP="V4AFXPresets"; VIPVFXP="v1.8"
IDDA="DolbyAtmos"; VIPDA="v1.5"
IDNLS="NLSound"; VIPNLS="v3.4"; VCIPNLS="1109"
IDAIST="AIST"; VIPAIST="v1.6"; VCIPAIST="0909"
IDSAQ="SystemAudioQuality"; VIPSAQ="v2.1"; VCIPSAQ="21"
IDIBS="IncreaseBitrate"; VIPIBS="v1.2"
IDAML="AML"; VIPAML="v4.2"; VCIPAML="42"
IDALCF="ALCF"; VIPALCF="v1.2"
#AdBlock/Hosts
IDDAB="DisableAdBlocker"; VIPDAB="v1.0"; VCIPDAB="1"
IDVAAH="AdAwayHosts"; VIPVAAH="15.09.2022"
IDVSH="SystemlessHostsUnified"; VIPVSH="17.0-220116"; VCIPVSH="170"
IDEH="EnergizedHosts"; VIPEH="16.09.2022"
#Net: GPS/WIFI/TTL/DNS/APAUSBTF
IDGPSP="GPSPatcher"; VIPGPSP="v1.0"
IDWIFIP="WIFIPatcher"; VIPWIFIP="v1.2"
IDTTLF="NFQTTL"; VIPTTLF="v2.8"; VCIPTTLF="28"
IDNT="NetworkTweak"; VIPNT="v6.0"; VCIPNT="60"
IDAPAUSBTF="APAUSBTF"; VIPAPAUSBTF="v1.0"
#Utilities: BB/SELC/CC/MMFR/DETACH/LSPosed
IDBB="BrutalBusyBox"; VIPBB="v1.36.0.1"; VCIPBB="13601"
IDSELC="SELinuxChanger"; VIPSELC="v1.3"
IDCC="CacheCleaner"; VIPCC="v2.7"
IDMMFR="MMFR"; VIPMMFR="v1.0"
IDDETACH="DETACH" VIPDETACH="v1.1"
IDLSPOSEDZ="zygisk_lsposed"; VIPLSPOSEDZ="v1.8.4 (6609)"; VCIPLSPOSEDZ="6609"
#Other: FA/LED/FSFM/UAA/SBU/GASL
IDFPA="FingerprintActions"; VIPFPA="v1.2"
IDLEDLO="LEDLightOff"; VIPLEDLO="v1.3"
IDLEDLA="LEDLightAnimation"; VIPLEDLA="v1.2"
IDFSLFM="FSFM"; VIPFSLFM="v1.2"
#Tweaks: FGS/BP/KL/UGMSD/USGP/VS
IDFGS="ForceGoogleSync"; VIPFGS="v1.1"
IDFEG="ForceGestures"; VIPFEG="v1.1"
IDHAP="EnablingHiddenApiPolicy"; VIPHAP="v1.2"
IDAFUS="AFUSS"; VIPAFUS="v1.1"
IDBPT="BuildPropTweaks"; VIPBPT="v2.4"
IDKL="KillLogger"; VIPKL="v1.9"; VCIPKL="19"
IDFMSAAS="ForceMSAASwitcher"; VIPFMSAAS="v1.0"
IDFDHWO="ForceDisableHWOverlays"; VIPFDHWO="v1.1"
IDFDEVADB="ForceDEVADB"; VIPFDEVADB="v1.6"
IDFMTP="ForceMTP"; VIPFMTP="v1.0"
IDSOOOFUIRC="SOOOFUIRC"; VIPSOOOFUIRC="v2.0"
IDFDM="ForceDarkMode"; VIPFDM="v1.0"
IDFDPP="ForceDisablingPlayProtect"; VIPFDPP="v1.0"
IDFI="ForceIdle"; VIPFI="v1.0"
IDUGMSD="UniversalGMSDoze"; VIPUGMSD="v1.8.7"; VCIPUGMSD="187"
IDUSGP="USGP"; VIPUSGP="v1.3"
IDAS="AnimationScale"; VIPAS="v1.1"
IDGPUR="GPURendering"; VIPGPUR="v1.1"
IDVS="VolumeSteps"; VIPVS="v1.2"
} #

{ #Functions

AIOPFMD () {
BOOT_DETECTED
APMSGASD
PARTITION_AND_MOUNTS
IMPORTANT_VARIABLES
RM_LIST
CHECKER "miui bb arch sel soc gapps av device magisk" "-x"
PATCHMODE
UIP "Copy AIOPFMD To TMPDIR$MSGPMODE"
(if $DEBUGMODE || $TESTMODE; then mkdir -p $PLOGS/RECOVERY $PLOGS/MM; fi; [ -d $TMPDIR ] && rm -rf $TMPDIR; mkdir -p $TMPDIR; [ -d $ALTTMPDIR ] && rm -rf $ALTTMPDIR; mkdir -p $ALTTMPDIR
unzip -oq $ZIPFILE BB.zip Addons.tar.xz -d $ALTTMPDIR 2>/dev/null
unzip -oq $BB.zip -d $ALTTMPDIR 2>/dev/null; rm -f $BB.zip
chmod -R 0777 $TMPDIR $ALTTMPDIR
$BB/busybox-$ARCH --install -s $BB
$UNTARXZ -xf $ADDONS.tar.xz -C $ALTTMPDIR; rm -f $ADDONS.tar.xz
[ $BOOTMODE != true ] && mkdir -p $AIOPFMDPH) &
PRESETS
END
}

BOOT_DETECTED () {
[ -z $BOOTMODE ] && ps | grep zygote | grep -qv grep && BOOTMODE=true
[ -z $BOOTMODE ] && ps -A 2>/dev/null | grep zygote | grep -qv grep && BOOTMODE=true
[ -z $BOOTMODE ] && BOOTMODE=false
}

APMSGASD () {
MSGSD="•"
MSGCS="••••••••••••••••••••••••••••••••••••••••••••••••••"
if $BOOTMODE; then
MSGVU="▲ ►"; MSGVD="▼ ►"
else
MSGVU="+ >"; MSGVD="- >"
fi
MSGDI="Install Done"
MSGDRM="Removing Done"
MSGDRP="Replace Done"
MSGDRS="Restore Done"
MSGFI="Found Install"
MSGPNF="Patching Needed Files..."
MSGFFAP="Files Found And Patched"
MSGIIP="(I)"
MSGEFTC="(\)"
MSGNIS="(|)"
MSGNUS="(/)"
MSGEEFTC="(|\)"
MSGEND="(//)"
MSGRI="(R)"
MSGWDI="Community"
MSGPMODE="$MSGSD Opens Some Test Items/Patches - Set: U(ser) Or D(ebug)"
MSGLEDCOLOR="$MSGSD This Is The Color Of Your Diode - Set: R(ed), G(reen), B(lue) Or W(hite)"
MSGHFMODE="$MSGSD Adds Tactile Feedback To Patch Selections - Set: Values From 1 To 255 For Weak/Strong Vibration"
MSGHFSMODE="$MSGSD Sets Values From HFMODE Not To duration, But To enable And/Or activate - Set: false Or true"
MSGENDMODE="$MSGSD Allows You To Return To The Beginning Of The Patch Without Reselecting If You Missed Something - Set: false Or true"
MSGMMUPDC="$MSGSD Adds Version Checking Of Magisk Modules Between Patch And Installed - Set: false Or true"
MSGLEGACYMODE="$MSGSD Includes Showing Old/Obsolete Patches/Features - Set: false Or true"
}

IS_MOUNTED () {
grep -q " `readlink -f $1` " /proc/mounts 2>/dev/null
return $?
}

PARTITION_AND_MOUNTS () {
if $BOOTMODE; then
MSGCS
else
DABP=false
if [ -n "$(cat /proc/cmdline | grep slot_suffix)" ]; then
DABP=true; SYSTEM_MOUNT="/system"; SYSTEM="$SYSTEM_MOUNT/system"; VENDOR="/vendor/vendor"
elif [ -n "$(cat /etc/fstab | grep /system_root)" ]; then
SYSTEM_MOUNT="/system_root"; SYSTEM="$SYSTEM_MOUNT/system"; VENDOR="/vendor"
else
SYSTEM_MOUNT="/system"; SYSTEM="$SYSTEM_MOUNT"; VENDOR="/vendor"
fi
for p in "$SYSTEM_MOUNT" "$VENDOR" "/cust" "/system_ext" "/product" "/odm"; do
if [ -d "$p" ] && grep -q "$p" "/etc/fstab"; then
MOUNTS="$MOUNTS $p"
fi
done
for m in $MOUNTS; do
if IS_MOUNTED "$m"; then umount "$m"; fi
mount "$m"
mount -o remount,rw "$m"
done
grep -q "$SYSTEM_MOUNT.*\sro[\s,]" /proc/mounts && mount -o remount,rw $SYSTEM_MOUNT
UIP -s "Mounting Partitions"
fi
if [ -f /system/system/build.prop ]; then SYSTEM="/system/system"; elif [ -f /system_root/system/build.prop ]; then SYSTEM="/system_root/system"; elif [ -f /system/build.prop ]; then SYSTEM="/system"; fi
if [ $BOOTMODE != true ] && [ -n "$(cat /etc/fstab | grep /vendor)" ]; then :; elif [ $BOOTMODE != true ] && [ -d $SYSTEM/vendor ]; then VENDOR="$SYSTEM/vendor"; else VENDOR="/vendor"; fi
}

IMPORTANT_VARIABLES () {
if $BOOTMODE; then if [ -n $MAGISKTMP ]; then MAGISKMP="$MAGISKTMP/mirror"; elif [ -d "/sbin/.magisk" ]; then MAGISKMP="/sbin/.magisk/mirror"; else MAGISKMP=$(find `magisk --path` -type d -name "mirror" | head -n 1); fi; else MAGISKMP=""; fi
MIPSV="/system/vendor"
IPSB="$SYSTEM/bin"; MIPSB="/system/bin"
IPSXB="$SYSTEM/xbin"; MIPSXB="/system/xbin"
IPSA="$SYSTEM/app"; MIPSA="/system/app"
IPSPA="$SYSTEM/priv-app"; MIPSPA="/system/priv-app"
IPSE="$SYSTEM/etc"; MIPSE="/system/etc"
IPSEI="$IPSE/init"; MIPSEI="$MIPSE/init"
IPSEID="$IPSE/init.d"; MIPSEID="$MIPSE/init.d"
IPSES="$IPSE/sysconfig"; MIPSES="$MIPSE/sysconfig"
IPSEP="$IPSE/permissions"; MIPSEP="$MIPSE/permissions"
IPSEDP="$IPSE/default-permissions"; MIPSEDP="$MIPSE/default-permissions"
IPSL="$SYSTEM/lib"; MIPSL="/system/lib"
IPSL64="$SYSTEM/lib64"; MIPSL64="/system/lib64"
IPSLM="$IPSL/modules"; MIPSLM="$MIPSL/modules"
IPSLS="$IPSL/soundfx"; MIPSLS="$MIPSL/soundfx"
IPSLS64="$IPSL64/soundfx"; MIPSLS64="$MIPSL64/soundfx"
IPSAD="$SYSTEM/addon.d"; MIPSAD="/system/addon.d"
IPSBP="$SYSTEM/build.prop"; MIPSBP="/system/build.prop"
IPSSP="$SYSTEM/product"; MIPSSP="/system/product"
IPSSPBP="$IPSSP/build.prop"; MIPSSPBP="$MIPSSP/build.prop"
IPSSPA="$IPSSP/app"; MIPSSPA="$MIPSSP/app"
IPSSPPA="$IPSSP/priv-app"; MIPSSPPA="$MIPSSP/priv-app"
IPSSPE="$IPSSP/etc"; MIPSSPE="$MIPSSP/etc"
IPSSPES="$IPSSPE/sysconfig"; MIPSSPES="$MIPSSPE/sysconfig"
IPSSPEP="$IPSSPE/permissions"; MIPSSPEP="$MIPSSPE/permissions"
IPSSE="$SYSTEM/system_ext"; MIPSSE="/system/system_ext"
IPSSEPE="$IPSSE/etc"; MIPSSEPE="$MIPSSE/etc"
IPSSEPES="$IPSSEPE/sysconfig"; MIPSSEPES="$MIPSSEPE/sysconfig"
IPSSEPEP="$IPSSEPE/permissions"; MIPSSEPEP="$MIPSSEPE/permissions"
IPSSEA="$IPSSE/app"; MIPSSEA="$MIPSSE/app"
IPSSEPA="$IPSSE/priv-app"; MIPSSEPA="$MIPSSE/priv-app"
IPSFW="$SYSTEM/framework"; MIPSFW="/system/framework"
IPSPO="$IPSSP/overlay"; MIPSPO="$MIPSSP/overlay"
IPSO="$SYSTEM/overlay"; MIPSO="/system/overlay"
IPSUKL="$SYSTEM/usr/keylayout"; MIPSUKL="/system/usr/keylayout"
IPSPM="$IPSSP/media"; MIPSPM="$MIPSSP/media"
IPSPMAU="$IPSPM/audio/ui"; MIPSPMAU="$MIPSPM/audio/ui"
IPSM="$SYSTEM/media"; MIPSM="/system/media"
IPSMAU="$IPSM/audio/ui"; MIPSMAU="$MIPSM/audio/ui"
IPSF="$SYSTEM/fonts"; MIPSF="/system/fonts"
IPSEDF="$IPSE/device_features"; MIPSEDF="$MIPSE/device_features"
IPSED="$IPSE/dolby"; MIPSED="$MIPSE/dolby"
IPVBP="$VENDOR/build.prop"; MIPSVBP="$MIPSV/build.prop"
IPVE="$VENDOR/etc"; MIPSVE="$MIPSV/etc"
IPVEDC="$IPVE/dirac"; MIPSVEDC="$MIPSVE/dirac"
IPVL="$VENDOR/lib"; MIPSVL="$MIPSV/lib"
IPVL64="$VENDOR/lib64"; MIPSVL64="$MIPSV/lib64"
IPVLRA="$IPVL/rfsa/adsp"; MIPSVLRA="$MIPSVL/rfsa/adsp"
IPVDA="$VENDOR/dsp/adsp"; IPSVDA="$MIPSV/dsp/adsp"
IPVLM="$IPVL/modules"; MIPSVLM="$MIPSVL/modules"
IPVLS="$IPVL/soundfx"; MIPSVLS="$MIPSVL/soundfx"
IPVLS64="$IPVL64/soundfx"; MIPSVLS64="$MIPSVL64/soundfx"
IPVO="$VENDOR/overlay"; MIPSVO="$MIPSV/overlay"
IPVUKL="$VENDOR/usr/keylayout"; MIPSVUKL="/vendor/usr/keylayout"
IPVA="$VENDOR/app"; MIPSVA="$MIPSV/app"
IPVPA="$VENDOR/priv-app"; MIPSVPA="$MIPSV/priv-app"
IPVEDF="$IPVE/device_features"; MIPSVEDF="$MIPSV/device_features"
IPVED="$IPVE/dolby"; MIPSVED="$MIPSVE/dolby"
IPVB="$VENDOR/bin"; MIPSVB="$MIPSV/bin"
IPVBHW="$IPVB/hw"; MIPSVBHW="$MIPSVB/hw"
IPDA="/data/app"
IPDD="/data/data"
IPDS="/data/system"
IPDSDE="/data/system_de"
IPDSU="$IPDS/users/0"
IPDSUDE="/data/user_de"
IPDSNS="$IPDS/netstats"
IPDM="/data/misc"
IPDMDE="/data/misc_de"
IPDRESC="/data/resource-cache"
STORAGE="/data/media/0"
ACXML="$(find $SYSTEM $VENDOR -type f -name "audio_configs*.xml")"
APIXML="$(find $SYSTEM $VENDOR -type f -name "audio_platform_info*.xml")"
AECONFXML="$(find $SYSTEM $VENDOR -type f -name "*audio_effects*.conf" -o -name "*audio_effects*.xml")"
MPATHS="$(find $SYSTEM $VENDOR -type f -name "*mixer_paths*.xml")"
BTCSCONF="$(find $SYSTEM $VENDOR -type f -name "bt_configstore.conf")"
BTSCONF="$(find $SYSTEM $VENDOR -type f -name "bt_stack.conf")"
MCGAX="$(find $SYSTEM $VENDOR -type f -name "media_codecs*audio.xml")"
AIPAOPCONF="$(find $SYSTEM $VENDOR -type f -name "*audio_io_policy*.conf" -o -name "*audio_output_policy*.conf")"
APCXML="$(find $SYSTEM $VENDOR -type f -name "*audio_policy_configuration*.xml")"
A2DPXML="$(find $SYSTEM $VENDOR -type f -name "a2dp*.xml")"
BTQTIXML="$(find $SYSTEM $VENDOR -type f -name "bluetooth*.xml")"
VIRTXML="$(find $SYSTEM $VENDOR -type f -name "virtual*.xml")"
USBXML="$(find $SYSTEM $VENDOR -type f -name "usb*.xml")"
RSUBMIXXML="$(find $SYSTEM $VENDOR -type f -name "r_submix*.xml")"
VEHICLEXML="$(find $SYSTEM $VENDOR -type f -name "vehicle*.xml")"
STPIXML="$(find $SYSTEM $VENDOR -type f -name "sound_trigger_platform_info*.xml")"
MPXML="$(find $SYSTEM $VENDOR -type f -name "media_profiles*.xml")"
MCXML="$(find $SYSTEM $VENDOR -type f -name "media_codecs.xml")"
WCNSQCCFGI="$(find $SYSTEM $VENDOR -type f -name "WCNSS_qcom_cfg.ini")"
GPSCONF="$(find $SYSTEM $VENDOR -type f -name "gps.conf")"
SDAXXML="$IPSED/*.xml"; VDAXXML="$IPVED/*.xml"
SDEVFE="$IPSEDF/*.xml"; VDEVFE="$IPVEDF/*.xml"
XMLGLOBAL="$IPDSU/settings_global.xml"; XMLSECURE="$IPDSU/settings_secure.xml"; XMLSYSTEM="$IPDSU/settings_system.xml"
SPGLOBAL="settings put global"; SPSECURE="settings put secure"; SPSYSTEM="settings put system"
SGGLOBAL="settings get global"; SGSECURE="settings get secure"; SGSYSTEM="settings get system"
if [ -f $STORAGE/PATCHMODE* ]; then PATCHMODEFILE="$(find $STORAGE/PATCHMODE*)"; FINDPATCHMODE=true; else for f in $(ls $STORAGE); do if [ -f $STORAGE/$f/PATCHMODE* ]; then PATCHMODEFILE="$(find $STORAGE/$f/PATCHMODE*)"; FINDPATCHMODE=true; break; else FINDPATCHMODE=false; fi; done; fi; if [ $FINDPATCHMODE != true ]; then touch $STORAGE/PATCHMODE.conf; PATCHMODEFILE="$STORAGE/PATCHMODE.conf"; fi
PMODE="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "PMODE")"
HFDURATION="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "HFMODE")"
HFSWAPMODE="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "HFSMODE")"
LEDCOLOR="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "LEDCOLOR")"
ENDMODE="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "ENDMODE")"
DRMODE="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "DRMODE")"
MMUPDC="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "MMUPDC")"
LEGACYMODE="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "LEGACYMODE")"
PROPFILES="$IPSBP $IPVBP"
TIME="$( date +"%d-%m-%Y-%H:%M:%S" )"
GBFVXML="$IPDD/com.google.android.inputmethod.latin/shared_prefs/flag_value.xml"
SYSCL="/sys/class/leds"
LEDLSC="chmod 0755 /sys/class/*/*/* /sys/module/*/*/*"
LEDMBRED="$SYSCL/red/max_brightness"
LEDMBGREEN="$SYSCL/green/max_brightness"
LEDMBBLUE="$SYSCL/blue/max_brightness"
LEDMBWHITE="$SYSCL/white/max_brightness"
LEDRED="$SYSCL/red/brightness"
LEDGREEN="$SYSCL/green/brightness"
LEDBLUE="$SYSCL/blue/brightness"
LEDWHITE="$SYSCL/white/brightness"
FLASHLIGHT="$SYSCL/flashlight/brightness"
BUTTONBACKLIGHT="$SYSCL/button-backlight/brightness"
AIOPFMDPH="$IPSB/aiopfmdph"
if [ -d $IPSPO ] && [ -d $IPVO ]; then IPPSO="$IPSPO"; MIPPSO="$MIPSPO"; IPPVO="$IPVO"; MIPPVO="$MIPSVO"; elif [ -d $IPSPO ]; then IPPSO="$IPSPO"; MIPPSO="$MIPSPO"; IPPVO="$IPSPO"; MIPPVO="$MIPSPO"; elif [ -d $IPSO ]; then IPPSO="$IPSO"; MIPPSO="$MIPSO"; IPPVO="$IPSO"; MIPPVO="$MIPSO"; fi
if [ -d $IPSMAU ]; then IPPMU="$IPSMAU"; MIPPMU="$MIPSMAU"; elif [ -d $IPSPMAU ]; then IPPMU="$IPSPMAU"; MIPPMU="$MIPSPMAU"; fi
if [ -d $IPSPM ]; then IPPM="$IPSPM"; MIPPM="$MIPSPM"; elif [ -d $IPSM ]; then IPPM="$IPSM"; MIPPM="$MIPSM"; fi
for f in Fox TWRP SHRP PBRP; do if [ -d $STORAGE/$f ]; then PLOGS="$STORAGE/$f/AIOLogs"; FPLOGS=true; break; else FPLOGS=false; fi; done; if [ $FPLOGS != true ]; then PLOGS="$STORAGE/AIOLogs"; fi
if [ ! -d $IPSXB ] && [ $BOOTMODE != true ]; then mkdir -p $IPSXB; IPPSXB=$IPSXB; IPPSXBM=$MIPSXB; BINPATH=xbin; elif [ ! -d $IPSXB ] && $BOOTMODE; then IPPSXB=$IPSB; IPPSXBM=$MIPSB; BINPATH=bin; else IPPSXB=$IPSXB; IPPSXBM=$MIPSXB; BINPATH=xbin; fi
}

RM_LIST () {

STOCKLISTNOMIUI="
Calculator
Calendar
Contacts
DeskClock
FileExplorer
FileExplorerGlobal
MiuiCamera
Mms
"

STOCKLIST="
404Clock
AEXPapers
APlayer
AbleMusic
AboutBliss
Abstruct
AccuweatherPhone2015_MASS_HD_SWS
AdAway
Aegis
AirDots
AirDotsPlugin
AnalyticsCore
AncientClockWidget
AndroidAutoPrebuilt
AndroidAutoStub
AndroidAutoStubPrebuilt
AndroidForWork
AudioFX
BasicDreams
BatteryTile
BetterBug
BookmarkProvider
Books
BooksPhone
BooksStub
Browser
Browser2
BrowserXposed
CMFileManager
CalculatorGoogle
CalculatorGooglePrebuilt
CalendarGoogle
CalendarGooglePrebuilt
Camera
Camera2
CameraExtensionsProxy
CameraGo
CarHomeGoogle
CarrierServices
CatchLog
CellBroadcastApp
ChocoEUKor
Chrome
Chrome-Stub
ChromeCustomizations
ClockPackage_MASS_Le
CloudPrint
CloudPrint2
ColtPapers
Covers
CtsShimPrivPrebuilt
DeskClockGoogle
DeviceIntelligenceNetworkPrebuilt
DevicePersonalizationPrebuiltPixel2020
DevicePersonalizationPrebuiltPixel2021
DevicePersonalizationPrebuiltPixel4
DevicePolicyPrebuilt
DiagMonAgent
DiagnosticsToolPrebuilt
Dialer
DigitalClockEasy_L
DigitalClock_L
DotFEWallpapers
DotWallpapers
Drive
DualClockDigital_L
DuckDuckGo
Duo
EasterEgg
EasymodeContactsWidget
Eleven
Email
EmergencyInfo
EngineerMode
Etar
EvoEgg
ExactCalculator
Excel_SamsungStub
Exchange2
FBAppManager_NS
FBInstaller_NS
FDroid
FDroidPrivilegedExtension
FM
FM2
FMRadio
FM_TEST
Facebook_stub
FilesPrebuilt
Firewall
FitnessPrebuilt
Focus
FotaAgent
GCS
GCam
GCamGOPrebuilt
GCamGo
Galaxy4
GalaxyApps
Gallery
Gallery2
GalleryGo
GalleryGoPrebuilt
GalleryGoogle
GalleryPrebuilt
GameCenter
GameCenterGlobal
Gboard
Gcam
GenieWidget
GlobalTrendNews
GlobalUserGuide
Gmail
Gmail2
GoogleCalendar
GoogleCamera
GoogleCameraGo
GoogleCameraLegacy
GoogleCloudPrint
GoogleContacts
GoogleDialer
GoogleEars
GoogleEarth
GoogleFeedback
GoogleHangouts
GoogleHindiIME
GoogleHome
GoogleJapaneseInput
GoogleKeep
GoogleKeyboard
GoogleLatinIme
GoogleMusic
GoogleNow
GoogleNowVoiceSearch
GooglePinyinIME
GooglePlus
GooglePrintRecommendationService
GoogleTTS
GoogleVrCore
GrapheneCamera
HTMLViewer
Hangouts
HangoutsDialer
Health
HelpRtcPrebuilt
HoloSpiralWallpaper
HotwordEnrollment
HotwordEnrollmentOKGoogle*
HotwordEnrollmentXGoogle*
HybridAccessory
HybridPlatform
HybridRadio2015
HyconWallpapers
IdMipay
InMipay
Jelly
Joyose
KLMSAgent
Keep
KimciRecorder
KoreanIME
KoreanIMEStub
LPaper-v1.0.0-release
LPaper-v2.0-release
LatinIME
LatinIMEGooglePrebuild
LatinIMEGooglePrebuilt
LatinImeDictionaryPack
LatinImeGoogle
LatinImeGoogleWithLatinIME
LatinImeTutorial
Lawnfeed
Leaflet
Lens
MSA-Global
MSSkype_stub
MaestroPrebuilt
Maps
MatLog
MatchmakerPrebuilt
MatchmakerPrebuiltPixel4
Megogo
Megogo_vender
Messages
Messaging
MiBrowser
MiBrowserGlobal
MiDrive
MiDrop
MiGalleryLockscreen
MiHealth
MiMover
MiMusic
MiPicks
MiService
MiShare
MiVideo
Mimoji
MiuiBugReport
MiuiCompass
MiuiScanner
MiuiSuperMarket
MiuiVideo
MiuiVideoGlobal
MiuiVideoPlayer
MozillaNlpBackend
Music
Music2
MusicFX
MusicPlayerGO
MyVerizonServices
NeMate
Netflix_activation
NewsWeather
Newsstand
NewsstandStub
NextPay
NexusLauncherIcons
NexusWallpapersStubPrebuilt2017
NexusWallpapersStubPrebuilt2019
NezukoMusic
NoiseField
Notes
NovaBugreportWrapper
ONESettings
OPFileManager
OPIconpackOnePlus
OPIconpackOxygen
OPIconpackRound
OPScreenRecord
OPScreenRecorder
OPWeather
OPWidget
OdadPrebuilt
OmniSwitch
OneNote
OneOSLogcat
OneOSSTATS
OneOSSpace
Opera
OperaMax
OperaMax_PreinstallProvider
Opera_data
Ornament
Papers
PartnerBookmarksProvider
PaymentService
PersonalAssistant
PersonalAssistantGlobal
PhaseBeam
Phonograph
PhotoTable
Photos
PicoTts
PixelLiveWallpaperPrebuilt
PixelWallpapers2020
PixelWallpapers2021
PlayGames
PowerPoint_SamsungStub
PrebuiltBugle
PrebuiltBugleStub
PrebuiltDeskClockGoogle
PrebuiltEmailGoogle
PrebuiltExchange3Google
PrebuiltGmail
PrebuiltGoogleTelemetryTvp
PulseMusic
PureBrowser
QPGallery
QuickAccessWallet
QuickSearchBox
RRWallpapers
Recorder
RecorderPrebuilt
RetroMusicPlayer
RetroMusicPlayerPrebuilt
RevengeMessages
RevengeOSCalculator
RockClient
RomStats
RoseEUKor
SBrowser_3.0.38_MASS_LATEST
SOAgent
SPPPushClient_Prod
SPenSdk3
SPlannerWidget_Essential
SPlanner_Essential
SafetyHubPrebuilt
SamsungIMEv2
SamsungSans
SamsungTTS
ScribePrebuilt
SecCalculator2_L
SecEmailComposer-mass
SecEmailProvider-mass
SecEmailSync-mass
SecEmailUI-mass
SecEmailWidget-mass
SecHTMLViewer
SecMyFiles2015_ESS
SecSetupWizard2015
SecurityHubPrebuilt
SecurityLogAgent
ShiftPapers
SimIcons
Simple-Calendar
SimpleCalendar
SimpleGallery
SimpleGalleryPro
SmartCookieWeb
SmartManagerSDK
SmartManager_OLEDHD
Snap
SnapdragonMusic
SoundAmplifierPrebuilt
SparkWallpaperStub
SprdQuickSearchBox
StatusBarLyricExt
Street
Superiorwalls
Talk
TeamOctavi
Terminal
TipsPrebuilt
TouchAssistant
Traceur
Translate
TranslatePrebuilt
Turbo
TurboAdapter
TurboPrebuilt
Tycho
UPTsmService
Velvet
Velvet_update
Via
ViaBrowser
Videos
VinylMusicPlayer
VoiceSearch
VoiceSearchStub
Wallet
Wallpaper
WallpapersBReel2017
WallpapersBReel2019
WallpapersBReel2020
WallpapersBReel2020a
WarpShare
WaveWidget
WeatherDaemon
WeatherTile
WebManual
Wellbeing
WellbeingPrebuilt
Word_SamsungStub
XiaomiKeyboard
YGPS
YellowPage
YouDaoEngine
YouTube
YouTubeMusicPrebuilt
YouTubeVanced
ZVideoMass
arcore
com.google.ar.core
crDroidMusic
facebook-appmanager
facebook-installer
facebook-services
googleconf
greenguard
iWnnIME
iWnnIME_Kbd_White
mab
madCamera
madLauncher
madWallpapers
messaging
stats
talkback
wellbeingconf
"

EXPERIMENTALLIST="
ANGLE
AmbientSensePrebuilt
AndroidMigratePrebuilt
AndroidPlatformServices
BackupRestoreConfirmation
BrowserProviderProxy
BuiltInPrintService
CalendarProvider
CellBroadcastReceiver
ChromeBookmarksSyncAdapter
ConfigUpdater
ConnMO
Currents
DMAgent
EditorsDocs
EditorsDocsStub
EditorsSheets
EditorsSheetsStub
EditorsSlides
EditorsSlidesStub
EuiccGoogle
ExchangeServices
FOTAKill
FaceLock
Finsky
GmsCore
GmsCoreSetupPrebuilt
GmsCore_update
GoogleBackupTransport
GoogleCalendarSyncAdapter
GoogleContactsSyncAdapter
GoogleLoginService
GoogleOneTimeInitializer
GooglePartnerSetup
GooglePlay
GoogleQuickSearchBox
GoogleSearch
GoogleServicesFramework
GoogleZhuyinIME
LineageSetupWizard
LocationHistoryPrebuilt
Magazines
MarketUpdater
Markup
MarkupGoogle
MediaUploader
NetworkLocation
OccamQuickOffice
OneTimeInitializer
Phonesky
PlayAutoInstallConfig
PlayStore
PlusOne
PrebuiltGmsCore
PrebuiltGmsCorePix
PrebuiltGmsCoreQt
PrebuiltGmsCoreRvc
PrebuiltKeep
PrebuiltKeepStub
PrebuiltNewsWeather
PrintSpooler
QuickOffice
SPrintSpoolerLMR1
SamsungBilling
SettingsGoogle
SettingsIntelligenceGooglePrebuilt
SoundPicker
SoundPickerPrebuilt
Stk
Stk2
StorageManagerGoogle
Tag
TagGoogle
TrichromeLibrary
TrichromeLibrary-Stub
VZWAPNLib
Vending
WallpaperPickerGoogle
WallpaperPickerGooglePrebuilt
WallpaperPickerGoogleRelease
WallpaperPicker_Zero2
WebView
WebViewGoogle
WebViewGoogle-Stub
WebViewStub
"

LAUNCHERLIST="
AsusLauncher
AsusLauncherDev
DerpLauncherQuickStep
EasyLauncher2_Zero
EnigmaLauncher
FluidLauncherQuickStep
Launcher3QuickStep
Lawnchair
NeLauncher
NexusLauncher
NexusLauncherPrebuilt
NexusLauncherRelease
OPLauncher
OPLauncher2
OPLauncherReleases
ParanoidQuickStep
PixelLauncher
RevengeLauncherQuickStep
ShadyLauncher
ShadyQuickStep
TWLauncherESS
Trebuchet
TrebuchetQuickStep
"

MMLAUNCHERLIST="
MotoLauncher
OneUIHome
PPL
Systemless_AsusLauncher
Systemless_CRLauncher
Systemless_CorvusLauncher
Systemless_CorvusLauncher_Port
Systemless_DerpLauncher
Systemless_DerpLauncher_Port
Systemless_Lawnchair
Systemless_LawnchairExtra
Systemless_Lawnchair_Plus
Systemless_LegitCherishOSLauncher_Port
Systemless_OPLauncher
Systemless_OneUIHome
Systemless_PixelLauncher
Systemless_PixelLauncherX
Systemless_ShadyLauncher
Systemless_SparkLauncher
Systemless_SushiLauncher
com.pixelated.launcher
quickstepswitcher
quickswitch_terminal
"

MMHOSTSLIST="
AdAwayHosts
DisableAdBlocker
Energized
EnergizedHosts
Hosts
LuckyPatcherHosts
SystemlessHostsUnified
disableadblock
hosts
systemless-hosts
"

}

CHECKER () {
for c in $1; do
case $c in
av) ASDK="$(GET_FILE_PROP "ro.build.version.sdk")"
ATEN=false; AELEVEN=false; ATWELVE=false; ATWELVEL=false
if [ "$ASDK" = "29" ]; then ATEN=true; ACNV="Q"
elif [ "$ASDK" = "30" ]; then AELEVEN=true; ACNV="R"
elif [ "$ASDK" = "31" ]; then ATWELVE=true; ACNV="S"
elif [ "$ASDK" = "32" ]; then ATWELVEL=true; ACNV="SL"
elif [ "$ASDK" = "33" ]; then UIP -s "Warning! SDK $ASDK Is Not Fully Support!"; ATHIRTEEN=true; ACNV="T"
elif [ "$ASDK" = "34" ]; then UIP -s "Warning! SDK $ASDK Is Not Fully Support!"; AFOURTEEN=true; ACNV="?"
fi
case $ASDK in
"19");; "21");; "22");; "23");; "24");; "25");; "26");; "27");; "28");; "29");; "30");; "31");; "32");; "33");; "34");; *) UIP -s "Warning! SDK Not Supported/Found!";;
esac
DYNLIB=true
[ $ASDK -lt 26 ] && DYNLIB=false
[ -z $DYNLIB ] && DYNLIB=false
if $DYNLIB; then DYNLIBPATCH="\/vendor\/lib\/soundfx"; else DYNLIBPATCH="\/system\/lib\/soundfx"; fi;;
miui) if [ -d /data/miui ] || grep "ro.miui.build.region" $IPSBP >/dev/null || grep "ro.miui.region" $IPSBP >/dev/null || grep "ro.miui.ui.version*" $IPSBP >/dev/null || grep "ro.miui.ui.version.name*" $IPSBP >/dev/null; then MIUI=true; else MIUI=false; fi;;
magisk) ZYGISK=false
if [ -d $IPDMM ] && [ -f $IPDMM/util_functions.sh ]; then
MAGISKFIRSTTIME=true; FINDMAGISK=true; MAGISK=true
MAGISKVC="$(GET_FILE_PROP -s "$IPDMM/util_functions.sh" "MAGISK_VER_CODE")"
elif [ -d $NVBASE/magisk ] && [ -f $NVBASE/magisk/util_functions.sh ]; then
MAGISKFIRSTTIME=false; FINDMAGISK=true; MAGISK=true
MAGISKVC="$(GET_FILE_PROP -s "$NVBASE/magisk/util_functions.sh" "MAGISK_VER_CODE")"
else
MAGISKFIRSTTIME=false; FINDMAGISK=false; MAGISK=false
fi
if $FINDMAGISK; then if [ $MAGISKVC -lt 23000 ]; then UIP "Found Old Magisk, Please Install Magisk v24.3+ (24300+)!"; elif [ $MAGISKVC -ge 23010 ]; then ZYGISK=true; fi; fi
if $MAGISK; then
mkdir -p $MODPATH $POSTFSDATAD $SERVICED
chmod 0755 $MODPATH $POSTFSDATAD $SERVICED
IAMM="(M)"
else
IAMM=""
fi;;
bb) if [ -f $IPSB/busybox ]; then BUSYBOX=/bin; FBUSYBOX=true; elif [ -f $IPSXB/busybox ]; then BUSYBOX=/xbin; FBUSYBOX=true; elif [ -d $MODPATH/$IDBB ] || [ -d $MODPATHUPD/$IDBB ] || [ -d $MODPATH/busybox-ndk ] || [ -d $MODPATHUPD/busybox-ndk ]; then FBUSYBOX=true; else FBUSYBOX=false; fi;;
arch) DARCH="$(GET_FILE_PROP "ro.product.cpu.abi")"
case "$DARCH" in
*arm64*) ARCH="arm64";;
*armeabi*) ARCH="arm";;
*) ARCH="Unknown"; UIP -s "Warning! $ARCH Not Supported/Found!";;
esac
AAPT="$ADDONS/aapt-$ARCH"
XMLSTARLET="$ADDONS/xmlstarlet-$ARCH"
SQLITE3="$ADDONS/sqlite3-$ARCH";;
sel) if grep -q "1" /sys/fs/selinux/enforce || [ $BOOTMODE != true ]; then SELINUX=true; SELINUXS="Enforcing"; elif grep -q "0" /sys/fs/selinux/enforce; then SELINUX=false; SELINUXS="Permissive"; fi;;
soc) SD617=$(grep "ro.board.platform=msm8952" $PROPFILES)
SD625=$(grep "ro.board.platform=msm8953" $PROPFILES)
SD660=$(grep "ro.board.platform=sdm660" $PROPFILES)
SD662=$(grep "ro.board.platform=bengal" $PROPFILES)
SD665=$(grep "ro.board.platform=trinket" $PROPFILES)
SD670=$(grep "ro.board.platform=sdm670" $PROPFILES)
SD690=$(grep "ro.board.platform=lito" $PROPFILES)
SD710=$(grep "ro.board.platform=sdm710" $PROPFILES)
SD720G=$(grep "ro.board.platform=atoll" $PROPFILES)
SD730G=$(grep "ro.board.platform=sm6150" $PROPFILES)
SD765G=$(grep "ro.board.platform=lito" $PROPFILES)
SD810=$(grep "ro.board.platform=msm8994" $PROPFILES)
SD820=$(grep "ro.board.platform=msm8996" $PROPFILES)
SD835=$(grep "ro.board.platform=msm8998" $PROPFILES)
SD845=$(grep "ro.board.platform=sdm845" $PROPFILES)
SD855=$(grep "ro.board.platform=msmnile" $PROPFILES)
SD865=$(grep "ro.board.platform=kona" $PROPFILES)
SD888=$(grep "ro.board.platform=lahaina" $PROPFILES)
SM8450=$(grep "ro.board.platform=taro" $PROPFILES)
if [ "$SD662" ] || [ "$SD665" ] || [ "$SD670" ] || [ "$SD690" ] || [ "$SD710" ] || [ "$SD720G" ] || [ "$SD730G" ] || [ "$SD765G" ] || [ "$SD820" ] || [ "$SD835" ] || [ "$SD845" ] || [ "$SD855" ] || [ "$SD865" ] || [ "$SD888" ] || [ "$SM8450" ]; then HIRES=true; else HIRES=false; fi
SNAPSOC=false; MTKSOC=false; EXYSOC=false; KIRSOC=false
if [ "$(grep -E "ro.board.platform=apq.*|ro.board.platform=msm.*|ro.board.platform=sdm.*" $PROPFILES)" ] || [ "$(grep "ro.board.platform=msm*" $PROPFILES)" ] || [ "$(grep "ro.board.platform=sdm*" $PROPFILES)" ] || [ "$SD617" ] || [ "$SD625" ] || [ "$SD660" ] || [ "$SD662" ] || [ "$SD665" ] || [ "$SD670" ] || [ "$SD690" ] || [ "$SD710" ] || [ "$SD720G" ] || [ "$SD730G" ] || [ "$SD765G" ] || [ "$SD810" ] || [ "$SD820" ] || [ "$SD835" ] || [ "$SD845" ] || [ "$SD855" ] || [ "$SD865" ] || [ "$SD888" ]; then
SNAPSOC=true
elif "$(grep -E "ro.mediatek.version.*|ro.hardware=mt*" $PROPFILES)" ] || [ "$(grep "ro.board.platform=mt*" $PROPFILES)" ] || [ "$(grep "ro.board.platform=MT*" $PROPFILES)" ] || [ "$(grep "Build.BRAND=MTK*" $PROPFILES)" ]; then
MTKSOC=true
elif "$(grep -E "ro.chipname=exynos*|ro.board.platform=exynos*" $PROPFILES)"; then
EXYSOC=true
elif "$(grep -E "ro.board.platform=hi.*|ro.board.platform=kirin*" $PROPFILES)"; then
KIRSOC=true
fi;;
gapps) FINDGAPPS=false
for f in "$IPSA" "$IPSPA" "$IPSSPA" "$IPSSPPA" "$IPSSEA" "$IPSSEPA"; do
for gms in "GmsCore" "PrebuiltGmsCore" "GoogleServicesFramework" "Phonesky"; do
if [ -d $f/$gms ]; then FINDGAPPS=true; break 2; fi
done
done
if [ $FINDGAPPS != true ]; then
for gms in "*bitgapps*.sh" "*flame*.sh" "*nikgapps*.sh" "*gapps*.sh"; do
if find $IPSAD -type f -name $gms >/dev/null; then FINDGAPPS=true; break; fi
done
fi;;
device) case $2 in
-x) MI8=$(grep -E "ro.product.vendor.device=dipper.*" $PROPFILES)
MI8P=$(grep -E "ro.product.vendor.device=equuleus.*" $PROPFILES)
MI9=$(grep -E "ro.product.vendor.name=cepheus.*|ro.product.name=cepheus.*" $PROPFILES)
MI9P=$(grep -E "ro.product.vendor.device=crux.*" $PROPFILES)
MIA2=$(grep -E "ro.product.vendor.device=jasmine.*" $PROPFILES)
ONEPLUS7=$(grep -E "ro.product.vendor.device=guacamoleb.*" $PROPFILES)
ONEPLUS7PRO=$(grep -E "ro.product.vendor.device=guacamole.*" $PROPFILES)
ONEPLUS7T=$(grep -E "ro.product.vendor.device=hotdogb.*" $PROPFILES)
ONEPLUS7TPRO=$(grep -E "ro.product.vendor.device=hotdog.*" $PROPFILES)
ONEPLUS8=$(grep -E "ro.product.vendor.device=instantnoodle.*" $PROPFILES)
ONEPLUS8PRO=$(grep -E "ro.product.vendor.device=instantnoodlep.*" $PROPFILES)
ONEPLUS8T=$(grep -E "ro.product.vendor.device=kebab.*" $PROPFILES)
ONEPLUS99PRO9R=$(grep -E "ro.product.vendor.device=lemonade.*" $PROPFILES)
ONEPLUSNORD=$(grep -E "ro.product.vendor.device=avicii.*" $PROPFILES)
POCOX3=$(grep -E "ro.product.vendor.device=surya.*" $PROPFILES)
RN10PRO=$(grep -E "ro.product.vendor.device=sweet.*" $PROPFILES)
RN10PROMAX=$(grep -E "ro.product.vendor.device=sweetin.*" $PROPFILES)
RN5PRO=$(grep -E "ro.product.vendor.device=whyred.*" $PROPFILES);;
*) local PROPDEVICE=$(echo "$2" | tr '[:upper:]' '[:lower:]')
for i in $SYSTEM $VENDOR $IPSSP; do
if [ -f $i/build.prop ]; then
for j in "ro.product.device" "ro.build.product" "ro.product.vendor.device" "ro.vendor.product.device"; do
[ "$(sed -n "s/^$j=//p" $i/build.prop 2>/dev/null | head -n 1 | tr '[:upper:]' '[:lower:]')" == "$PROPDEVICE" ] && return 0
done
fi
done
return 1;;
esac;;
-sp) if [ $BOOTMODE != true ] && [ ! -f $XMLSECURE ] && [ ! -f $XMLGLOBAL ] && [ ! -f $XMLSYSTEM ]; then
return 0
else
for f in $2; do
for af in $3; do
if [ -f $f ]; then
if grep $af $f >/dev/null; then
return 0
fi
fi
done
done
fi
return 1;;
-mmupd) TMODVERSION=false; TMODCVERSION=false
case "$2" in
-c) local MMUPDID="$3"; local MMUPDV="$4"; local MMUPDVC="$5"; if [ -d $MODPATH/$MMUPDID ]; then local MODVERSION="$(GET_FILE_PROP -s "$MODPATH/$MMUPDID/module.prop" "version")"; local MODCVERSION="$(GET_FILE_PROP -s "$MODPATH/$MMUPDID/module.prop" "versionCode")"; if [ "$MODVERSION" != "$MMUPDV" ]; then TMODVERSION=true; fi; if [ "$MODCVERSION" != "$MMUPDVC" ]; then TMODCVERSION=true; fi; fi;;
*) local MMUPDID="$2"; local MMUPDV="$3"; if [ -d $MODPATH/$MMUPDID ]; then local MODVERSION="$(GET_FILE_PROP -s "$MODPATH/$MMUPDID/module.prop" "version")"; if [ "$MODVERSION" != "$MMUPDV" ]; then TMODVERSION=true; fi; fi;;
esac
if $TMODVERSION || $TMODCVERSION; then
MSGCS
case "$2" in
-c) UIP "Found Update For $MMUPDID" "Version Installed: $MODVERSION $MODCVERSION" "New Version: $MMUPDV $MMUPDVC, Update?" "$MSGVU Yes" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then $6; fi;;
*) UIP "Found Update For $MMUPDID" "Version Installed: $MODVERSION" "New Version: $MMUPDV, Update?" "$MSGVU Yes" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then $4; fi;;
esac
fi;;
esac
done
}

PATCHMODE () {
case "$PMODE" in
D) DEBUGMODE=true; TESTMODE=false; MSGPMODE=", Debug Mode";;
T) TESTMODE=true; DEBUGMODE=true; MSGPMODE=", Test Mode";;
U) MSGPMODE=", User Mode"; DEBUGMODE=false; TESTMODE=false;;
*) echo -e "$MSGPMODE\nPMODE=D" >> $PATCHMODEFILE; MSGPMODE=", Debug Mode"; DEBUGMODE=true; TESTMODE=false;;
esac
if find /sys/class -name leds >/dev/null; then
LEDPATH="$(find /sys/class -name leds)"
case "$LEDCOLOR" in
R) LEDCOLOR=red;;
G) LEDCOLOR=green;;
B) LEDCOLOR=blue;;
W) LEDCOLOR=white;;
"false") BLINKMODE=false;;
*) BLINKMODE=false; echo -e "$MSGLEDCOLOR\nLEDCOLOR=false" >> $PATCHMODEFILE;;
esac
if [ -f $LEDPATH/$LEDCOLOR/blink ]; then echo -n 1 > $LEDPATH/$LEDCOLOR/blink; BLINKMODE=true; fi
fi
case "$HFDURATION" in
"false") HFMODE=false;;
[0-255]*) HFMODE=true; HFPATH="$(find /sys/class -name vibrator)"; if [ -f $HFPATH/duration ]; then echo -n $HFDURATION > $HFPATH/duration; fi; if [ -f $HFPATH/activate ]; then HFFPATH=$HFPATH/activate; elif [ -f $HFPATH/enable ]; then HFFPATH=$HFPATH/enable; fi;;
*) HFMODE=false; echo -e "$MSGHFMODE\nHFMODE=false" >> $PATCHMODEFILE;;
esac
case "$HFSWAPMODE" in
"true") HFSWAPMODE=true;;
"false") HFSWAPMODE=false;;
*) echo -e "$MSGHFSMODE\nHFSMODE=false" >> $PATCHMODEFILE; HFSWAPMODE=false;;
esac
case "$ENDMODE" in
"true") ENDMODE=true;;
"false") ENDMODE=false;;
*) ENDMODE=true; echo -e "$MSGENDMODE\nENDMODE=true" >> $PATCHMODEFILE;;
esac
case "$MMUPDC" in
"true") MMUPDC=true;;
"false") MMUPDC=false;;
*) MMUPDC=true; echo -e "$MSGMMUPDC\nMMUPDC=true" >> $PATCHMODEFILE;;
esac
case "$LEGACYMODE" in
"true") LEGACYMODE=true;;
"false") LEGACYMODE=false;;
*) LEGACYMODE=false; echo -e "$MSGLEGACYMODE\nLEGACYMODE=false" >> $PATCHMODEFILE;;
esac
}

HFBMODE () {
if $HFMODE; then if $HFSWAPMODE; then echo -n $HFDURATION > $HFFPATH; else echo -n 1 > $HFFPATH; fi; fi
}

UNMOUNT () {
if [ $BOOTMODE != true ]; then
UIP "UnMounting Partitions"
for m in $MOUNTS; do
case $m in
$SYSTEM_MOUNT) if $DABP; then mount -o ro $SYSTEM_MOUNT; else umount $SYSTEM_MOUNT; fi;;
*) if IS_MOUNTED "$m"; then umount "$m"; fi;;
esac
done
fi
}

END () {
MSGCS
if $ENDMODE; then
UIP "It's Time To Choose:" "$MSGVU To The Beginning $MSGEFTC" "$MSGVD Exit $MSGEND"
if KEYCHOOSE; then PRESETS; END; else ENDMODE=false; END; fi
else
UNMOUNT
if $DEBUGMODE; then
UIP "Clear TMPDIR, Copy Logs & Exit"; MSGCS
[ -d $PLOGS/TWRP ] && mv $PLOGS/TWRP $PLOGS/RECOVERY && rm -rf $PLOGS/TWRP
[ -d $PLOGS/RECOVERY/TWRP ] && rm -rf $PLOGS/RECOVERY/TWRP
if [ $BOOTMODE != true ]; then mkdir -p $PLOGS/RECOVERY/$( date +"%Y-%m" ); cp -f /tmp/recovery.log $PLOGS/RECOVERY/$( date +"%Y-%m" )/AIORecovery-$( date +"%d-%H:%M:%S" ).log; fi
if $BOOTMODE; then input tap 1040 140; sleep 0.5; fi
mkdir -p $PLOGS/MM/$( date +"%Y-%m" )
find $STORAGE/Download/ -type f -name 'magisk_install_log*.log' -exec mv {} $PLOGS/MM/$( date +"%Y-%m" )/AIOMagisk-$( date +"%d-%H:%M:%S" ).log \;
else
UIP "Clear TMPDIR & Exit"; MSGCS
fi
if $BLINKMODE; then echo -n 0 > $LEDPATH/$LEDCOLOR/blink; fi
rm -rf $TMPDIR $ALTTMPDIR && exit 0
fi
}

ui_print () {
$BOOTMODE && echo "$MSGSD $1" || echo -e "ui_print $MSGSD $1\nui_print" >> /proc/self/fd/$OUTFD
}

UIP () {
case $1 in
-s) MSGCS; for uip in "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}" "${11}"; do if [ "$uip" ]; then ui_print "$uip"; else break; fi; done;;
*) for uip in "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"; do if [ "$uip" ]; then ui_print "$uip"; else break; fi; done;;
esac
}

MSGCS () {
$BOOTMODE && echo "$MSGCS" || echo -e "ui_print $MSGCS\nui_print" >> /proc/self/fd/$OUTFD
}

UCSA () {
if $MAGISK; then
case $1 in
-eno | -ent) CEMODID="$4";;
-s | -a) :;;
*) CEMODID="$3";;
esac
[ "$CEMODID" ] && for SCEMODID in $CEMODID; do if [ -d $MODPATH/$SCEMODID ]; then MSGCEMODID="[V]"; break; else MSGCEMODID="[X]"; fi; done
fi
case $1 in
-eno) UIP -s "$2 $MSGCEMODID" "$MSGVU Yes $MSGEEFTC" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then $3; fi;;
-ent) UIP -s "$2 $MSGCEMODID" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then $3; fi;;
-s) UIP -s "$2" "$MSGVU Yes $3" "$MSGVD No $4"; if KEYCHOOSE; then $5; fi;;
-a) MSGUCSF=true
local UCSFNMPC=$2
for UCSFNMC in $(echo $UCSFNMPC | cut -f 1 -d '_'); do
if $MSGUCSF; then
UIP -s "$3"
MSGUCSF=false
else
MSGCS
fi
UIP "$4 ($UCSFNMC)" "$MSGVU Yes"
MSGUCSFA="$MSGNIS"
case $UCSFNMC in
"$5") MSGUCSFA="$MSGNUS";;
esac
UIP "$MSGVD No $MSGUCSFA"
if KEYCHOOSE; then
UCSFNM=true
break
else
UCSFNM=false
fi
done;;
*) UIP -s "$1 $MSGCEMODID" "$MSGVU Yes" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then $2; fi;;
esac
CEMODID=""; SCEMODID=""; MSGCEMODID=""
}

GET_FILE_PROP () {
case $1 in
-pm) grep -m1 "^$3=" "$2" | cut -d= -f2 | cut -d ' ' -f1;;
-s) grep -m1 "^$3=" "$2" | cut -d= -f2;;
*) local REGEX="s/^$1=//p"
shift
local FILES=$@
[ -z "$FILES" ] && FILES="$PROPFILES"
sed -n "$REGEX" $FILES 2>/dev/null | head -n 1;;
esac
}

TOUCHER () {
mkdir -p ${1%/*} 2>/dev/null
[ -z $2 ] && touch $1 || echo $2 > $1
}

REPLACER () {
case $1 in
-f) local REPLACE=$2; for TARGET in $REPLACE; do for FPATH in "$IPSA" "$IPSPA" "$IPSSPA" "$IPSSPPA" "$IPSSEA" "$IPSSEPA" "$IPVA" "$IPVPA"; do if [ -d $MAGISKMP$FPATH/$TARGET ]; then TOUCHER $MODPATH/$MODID$FPATH/$TARGET/.replace; fi; done; done;;
-a) local REPLACE=$2; local TPATH=$3; for TARGET in $REPLACE; do for FPATH in $TPATH; do if [ -f $MAGISKMP$FPATH/$TARGET ]; then TOUCHER $MODPATH/$MODID$FPATH/$TARGET; fi; done; done;;
*) local REPLACE=$1; for TARGET in $REPLACE; do TOUCHER $MODPATH/$MODID$TARGET/.replace; done;;
esac
}

REMOVER () {
local REMOVE=$2
case $1 in
-rm) for TARGET in $REMOVE; do if [ -d $TARGET ]; then rm -rf $TARGET; fi; done;;
-mm) for TARGET in $REMOVE; do for MMP in $MODPATH $MODPATHUPD; do if [ -d $MMP/$TARGET ]; then rm -rf $MMP/$TARGET; fi; done; done;;
-emm) for TARGET in $REMOVE; do for MMP in $MODPATH $MODPATHUPD; do if [ -d $MMP/$TARGET ]; then local EXCEPT=$3; cd $MODPATH/$TARGET; ls | grep -v $EXCEPT | xargs rm -rf; fi; done; done;;
esac
}

BUCKUPER () {
local RORB=$2
for TARGET in $RORB; do
case $1 in
-r) if [ -f $TARGET.bak ]; then mv -f $TARGET.bak $TARGET; fi;;
-s) if [ -f $TARGET ]; then for SBT in $TARGET; do cp -f $SBT $SBT.bak; done; fi;;
-bp) if [ -f $TARGET ]; then cp -f $TARGET "$TARGET-$TIME.bak"; fi;;
esac
done
}

FINDER () {
case $1 in
-mm) local FIND=$2; for TARGET in $FIND; do if [ -d $MODPATHUPD/$TARGET ] || [ -d $MODPATH/$TARGET ]; then return 0; break; fi; done; return 1;;
-nmp) local FIND=$2; for TARGET in $FIND; do if [ -e $TARGET ]; then return 0; break; fi; done; return 1;;
*) local FIND=$1; for TARGET in $FIND; do if [ -e $MAGISKMP$TARGET ]; then return 0; break; fi; done; return 1;;
esac
}

SET_PERM () {
chown $2:$3 $1 || return 1
chmod $4 $1 || return 1
CON=$5
[ -z $CON ] && CON=u:object_r:system_file:s0
chcon $CON $1 || return 1
}

SET_PERM_R () {
UIP "Setting Permissions"
find $1 -type d 2>/dev/null | while read dir; do
SET_PERM $dir $2 $3 $4 $6
done
find $1 -type f -o -type l 2>/dev/null | while read file; do
SET_PERM $file $2 $3 $5 $6
done
}

SET_PERM_RM () {
if $MAGISK; then SET_PERM_R $MODPATH/$MODID 0 0 0755 0644; [ -d $MODPATH/$MODID$MIPSB ] && chmod -R 0777 $MODPATH/$MODID$MIPSB; [ -d $MODPATH/$MODID$MIPSXB ] && chmod -R 0777 $MODPATH/$MODID$MIPSXB; fi
[ -f $MODPATH/$MODID/daemon ] && chmod 0744 $MODPATH/$MODID/daemon
[ -f $MODPATH/$MODID/nfqttl ] && chmod 0777 $MODPATH/$MODID/nfqttl
case $1 in -msgdi) UIP "$MSGDI";; esac
}

UZTPN () {
for F in "$1" "$2" "$3" "$4"; do
if [ "$F" ]; then
if [ ! -f $TMPDIR/$F.tar.xz ]; then $UNZIP -oq $ZIPFILE $F.tar.xz -d $TMPDIR 2>/dev/null; fi
$UNTARXZ -xf $TMPDIR/$F.tar.xz -C $TMPDIR
if [ ! -d $TMPDIR/$F ]; then
UIP "Unzip $F Error"
$UNTARXZ -xf $TMPDIR/$F.tar.xz -C $TMPDIR
if [ -d $TMPDIR/$F ]; then UIP "Unzip $F Completed"; fi
fi
rm -f $TMPDIR/$F.tar.xz
chmod -R 0777 $TMPDIR/$F
else
break
fi
done
}

MOVERPATH () {
if [ $BOOTMODE != true ] && [ -d $MODPATH/$MODID/system_root/system ]; then
mkdir -p $MODPATH/$MODID/system; cp -rf $MODPATH/$MODID/system_root/system/* $MODPATH/$MODID/system; rm -rf $MODPATH/$MODID/system_root
fi
if [ -d $MODPATH/$MODID/vendor ]; then
mkdir -p $MODPATH/$MODID$MIPSV; cp -rf $MODPATH/$MODID/vendor/* $MODPATH/$MODID$MIPSV; rm -rf $MODPATH/$MODID/vendor
fi
if [ $BOOTMODE != true ] && [ -d $MODPATH/$MODID/system/system ]; then
mkdir -p $MODPATH/$MODID/system; cp -rf $MODPATH/$MODID/system/system/* $MODPATH/$MODID/system; rm -rf $MODPATH/$MODID/system/system
fi
if [ $BOOTMODE != true ] && [ -d $MODPATH/$MODID/system_root/system/system_ext ]; then
mkdir -p $MODPATH/$MODID/system/system_ext; cp -rf $MODPATH/$MODID/system_root/system/system_ext/* $MODPATH/$MODID/system/system_ext; rm -rf $MODPATH/$MODID/system_root
fi
}

APKINSTALLER () {
NAMEINSTALLAPP=$2; NAMEPATHOUT=$3
UIP "Installing $PACKAGENAME"
case $1 in
-d) if $BOOTMODE; then
pm install -r $NAMEINSTALLAPP >/dev/null
else
cp -f $STORAGE/Applications/$APKINPUT $IPDA/$PACKAGENAME.apk
SET_PERM_R $IPDA/$PACKAGENAME.apk 1000 1000 0771 0644
fi;;
-a) if $MAGISK; then
MODID="AIOIARPFMD"
PATHINSTALLAPP=$MODPATH/$MODID$MIPSA/$NAMEINSTALLAPP
else
PATHINSTALLAPP=$IPSA/$NAMEINSTALLAPP
fi
rm -rf $PATHINSTALLAPP
mkdir -p $TMPDIR/Lib_$NAMEINSTALLAPP
for ARCHA in "armeabi" "armeabi-v7a" "arm64-v8a"; do
$UNZIP -oq $ZIPFILE $NAMEPATHOUT/$NAMEINSTALLAPP.apk -d $TMPDIR 2>/dev/null
$UNZIP -oq $TMPDIR/$NAMEPATHOUT/$NAMEINSTALLAPP.apk lib/$ARCHA/* -d $TMPDIR/Lib_$NAMEINSTALLAPP 2>/dev/null
case $ARCHA in
"armeabi") ARCHOUT="arm";; "armeabi-v7a") ARCHOUT="arm";; "arm64-v8a") ARCHOUT="arm64";;
esac
if [ -d $TMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCHA ]; then
mkdir -p $PATHINSTALLAPP/lib/$ARCHOUT
cp -f $TMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCHA/* $PATHINSTALLAPP/lib/$ARCHOUT
else
mkdir -p $PATHINSTALLAPP
fi
cp -f $TMPDIR/$NAMEPATHOUT/$NAMEINSTALLAPP.apk $PATHINSTALLAPP
done
rm -rf $TMPDIR/Lib_$NAMEINSTALLAPP
if $MAGISK; then
MMPR -v "AIOIARPFMD" "$VAIOPFMD" "AIOIARPFMD - Systemless Apps As Magisk Module"
touch $MODPATH/$MODID/update
APKPERM "$PATHINSTALLAPP/$NAMEINSTALLAPP.apk" "$MODPATH/$MODID$MIPSEP"; HAPWL "$MODPATH/$MODID$MIPSES"
SET_PERM_RM
else
APKPERM "$PATHINSTALLAPP/$NAMEINSTALLAPP.apk" "$IPSEP"; HAPWL "$IPSES"
SET_PERM_R $IPSA/$NAMEINSTALLAPP 0 0 0755 0644
fi;;
-s) rm -rf $PATHINSTALLAPP
mkdir -p $TMPDIR/Lib_$NAMEINSTALLAPP
for ARCHA in "armeabi" "armeabi-v7a" "arm64-v8a"; do
$UNZIP -oq $NAMEPATHOUT/$NAMEINSTALLAPP.apk lib/$ARCHA/* -d $TMPDIR/Lib_$NAMEINSTALLAPP 2>/dev/null
case $ARCHA in
"armeabi") ARCHOUT="arm";; "armeabi-v7a") ARCHOUT="arm";; "arm64-v8a") ARCHOUT="arm64";;
esac
if [ -d $TMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCHA ]; then
mkdir -p $PATHINSTALLAPP/lib/$ARCHOUT
cp -f $TMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCHA/* $PATHINSTALLAPP/lib/$ARCHOUT
else
mkdir -p $PATHINSTALLAPP
fi
cp -f $NAMEPATHOUT/$NAMEINSTALLAPP.apk $PATHINSTALLAPP
done
rm -rf $TMPDIR/Lib_$NAMEINSTALLAPP;;
esac
}

APKBUILDER () {
[ -f $STORAGE/framework-res.apk ] && APKFRAME="$STORAGE/framework-res.apk" || APKFRAME="$IPSFW/framework-res.apk"
$AAPT p -f -v -M $1/AndroidManifest.xml \
-I $APKFRAME -S $1/res/ \
-F $1/unsigned.apk >/dev/null
# if $APKSIGN; then
# if [ -s $1/unsigned.apk ]; then
# UIP "Sign $2"
# DALVIKVM $1/unsigned.apk $1/signed.apk
# $ZIPALIGN -c 4 $1/signed.apk
# cp -f $1/signed.apk $2
# fi
# else
# # DALVIKVM () {
# # dalvikvm -Djava.io.tmpdir=. -Xnodex2oat -Xnoimage-dex2oat -cp $ZIPSIGNERJAR com.topjohnwu.utils.ZipSigner "$@" 2>/dev/null \
# # || dalvikvm -Djava.io.tmpdir=. -Xnoimage-dex2oat -cp $ZIPSIGNERJAR com.topjohnwu.utils.ZipSigner "$@";
# # }
UIP "No Sign $2"
$ZIPALIGN -c 4 $1/unsigned.apk
cp -f $1/unsigned.apk $2
# fi
}

APKPERM () {
APKINPUT=$1; APKDIROUTPUT=$2
PACKAGENAME=$($AAPT list -a $APKINPUT | awk -v FS='"' '/package=/{print $2}')
mkdir -p $APKDIROUTPUT
PERM=$($AAPT d permissions $APKINPUT | grep "uses-permission:" | \
     sed -r "s|.*='(.*)'|\1|")
APPPERM=$(echo "$PERM" | \
     sed -re "s|  ||g; s|^|        <permission name=\"|; s|$|\"/>|")
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!--
This XML file declares which signature|privileged permissions should be granted to privileged
applications on GMS or Google-branded devices.
It allows additional grants on top of privapp-permissions-platform.xml
-->
<permissions>
    <privapp-permissions package=\"$PACKAGENAME\">
$APPPERM
    </privapp-permissions>
</permissions>" > $APKDIROUTPUT/privapp-permissions-$PACKAGENAME.xml
chmod 0644 $APKDIROUTPUT/privapp-permissions-$PACKAGENAME.xml
}

HAPWL () {
APKDIROUTPUT=$1; mkdir -p $APKDIROUTPUT
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!--
This XML file declares which platform apps that need to access internal APIs.
-->
<config>
  <hidden-api-whitelisted-app package=\"$PACKAGENAME\" />
</config>" > $APKDIROUTPUT/$PACKAGENAME-package-whitelist.xml
chmod 0644 $APKDIROUTPUT/$PACKAGENAME-package-whitelist.xml
}

MKSCXML () {
APKDIROUTPUT=$1; mkdir -p $APKDIROUTPUT
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<config>
    <hidden-api-whitelisted-app package=\"$PACKAGENAME\" />
    <allow-in-power-save package=\"$PACKAGENAME\" />
</config>" > $APKDIROUTPUT/config-$PACKAGENAME.xml
chmod 0644 $APKDIROUTPUT/config-$PACKAGENAME.xml
}

MMPR () {
local MMPROP="$MODPATH/$MODID/module.prop"
echo -e "id=$MODID\nname=$2\nversion=$3" > $MMPROP
case $1 in
-v) echo -e "author=$MSGWDI\ndescription=$4" >> $MMPROP;;
-vs) echo -e "author=$MSGWDI\ndescription=$4\nsupport=$5" >> $MMPROP;;
-vc) echo -e "versionCode=$4\nauthor=$5\ndescription=$6" >> $MMPROP;;
-vcuj) echo -e "versionCode=$4\nauthor=$5\ndescription=$6\nupdateJson=$7" >> $MMPROP;;
-vcs) echo -e "versionCode=$4\nauthor=$5\ndescription=$6\nsupport=$7" >> $MMPROP;;
esac
}

MSSERVICE () {
case $1 in
-s) echo -e "#/sbin/sh\n\nwhile true; do\nif [ \$(getprop sys.boot_completed) -eq 1 ]; then\n$2\nbreak\nfi\ndone" > $MODPATH/$MODID/service.sh;;
-u) echo -e "#/sbin/sh\n\nwhile true; do\nif [ ! -d $MODPATH/$MODID ]; then\n$2\nrm -f $SERVICED/$3.sh\nbreak\nelse\nbreak\nfi\ndone" > $SERVICED/$3.sh;;
-uc) echo -e "#/sbin/sh\n\nwhile true; do\nif [ \$(getprop sys.boot_completed) -eq 1 ]; then\n$2\nbreak\nfi\ndone" > $SERVICED/$3.sh;;
*) echo -e "#/sbin/sh\n\nwhile true; do\nif [ \$(getprop sys.boot_completed) -eq 1 ]; then\nif [ -f $MODPATH/$MODID/disable ] || [ ! -d $MODPATH/$MODID ]; then\n$1\nif [ ! -d $MODPATH/$MODID ]; then\nrm -f $SERVICED/$3.sh\nfi\nbreak\nelif [ -d $MODPATH/$MODID ]; then\n$2\nbreak\nfi\nfi\ndone" > $SERVICED/$3.sh;;
esac
[ -f $SERVICED/$3.sh ] && chmod 0777 $SERVICED/$3.sh
}

WCANFTP () {
for c in $1; do
case $c in
-sl) CHECKER "sel"; if $SELINUX || [ $BOOTMODE != true ]; then if [ ! -d $MODPATH/$IDSELC ]; then UIP "SELinux Not In Switch To Permissive"; PAI=true; IPSELCS; fi; fi;;
-bb) CHECKER "bb"; if [ $FBUSYBOX != true ]; then UIP "Not Found BusyBox"; IPBBS; fi;;
-ehap) if [ ! -d $MODPATH/$IDHAP ] && [ $ASDK = 30 ]; then UIP "Not Found Enabling Hidden Api Policy"; IPHAPS; fi;;
-alcf) if [ ! -d $MODPATH/$IDALCF ]; then UIP "Not Found Audio Library Crackling Fix"; IPALCFS; fi;;
-aml) if [ ! -d $MODPATH/$IDAML ]; then if [[ -d $MODPATH/$IDDA && -d $MODPATH/$IDVFX ]] || [[ -d $MODPATH/$IDDA && -d $MODPATH/$IDVFX && -f $MODPATH/$IDNLS$MIPSVLRA/dirac.so ]] || [[ -d $MODPATH/$IDVFX && -f $MODPATH/$IDNLS$MIPSVLRA/dirac.so ]] || [[ -d $MODPATH/$IDDA && -f $MODPATH/$IDNLS$MIPSVLRA/dirac.so ]]; then UIP "Not Found Audio Modification Library"; IPAMLS; fi; fi;;
esac
done
}

PSXCF () {
case $1 in
-aae) case $PSF in
*.conf) sed -i "/^libraries {/a\  $2 {\n    path $DYNLIBPATCH\/$4\n  }" $PSF
sed -i "/^effects {/a\  $3 {\n    library $2\n    uuid $5\n  }" $PSF
if [ $MODID = $IDDA ]; then
if echo "$GPSF" | grep -Eq m; then sed -i "/^    music {/a\        $3 {\n        }" $PSF; fi
if echo "$GPSF" | grep -Eq r; then sed -i "/^    ring {/a\        $3 {\n        }" $PSF; fi
if echo "$GPSF" | grep -Eq a; then sed -i "/^    alarm {/a\        $3 {\n        }" $PSF; fi
if echo "$GPSF" | grep -Eq v; then sed -i "/^    voice_call {/a\        $3 {\n        }" $PSF; fi
if echo "$GPSF" | grep -Eq n; then sed -i "/^    notification {/a\        $3 {\n        }" $PSF; fi
fi;;
*.xml) sed -i "/<libraries>/a\        <library name=\"$2\" path=\"$4\"\/>" $PSF
sed -i "/<effects>/a\        <effect name=\"$3\" library=\"$2\" uuid=\"$5\"\/>" $PSF
if [ $MODID = $IDDA ]; then
if echo "$GPSF" | grep -Eq m; then sed -i "/<stream type=\"music\">/a\            <apply effect=\"$3\"\/>" $PSF; fi
if echo "$GPSF" | grep -Eq r; then sed -i "/<stream type=\"ring\">/a\            <apply effect=\"$3\"\/>" $PSF; fi
if echo "$GPSF" | grep -Eq a; then sed -i "/<stream type=\"alarm\">/a\            <apply effect=\"$3\"\/>" $PSF; fi
if echo "$GPSF" | grep -Eq v; then sed -i "/<stream type=\"voice_call\">/a\            <apply effect=\"$3\"\/>" $PSF; fi
if echo "$GPSF" | grep -Eq n; then sed -i "/<stream type=\"notification\">/a\            <apply effect=\"$3\"\/>" $PSF; fi
fi;;
esac;;
-rae) case $PSF in *.conf) for RAE in $2; do sed -i "/$RAE/d" $PSF; done;; *.xml) for RAE in $2; do sed -i "/\"$RAE\"/d" $PSF; done;; esac;;
-osp) case $2 in
*.conf) local SPACES=$(sed -n "/^output_session_processing {/,/^}/ {/^ *music {/p}" $2 | sed -r "s/( *).*/\1/")
local EFFECTS=$(sed -n "/^output_session_processing {/,/^}/ {/^$SPACES\music {/,/^$SPACES}/p}" $2 | grep -E "^$SPACES +[A-Za-z]+" | sed -r "s/( *.*) .*/\1/g")
for EFFECT in $EFFECTS; do
local SPACES=$(sed -n "/^effects {/,/^}/ {/^ *$EFFECT {/p}" $2 | sed -r "s/( *).*/\1/")
[ "$EFFECT" != "atmos" ] && sed -i "/^effects {/,/^}/ {/^$SPACES$EFFECT {/,/^$SPACES}/ s/^/#/g}" $2
done;;
*.xml) local EFFECTS=$(sed -n "/^ *<postprocess>$/,/^ *<\/postprocess>$/ {/^ *<stream type=\"music\">$/,/^ *<\/stream>$/ {/<stream type=\"music\">/d; /<\/stream>/d; s/<apply effect=\"//g; s/\"\/>//g; p}}" $2)
for EFFECT in $EFFECTS; do
[ "$EFFECT" != "atmos" ] && sed -ri "s/^( *)<apply effect=\"$EFFECT\"\/>/\1<\!--<apply effect=\"$EFFECT\"\/>-->/" $2
done;;
esac;;
-pre | -post) case $1 in -pre) CONF=pre_processing; XML=preprocess;; -post) CONF=output_session_processing; XML=postprocess;; esac
case $2 in
*.conf) if [ ! "$(sed -n "/^$CONF {/,/^}/p" $2)" ]; then
echo -e "\n$CONF {\n    $3 {\n        $4 {\n        }\n    }\n}" >> $2
elif [ ! "$(sed -n "/^$CONF {/,/^}/ {/$3 {/,/^    }/p}" $2)" ]; then
sed -i "/^$CONF {/,/^}/ s/$CONF {/$CONF {\n    $3 {\n        $4 {\n        }\n    }/" $2
elif [ ! "$(sed -n "/^$CONF {/,/^}/ {/$3 {/,/^    }/ {/$4 {/,/}/p}}" $2)" ]; then
sed -i "/^$CONF {/,/^}/ {/$3 {/,/^    }/ s/$3 {/$3 {\n        $4 {\n        }/}" $2
fi;;
*.xml) if [ ! "$(sed -n "/^ *<$XML>/,/^ *<\/$XML>/p" $2)" ]; then
sed -i "/<\/audio_effects_conf>/i\    <$XML>\n       <stream type=\"$3\">\n            <apply effect=\"$4\"\/>\n        <\/stream>\n    <\/$XML>" $2
elif [ ! "$(sed -n "/^ *<$XML>/,/^ *<\/$XML>/ {/<stream type=\"$3\">/,/<\/stream>/p}" $2)" ]; then
sed -i "/^ *<$XML>/,/^ *<\/$XML>/ s/    <$XML>/    <$XML>\n        <stream type=\"$3\">\n            <apply effect=\"$4\"\/>\n        <\/stream>/" $2
elif [ ! "$(sed -n "/^ *<$XML>/,/^ *<\/$XML>/ {/<stream type=\"$3\">/,/<\/stream>/ {/^ *<apply effect=\"$4\"\/>/p}}" $2)" ]; then
sed -i "/^ *<$XML>/,/^ *<\/$XML>/ {/<stream type=\"$3\">/,/<\/stream>/ s/<stream type=\"$3\">/<stream type=\"$3\">\n            <apply effect=\"$4\"\/>/}" $2
fi;;
esac;;
-psf) for FPSFTTS in $2; do
PSF="$MODPATH/$MODID$FPSFTTS"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FPSFTTS $PSF
sed -i 's/\t/  /g' $PSF
done;;
*) local Name0=$(echo "$3" | sed -r "s|^.*/.*\[@(.*)=\".*\".*$|\1|")
local Value0=$(echo "$3" | sed -r "s|^.*/.*\[@.*=\"(.*)\".*$|\1|")
[ "$(echo "$4" | grep '=')" ] && Name1=$(echo "$4" | sed "s|=.*||") || local Name1="value"
local Value1=$(echo "$4" | sed "s|.*=||")
case $1 in
"-s"|"-u"|"-i")
local SNP=$(echo "$3" | sed -r "s|(^.*/.*)\[@.*=\".*\".*$|\1|")
local NP=$(dirname "$SNP")
local SN=$(basename "$SNP")
if [ "$5" ]; then
[ "$(echo "$5" | grep '=')" ] && local Name2=$(echo "$5" | sed "s|=.*||") || local Name2="value"
local Value2=$(echo "$5" | sed "s|.*=||")
fi
if [ "$6" ]; then
[ "$(echo "$6" | grep '=')" ] && local Name3=$(echo "$6" | sed "s|=.*||") || local Name3="value"
local Value3=$(echo "$6" | sed "s|.*=||")
fi
if [ "$7" ]; then
[ "$(echo "$7" | grep '=')" ] && local Name4=$(echo "$7" | sed "s|=.*||") || local Name4="value"
local Value4=$(echo "$7" | sed "s|.*=||")
fi;;
esac
case $1 in
"-d") $XMLSTARLET ed -L -d "$3" "$2";;
"-u") $XMLSTARLET ed -L -u "$3/@$Name1" -v "$Value1" "$2";;
"-s")
if [ "$($XMLSTARLET sel -t -m "$3" -c . "$2")" ]; then
$XMLSTARLET ed -L -u "$3/@$Name1" -v "$Value1" "$2"
else
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" \
-i "$SNP-$MODID" -t attr -n "$Name0" -v "$Value0" \
-i "$SNP-$MODID" -t attr -n "$Name1" -v "$Value1" \
-r "$SNP-$MODID" -v "$SN" "$2"
fi;;
"-i")
if [ "$($XMLSTARLET sel -t -m "$3[@$Name1=\"$Value1\"]" -c . "$2")" ]; then
$XMLSTARLET ed -L -d "$3[@$Name1=\"$Value1\"]" "$2"
fi
if [ -z "$Value3" ]; then
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" \
-i "$SNP-$MODID" -t attr -n "$Name0" -v "$Value0" \
-i "$SNP-$MODID" -t attr -n "$Name1" -v "$Value1" \
-i "$SNP-$MODID" -t attr -n "$Name2" -v "$Value2" \
-r "$SNP-$MODID" -v "$SN" "$2"
elif [ "$Value4" ]; then
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" \
-i "$SNP-$MODID" -t attr -n "$Name0" -v "$Value0" \
-i "$SNP-$MODID" -t attr -n "$Name1" -v "$Value1" \
-i "$SNP-$MODID" -t attr -n "$Name2" -v "$Value2" \
-i "$SNP-$MODID" -t attr -n "$Name3" -v "$Value3" \
-i "$SNP-$MODID" -t attr -n "$Name4" -v "$Value4" \
-r "$SNP-$MODID" -v "$SN" "$2"
elif [ "$Value3" ]; then
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" \
-i "$SNP-$MODID" -t attr -n "$Name0" -v "$Value0" \
-i "$SNP-$MODID" -t attr -n "$Name1" -v "$Value1" \
-i "$SNP-$MODID" -t attr -n "$Name2" -v "$Value2" \
-i "$SNP-$MODID" -t attr -n "$Name3" -v "$Value3" \
-r "$SNP-$MODID" -v "$SN" "$2"
fi;;
esac;;
esac
}

PATCH_DEEP_BUFFER () {
UIP "Start PATCH_DEEP_BUFFER" "$MSGPNF"
case $1 in
-nl) echo -e "\n#PATCH DEEP BUFFER\naudio.deep_buffer.media=false\nvendor.audio.deep_buffer.media=false\nqc.audio.deep_buffer.media=false\nro.qc.audio.deep_buffer.media=false\npersist.vendor.audio.deep_buffer.media=false\nvendor.audio.feature.deepbuffer_as_primary.enable=false" >> $MODPATH/$MODID/system.prop
esac
for FACXML in $ACXML; do
if [ -f $MAGISKMP$FACXML ]; then
UIP "Found $FACXML" "Patching..."
PSF="$MODPATH/$MODID$FACXML"
PSXCF -u $PSF '/configs/property[@name="audio.deep_buffer.media"]' "true"
PSXCF -u $PSF '/configs/property[@name="audio.offload.video"]' "true"
PSXCF -u $PSF '/configs/property[@name="audio.offload.disable"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.av.streaming.offload.enable"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.offload.track.enable"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.offload.multiple.enabled"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.voice.path.for.pcm.voip"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.use.sw.alac.decoder"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.use.sw.ape.decoder"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.use.sw.mpegh.decoder"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.flac.sw.decoder.24bit"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.hw.aac.encoder"]' "true"
PSXCF -u $PSF '/configs/flag[@name="fm_power_opt"]' "false"
case $1 in
-nl) PSXCF -u $PSF '/configs/flag[@name="aac_adts_offload_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="alac_offload_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="ape_offload_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="flac_offload_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="pcm_offload_enabled_16"]' "false"
PSXCF -u $PSF '/configs/flag[@name="pcm_offload_enabled_24"]' "false"
PSXCF -u $PSF '/configs/flag[@name="qti_flac_decoder"]' "true"
PSXCF -u $PSF '/configs/flag[@name="vorbis_offload_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="wma_offload_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="a2dp_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="anc_headset_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="audio_zoom_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="audiosphere_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="custom_stereo_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="battery_listener_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="dsm_feedback_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="ext_hw_plugin_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="ext_qdsp_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="ext_spkr_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="ext_spkr_tfa_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="hfp_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="hifi_audio_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="hwdep_cal_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="incall_music_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="keep_alive_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="kpi_optimize_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="maxx_audio_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="multi_voice_session"]' "true"
PSXCF -u $PSF '/configs/flag[@name="receiver_aided_stereo"]' "false"
PSXCF -u $PSF '/configs/flag[@name="spkr_prot_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="usb_offload_burst_mode"]' "true"
PSXCF -u $PSF '/configs/flag[@name="usb_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="usb_offload_sidetone_vol_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="use_deep_buffer_as_primary_output"]' "false"
PSXCF -u $PSF '/configs/flag[@name="vbat_enabled"]' "false";;
-aist) PSXCF -u $PSF '/configs/flag[@name="aac_adts_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="alac_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="ape_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="flac_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="pcm_offload_enabled_16"]' "false"
PSXCF -u $PSF '/configs/flag[@name="pcm_offload_enabled_24"]' "false"
PSXCF -u $PSF '/configs/flag[@name="qti_flac_decoder"]' "true"
PSXCF -u $PSF '/configs/flag[@name="vorbis_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="wma_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="a2dp_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="audio_zoom_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="audiosphere_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="custom_stereo_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="battery_listener_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="dsm_feedback_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="dynamic_ecns_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="ext_hw_plugin_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="ext_qdsp_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="ext_spkr_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="ext_spkr_tfa_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="hfp_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="hwdep_cal_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="keep_alive_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="kpi_optimize_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="maxx_audio_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="multi_voice_session"]' "true"
PSXCF -u $PSF '/configs/flag[@name="receiver_aided_stereo"]' "true"
PSXCF -u $PSF '/configs/flag[@name="spkr_prot_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="usb_offload_burst_mode"]' "true"
PSXCF -u $PSF '/configs/flag[@name="usb_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/flag[@name="usb_offload_sidetone_vol_enabled"]' "false"
PSXCF -u $PSF '/configs/flag[@name="use_deep_buffer_as_primary_output"]' "false";;
esac
UIP "$MSGFFAP"
fi
done
}

PATCH_VOLUMES () {
UIP "Start PATCH_VOLUMES" "$MSGPNF"
for FMPATHS in $MPATHS; do
if [ -f $MAGISKMP$FMPATHS ]; then
UIP "Found $FMPATHS" "Patching..."
PSF="$MODPATH/$MODID$FMPATHS"
case $1 in
-nl) PSXCF -u $PSF '/mixer/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -s $PSF '/mixer/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -s $PSF '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="LINEOUT1 Volume"]' "5"
PSXCF -u $PSF '/mixer/ctl[@name="LINEOUT2 Volume"]' "5";;
-aist) if $HIRES; then
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
fi
PSXCF -u $PSF '/mixer/ctl[@name="RX0 Digital Volume"]' "88"
PSXCF -u $PSF '/mixer/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -s $PSF '/mixer/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -s $PSF '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_RX0 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_RX1 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_RX2 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_RX3 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX0 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX1 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX2 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX3 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX4 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX5 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX6 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX7 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX8 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="WSA_RX0 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="WSA_RX1 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="WSA_RX2 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="WSA_RX3 Digital Volume"]' "82"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX4 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX5 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX6 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX7 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX8 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="LINEOUT1 Volume"]' "16"
PSXCF -u $PSF '/mixer/ctl[@name="LINEOUT2 Volume"]' "16";;
esac
UIP "$MSGFFAP"
fi
done
}

PATCH_MICROPHONE () {
UIP "Start PATCH_MICROPHONE" "$MSGPNF"
for FMPATHS in $MPATHS; do
if [ -f $MAGISKMP$FMPATHS ]; then
UIP "Found $FMPATHS" "Patching..."
PSF="$MODPATH/$MODID$FMPATHS"
case $1 in
-nl) PSXCF -u $PSF '/mixer/ctl[@name="ADC1 Volume"]' "12"
PSXCF -u $PSF '/mixer/ctl[@name="ADC2 Volume"]' "12"
PSXCF -u $PSF '/mixer/ctl[@name="ADC3 Volume"]' "12"
PSXCF -u $PSF '/mixer/ctl[@name="ADC4 Volume"]' "12"
PSXCF -u $PSF '/mixer/ctl[@name="DEC0 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="DEC1 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="DEC2 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="DEC3 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="DEC4 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="DEC5 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="DEC6 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="DEC7 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="DEC8 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="TX_DEC0 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="TX_DEC1 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="TX_DEC2 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="TX_DEC3 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="TX_DEC4 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="TX_DEC5 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="TX_DEC6 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="TX_DEC7 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="TX_DEC8 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="ADC0 Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="ADC1 Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="ADC2 Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="ADC3 Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="ADC4 Volume"]' "20";;
-aist) PSXCF -u $PSF '/mixer/ctl[@name="ADC0 Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="ADC1 Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="ADC2 Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="ADC3 Volume"]' "20"
PSXCF -u $PSF '/mixer/ctl[@name="ADC4 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="handset-mic"]/ctl[@name="ADC0 Volume"]' "14"
PSXCF -u $PSF '/mixer/path[@name="handset-mic"]/ctl[@name="ADC1 Volume"]' "14"
PSXCF -u $PSF '/mixer/path[@name="handset-mic"]/ctl[@name="ADC2 Volume"]' "14"
PSXCF -u $PSF '/mixer/path[@name="handset-mic"]/ctl[@name="ADC3 Volume"]' "14"
PSXCF -u $PSF '/mixer/path[@name="handset-mic"]/ctl[@name="ADC4 Volume"]' "14"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="ADC0 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="ADC1 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="ADC2 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="ADC3 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="ADC4 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-mic"]/ctl[@name="ADC0 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-mic"]/ctl[@name="ADC1 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-mic"]/ctl[@name="ADC2 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-mic"]/ctl[@name="ADC3 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-mic"]/ctl[@name="ADC4 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="handset-dmic-endfire"]/ctl[@name="ADC0 Volume"]' "10"
PSXCF -u $PSF '/mixer/path[@name="handset-dmic-endfire"]/ctl[@name="ADC1 Volume"]' "10"
PSXCF -u $PSF '/mixer/path[@name="handset-dmic-endfire"]/ctl[@name="ADC2 Volume"]' "10"
PSXCF -u $PSF '/mixer/path[@name="handset-dmic-endfire"]/ctl[@name="ADC3 Volume"]' "10"
PSXCF -u $PSF '/mixer/path[@name="handset-dmic-endfire"]/ctl[@name="ADC4 Volume"]' "10"
PSXCF -u $PSF '/mixer/path[@name="speaker-dmic-endfire"]/ctl[@name="ADC0 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-dmic-endfire"]/ctl[@name="ADC1 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-dmic-endfire"]/ctl[@name="ADC2 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-dmic-endfire"]/ctl[@name="ADC3 Volume"]' "20"
PSXCF -u $PSF '/mixer/path[@name="speaker-dmic-endfire"]/ctl[@name="ADC4 Volume"]' "20";;
esac
UIP "$MSGFFAP"
fi
done
}

PATCH_IIR () {
UIP "Start PATCH_IIR" "$MSGPNF"
for FMPATHS in $MPATHS; do
if [ -f $MAGISKMP$FMPATHS ]; then
UIP "Found $FMPATHS" "Patching..."
PSF="$MODPATH/$MODID$FMPATHS"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band1"][@id="0"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band1"][@id="1"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band1"][@id="2"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band1"][@id="3"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band1"][@id="4"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band2"][@id="0"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band2"][@id="1"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band2"][@id="2"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band2"][@id="3"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band2"][@id="4"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band3"][@id="0"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band3"][@id="1"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band3"][@id="2"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band3"][@id="3"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band3"][@id="4"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band4"][@id="0"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band4"][@id="1"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band4"][@id="2"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band4"][@id="3"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band4"][@id="4"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band5"][@id="0"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band5"][@id="1"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band5"][@id="2"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band5"][@id="3"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Band5"][@id="4"]' "000000000"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band0"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band1"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band2"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band3"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band4"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band5"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 INP0 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 INP1 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 INP2 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 INP3 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 INP4 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 INP5 Volume"]' "90"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 INP1 MUX"]' "RX1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 INP2 MUX"]' "RX1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 INP3 MUX"]' "RX1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 INP1 MUX"]' "RX2"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 INP2 MUX"]' "RX2"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 INP3 MUX"]' "RX2"
UIP "$MSGFFAP"
fi
done
}

PATCH_AUDIO_PLATFORM_INFO () {
UIP "Start PATCH_AUDIO_PLATFORM_INFO" "$MSGPNF"
case $1 in
-nl) for FAPIXML in $APIXML; do
if [ -f $MAGISKMP$FAPIXML ]; then
UIP "Found $FAPIXML" "Patching..."
PSF="$MODPATH/$MODID$FAPIXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FAPIXML $PSF
sed -i 's/\t/  /g' $PSF
if $HIRES; then APIBW="32"; PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_SPEAKER"]' "bit_width=$APIBW"; else APIBW="24"; fi
PSXCF -s $PSF '/audio_platform_info/config_params/param[@key="native_audio_mode"]' "multiple_mix_dsp"
PSXCF -s $PSF '/audio_platform_info/config_params/param[@key="hifi_filter"]' "true"
PSXCF -s $PSF '/audio_platform_info/config_params/param[@key="perf_lock_opts"]' "0, 0x0, 0x0, 0x0, 0x0"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_HEADPHONES"]' "bit_width=$APIBW"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_SPEAKER_REVERSE"]' "bit_width=$APIBW"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_SPEAKER_PROTECTED"]' "bit_width=$APIBW"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_HEADPHONES_44_1"]' "bit_width=$APIBW"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_GAME_SPEAKER"]' "bit_width=$APIBW"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_GAME_HEADPHONES"]' "bit_width=$APIBW"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_BT_A2DP"]' "bit_width=$APIBW"
PSXCF -s $PSF '/audio_platform_info/app_types/app[@mode="default"]' "bit_width=$APIBW"
PSXCF -s $PSF '/audio_platform_info/app_types/app[@mode="default"]' "max_rate=192000"
if [ ! "$(grep '<app_types>' $PSF)" ]; then
sed -i "s/<\/audio_platform_info>/  <app_types> \n<app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"$APIBW\" id=\"69936\" max_rate=\"192000\" \/> \n<app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"$APIBW\" id=\"69940\" max_rate=\"192000\" \/> \n  <app_types> \n<\/audio_platform_info>/" $PSF
else
for i in 69936 69940; do
[ "$(XMLSTARLET sel -t -m "/audio_platform_info/app_types/app[@uc_type=\"PCM_PLAYBACK\"][@mode=\"default\"][@id=\"$i\"]" -c . $PSF)" ] || sed -i "/<audio_platform_info>/,/<\/audio_platform_info>/ {/<app_types>/,/<\/app_types>/ s/\(^ *\)\(<\/app_types>\)/\1  <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"$APIBW\" id=\"$i\" max_rate=\"192000\" \/> \n\1\2/}" $PSF
done
sed -i 's/AUDIO_MICROPHONE_CHANNEL_MAPPING_PROCESSED/AUDIO_MICROPHONE_CHANNEL_MAPPING_DIRECT/g' $PSF
UIP "$MSGFFAP"
fi
fi
done
for FMPATHS in $MPATHS; do
if [ -f $MAGISKMP$FMPATHS ]; then
UIP "Found $FMPATHS" "Patching..."
PSF="$MODPATH/$MODID$FMPATHS"
PSXCF -s $PSF '/mixer/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference"]/ctl[@name="EC Reference SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/path[@name="echo-reference headset"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference headset"]/ctl[@name="EC Reference SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/path[@name="echo-reference a2dp"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference a2dp"]/ctl[@name="EC Reference SampleRate"]' "KHZ_96"
PSXCF -s $PSF '/mixer/ctl[@name="Display Port RX Bit Format"]' "S24_3LE"
PSXCF -s $PSF '/mixer/ctl[@name="Display Port RX SampleRate"]' "KHZ_192"
case $PSF in
*sound_trigger_mixer_paths*.xml) :;;
*) if $HIRES; then
PSXCF -s $PSF '/mixer/ctl[@name="RX_CDC_DMA_0 RX Format"]' "DSD_DOP"
PSXCF -s $PSF '/mixer/ctl[@name="RX_CDC_DMA_RX_0 Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="RX_CDC_DMA_RX_0 SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="RX_CDC_DMA_RX_5 Channels"]' "Two"
PSXCF -s $PSF '/mixer/ctl[@name="RX_CDC_DMA_5 RX Format"]' "DSD_DOP"
PSXCF -s $PSF '/mixer/ctl[@name="RX_CDC_DMA_RX_5 Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="RX_CDC_DMA_RX_5 SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_CDC_DMA_0 RX Format"]' "DSD_DOP"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_CDC_DMA_RX_0 Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_CDC_DMA_RX_0 SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_CDC_DMA_0 TX Format"]' "DSD_DOP"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_CDC_DMA_TX_0 Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_CDC_DMA_TX_0 SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="TX_CDC_DMA_TX_3 Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM_7_RX Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM_7_RX SampleRate"]' "KHZ_96"
if [ "$ONEPLUS7" ] || [ "$ONEPLUS7PRO" ] || [ "$ONEPLUS7TPRO" ] || [ "$ONEPLUS7T" ] || [ "$ONEPLUS8" ] || [ "$ONEPLUS8T" ] || [ "$ONEPLUS8TPRO" ] || [ "$ONEPLUSNORD" ] || [ "$ONEPLUS9PRO9R" ]; then
PSXCF -s $PSF '/mixer/ctl[@name="PRIM_MI2S_RX Format"]' "S24_3LE"
PSXCF -s $PSF '/mixer/ctl[@name="PRIM_MI2S_TX Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="SEC_MI2S_RX Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="SEC_MI2S_RX SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="SEC_MI2S_TX Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="QUAT_MI2S_RX Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="QUAT_MI2S_TX Format"]' "S32_LE"
PSXCF -u $PSF '/mixer/ctl[@name="TERT_MI2S_RX Format"]' "S24_3LE"
PSXCF -u $PSF '/mixer/ctl[@name="TERT_MI2S_TX Format"]' "S24_3LE"
PSXCF -s $PSF '/mixer/ctl[@name="QUIN_MI2S_RX Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="QUIN_MI2S_TX Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="PRI_TDM_RX_0 Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="PRI_TDM_TX_0 Format"]' "S32_LE"
PSXCF -s $PSF '/mixer/ctl[@name="PRI_TDM_RX_0 SampleRate"]' "KHZ_176P4"
fi
else
PSXCF -s $PSF '/mixer/ctl[@name="INT0_MI2S_RX Format"]' "S24_3LE"
PSXCF -s $PSF '/mixer/ctl[@name="INT0_MI2S_RX SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="INT4_MI2S_RX Format"]' "S24_3LE"
PSXCF -s $PSF '/mixer/ctl[@name="INT3_MI2S_TX SampleRate"]' "KHZ_96"
fi;;
esac
UIP "$MSGFFAP"
fi
done
echo -e "\n#24-bit Fixation
persist.vendor.audio_hal.dsp_bit_width_enforce_mode=24
persist.audio_hal.dsp_bit_width_enforce_mode=24
vendor.audio_hal.dsp_bit_width_enforce_mode=24
audio_hal.dsp_bit_width_enforce_mode=24
ro.vendor.audio_hal.dsp_bit_width_enforce_mode=24
ro.audio_hal.dsp_bit_width_enforce_mode=24
qcom.vendor.audio_hal.dsp_bit_width_enforce_mode=24
qcom.audio_hal.dsp_bit_width_enforce_mode=24
flac.sw.decoder.24bit.support=true
flac.sw.decoder.24bit.support=true
vendor.audio.flac.sw.decoder.24bit=true
vendor.audio.aac.sw.decoder.24bit=true
vendor.audio.use.sw.alac.decoder=true
vendor.audio.flac.sw.encoder.24bit=true
vendor.audio.aac.sw.encoder.24bit=true
persist.vendor.audio.format.24bit=true
vendor.audio.alac.sw.decoder.24bit=true
vendor.audio.ape.sw.decoder.24bit=true
vendor.audio.mpegh.sw.decoder.24bit=true
vendor.audio.flac.sw.decoder.24bit=true
vendor.audio.aac.sw.decoder.24bit=true
vendor.audio.vorbis.sw.decoder.24bit=true
vendor.audio.wma.sw.decoder.24bit=true
vendor.audio.mp3.sw.decoder.24bit=true
vendor.audio.amrnb.sw.decoder.24bit=true
vendor.audio.amrwb.sw.decoder.24bit=true
vendor.audio.mhas.sw.decoder.24bit=true
vendor.audio.g711.alaw.sw.decoder.24bit=true
vendor.audio.g711.mlaw.sw.decoder.24bit=true
vendor.audio.opus.sw.decoder.24bit=true
vendor.audio.raw.sw.decoder.24bit=true
vendor.audio.ac3.sw.decoder.24bit=true
vendor.audio.eac3.sw.decoder.24bit=true
vendor.audio.eac3_joc.sw.decoder.24bit=true
vendor.audio.ac4.sw.decoder.24bit=true
vendor.audio.qti.sw.decoder.24bit=true
vendor.audio.dsp.sw.decoder.24bit=true
vendor.audio.dsd.sw.decoder.24bit=true
vendor.audio.alac.sw.encoder.24bit=true
vendor.audio.ape.sw.encoder.24bit=true
vendor.audio.mpegh.sw.encoder.24bit=true
vendor.audio.flac.sw.encoder.24bit=true
vendor.audio.aac.sw.encoder.24bit=true
vendor.audio.vorbis.sw.encoder.24bit=true
vendor.audio.wma.sw.encoder.24bit=true
vendor.audio.mp3.sw.encoder.24bit=true
vendor.audio.amrnb.sw.encoder.24bit=true
vendor.audio.amrwb.sw.encoder.24bit=true
vendor.audio.mhas.sw.encoder.24bit=true
vendor.audio.g711.alaw.sw.encoder.24bit=true
vendor.audio.g711.mlaw.sw.encoder.24bit=true
vendor.audio.opus.sw.encoder.24bit=true
vendor.audio.raw.sw.encoder.24bit=true
vendor.audio.ac3.sw.encoder.24bit=true
vendor.audio.eac3.sw.encoder.24bit=true
vendor.audio.eac3_joc.sw.encoder.24bit=true
vendor.audio.ac4.sw.encoder.24bit=true
vendor.audio.qti.sw.encoder.24bit=true
vendor.audio.dsp.sw.encoder.24bit=true
vendor.audio.dsd.sw.encoder.24bit=true" >> $MODPATH/$MODID/system.prop;;
-aist) for FAPIXML in $APIXML; do
if [ -f $MAGISKMP$FAPIXML ]; then
UIP "Found $FAPIXML" "Patching..."
PSF="$MODPATH/$MODID$FAPIXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FAPIXML $PSF
sed -i 's/\t/  /g' $PSF
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_SPEAKER"]' "24"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_HEADPHONES"]' "24"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_SPEAKER_REVERSE"]' "24"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_SPEAKER_PROTECTED"]' "24"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_HEADPHONES_44_1"]' "24"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_GAME_SPEAKER"]' "24"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_GAME_HEADPHONES"]' "24"
PSXCF -s $PSF '/audio_platform_info/bit_width_configs/device[@name="SND_DEVICE_OUT_BT_A2DP"]' "24"
PSXCF -s $PSF '/audio_platform_info_intcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_SPEAKER"]' "24"
PSXCF -s $PSF '/audio_platform_info_intcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_HEADPHONES"]' "24"
PSXCF -s $PSF '/audio_platform_info_intcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_SPEAKER_REVERSE"]' "24"
PSXCF -s $PSF '/audio_platform_info_intcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_SPEAKER_PROTECTED"]' "24"
PSXCF -s $PSF '/audio_platform_info_intcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_HEADPHONES_44_1"]' "24"
PSXCF -s $PSF '/audio_platform_info_intcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_GAME_SPEAKER"]' "24"
PSXCF -s $PSF '/audio_platform_info_intcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_GAME_HEADPHONES"]' "24"
PSXCF -s $PSF '/audio_platform_info_intcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_BT_A2DP"]' "24"
PSXCF -s $PSF '/audio_platform_info_extcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_SPEAKER"]' "24"
PSXCF -s $PSF '/audio_platform_info_extcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_HEADPHONES"]' "24"
PSXCF -s $PSF '/audio_platform_info_extcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_SPEAKER_REVERSE"]' "24"
PSXCF -s $PSF '/audio_platform_info_extcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_SPEAKER_PROTECTED"]' "24"
PSXCF -s $PSF '/audio_platform_info_extcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_HEADPHONES_44_1"]' "24"
PSXCF -s $PSF '/audio_platform_info_extcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_GAME_SPEAKER"]' "24"
PSXCF -s $PSF '/audio_platform_info_extcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_GAME_HEADPHONES"]' "24"
PSXCF -s $PSF '/audio_platform_info_extcodec/bit_width_configs/device[@name="SND_DEVICE_OUT_BT_A2DP"]' "24"
sed -i 's/name="SND_DEVICE_OUT_SPEAKER" bit_width="16"/name="SND_DEVICE_OUT_SPEAKER" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_HEADPHONES" bit_width="16"/name="SND_DEVICE_OUT_HEADPHONES" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_SPEAKER_REVERSE" bit_width="16"/name="SND_DEVICE_OUT_SPEAKER_REVERSE" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_SPEAKER_PROTECTED" bit_width="16"/name="SND_DEVICE_OUT_SPEAKER_PROTECTED" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_HEADPHONES_44_1" bit_width="16"/name="SND_DEVICE_OUT_HEADPHONES_44_1" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_GAME_SPEAKER" bit_width="16"/name="SND_DEVICE_OUT_GAME_SPEAKER" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_GAME_HEADPHONES" bit_width="16"/name="SND_DEVICE_OUT_GAME_HEADPHONES" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_BT_A2DP" bit_width="16"/name="SND_DEVICE_OUT_BT_A2DP" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_SPEAKER" value="24"/name="SND_DEVICE_OUT_SPEAKER" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_HEADPHONES" value="24"/name="SND_DEVICE_OUT_HEADPHONES" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_SPEAKER_REVERSE" value="24"/name="SND_DEVICE_OUT_SPEAKER_REVERSE" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_SPEAKER_PROTECTED" value="24"/name="SND_DEVICE_OUT_SPEAKER_PROTECTED" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_HEADPHONES_44_1" value="24"/name="SND_DEVICE_OUT_HEADPHONES_44_1" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_GAME_SPEAKER" value="24"/name="SND_DEVICE_OUT_GAME_SPEAKER" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_GAME_HEADPHONES" value="24"/name="SND_DEVICE_OUT_GAME_HEADPHONES" bit_width="24"/g' $PSF
sed -i 's/name="SND_DEVICE_OUT_BT_A2DP" value="24"/name="SND_DEVICE_OUT_BT_A2DP" bit_width="24"/g' $PSF
PSXCF -s $PSF '/audio_platform_info/app_types/app[@mode="default"]' 'bit_width=24'
PSXCF -s $PSF '/audio_platform_info/app_types/app[@mode="default"]' 'max_rate=384000'
PSXCF -s $PSF '/audio_platform_info_intcodec/app_types/app[@mode="default"]' 'bit_width=24'
PSXCF -s $PSF '/audio_platform_info_intcodec/app_types/app[@mode="default"]' 'max_rate=384000'
PSXCF -s $PSF '/audio_platform_info_extcodec/app_types/app[@mode="default"]' 'bit_width=24'
PSXCF -s $PSF '/audio_platform_info_extcodec/app_types/app[@mode="default"]' 'max_rate=384000'
if [ ! "$(grep '<app_types>' $PSF)" ]; then
sed -i "s/<\/audio_platform_info>/  <app_types> \n    <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"24\" id=\"69936\" max_rate=\"384000\" \/> \n    <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"24\" id=\"69940\" max_rate=\"384000\" \/> \n  <app_types> \n<\/audio_platform_info>/" $PSF
sed -i "s/<\/audio_platform_info_intcodec>/  <app_types> \n    <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"24\" id=\"69936\" max_rate=\"384000\" \/> \n    <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"24\" id=\"69940\" max_rate=\"384000\" \/> \n  <app_types> \n<\/audio_platform_info_intcodec>/" $PSF
sed -i "s/<\/audio_platform_info_extcodec>/  <app_types> \n    <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"24\" id=\"69936\" max_rate=\"384000\" \/> \n    <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"24\" id=\"69940\" max_rate=\"384000\" \/> \n  <app_types> \n<\/audio_platform_info_extcodec>/" $PSF
else
for i in 69936 69940; do
[ "$($XMLSTARLET sel -t -m "/audio_platform_info/app_types/app[@uc_type=\"PCM_PLAYBACK\"][@mode=\"default\"][@id=\"$i\"]" -c . $PSF)" ] || sed -i "/<audio_platform_info>/,/<\/audio_platform_info>/ {/<app_types>/,/<\/app_types>/ s/\(^ *\)\(<\/app_types>\)/\1  <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"24\" id=\"$i\" max_rate=\"384000\" \/> \n\1\2/}" $PSF
[ "$($XMLSTARLET sel -t -m "/audio_platform_info_intcodec/app_types/app[@uc_type=\"PCM_PLAYBACK\"][@mode=\"default\"][@id=\"$i\"]" -c . $PSF)" ] || sed -i "/<audio_platform_info_intcodec>/,/<\/audio_platform_info_intcodec>/ {/<app_types>/,/<\/app_types>/ s/\(^ *\)\(<\/app_types>\)/\1  <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"24\" id=\"$i\" max_rate=\"384000\" \/> \n\1\2/}" $PSF
[ "$($XMLSTARLET sel -t -m "/audio_platform_info_extcodec/app_types/app[@uc_type=\"PCM_PLAYBACK\"][@mode=\"default\"][@id=\"$i\"]" -c . $PSF)" ] || sed -i "/<audio_platform_info_extcodec>/,/<\/audio_platform_info_extcodec>/ {/<app_types>/,/<\/app_types>/ s/\(^ *\)\(<\/app_types>\)/\1  <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"24\" id=\"$i\" max_rate=\"384000\" \/> \n\1\2/}" $PSF
done
fi
UIP "$MSGFFAP"
fi
done;;
esac
}

PATCH_COMPANDERS () {
UIP "Start PATCH_COMPANDERS" "$MSGPNF"
for FMPATHS in $MPATHS; do
if [ -f $MAGISKMP$FMPATHS ]; then
UIP "Found $FMPATHS" "Patching..."
PSF="$MODPATH/$MODID$FMPATHS"
PSXCF -u $PSF '/mixer/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="asr-mic"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc1"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc2"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="adc3"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="va-enroll-mic"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="handset"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-ce"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-no-ce"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-karaoke"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-headphones"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-headphones"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="tty-headphones"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="true-native-mode"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="headphones-generic"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="aac-initial"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-on"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc2-on"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphones"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="ADSP testfwk"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP3 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP4 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP5 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP6 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP7 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP8 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP0 RX1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP0 RX2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP1"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP2"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="HPHL_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="HPHR_COMP Switch"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Compress Playback 16 Volume"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Compress Playback 15 Volume"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Compress Playback 29 Volume"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Compress Playback 30 Volume"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Compress Playback 31 Volume"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Compress Playback 32 Volume"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Compress Playback 41 Volume"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Compress Playback 42 Volume"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Compress Playback 43 Volume"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Compress Playback 44 Volume"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Compress Playback 45 Volume"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Tfa Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="TFA Profile"]' "music"
PSXCF -s $PSF '/mixer/ctl[@name="DK Profile"]' "receiver"
PSXCF -s $PSF '/mixer/ctl[@name="TFA987X_ALGO_STATUS"]' "ENABLE"
PSXCF -s $PSF '/mixer/ctl[@name="TFA987X_TX_ENABLE"]' "ENABLE"
PSXCF -s $PSF '/mixer/ctl[@name="headphones"]/ctl[@name="PowerCtrl"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT1 MIX3 DSD HPHL Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT2 MIX3 DSD HPHR Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="DSD_L Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="DSD_R Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT0 DEM MUX"]' "CLSH_DSM_OUT"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT1 DEM MUX"]' "CLSH_DSM_OUT"
PSXCF -s $PSF '/mixer/ctl[@name="RCV AMP PCM Gain"]' "20"
PSXCF -s $PSF '/mixer/ctl[@name="AMP PCM Gain"]' "20"
PSXCF -s $PSF '/mixer/ctl[@name="RCV Boost Target Voltage"]' "170"
PSXCF -s $PSF '/mixer/ctl[@name="Boost Target Voltage"]' "170"
PSXCF -s $PSF '/mixer/ctl[@name="Amp DSP Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="BDE AMP Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="Amp Volume Location"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="Ext Spk Boost"]' "ENABLE"
PSXCF -s $PSF '/mixer/ctl[@name="PowerCtrl"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Adsp Working Mode"]' "full"
PSXCF -s $PSF '/mixer/ctl[@name="Adsp Working Mode"]' "full"
PSXCF -s $PSF '/mixer/ctl[@name="RX_Native"]' "ON"
PSXCF -s $PSF '/mixer/ctl[@name="HPH Idle Detect"]' "ON"
PSXCF -s $PSF '/mixer/ctl[@name="Set Custom Stereo OnOff"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="HiFi Function"]' "On"
PSXCF -s $PSF '/mixer/ctl[@name="HiFi Filter"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="A2DP_SLIM7_UL_HL Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM7_RX_DL_HL Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="App Type Gain"]' "8192"
PSXCF -s $PSF '/mixer/ctl[@name="Audiosphere Enable"]' "On"
PSXCF -s $PSF '/mixer/ctl[@name="MSM ASphere Set Param"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="RX_Softclip Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_Softclip0 Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_Softclip1 Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="Load acoustic model"]' "1"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="TWS Channel Mode"]' "Two"
PSXCF -s $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="TWS Channel Mode"]' "Two"
PSXCF -u $PSF '/mixer/ctl[@name="TWS Channel Mode"]' "Two"
PSXCF -s $PSF '/mixer/ctl[@name="TWS Channel Mode"]' "Two"
if $HIRES; then
PSXCF -s $PSF '/mixer/ctl[@name="RX1 HPF cut off"]' "CF_NEG_3DB_4HZ"
PSXCF -s $PSF '/mixer/ctl[@name="RX2 HPF cut off"]' "CF_NEG_3DB_4HZ"
PSXCF -s $PSF '/mixer/ctl[@name="RX3 HPF cut off"]' "CF_NEG_3DB_4HZ"
PSXCF -s $PSF '/mixer/ctl[@name="RX4 HPF cut off"]' "CF_NEG_3DB_4HZ"
PSXCF -s $PSF '/mixer/ctl[@name="RX5 HPF cut off"]' "CF_NEG_3DB_4HZ"
PSXCF -s $PSF '/mixer/ctl[@name="TX1 HPF cut off"]' "CF_NEG_3DB_4HZ"
PSXCF -s $PSF '/mixer/ctl[@name="TX2 HPF cut off"]' "CF_NEG_3DB_4HZ"
PSXCF -s $PSF '/mixer/ctl[@name="TX3 HPF cut off"]' "CF_NEG_3DB_4HZ"
PSXCF -s $PSF '/mixer/ctl[@name="TX4 HPF cut off"]' "CF_NEG_3DB_4HZ"
PSXCF -s $PSF '/mixer/ctl[@name="TX5 HPF cut off"]' "CF_NEG_3DB_4HZ"
PSXCF -u $PSF '/mixer/ctl[@name="RX HPH Mode"]' "CLS_H_HIFI"
PSXCF -u $PSF '/mixer/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="hph-hifi-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="hph-highquality-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="hph-lowpower-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="hph-class-ab-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
else
PSXCF -s $PSF '/mixer/ctl[@name="RX1 HPF cut off"]' "MIN_3DB_4Hz"
PSXCF -s $PSF '/mixer/ctl[@name="RX2 HPF cut off"]' "MIN_3DB_4Hz"
PSXCF -s $PSF '/mixer/ctl[@name="RX3 HPF cut off"]' "MIN_3DB_4Hz"
PSXCF -s $PSF '/mixer/ctl[@name="RX4 HPF cut off"]' "MIN_3DB_4Hz"
PSXCF -s $PSF '/mixer/ctl[@name="RX5 HPF cut off"]' "MIN_3DB_4Hz"
PSXCF -s $PSF '/mixer/ctl[@name="TX1 HPF cut off"]' "MIN_3DB_4Hz"
PSXCF -s $PSF '/mixer/ctl[@name="TX2 HPF cut off"]' "MIN_3DB_4Hz"
PSXCF -s $PSF '/mixer/ctl[@name="TX3 HPF cut off"]' "MIN_3DB_4Hz"
PSXCF -s $PSF '/mixer/ctl[@name="TX4 HPF cut off"]' "MIN_3DB_4Hz"
PSXCF -s $PSF '/mixer/ctl[@name="TX5 HPF cut off"]' "MIN_3DB_4Hz"
PSXCF -u $PSF '/mixer/ctl[@name="RX HPH Mode"]' "HD2"
PSXCF -u $PSF '/mixer/ctl[@name="RX HPH HD2 Mode"]' "On"
fi
UIP "$MSGFFAP"
fi
done
}

PATCH_AUDIO_CODEC () {
UIP "Start PATCH_AUDIO_CODEC" "$MSGPNF"
for FACXML in $ACXML; do
if [ -f $MAGISKMP$FACXML ]; then
UIP "Found $FACXML" "Patching..."
PSF="$MODPATH/$MODID$FACXML"
PSXCF -u $PSF '/configs/property[@name="audio.offload.disable"]' "false"
PSXCF -u $PSF '/configs/property[@name="audio.offload.min.duration.secs"]' "30"
PSXCF -u $PSF '/configs/property[@name="persist.vendor.audio.sva.conc.enabled"]' "false"
PSXCF -u $PSF '/configs/property[@name="persist.vendor.audio.va_concurrency_enabled"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.av.streaming.offload.enable"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.offload.track.enable"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.offload.multiple.enabled"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.rec.playback.conc.disabled"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.voice.conc.fallbackpath"]' ""
PSXCF -u $PSF '/configs/property[@name="vendor.voice.dsd.playback.conc.disabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.voice.path.for.pcm.voip"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.voice.playback.conc.disabled"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.voice.record.conc.disabled"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.voice.voip.conc.disabled"]' "false"
PSXCF -u $PSF '/configs/property[@name="audio_extn_formats_enabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="audio_extn_hdmi_spk_enabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="use_xml_audio_policy_conf"]' "true"
PSXCF -u $PSF '/configs/property[@name="voice_concurrency"]' "false"
PSXCF -u $PSF '/configs/property[@name="afe_proxy_enabled"]' "false"
PSXCF -u $PSF '/configs/property[@name="compress_voip_enabled"]' "false"
PSXCF -u $PSF '/configs/property[@name="fm_power_opt"]' "true"
PSXCF -u $PSF '/configs/property[@name="record_play_concurrency"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.use.sw.alac.decoder"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.use.sw.ape.decoder"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.use.sw.mpegh.decoder"]' "false"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.flac.sw.decoder.24bit"]' "true"
PSXCF -u $PSF '/configs/property[@name="vendor.audio.hw.aac.encoder"]' "false"
PSXCF -u $PSF '/configs/property[@name="aac_adts_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="alac_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="ape_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="flac_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="pcm_offload_enabled_16"]' "false"
PSXCF -u $PSF '/configs/property[@name="pcm_offload_enabled_24"]' "false"
PSXCF -u $PSF '/configs/property[@name="qti_flac_decoder"]' "true"
PSXCF -u $PSF '/configs/property[@name="vorbis_offload_enabled"]' "true"
PSXCF -u $PSF '/configs/property[@name="wma_offload_enabled"]' "true"
UIP "$MSGFFAP"
fi
done
}

PATCH_DEVICE_FEATURES () {
UIP "Start PATCH_DEVICE_FEATURES" "$MSGPNF"
for ODEFE in $SDEVFE $VDEVFE; do
if [ -f $MAGISKMP$ODEFE ]; then
UIP "Found $ODEFE" "Patching..."
PDF="$MODPATH/$MODID$ODEFE"
mkdir -p `dirname $PDF`
cp -f $MAGISKMP$ODEFE $PDF
sed -i 's/\t/  /g' $PDF
case $1 in
-nl) PSXCF -s $PDF '/features/bool[@name="support_a2dp_latency"]' "true"
PSXCF -s $PDF '/features/bool[@name="support_samplerate_48000"]' "true"
PSXCF -s $PDF '/features/bool[@name="support_samplerate_96000"]' "true"
PSXCF -s $PDF '/features/bool[@name="support_samplerate_192000"]' "true"
PSXCF -s $PDF '/features/bool[@name="support_low_latency"]' "true"
PSXCF -s $PDF '/features/bool[@name="support_mid_latency"]' "false"
PSXCF -s $PDF '/features/bool[@name="support_high_latency"]' "false"
PSXCF -s $PDF '/features/bool[@name="support_interview_record_param"]' "false";;
-aist) sed -i 's/name="btdebug_enabled">true</name="btdebug_enabled">false</g' $PDF
sed -i 's/name="support_record_param">false</name="support_record_param">true</g' $PDF
sed -i 's/name="support_interview_record_param">false</name="support_interview_record_param">true</g' $PDF
sed -i 's/name="support_hd_record_param">false</name="support_hd_record_param">true</g' $PDF
sed -i 's/name="support_voip_record">false</name="support_voip_record">true</g' $PDF
sed -i 's/name="support_dolby">false</name="support_dolby">true</g' $PDF
sed -i 's/name="support_hifi">false</name="support_hifi">true</g' $PDF
sed -i 's/name="support_feedback_level">false</name="support_feedback_level">true</g' $PDF
sed -i 's/name="support_media_feedback">false</name="support_media_feedback">true</g' $PDF
sed -i 's/name="support_camera_audio_focus">false</name="support_camera_audio_focus">true</g' $PDF
sed -i 's/name="support_lhdc_offload">false</name="support_lhdc_offload">true</g' $PDF
sed -i 's/name="support_a2dp_latency">false</name="support_a2dp_latency">true</g' $PDF
sed -i 's/name="support_sound_assist">false</name="support_sound_assist">true</g' $PDF
sed -i 's/name="support_truetone">false</name="support_truetone">true</g' $PDF
sed -i 's/name="support_new_silentmode">false</name="support_new_silentmode">true</g' $PDF
sed -i 's/name="support_audio_share">true</name="support_audio_share">false</g' $PDF
sed -i 's/name="support_qcom_sound">false</name="support_qcom_sound">true</g' $PDF
sed -i 's/name="support_24bit_record">false</name="support_24bit_record">true</g' $PDF
sed -i 's/name="support_audio_loopback">false</name="support_audio_loopback">true</g' $PDF
sed -i 's/name="support_bluetooth_fast_connect">false</name="support_bluetooth_fast_connect">true</g' $PDF
sed -i 's/name="support_adv_audio_unicast">false</name="support_adv_audio_unicast">true</g' $PDF
sed -i 's/name="support_adv_audio_bca">false</name="support_adv_audio_bca">true</g' $PDF
sed -i 's/name="support_adv_audio_bcs">false</name="support_adv_audio_bcs">true</g' $PDF
sed -i 's/name="support_phone_call_noise_suppression">false</name="support_phone_call_noise_suppression">true</g' $PDF
sed -i 's/name="support_camera_audio_focus">false</name="support_camera_audio_focus">true</g' $PDF
sed -i '/<features>/a\
    <bool name="support_adv_audio_unicast">true</bool>\
    <bool name="support_adv_audio_bca">true</bool>\
    <bool name="support_adv_audio_bcs">true</bool>\
    <bool name="support_lhdc_offload">true</bool>\
    <bool name="support_audio_share">false</bool>\
	<bool name="support_voip_record">true</bool>\
    <bool name="support_qcom_sound">true</bool>\
    <bool name="support_main_xiaoai">true</bool>\
    <bool name="support_24bit_record">true</bool>' $PDF
esac
UIP "$MSGFFAP"
fi
done
}

PATCH_DIRAC () {
UIP "Start PATCH_DIRAC" "$MSGPNF"
for FAECONFXML in $AECONFXML; do
if [ -f $MAGISKMP$FAECONFXML ]; then
UIP "Found $FAECONFXML" "Patching..."
PSF="$MODPATH/$MODID$FAECONFXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FAECONFXML $PSF
PSXCF -osp "$PSF"
PSXCF -aae "dirac_gef" "dirac_gef" "libdiraceffect.so" "3799d6d1-22c5-43c3-b3ec-d664cf8d2f0d"
PSXCF -post "$PSF" "music" "dirac_gef"
UIP "$MSGFFAP"
fi
done
mkdir -p $MODPATH/$MODID$MIPSVEDC $MODPATH/$MODID$MIPSVLRA $MODPATH/$MODID$MIPSVLS
cp -f $DIRAC/diracvdd.bin $MODPATH/$MODID$MIPSVE
cp -f $DIRAC/interfacedb $MODPATH/$MODID$MIPSVEDC
cp -f $DIRAC/dirac_resource.dar $MODPATH/$MODID$MIPSVLRA
cp -f $DIRAC/libdirac-capiv2.so $MODPATH/$MODID$MIPSVLRA/dirac.so
cp -f $DIRAC/libdirac-capiv2.so $MODPATH/$MODID$MIPSVLRA
cp -f $DIRAC/libdiraceffect.so $MODPATH/$MODID$MIPSVLS
echo -e "\n# Patch Dirac
persist.dirac.acs.controller=gef
persist.dirac.gef.oppo.syss=true
persist.dirac.config=64
persist.dirac.gef.exs.did=50,50
persist.dirac.gef.ext.did=750,750,750,750
persist.dirac.gef.ins.did=50,50,50
persist.dirac.gef.int.did=750,750,750,750
persist.dirac.gef.ext.appt=0x00011130,0x00011134,0x00011136
persist.dirac.gef.exs.appt=0x00011130,0x00011131
persist.dirac.gef.int.appt=0x00011130,0x00011134,0x00011136
persist.dirac.gef.ins.appt=0x00011130,0x00011131
persist.dirac.gef.exs.mid=268512739
persist.dirac.gef.ext.mid=268512737
persist.dirac.gef.ins.mid=268512738
persist.dirac.gef.int.mid=268512736
persist.dirac.path=/vendor/etc/dirac
ro.dirac.acs.storeSettings=1
persist.dirac.acs.ignore_error=1
ro.audio.soundfx.dirac=true
persist.audio.dirac.speaker=true
persist.audio.dirac.eq=5.0,4.0,3.0,3.0,4.0,1.0,0.0
persist.audio.dirac.headset=1
persist.audio.dirac.music.state=1" >> $MODPATH/$MODID/system.prop
}

PATCH_MIXER () {
UIP "Start PATCH_MIXER" "$MSGPNF"
case $1 in
-nl) if [ "$RN5PRO" ] || [ "$MI9" ] || [ "$MI8" ] || [ "$MI8P" ] || [ "$MI9P" ] || [ "$MIA2" ]; then echo -e "\n# PATCH MIXER\nro.sound.alsa=TAS2557" >> $MODPATH/$MODID/system.prop; fi
for FMPATHS in $MPATHS; do
if [ -f $MAGISKMP$FMPATHS ]; then
UIP "Found $FMPATHS" "Patching..."
PSF="$MODPATH/$MODID$FMPATHS"
if [ "$RN5PRO" ] || [ "$MI9" ] || [ "$MI8" ] || [ "$MI8P" ] || [ "$MI9P" ] || [ "$MIA2" ]; then
PSXCF -s $PSF '/mixer/ctl[@name="TAS2557 ClassD Edge"]' "7"
PSXCF -s $PSF '/mixer/ctl[@name="TAS2557 Volume"]' "30"
fi
PSXCF -u $PSF '/mixer/ctl[@name="Tfa Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="TFA Profile"]' "music"
PSXCF -s $PSF '/mixer/ctl[@name="DK Profile"]' "receiver"
PSXCF -s $PSF '/mixer/ctl[@name="TFA987X_ALGO_STATUS"]' "ENABLE"
PSXCF -s $PSF '/mixer/ctl[@name="TFA987X_TX_ENABLE"]' "ENABLE"
PSXCF -s $PSF '/mixer/ctl[@name="headphones"]/ctl[@name="PowerCtrl"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT1 MIX3 DSD HPHL Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT2 MIX3 DSD HPHR Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="DSD_L Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="DSD_R Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT0 DEM MUX"]' "CLSH_DSM_OUT"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT1 DEM MUX"]' "CLSH_DSM_OUT"
PSXCF -s $PSF '/mixer/ctl[@name="RCV AMP PCM Gain"]' "20"
PSXCF -s $PSF '/mixer/ctl[@name="AMP PCM Gain"]' "20"
PSXCF -s $PSF '/mixer/ctl[@name="RCV Boost Target Voltage"]' "170"
PSXCF -s $PSF '/mixer/ctl[@name="Boost Target Voltage"]' "170"
PSXCF -s $PSF '/mixer/ctl[@name="Amp DSP Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="BDE AMP Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="Amp Volume Location"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="Ext Spk Boost"]' "ENABLE"
PSXCF -s $PSF '/mixer/ctl[@name="PowerCtrl"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Adsp Working Mode"]' "full"
PSXCF -s $PSF '/mixer/ctl[@name="Adsp Working Mode"]' "full"
PSXCF -s $PSF '/mixer/ctl[@name="RX_Native"]' "ON"
PSXCF -s $PSF '/mixer/ctl[@name="HPH Idle Detect"]' "ON"
PSXCF -s $PSF '/mixer/ctl[@name="Set Custom Stereo OnOff"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="HiFi Function"]' "On"
PSXCF -s $PSF '/mixer/ctl[@name="HiFi Filter"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="A2DP_SLIM7_UL_HL Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM7_RX_DL_HL Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="App Type Gain"]' "8192"
PSXCF -s $PSF '/mixer/ctl[@name="Audiosphere Enable"]' "On"
PSXCF -s $PSF '/mixer/ctl[@name="MSM ASphere Set Param"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="RX_Softclip Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_Softclip0 Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_Softclip1 Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="Load acoustic model"]' "1"
if [ "$POCOX3" ]; then
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X PLAYBACK VOLUME LEFT"]' "80"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X LIM MAX ATTN LEFT"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X LIM INFLECTION POINT LEFT"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X LIM ATTACT RATE LEFT"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X LIM RELEASE RATE LEFT"]' "7"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X LIM ATTACK STEP LEFT"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X LIM RELEASE STEP LEFT"]' "3"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X RX MODE LEFT"]' "Speaker"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X BOOST VOLTAGE LEFT"]' "15"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X BOOST CURRENT LEFT"]' "70"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X PLAYBACK VOLUME RIGHT"]' "80"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X LIM MAX ATTN RIGHT"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X LIM INFLECTION POINT RIGHT"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X LIM ATTACT RATE RIGHT"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X LIM RELEASE RATE RIGHT"]' "7"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X LIM ATTACK STEP RIGHT"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X LIM RELEASE STEP RIGHT"]' "3"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X BOOST VOLTAGE RIGHT"]' "15"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X BOOST CURRENT RIGHT"]' "68"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X VBAT LPF LEFT"]' "DISABLE"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256X VBAT LPF RIGHT"]' "DISABLE"
PSXCF -s $PSF '/mixer/ctl[@name="TAS256x Profile id"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="TAS25XX_SMARTPA_ENABLE"]' "ENABLE"
PSXCF -s $PSF '/mixer/ctl[@name="Amp Output Level"]' "22"
PSXCF -s $PSF '/mixer/ctl[@name="TAS25XX_ALGO_PROFILE"]' "MUSIC"
fi
if [ "$RN10PRO" ] || [ "$RN10PROMAX" ]; then
PSXCF -s $PSF '/mixer/ctl[@name="aw882_xx_rx_switch"]' "Enable"
PSXCF -s $PSF '/mixer/ctl[@name="aw882_xx_tx_switch"]' "Enable"
PSXCF -s $PSF '/mixer/ctl[@name="aw882_copp_switch"]' "Enable"
PSXCF -s $PSF '/mixer/ctl[@name="aw_dev_0_prof"]' "Receiver"
PSXCF -s $PSF '/mixer/ctl[@name="aw_dev_0_switch"]' "Enable"
PSXCF -s $PSF '/mixer/ctl[@name="aw_dev_1_prof"]' "Receiver"
PSXCF -s $PSF '/mixer/ctl[@name="aw_dev_1_switch"]' "Enable"
fi
UIP "$MSGFFAP"
fi
done;;
-aist) for FMPATHS in $MPATHS; do
if [ -f $MAGISKMP$FMPATHS ]; then
UIP "Found $FMPATHS" "Patching..."
PSF="$MODPATH/$MODID$FMPATHS"
sed -i 's/COMP Switch" value="1"/COMP Switch" value="0"/g' $PSF
sed -i 's/COMP0 Switch" value="1"/COMP0 Switch" value="0"/g' $PSF
sed -i 's/COMP1 Switch" value="1"/COMP1 Switch" value="0"/g' $PSF
sed -i 's/COMP2 Switch" value="1"/COMP2 Switch" value="0"/g' $PSF
sed -i 's/COMP3 Switch" value="1"/COMP3 Switch" value="0"/g' $PSF
sed -i 's/COMP4 Switch" value="1"/COMP4 Switch" value="0"/g' $PSF
sed -i 's/COMP5 Switch" value="1"/COMP5 Switch" value="0"/g' $PSF
sed -i 's/COMP6 Switch" value="1"/COMP6 Switch" value="0"/g' $PSF
sed -i 's/COMP7 Switch" value="1"/COMP7 Switch" value="0"/g' $PSF
sed -i 's/COMP8 Switch" value="1"/COMP8 Switch" value="0"/g' $PSF
sed -i 's/Softclip0 Enable" value="1"/Softclip0 Enable" value="0"/g' $PSF
sed -i 's/Softclip1 Enable" value="1"/Softclip1 Enable" value="0"/g' $PSF
sed -i 's/Softclip2 Enable" value="1"/Softclip2 Enable" value="0"/g' $PSF
sed -i 's/Softclip3 Enable" value="1"/Softclip3 Enable" value="0"/g' $PSF
sed -i 's/Softclip4 Enable" value="1"/Softclip4 Enable" value="0"/g' $PSF
sed -i 's/Softclip5 Enable" value="1"/Softclip5 Enable" value="0"/g' $PSF
sed -i 's/Softclip6 Enable" value="1"/Softclip6 Enable" value="0"/g' $PSF
sed -i 's/Softclip7 Enable" value="1"/Softclip7 Enable" value="0"/g' $PSF
sed -i 's/Softclip8 Enable" value="1"/Softclip8 Enable" value="0"/g' $PSF
sed -i 's/SpkrLeft BOOST Switch" value="1"/SpkrLeft BOOST Switch" value="0"/g' $PSF
sed -i 's/SpkrRight BOOST Switch" value="1"/SpkrRight BOOST Switch" value="0"/g' $PSF
sed -i 's/SpkrLeft SWR DAC_Port Switch" value="1"/SpkrLeft SWR DAC_Port Switch" value="0"/g' $PSF
sed -i 's/SpkrRight SWR DAC_Port Switch" value="1"/SpkrRight SWR DAC_Port Switch" value="0"/g' $PSF
sed -i 's/HPHL_RDAC Switch" value="0"/HPHL_RDAC Switch" value="1"/g' $PSF
sed -i 's/HPHR_RDAC Switch" value="0"/HPHR_RDAC Switch" value="1"/g' $PSF
sed -i 's/Boost Class-H Tracking Enable" value="0"/Boost Class-H Tracking Enable" value="1"/g' $PSF
sed -i 's/DRE DRE Switch" value="0"/DRE DRE Switch" value="1"/g' $PSF
sed -i 's/"HFP_SLIM7_UL_HL Switch" value="1"/"HFP_SLIM7_UL_HL Switch" value="0"/g' $PSF
sed -i 's/"HFP_PRI_AUX_UL_HL Switch" value="1"/"HFP_PRI_AUX_UL_HL Switch" value="0"/g' $PSF
sed -i 's/"HFP_AUX_UL_HL Switch" value="1"/"HFP_AUX_UL_HL Switch" value="0"/g' $PSF
sed -i 's/"HFP_INT_UL_HL Switch" value="0"/"HFP_INT_UL_HL Switch" value="0"/g' $PSF
sed -i 's/"SCO_SLIM7_DL_HL Switch" value="1"/"SCO_SLIM7_DL_HL Switch" value="0"/g' $PSF
sed -i 's/"SLIMBUS7_DL_HL Switch" value="1"/"SLIMBUS7_DL_HL Switch" value="0"/g' $PSF
sed -i 's/"SLIM7_RX_DL_HL Switch" value="1"/"SLIM7_RX_DL_HL Switch" value="0"/g' $PSF
sed -i 's/"PCM_RX_DL_HL Switch" value="1"/"PCM_RX_DL_HL Switch" value="0"/g' $PSF
sed -i 's/"USB_DL_HL Switch" value="1"/"USB_DL_HL Switch" value="0"/g' $PSF
sed -i 's/"A2DP_SLIM7_UL_HL Switch" value="0"/"A2DP_SLIM7_UL_HL Switch" value="1"/g' $PSF
sed -i 's/"RX INT0 DEM MUX" value="NORMAL_DSM_OUT"/"RX INT0 DEM MUX" value="NORMAL_DSM_OUT"/g' $PSF
sed -i 's/"RX INT1 DEM MUX" value="NORMAL_DSM_OUT"/"RX INT1 DEM MUX" value="NORMAL_DSM_OUT"/g' $PSF
sed -i 's/"RX INT2 DEM MUX" value="NORMAL_DSM_OUT"/"RX INT2 DEM MUX" value="NORMAL_DSM_OUT"/g' $PSF
sed -i 's/"RX INT3 DEM MUX" value="NORMAL_DSM_OUT"/"RX INT3 DEM MUX" value="NORMAL_DSM_OUT"/g' $PSF
sed -i 's/"RX INT4 DEM MUX" value="NORMAL_DSM_OUT"/"RX INT4 DEM MUX" value="NORMAL_DSM_OUT"/g' $PSF
if $HIRES; then
PSXCF -u $PSF '/mixer/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="top-speaker"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="bottom-speaker"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="hph-hifi-mode"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -s $PSF '/mixer/path[@name="hph-hifi-mode"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="hph-highquality-mode"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -s $PSF '/mixer/path[@name="hph-highquality-mode"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="hph-lowpower-mode"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -s $PSF '/mixer/path[@name="hph-lowpower-mode"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="hph-class-ab-mode"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -s $PSF '/mixer/path[@name="hph-class-ab-mode"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="voice-headset"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -s $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="RX HPH Mode"]' "CLS_AB"
PSXCF -u $PSF '/mixer/path[@name="speaker"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="top-speaker"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="bottom-speaker"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="speaker-mono-2"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="hph-hifi-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -s $PSF '/mixer/path[@name="hph-hifi-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="hph-highquality-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -s $PSF '/mixer/path[@name="hph-highquality-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="hph-lowpower-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -s $PSF '/mixer/path[@name="hph-lowpower-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="hph-class-ab-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -s $PSF '/mixer/path[@name="hph-class-ab-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="voice-headset"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -s $PSF '/mixer/path[@name="voice-headset"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PSXCF -s $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
else
PSXCF -s $PSF '/mixer/ctl[@name="RX_HPH_PWR_MODE"]' "HIRES"
PSXCF -u $PSF '/mixer/ctl[@name="RX HPH Mode"]' "HD2"
PSXCF -u $PSF '/mixer/path[@name="headphones"]/ctl[@name="RX_HPH_PWR_MODE"]' "HIRES"
fi
PSXCF -s $PSF '/mixer/ctl[@name="VBoost Ctrl"]' "AlwaysOff"
PSXCF -u $PSF '/mixer/ctl[@name="HPHL"]' "Switch"
PSXCF -u $PSF '/mixer/ctl[@name="HPHR"]' "Switch"
PSXCF -u $PSF '/mixer/ctl[@name="Load acoustic model"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference earpiece"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference earpiece"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference headphones"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference headphones"]/ctl[@name="EC Reference SampleRate"]' "384000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference headset"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference headset"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference display-port"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference display-port"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference display-port1"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference display-port1"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference headphones-44.1"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference headphones-44.1"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference speaker"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference speaker"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference bt-sco"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference bt-sco"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference bt-sco-wb"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference bt-sco-wb"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference bt-sco-swb"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference bt-sco-swb"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference bt-sco-headset"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference bt-sco-headset"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference usb-headphones"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference usb-headphones"]/ctl[@name="EC Reference SampleRate"]' "384000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip earpiece"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip earpiece"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip headphones"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip headphones"]/ctl[@name="EC Reference SampleRate"]' "384000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip handset"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip handset"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip display-port"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip display-port"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip display-port1"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip display-port1"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip speaker"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip speaker"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip bt-sco-headset"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip bt-sco-headset"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip usb-headphones"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip usb-headphones"]/ctl[@name="EC Reference SampleRate"]' "384000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip bt-sco"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip bt-sco"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip bt-sco-wb"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip bt-sco-wb"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip bt-sco-swb"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference-voip bt-sco-swb"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -u $PSF '/mixer/path[@name="echo-reference a2dp"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/path[@name="echo-reference a2dp"]/ctl[@name="EC Reference SampleRate"]' "384000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference earpiece"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference earpiece"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference headphones"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference headphones"]/ctl[@name="EC Reference SampleRate"]' "384000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference headset"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference headset"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference display-port"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference display-port"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference display-port1"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference display-port1"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference headphones-44.1"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference headphones-44.1"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference speaker"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference speaker"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference bt-sco"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference bt-sco"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference bt-sco-wb"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference bt-sco-wb"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference bt-sco-swb"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference bt-sco-swb"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference bt-sco-headset"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference bt-sco-headset"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference usb-headphones"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference usb-headphones"]/ctl[@name="EC Reference SampleRate"]' "384000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip earpiece"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip earpiece"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip headphones"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip headphones"]/ctl[@name="EC Reference SampleRate"]' "384000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip handset"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip handset"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip display-port"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip display-port"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip display-port1"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip display-port1"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip speaker"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip speaker"]/ctl[@name="EC Reference SampleRate"]' "192000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip bt-sco-headset"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip bt-sco-headset"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip usb-headphones"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip usb-headphones"]/ctl[@name="EC Reference SampleRate"]' "384000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip bt-sco"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip bt-sco"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip bt-sco-wb"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip bt-sco-wb"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip bt-sco-swb"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference-voip bt-sco-swb"]/ctl[@name="EC Reference SampleRate"]' "48000"
PSXCF -s $PSF '/mixer/path[@name="echo-reference a2dp"]/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/path[@name="echo-reference a2dp"]/ctl[@name="EC Reference SampleRate"]' "384000"
PSXCF -u $PSF '/mixer/ctl[@name="Voice Sidetone Enable"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Audiosphere Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="Audiosphere Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="Set HPX OnOff"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="Set HPX OnOff"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Set HPX ActiveBe"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="Set HPX ActiveBe"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="DS2 OnOff"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="DS2 OnOff"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="HiFi Filter"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="HiFi Filter"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="SmartPA Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="SmartPA Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="THD3 Compensation"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="THD3 Compensation"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="MSM ASphere Set Param"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="MSM ASphere Set Param"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Codec Wideband"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="Codec Wideband"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="Set Custom Stereo OnOff"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="Set Custom Stereo OnOff"]' "0"
PSXCF -u $PSF '/mixer/ctl[@name="HiFi Function"]' "On"
PSXCF -s $PSF '/mixer/ctl[@name="HiFi Function"]' "On"
PSXCF -u $PSF '/mixer/ctl[@name="Custom Filter"]' "ON"
PSXCF -s $PSF '/mixer/ctl[@name="Custom Filter"]' "ON"
PSXCF -u $PSF '/mixer/ctl[@name="Filter Shape"]' "Slow Rolloff"
PSXCF -s $PSF '/mixer/ctl[@name="Filter Shape"]' "Slow Rolloff"
PSXCF -u $PSF '/mixer/ctl[@name="Virtual Bass Boost"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="Virtual Bass Boost"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_RX0 EC_HQ Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_RX1 EC_HQ Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_RX3 EC_HQ Switch"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="WSA_RX4 EC_HQ Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT1 SEC MIX HPHL Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT2 SEC MIX HPHR Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT1 MIX3 DSD HPHL Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX INT2 MIX3 DSD HPHR Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="HPH Idle Detect"]' "ON"
PSXCF -s $PSF '/mixer/ctl[@name="HPH Idle Detect"]' "ON"
PSXCF -u $PSF '/mixer/ctl[@name="SLIM_7_RX Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/ctl[@name="SLIM_7_RX SampleRate"]' "KHZ_192"
PSXCF -u $PSF '/mixer/ctl[@name="SLIM_7_RX Channels"]' "Two"
PSXCF -u $PSF '/mixer/ctl[@name="SLIMBUS_7_RX Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/ctl[@name="SLIMBUS_7_RX SampleRate"]' "KHZ_192"
PSXCF -u $PSF '/mixer/ctl[@name="SLIMBUS_7_RX Channels"]' "Two"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM_7_RX Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM_7_RX SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM_7_RX Channels"]' "Two"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS_7_RX Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS_7_RX SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS_7_RX Channels"]' "Two"
PSXCF -u $PSF '/mixer/ctl[@name="SLIM7_RX ADM Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/ctl[@name="SLIM7_RX ADM SampleRate"]' "KHZ_192"
PSXCF -u $PSF '/mixer/ctl[@name="SLIM7_RX ADM Channels"]' "Two"
PSXCF -u $PSF '/mixer/ctl[@name="SLIMBUS7_RX ADM Format"]' "S24_LE"
PSXCF -u $PSF '/mixer/ctl[@name="SLIMBUS7_RX ADM SampleRate"]' "KHZ_192"
PSXCF -u $PSF '/mixer/ctl[@name="SLIMBUS7_RX ADM Channels"]' "Two"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM7_RX ADM Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM7_RX ADM SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM7_RX ADM Channels"]' "Two"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS7_RX ADM Format"]' "S24_LE"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS7_RX ADM SampleRate"]' "KHZ_192"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS7_RX ADM Channels"]' "Two"
PSXCF -s $PSF '/mixer/ctl[@name="SCO_SLIM7_DL_HL Switch"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="SLIMBUS7_DL_HL Switch"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="SLIM7_RX_DL_HL Switch"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="PCM_RX_DL_HL Switch"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="USB_DL_HL Switch"]' "0"
PSXCF -s $PSF '/mixer/ctl[@name="A2DP_SLIM7_UL_HL Switch"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="AUX_HPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="AUX_HPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="A2DP_HPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="A2DP_HPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="BT_HPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="BT_HPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="HPF Enable"]' "Off"
PSXCF -s $PSF '/mixer/ctl[@name="HPF Enable"]' "Off"
PSXCF -u $PSF '/mixer/ctl[@name="LDOH Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="LDOH Enable"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="ST Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="ST Enable"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="BDE Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="BDE Enable"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="Amp DSP Enable"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="Amp DSP Enable"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="DRE En"]' "1"
PSXCF -s $PSF '/mixer/ctl[@name="DRE En"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="RX_FIR Filter"]' "OFF"
PSXCF -s $PSF '/mixer/ctl[@name="RX_FIR Filter"]' "OFF"
PSXCF -u $PSF '/mixer/path[@name="headphones-hifi-filter"]/ctl[@name="RX_FIR Filter"]' "OFF"
PSXCF -s $PSF '/mixer/path[@name="headphones-hifi-filter"]/ctl[@name="RX_FIR Filter"]' "OFF"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="AFE Input Channels"]' "Two"
PSXCF -s $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="AFE Input Channels"]' "Two"
PSXCF -u $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="TWS Channel Mode"]' "Two"
PSXCF -s $PSF '/mixer/path[@name="bt-a2dp"]/ctl[@name="TWS Channel Mode"]' "Two"
PSXCF -u $PSF '/mixer/ctl[@name="TWS Channel Mode"]' "Two"
PSXCF -s $PSF '/mixer/ctl[@name="TWS Channel Mode"]' "Two"
UIP "$MSGFFAP"
fi
done;;
esac
}

PATCH_FIX_MICRO () {
UIP "Start PATCH_FIX_MICRO" "$MSGPNF"
for FMPATHS in $MPATHS; do
if [ -f $MAGISKMP$FMPATHS ]; then
UIP "Found $FMPATHS" "Patching..."
PSF="$MODPATH/$MODID$FMPATHS"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band0"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band1"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band2"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band3"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band4"]' "1"
PSXCF -u $PSF '/mixer/ctl[@name="IIR0 Enable Band5"]' "1"
UIP "$MSGFFAP"
fi
done
}

PATCH_MEDIA_CODECS () {
UIP "Start PATCH_MEDIA_CODECS" "$MSGPNF"
for FMCGAX in $MCGAX; do
if [ -f $MAGISKMP$FMCGAX ]; then
UIP "Found $FMCGAX" "Patching..."
PSF="$MODPATH/$MODID$FMCGAX"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FMCGAX $PSF
AF="aac ac3 ac4 alac alaw amrnb amrwb ape dsd dsp eac3 eac3_joc flac mlaw mp3 mpegh opus raw vorbis"
sed -i "/name=\"sample-rate\"/d;/name=\"quality\"/d;/name=\"bitrate\"/d;/name=\"quality\"/d;/name=\"channel-count\"/d;/name=\"quality\"/d;/name=\"concurrent-instances\"/d;/name=\"quality\"/d;/name=\"complexity\"/d;/name=\"bitrate-modes\"/d" $PSF
for f in $AF; do
for t in encoder decoder; do
case $f in
aac | alac | ape | dsd | dsp | flac | mp3 | mpegh | opus | raw | vorbis) CC="7.1";;
ac3 ) CC="6";;
ac4 ) CC="2";;
alaw | amrnb | amrwb | mlaw) CC="1";;
eac3 | eac3_joc ) CC="8";;
esac
case $f in
aac | mp3 | mpegh | opus | raw) BR="1-210000000";;
ac3) BR="32000-640000";;
ac4) BR="16000-2688000";;
alac | ape | dsd | dsp | flac) BR="1-21000000";;
alaw | mlaw) BR="64000";;
amrnb) BR="4750-24400";;
amrwb) BR="6600-46850";;
eac3 | eac3_joc) BR="32000-6144000";;
vorbis) BR="32000-500000";;
esac
case $f in
aac) SR="7350,8000,11025,12000,16000,22050,24000,32000,44100,48000,96000,192000,384000";;
ac3 | eac3) SR="32000,44100,48000";;
ac4 | eac3_joc) SR="48000";;
alac | ape | dsd | dsp | flac) SR="1-210000000";;
alaw | mlaw) SR="8000-48000";;
amrnb) SR="8000";;
amrwb) SR="16000";;
mp3 | mpegh | opus) SR="8000,11025,12000,16000,22050,24000,32000,44100,48000,96000,192000,384000";;
raw) SR="8000-192000";;
vorbis) SR="8000-96000";;
esac
sed -i "s/\" >/\">/g;/$f.$t/,/c>/s/\">/\">\n            <Limit name=\"sample-rate\" ranges=\"$SR\" \/>/g;/$f.$t/,/c>/s/\">/\">\n            <Limit name=\"bitrate\" range=\"$BR\" \/>/g;/$f.$t/,/c>/s/\">/\">\n            <Limit name=\"channel-count\" max=\"$CC\" \/>/g;/$f.$t/,/c>/s/\">/\">\n            <Limit name=\"concurrent-instances\" max=\"10\" \/>/g;/$f.$t/,/c>/s/\">/\">\n            <Limit name=\"quality\" range=\"0-100\" default=\"100\" \/>/g;/$f.$t/,/c>/s/\">/\">\n            <Limit name=\"complexity\" range=\"0-10\" default=\"10\" \/>/g;s/\" >/\">/g;/$f.$t/,/c>/s/\">/\">\n            <Feature name=\"bitrate-modes\" value=\"CQ\" \/>/g" $PSF
done
done
UIP "$MSGFFAP"
fi
done
}

PATCH_AUDIO_POLICY () {
UIP "Start PATCH_AUDIO_POLICY" "$MSGPNF"
for FAIPAOPCONF in $AIPAOPCONF; do
if [ -f $MAGISKMP$FAIPAOPCONF ]; then
UIP "Found $FAIPAOPCONF" "Patching..."
PSF="$MODPATH/$MODID$FAIPAOPCONF"
sed -i '/deep_buffer_24/,+6d' $PSF
sed -i '/direct_pcm/,+6d' $PSF
sed -i 's/AUDIO_FORMAT_PCM_16_BIT_OFFLOAD|//g' $PSF
sed -i 's/AUDIO_FORMAT_PCM_24_BIT_OFFLOAD|//g' $PSF
sed -i 's/AUDIO_FORMAT_PCM_32_BIT_OFFLOAD|//g' $PSF
sed -i '/^outputs/a\
  deep_buffer_24 {\
    flags AUDIO_OUTPUT_FLAG_DEEP_BUFFER\
    formats AUDIO_FORMAT_PCM_24_BIT_PACKED\
    sampling_rates 48000\
    bit_width 24\
    app_type 69940\
  }\
  deep_buffer_24bit {\
    flags AUDIO_OUTPUT_FLAG_DEEP_BUFFER\
    formats AUDIO_FORMAT_PCM_24_BIT_PACKED\
    sampling_rates 48000\
    bit_width 24\
    app_type 69940\
  }\
  direct_pcm_16 {\
    flags AUDIO_OUTPUT_FLAG_DIRECT\
    formats AUDIO_FORMAT_PCM_16_BIT|AUDIO_FORMAT_PCM_24_BIT_PACKED|AUDIO_FORMAT_PCM_8_24_BIT|AUDIO_FORMAT_PCM_FLOAT|AUDIO_FORMAT_PCM_32_BIT\
    sampling_rates 44100|48000|88200|96000|176400|192000|352800|384000\
    bit_width 24\
    app_type 69936\
  }\
  direct_pcm_24 {\
    flags AUDIO_OUTPUT_FLAG_DIRECT\
    formats AUDIO_FORMAT_PCM_24_BIT_PACKED|AUDIO_FORMAT_PCM_8_24_BIT|AUDIO_FORMAT_PCM_FLOAT|AUDIO_FORMAT_PCM_32_BIT\
    sampling_rates 44100|48000|88200|96000|176400|192000|352800|384000\
    bit_width 24\
    app_type 69940\
  }\
  direct_pcm_32 {\
    flags AUDIO_OUTPUT_FLAG_DIRECT\
    formats AUDIO_FORMAT_PCM_FLOAT|AUDIO_FORMAT_PCM_32_BIT\
    sampling_rates 44100|48000|88200|96000|176400|192000|352800|384000\
    bit_width 32\
    app_type 69942\
  }' $PSF
sed -i '/AUDIO_FORMAT_MP3/a\
$MODID' $PSF
sed -i '/$MODID/,+1d' $PSF
sed -i '/AUDIO_FORMAT_MP3/a\
    sampling_rates 44100|48000|88200|96000|176400|192000|352800|384000' $PSF
sed -i 's/RAW/NONE/g' $PSF
sed -i 's/sampling_rates 44100|48000|88200|96000|176400|192000|352800|384000/sampling_rates 8000|11025|12000|16000|22050|24000|32000|44100|48000|88200|96000|176400|192000|352800|384000/g' $PSF
sed -i 's/sampling_rates 32000|44100|48000|88200|96000|176400|192000|352800/sampling_rates 8000|11025|12000|16000|22050|24000|32000|44100|48000|88200|96000|176400|192000|352800|384000/g' $PSF
UIP "$MSGFFAP"
fi
done
}

PATCH_AUDIO_POLICY_CONFIGURATION () {
UIP "Start PATCH_AUDIO_POLICY_CONFIGURATION" "$MSGPNF"
for FPCXML in $APCXML; do
if [ -f $MAGISKMP$FPCXML ]; then
UIP "Found $FPCXML" "Patching..."
PSF="$MODPATH/$MODID$FPCXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FPCXML $PSF
case $1 in
-nl) sed -i 's/speaker_drc_enabled="true"/speaker_drc_enabled="false"/g' $PSF;;
-aist) sed -i 's/samplingRates="32000,44100,48000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000,352800,384000"/g' $PSF
sed -i 's/samplingRates="32000,44100,48000,64000,88200,96000,128000,176400,192000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000,352800,384000"/g' $PSF
sed -i 's/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000,352800,384000"/g' $PSF
sed -i 's/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000,352800,384000"/g' $PSF
sed -i 's/samplingRates="44100,48000,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/g' $PSF
sed -i 's/samplingRates="44100,48000,88200,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/g' $PSF
sed -i 's/samplingRates="32000 44100 48000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000 352800 384000"/g' $PSF
sed -i 's/samplingRates="32000 44100 48000 64000 88200 96000 128000 176400 192000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000 352800 384000"/g' $PSF
sed -i 's/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000 352800 384000"/g' $PSF
sed -i 's/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000 352800 384000"/g' $PSF
sed -i 's/samplingRates="44100 48000 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/g' $PSF
sed -i 's/samplingRates="44100 48000 88200 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/g' $PSF
sed -i 's/channelMasks="AUDIO_CHANNEL_OUT_MONO,AUDIO_CHANNEL_OUT_STEREO,AUDIO_CHANNEL_OUT_2POINT1,AUDIO_CHANNEL_OUT_QUAD,AUDIO_CHANNEL_OUT_PENTA,AUDIO_CHANNEL_OUT_5POINT1"/channelMasks="AUDIO_CHANNEL_OUT_MONO,AUDIO_CHANNEL_OUT_STEREO,AUDIO_CHANNEL_OUT_2POINT1,AUDIO_CHANNEL_OUT_QUAD,AUDIO_CHANNEL_OUT_PENTA,AUDIO_CHANNEL_OUT_5POINT1,AUDIO_CHANNEL_OUT_6POINT1,AUDIO_CHANNEL_OUT_7POINT1"/g' $PSF
sed -i 's/channelMasks="AUDIO_CHANNEL_OUT_MONO AUDIO_CHANNEL_OUT_STEREO AUDIO_CHANNEL_OUT_2POINT1 AUDIO_CHANNEL_OUT_QUAD AUDIO_CHANNEL_OUT_PENTA AUDIO_CHANNEL_OUT_5POINT1"/channelMasks="AUDIO_CHANNEL_OUT_MONO AUDIO_CHANNEL_OUT_STEREO AUDIO_CHANNEL_OUT_2POINT1 AUDIO_CHANNEL_OUT_QUAD AUDIO_CHANNEL_OUT_PENTA AUDIO_CHANNEL_OUT_5POINT1 AUDIO_CHANNEL_OUT_6POINT1 AUDIO_CHANNEL_OUT_7POINT1"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="0" maxActiveCount="0"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="0" maxActiveCount="1"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="0" maxActiveCount="2"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="1" maxActiveCount="0"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="1" maxActiveCount="1"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="1" maxActiveCount="2"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="2" maxActiveCount="0"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="2" maxActiveCount="1"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/mixPort name="primary input" role="sink" maxOpenCount="2" maxActiveCount="2"/mixPort name="primary input" role="sink"/g' $PSF
sed -i 's/AUDIO_OUTPUT_FLAG_FAST|AUDIO_OUTPUT_FLAG_RAW/AUDIO_OUTPUT_FLAG_FAST/g' $PSF
sed -i 's/AUDIO_OUTPUT_FLAG_RAW|AUDIO_OUTPUT_FLAG_FAST/AUDIO_OUTPUT_FLAG_FAST/g' $PSF
sed -i 's/AUDIO_OUTPUT_FLAG_FAST AUDIO_OUTPUT_FLAG_RAW/AUDIO_OUTPUT_FLAG_FAST/g' $PSF
sed -i 's/AUDIO_OUTPUT_FLAG_RAW AUDIO_OUTPUT_FLAG_FAST/AUDIO_OUTPUT_FLAG_FAST/g' $PSF
sed -i '/channelMasks="AUDIO_CHANNEL_OUT_STEREO"/a\
\
\
\
\
' $PSF
sed -i '/channelMasks="AUDIO_CHANNEL_OUT_STEREO,AUDIO_CHANNEL_OUT_MONO"/a\
\
\
\
\
' $PSF
sed -i '/channelMasks="AUDIO_CHANNEL_OUT_STEREO AUDIO_CHANNEL_OUT_MONO"/a\
\
\
\
\
' $PSF
sed -i '/channelMasks="AUDIO_CHANNEL_OUT_MONO,AUDIO_CHANNEL_OUT_STEREO"/a\
\
\
\
\
' $PSF
sed -i '/channelMasks="AUDIO_CHANNEL_OUT_MONO AUDIO_CHANNEL_OUT_STEREO"/a\
\
\
\
\
' $PSF
sed -i '/AUDIO_OUTPUT_FLAG_DEEP_BUFFER/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"\
                             samplingRates="48000" channelMasks="AUDIO_CHANNEL_OUT_STEREO"/>\
$MODID' $PSF
sed -i '/AUDIO_OUTPUT_FLAG_VIRTUAL_DEEP_BUFFER/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"\
                             samplingRates="48000" channelMasks="AUDIO_CHANNEL_OUT_STEREO"/>\
$MODID' $PSF
sed -i '/AUDIO_DEVICE_OUT_EARPIECE/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_OUT_SPEAKER/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_OUT_WIRED/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_OUT_LINE/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_OUT_BLUETOOTH_SCO/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_OUT_TELEPHONY_TX/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_OUT_AUX_DIGITAL/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_OUT_PROXY/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_OUT_MULTIROUTE/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_OUT_FM/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_OUT_USB_DEVICE/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_OUT_USB_HEADSET/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_IN_BUILTIN_MIC/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_IN_BACK_MIC/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_IN_FM_TUNER/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_IN_WIRED_HEADSET/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_IN_BLUETOOTH_SCO/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_IN_TELEPHONY_RX/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_IN_USB/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_DEVICE_IN_PROXY/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>' $PSF
sed -i '/AUDIO_FORMAT_SBC/a\
                    <profile name="" format="dynamic"\
                             samplingRates="dynamic" channelMasks="dynamic"/>\
$MODID' $PSF
sed -i '/channelMasks="dynamic"/a\
\
\
\
\
' $PSF
sed -i '/encodedFormats="AUDIO_FORMAT_LHDC/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/encodedFormats="AUDIO_FORMAT_LHDC/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
sed -i '/encodedFormats="AUDIO_FORMAT_LDAC"/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/encodedFormats="AUDIO_FORMAT_LDAC"/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
sed -i '/encodedFormats="AUDIO_FORMAT_LC3"/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/encodedFormats="AUDIO_FORMAT_LC3"/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
sed -i '/encodedFormats="AUDIO_FORMAT_FORCE_AOSP"/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/encodedFormats="AUDIO_FORMAT_FORCE_AOSP"/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
sed -i '/encodedFormats="ldac_a2dp"/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/encodedFormats="ldac_a2dp"/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
sed -i '/AUDIO_DEVICE_OUT_USB_ACCESSORY/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/AUDIO_DEVICE_OUT_USB_ACCESSORY/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
sed -i '/name="usb_accessory output" role="source"/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/name="usb_accessory output" role="source"/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
sed -i 's/ AUDIO_FORMAT_LHDC_LL//g' $PSF
sed -i 's/AUDIO_FORMAT_LHDC/AUDIO_FORMAT_LHDC AUDIO_FORMAT_LHDC_LL/g' $PSF
sed -i '/$MODID/,+3d' $PSF;;
esac
UIP "$MSGFFAP"
fi
done
}

PATCH_IMPROVE_BLUETOOTH () {
UIP "Start PATCH_IMPROVE_BLUETOOTH"
case $1 in
-nl) echo -e "\n# Improve Bluetooth
audio.effect.a2dp.enable=1
audio.hw.aac.encoder=true
audio.hw.aac.decoder=true
vendor.audio.effect.a2dp.enable=1
vendor.audio.hw.aac.encoder=true
vendor.audio.hw.aac.decoder=true
ro.vendor.audio.hw.aac.encoder=true
ro.vendor.audio.hw.aac.decoder=true
qcom.hw.aac.encoder=true
qcom.hw.aac.decoder=true
persist.service.btui.use_aptx=1
persist.bt.enableAptXHD=true
persist.bt.a2dp.aptx_disable=false
persist.bt.a2dp.aptx_hd_disable=false
persist.bt.a2dp.aac_disable=false
persist.bt.sbc_hd_enabled=1
persist.vendor.btstack.enable.lpa=false
persist.vendor.bt.a2dp.aac_whitelist=false
persist.vendor.bt.aac_frm_ctl.enabled=true
persist.vendor.bt.aac_vbr_frm_ctl.enabled=true
persist.vendor.qcom.bluetooth.aac_frm_ctl.enabled=true
persist.bluetooth.sbc_hd_higher_bitrate=1
persist.sys.fflag.override.settings_bluetooth_hearing_aid=true" >> $MODPATH/$MODID/system.prop;;
-aist) for FBTCSCONF in $BTCSCONF; do
UIP "Found $FBTCSCONF" "Patching..."
PSF="$MODPATH/$MODID$FBTCSCONF"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FBTCSCONF $PSF
sed -i 's/\t/  /g' $PSF
sed -i 's/spiltA2dpSupported = false/spiltA2dpSupported = true/g' $PSF
sed -i 's/twspStateSupported = false/twspStateSupported = true/g' $PSF
sed -i 's/aacFrameCtlEnabled = false/aacFrameCtlEnabled = true/g' $PSF
UIP "$MSGFFAP"
done
for FBTSCONF in $BTSCONF; do
UIP "Found $FBTSCONF" "Patching..."
PSF="$MODPATH/$MODID$FBTSCONF"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FBTSCONF $PSF
sed -i 's/\t/  /g' $PSF
sed -i 's/TraceConf=true/TraceConf=false/g' $PSF
sed -i 's/TRC_BTM=2/TRC_BTM=0/g' $PSF
sed -i 's/TRC_HCI=2/TRC_HCI=0/g' $PSF
sed -i 's/TRC_L2CAP=2/TRC_L2CAP=0/g' $PSF
sed -i 's/TRC_RFCOMM=2/TRC_RFCOMM=0/g' $PSF
sed -i 's/TRC_OBEX=2/TRC_OBEX=0/g' $PSF
sed -i 's/TRC_AVCT=2/TRC_AVCT=0/g' $PSF
sed -i 's/TRC_AVDT=2/TRC_AVDT=0/g' $PSF
sed -i 's/TRC_AVRC=2/TRC_AVRC=0/g' $PSF
sed -i 's/TRC_AVDT_SCB=2/TRC_AVDT_SCB=0/g' $PSF
sed -i 's/TRC_AVDT_CCB=2/TRC_AVDT_CCB=0/g' $PSF
sed -i 's/TRC_A2D=2/TRC_A2D=0/g' $PSF
sed -i 's/TRC_SDP=2/TRC_SDP=0/g' $PSF
sed -i 's/TRC_SMP=2/TRC_SMP=0/g' $PSF
sed -i 's/TRC_BTAPP=2/TRC_BTAPP=0/g' $PSF
sed -i 's/TRC_BTIF=2/TRC_BTIF=0/g' $PSF
sed -i 's/TRC_BNEP=2/TRC_BNEP=0/g' $PSF
sed -i 's/TRC_PAN=2/TRC_PAN=0/g' $PSF
sed -i 's/TRC_HID_HOST=2/TRC_HID_HOST=0/g' $PSF
sed -i 's/TRC_HID_DEV=2/TRC_HID_DEV=0/g' $PSF
sed -i 's/TRC_GATT=2/TRC_GATT=0/g' $PSF
UIP "$MSGFFAP"
done;;
esac
}

PATCH_DOLBY () {
UIP "Start PATCH_DOLBY" "$MSGPNF"
for FDAXXML in $SDAXXML $VDAXXML; do
if [ -f $MAGISKMP$FDAXXML ]; then
UIP "Found $FDAXXML" "Patching..."
PSF="$MODPATH/$MODID$FDAXXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FDAXXML $PSF
sed -i 's/\t/  /g' $PSF
sed -i 's/mi-adaptive-virtualizer-steering-enable value="false"/mi-adaptive-virtualizer-steering-enable value="true"/g' $PSF
sed -i 's/mi-virtualizer-binaural-steering-enable value="true"/mi-virtualizer-binaural-steering-enable value="false"/g' $PSF
sed -i 's/bass-enhancer-enable value="false"/bass-enhancer-enable value="true"/g' $PSF
sed -i 's/bass-mbdrc-enable value="false"/bass-mbdrc-enable value="true"/g' $PSF
sed -i 's/bass-extraction-enable value="true"/bass-extraction-enable value="false"/g' $PSF
sed -i 's/virtual-bass-process-enable value="true"/virtual-bass-process-enable value="false"/g' $PSF
sed -i 's/global_setting virtual_bass_process="1"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="2"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="3"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="4"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="5"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="6"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="7"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="8"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="9"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="10"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="11"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="12"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="13"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="14"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/global_setting virtual_bass_process="15"/global_setting virtual_bass_process="0"/g' $PSF
sed -i 's/volume-leveler-compressor-enable value="true"/volume-leveler-compressor-enable value="false"/g' $PSF
sed -i 's/regulator-sibilance-suppress-enable value="true"/regulator-sibilance-suppress-enable value="false"/g' $PSF
sed -i 's/graphic-equalizer-enable value="false"/graphic-equalizer-enable value="true"/g' $PSF
sed -i 's/reverb-suppression-enable value="false"/reverb-suppression-enable value="true"/g' $PSF
sed -i 's/surround-decoder-enable value="false"/surround-decoder-enable value="true"/g' $PSF
sed -i 's/hearing-protection-enable value="true"/hearing-protection-enable value="false"/g' $PSF
sed -i 's/regulator-speaker-dist-enable value="true"/regulator-speaker-dist-enable value="false"/g' $PSF
sed -i 's/tuned_rate="48000"/tuned_rate="384000"/g' $PSF
UIP "$MSGFFAP"
fi
done
}

PATCH_FIXING_KHZ () {
UIP "Start PATCH_FIXING_KHZ" "$MSGPNF"
for FPCXML in $APCXML; do
if [ -f $MAGISKMP$FPCXML ]; then
UIP "Found $FPCXML" "Patching..."
PSF="$MODPATH/$MODID$FPCXML"
if $SRKHZ; then
sed -i '/AUDIO_OUTPUT_FLAG_DEEP_BUFFER/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"\
                             samplingRates="96000" channelMasks="AUDIO_CHANNEL_OUT_STEREO"/>\
$MODID' $PSF
sed -i '/AUDIO_OUTPUT_FLAG_VIRTUAL_DEEP_BUFFER/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"\
                             samplingRates="96000" channelMasks="AUDIO_CHANNEL_OUT_STEREO"/>\
$MODID' $PSF
else
sed -i '/AUDIO_OUTPUT_FLAG_DEEP_BUFFER/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"\
                             samplingRates="192000" channelMasks="AUDIO_CHANNEL_OUT_STEREO"/>\
$MODID' $PSF
sed -i '/AUDIO_OUTPUT_FLAG_VIRTUAL_DEEP_BUFFER/a\
                    <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"\
                             samplingRates="192000" channelMasks="AUDIO_CHANNEL_OUT_STEREO"/>\
$MODID' $PSF
fi
sed -i '/$MODID/,+2d' $PSF
UIP "$MSGFFAP"
fi
done
for FAPIOCXML in $AIPAOPCONF; do
if [ -f $MAGISKMP$FAPIOCXML ]; then
UIP "Found $FAPIOCXML" "Patching..."
PSF="$MODPATH/$MODID$FAPIOCXML"
sed -i '/deep_buffer_24/,+6d' $PSF
if $SRKHZ; then
sed -i '/^outputs/a\
  deep_buffer_24 {\
    flags AUDIO_OUTPUT_FLAG_DEEP_BUFFER\
    formats AUDIO_FORMAT_PCM_24_BIT_PACKED\
    sampling_rates 96000\
    bit_width 24\
    app_type 69940\
  }\
  deep_buffer_24bit {\
    flags AUDIO_OUTPUT_FLAG_DEEP_BUFFER\
    formats AUDIO_FORMAT_PCM_24_BIT_PACKED\
    sampling_rates 96000\
    bit_width 24\
    app_type 69940\
  }' $PSF
else
sed -i '/^outputs/a\
  deep_buffer_24 {\
    flags AUDIO_OUTPUT_FLAG_DEEP_BUFFER\
    formats AUDIO_FORMAT_PCM_24_BIT_PACKED\
    sampling_rates 192000\
    bit_width 24\
    app_type 69940\
  }\
  deep_buffer_24bit {\
    flags AUDIO_OUTPUT_FLAG_DEEP_BUFFER\
    formats AUDIO_FORMAT_PCM_24_BIT_PACKED\
    sampling_rates 192000\
    bit_width 24\
    app_type 69940\
  }' $PSF
fi
UIP "$MSGFFAP"
fi
done
}

MMUPD_LIST () {
#UI: Pills/NavBar/Gboard/Themes/BA/Sounds
CHECKER -mmupd "$IDPO" "$VIPPO" "IPPOS"
CHECKER -mmupd "$IDPCO" "$VIPPCO" "IPPCOS"
CHECKER -mmupd "$IDPHOS" "$VIPPHO" "IPPHOS"
CHECKER -mmupd "$IDPSHNB" "$VIPPSHNB" "IPPSHNBS"
CHECKER -mmupd "$IDBGDS" "$VIPBGD" "IPBGDS"
CHECKER -mmupd "$IDGBNBS" "$VIPGBNBS" "IPGBNBSS"
CHECKER -mmupd "$IDGBRC" "$VIPGBRC" "IPGBRCS"
CHECKER -mmupd "$IDGBT" "$VIPGBT" "IPGBTS"
CHECKER -mmupd "$IDGBSTE" "$VIPGBSTE" "IPGBSTES"
CHECKER -mmupd "$IDSBINNI" "$VIPSBINNI" "IPSBINNIS"
CHECKER -mmupd "$IDGPPM" "$VIPGPPM" "IPGPPMS"
CHECKER -mmupd "$IDRUI" "$VIPRUI" "IPRUIS"
CHECKER -mmupd "$IDBIP" "$VIPBIP" "IPBIPS"
CHECKER -mmupd "$IDNSP" "$VIPNSP" "IPNSPS"
CHECKER -mmupd "$IDSBISP" "$VIPSBISP" "IPSBISPS"
CHECKER -mmupd "$IDSBISI" "$VIPSBISI" "IPSBISIS"
CHECKER -mmupd "$IDSBCS" "$VIPSBCS" "IPSBCSS"
CHECKER -mmupd "$IDSUE" "$VIPSUE" "IPSUES"
CHECKER -mmupd "$IDSBP" "$VIPSBP" "IPSBPS"
CHECKER -mmupd "$IDQSCP" "$VIPQSCP" "IPQSCPS"
CHECKER -mmupd "$IDSUIRSRS" "$VIPSUIRSRS" "IPSUIRSRSS"
CHECKER -mmupd "$IDQSCIAR" "$VIPQSCIAR" "IPQSCIARS"
CHECKER -mmupd "$IDSBPD" "$VIPSBPD" "IPSBPDS"
CHECKER -mmupd "$IDEBB" "$VIPEBB" "IPEBBS"
CHECKER -mmupd "$IDBA" "$VIPBA" "IPBAS"
CHECKER -mmupd "$IDIOSEMOJI" "$VIPIOSEMOJI" "IPIOSEMOJIS"
CHECKER -mmupd "$IDMUIS" "$VIPMUIS" "IPMUISS"
CHECKER -mmupd "$IDFDNI" "$VIPFDNI" "IPFDNIS"
CHECKER -mmupd "$IDWFAMDQSOS" "$VIPWFAMDQSOS" "IPWFAMDQSOSS"
#Launchers: Shady/Lawnchair/Sushi
if $ATEN; then CHECKER -mmupd -c "$IDSSL" "$VIPSSLQ" "$VCIPSSLQ" "IPSLSLS"; fi
if $AELEVEN; then CHECKER -mmupd -c "$IDSSL" "$VIPSSLR" "$VCIPSSLR" "IPSLSLS"; fi
if $ATWELVEL; then
CHECKER -mmupd "$IDSL" "$VIPSL" "IPSLLS"
CHECKER -mmupd "$IDSSUL" "$VIPSSUL" "IPSLSULS"
fi
#Audio: VFX(P)/DOLBY/NLS/AIST/SAQ/IB/AML/ALCF
CHECKER -mmupd "$IDVFX" "$VIPVFX" "IPVFXS"
CHECKER -mmupd "$IDVFXP" "$VIPVFXP" "IPVFXPS"
CHECKER -mmupd "$IDDA" "$VIPDA" "IPDAS"
CHECKER -mmupd -c "$IDNLS" "$VIPNLS" "$VCIPNLS" "IPNLSS"
CHECKER -mmupd -c "$IDAIST" "$VIPAIST" "$VCIPAIST" "IPAISTS"
CHECKER -mmupd -c "$IDSAQ" "$VIPSAQ" "$VCIPSAQ" "IPSAQS"
CHECKER -mmupd "$IDIBS" "$VIPIBS" "IPIBS"
CHECKER -mmupd -c "$IDAML" "$VIPAML" "$VCIPAML" "IPAMLS"
CHECKER -mmupd "$IDALCF" "$VIPALCF" "IPALCFS"
#AdBlock/Hosts
CHECKER -mmupd -c "$IDDAB" "$VIPDAB" "$VCIPDAB" "IPESHFS"
CHECKER -mmupd "$IDVAAH" "$VIPVAAH" "IPAAHFS"
CHECKER -mmupd -c "$IDVSH" "$VIPVSH" "$VCIPVSH" "IPSHFS"
CHECKER -mmupd "$IDEH" "$VIPEH" "IPEHFS"
#Net: GPS/WIFI/TTL/DNS/APAUSBTF
CHECKER -mmupd "$IDGPSP" "$VIPGPSP" "IPGPSPS"
CHECKER -mmupd "$IDWIFIP" "$VIPWIFIP" "IPWIFIPS"
CHECKER -mmupd -c "$IDTTLF" "$VIPTTLF" "$VCIPTTLF" "IPTTLFS"
CHECKER -mmupd -c "$IDNT" "$VIPNT" "$VCIPNT" "IPNTS"
CHECKER -mmupd "$IDAPAUSBTF" "$VIPAPAUSBTF" "IPAPAUSBTFS"
#Utilities: BB/SELC/CC/MMFR/DETACH/LSPosed
CHECKER -mmupd -c "$IDBB" "$VIPBB" "$VCIPBB" "IPBBS"
CHECKER -mmupd "$IDSELC" "$VIPSELC" "IPSELCS"
CHECKER -mmupd "$IDCC" "$VIPCC" "IPCCS"
CHECKER -mmupd "$IDMMFR" "$VIPMMFR" "IPMMFRS"
CHECKER -mmupd "$IDDETACH" "$VIPDETACH" "IPDETACH"
if $ZYGISK; then CHECKER -mmupd -c "$IDLSPOSEDZ" "$VIPLSPOSEDZ" "$VCIPLSPOSEDZ" "IPLSPOSEDS"; fi
#Other: FA/LED/FSFM/UAA/SBU/GASL
CHECKER -mmupd "$IDFPA" "$VIPFPA" "IPFPAS"
CHECKER -mmupd "$IDLEDLO" "$VIPLEDLO" "IPLEDLOS"
CHECKER -mmupd "$IDLEDLA" "$VIPLEDLA" "IPLEDLAS"
CHECKER -mmupd "$IDFSLFM" "$VIPFSLFM" "IPFSLFMS"
#Tweaks: FGS/BP/KL/UGMSD/USGP/VS
CHECKER -mmupd "$IDFGS" "$VIPFGS" "IPFGSS"
CHECKER -mmupd "$IDFEG" "$VIPFEG" "IPFEGS"
CHECKER -mmupd "$IDHAP" "$VIPHAP" "IPHAPS"
CHECKER -mmupd "$IDAFUS" "$VIPAFUS" "IPAFUSS"
CHECKER -mmupd "$IDBPT" "$VIPBPT" "IPBPTS"
CHECKER -mmupd -c "$IDKL" "$VIPKL" "$VCIPKL" "IPKLS"
CHECKER -mmupd "$IDFMSAAS" "$VIPFMSAAS" "IPFMSAASS"
CHECKER -mmupd "$IDFDHWO" "$VIPFDHWO" "IPFDHWOS"
CHECKER -mmupd "$IDFDEVADB" "$VIPFDEVADB" "IPFDEVADBS"
CHECKER -mmupd "$IDFMTP" "$VIPFMTP" "IPFMTPS"
CHECKER -mmupd "$IDSOOOFUIRC" "$VIPSOOOFUIRC" "IPSOOOFUIRCS"
CHECKER -mmupd "$IDFDM" "$VIPFDM" "IPFDMS"
CHECKER -mmupd "$IDFDPP" "$VIPFDPP" "IPFDPPS"
CHECKER -mmupd "$IDFI" "$VIPFI" "IPFIS"
CHECKER -mmupd -c "$IDUGMSD" "$VIPUGMSD" "$VCIPUGMSD" "IPUGMSDS"
CHECKER -mmupd "$IDUSGP" "$VIPUSGP" "IPUSGPS"
CHECKER -mmupd "$IDAS" "$VIPAS" "IPASS"
CHECKER -mmupd "$IDGPUR" "$VIPGPUR" "IPGPURS"
CHECKER -mmupd "$IDVS" "$VIPVS" "IPVSS"
UIP "Other Updates Not Found"
}

QCDFP () {
for f in $EQCDFP; do
if [ -f $f ]; then
if grep -m1 "^$1" $f >/dev/null; then
local g=$(grep -m1 "^$1" $f)
sed -i "s~$g~$1=$2~g" $f
elif grep -m1 "^#$1" $f >/dev/null; then
local g=$(grep -m1 "^#$1" $f)
sed -i "s~$g~$1=$2~g" $f
elif grep -m1 "^# $1" $f >/dev/null; then
local g=$(grep -m1 "^# $1" $f)
sed -i "s~$g~$1=$2~g" $f
else
echo -e "\n$3\n$1=$2" >> $f
fi
fi
done
}

PTMFI () {
case "$1" in
-nm) MODID="$2"; local IP="$3"; REMOVER -mm "$MODID"; for MP in $IP; do mkdir -p "$MODPATH/$MODID$MP"; done;;
-np) MODID="$2"; local DMM="$3"; REMOVER -mm "$MODID $DMM"; mkdir -p "$MODPATH/$MODID";;
-nmp) MODID="$2"; REMOVER -mm "$MODID"; mkdir -p "$MODPATH/$MODID";;
*) MODID="$1"; local DMM="$2"; local IP="$3"; REMOVER -mm "$MODID $DMM"; for MP in $IP; do mkdir -p "$MODPATH/$MODID$MP"; done;;
esac
touch $MODPATH/$MODID/update
}

} #

{ #KeyChoose

KEYCHOOSE () {
while true; do
eval $(getevent -lqc 1 | awk '{print "K=" $3; print "V=" $4}')
if [[ "$K" = "KEY_VOLUMEUP" && "$V" = "DOWN" ]]; then
HFBMODE && return 0
elif [[ "$K" = "KEY_VOLUMEDOWN" && "$V" = "DOWN" ]]; then
HFBMODE && return 1
fi
done
}

} #

{ #All Otval

{ #UI: Pills/NavBar/Gboard/Themes/BA/Sounds

IPPO () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/pills ]; then
UIP -s "$MSGFI Pills, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Restore Stock Gestures Overlay..."
BUCKUPER -r "$IPPSO/NavigationBarModeGesturalWideBack/NavigationBarModeGesturalOverlayWideBack.apk $IPPSO/NavigationBarModeGesturalNarrowBack/NavigationBarModeGesturalOverlayNarrowBack.apk $IPPSO/NavigationBarModeGestural/NavigationBarModeGesturalOverlay.apk $IPPSO/NavigationBarModeGesturalExtraWideBack/NavigationBarModeGesturalOverlayExtraWideBack.apk"
rm -f $IPPSO/Pills.apk $AIOPFMDPH/pills
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install Pills $VIPPO?" "IPPOS" "$IDPO"
fi
fi
}

IPPOS () {
PILLSHIDE=false
UIP -s "Choose Variant Pills:" "$MSGVU Full Hide/Immersive" "$MSGVD More Other Variants"
if KEYCHOOSE; then
PILLSHIDE=true; PFSGVFPX=true; POFSGC=true; IMMERSIVE="0dip"; FRAME="0dip"; PILLSWIDTHSIZE="0dip"; PILLSFATSIZE="0dip"
else
FRAME="48dip"
UIP -s "Transparent Variant:" "$MSGVU Transparent" "$MSGVD Not Transparent"
if KEYCHOOSE; then
IMMERSIVE="0dip"
else
IMMERSIVE="16dip"
fi
UIP -s "Choose Width Size:" "$MSGVU 4dip/8dip (Dot)" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
POFSGCDOT=true; PHOC=true; PILLSFATSIZE="4dip"; PILLSWIDTHSIZE="8dip"
else
POFSGCDOT=false
UIP -s "$MSGVU 0dip/0dip (Hide)" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
POFSGC=true; PHOC=true; PILLSFATSIZE="0dip"; PILLSWIDTHSIZE="0dip"
else
PHOC=false
for PILLSWIDTHSIZE in "60dip" "120dip" "180dip" "240dip" "300dip"; do
UIP -s "$MSGVU $PILLSWIDTHSIZE"
MSGPOFSGA="$MSGNIS"
case $PILLSWIDTHSIZE in
"300dip") MSGPOFSGA="$MSGNUS";;
esac
UIP "$MSGVD No $MSGPOFSGA"
if KEYCHOOSE; then
POFSGC=true
break
else
POFSGC=false
fi
done
fi
fi
if $POFSGC && [ $POFSGCDOT != true ] || [ $PHOC != true ]; then
if $POFSGC && [ $PHOC != true ]; then
MSGPOFSG=true
for PILLSFATSIZE in "1dip" "2dip" "3dip" "4dip"; do
if $MSGPOFSG; then
UIP -s "Choose Fat Size:"
MSGPOFSG=false
else
MSGCS
fi
UIP "$MSGVU $PILLSFATSIZE"
MSGPOFSGA="$MSGNIS"
case $PILLSFATSIZE in
"4.0dp") MSGPOFSGA="$MSGNUS";;
esac
UIP "$MSGVD No $MSGPOFSGA"
if KEYCHOOSE; then
PFSGVFPX=true
break
else
PFSGVFPX=false
fi
done
fi
fi
fi
if $POFSGC && $PFSGVFPX; then
UIP "Installing Pills $IAMM"
UZTPN "Pills"
if $MAGISK; then
PTMFI "$IDPO" "PillsOverlay HideNavBar HideGesBar HidePillsOverlay" "$MIPPSO"
REPLACER -f "NavigationBarModeGesturalWideBack NavigationBarModeGesturalNarrowBack NavigationBarModeGesturalExtraWideBack NavigationBarModeGestural"
cp -f $TMPDIR/$MODID/NavigationBarModeGesturalOverlayWideBack-$IMMERSIVE-$FRAME-32dip.apk $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/$MODID/NavigationBarModeGesturalOverlayNarrowBack-$IMMERSIVE-$FRAME-18dip.apk $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/$MODID/NavigationBarModeGesturalOverlayExtraWideBack-$IMMERSIVE-$FRAME-40dip.apk $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/$MODID/NavigationBarModeGesturalOverlay-$IMMERSIVE-$FRAME-24dip.apk $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/$MODID/Pills-$PILLSFATSIZE-$PILLSWIDTHSIZE.apk $MODPATH/$MODID$MIPPSO
if $PILLSHIDE; then
MMPR -v "Pills" "$VIPPO" "Pills Full Hide/Immersive"
else
MMPR -v "Pills" "$VIPPO" "Pills Size $PILLSFATSIZE/$PILLSWIDTHSIZE"
fi
else
BUCKUPER -s "$IPPSO/NavigationBarModeGesturalWideBack/NavigationBarModeGesturalOverlayWideBack.apk $IPPSO/NavigationBarModeGesturalNarrowBack/NavigationBarModeGesturalOverlayNarrowBack.apk $IPPSO/NavigationBarModeGestural/NavigationBarModeGesturalOverlay.apk $IPPSO/NavigationBarModeGesturalExtraWideBack/NavigationBarModeGesturalOverlayExtraWideBack.apk"
cp -f $TMPDIR/$IDPO/NavigationBarModeGesturalOverlayWideBack-$IMMERSIVE-$FRAME-32dip.apk $IPPSO/NavigationBarModeGesturalWideBack/NavigationBarModeGesturalOverlayWideBack.apk
cp -f $TMPDIR/$IDPO/NavigationBarModeGesturalOverlayNarrowBack-$IMMERSIVE-$FRAME-18dip.apk $IPPSO/NavigationBarModeGesturalNarrowBack/NavigationBarModeGesturalOverlayNarrowBack.apk
cp -f $TMPDIR/$IDPO/NavigationBarModeGesturalOverlayExtraWideBack-$IMMERSIVE-$FRAME-40dip.apk $IPPSO/NavigationBarModeGesturalExtraWideBack/NavigationBarModeGesturalOverlayExtraWideBack.apk
cp -f $TMPDIR/$IDPO/NavigationBarModeGesturalOverlay-$IMMERSIVE-$FRAME-24dip.apk $IPPSO/NavigationBarModeGestural/NavigationBarModeGesturalOverlay.apk
cp -f $TMPDIR/$IDPO/Pills-$PILLSFATSIZE-$PILLSWIDTHSIZE.apk $IPPSO/Pills.apk
touch $AIOPFMDPH/pills
fi
SET_PERM_RM -msgdi
fi
}

IPPCO () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/pillscolors ]; then
UIP -s "$MSGFI Pills Colors, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
rm -f $IPPSO/PillsColors.apk $AIOPFMDPH/pillscolors
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install Pills Colors $VIPPCO?" "IPPCOS" "$IDPCO"
fi
fi
}

IPPCOS () {
UIP -s "Choose Variant:" "$MSGVU Choose One Color" "$MSGVD Choose Two Color Separately"
if KEYCHOOSE; then COLORVARIANT=" "; IPPCOAS; PILLSLIGHTCOLORS=$PILLSCOLORS; PILLSDARKCOLORS=$PILLSCOLORS; else COLORVARIANT=" Light: "; IPPCOAS; if $PCOFSGC; then PILLSLIGHTCOLORS=$PILLSCOLORS; COLORVARIANT=" Dark: "; IPPCOAS; PILLSDARKCOLORS=$PILLSCOLORS; fi; fi
if $PCOFSGC; then
UIP "Installing Pills Colors $IAMM"
UZTPN "PillsColors"
if $MAGISK; then
PTMFI "$IDPCO" "PillsColorsOverlay" "$MIPPSO"
cp -f $TMPDIR/$MODID/PillsColors-$PILLSLIGHTCOLORS-$PILLSDARKCOLORS.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Pills Colors" "$VIPPCO" "Pills Colors - Set On: Light - $PILLSLIGHTCOLORS & Dark - $PILLSDARKCOLORS"
else
cp -f $TMPDIR/PillsColors/PillsColors-$PILLSLIGHTCOLORS-$PILLSDARKCOLORS.apk $IPPSO/PillsColors.apk
touch $AIOPFMDPH/pillscolors
fi
SET_PERM_RM -msgdi
fi
}

IPPCOAS () {
for PILLSCOLORS in "Accent" "ff1a73e8" "ff5e97f6" "ffb31818" "ffff4151" "ff1ed760" "ff47ae84" "ffffa842" "ffff8055" "ffa86bd5"; do
case $PILLSCOLORS in
"Accent") NAMEPILLSCOLORS="System Accent";;
"ff1a73e8") NAMEPILLSCOLORS="Blue";;
"ff5e97f6") NAMEPILLSCOLORS="Light Blue";;
"ffb31818") NAMEPILLSCOLORS="Red";;
"ffff4151") NAMEPILLSCOLORS="Light Red";;
"ff1ed760") NAMEPILLSCOLORS="Green";;
"ff47ae84") NAMEPILLSCOLORS="Light Green";;
"ffffa842") NAMEPILLSCOLORS="Yellow";;
"ffff8055") NAMEPILLSCOLORS="Orange";;
"ffa86bd5") NAMEPILLSCOLORS="Violet";;
esac
UIP -s "$MSGVU$COLORVARIANT$NAMEPILLSCOLORS ($PILLSCOLORS)"
MSGPCOFSGA="$MSGNIS"
case $PILLSCOLORS in
"ffa86bd5") MSGPCOFSGA="$MSGNUS";;
esac
UIP "$MSGVD No $MSGPCOFSGA"
if KEYCHOOSE; then
PCOFSGC=true
break
else
PCOFSGC=false
fi
done
}

IPPHO () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/pillsheight ]; then
UIP -s "$MSGFI Pills Height, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
rm -f $IPPSO/PillsHeight.apk $AIOPFMDPH/pillsheight
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install Pills Height $VIPPHO?" "IPPHOS" "$IDPHOS"
fi
fi
}

IPPHOS () {
UCSA -a "0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip" "Choose Pills Height:" "Height" "10dip"
if $UCSFNM; then
UIP "Installing Pills Height $IAMM"
UZTPN "PillsHeight"
if $MAGISK; then
PTMFI "$IDPHOS" "PillsHeightOverlay" "$MIPPSO"
cp -f $TMPDIR/$MODID/PillsHeight-$UCSFNMC.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Pills Height" "$VIPPHO" "Pills Height - Set On: $UCSFNMC"
else
cp -f $TMPDIR/PillsHeight/PillsHeight-$UCSFNMC.apk $IPPSO/PillsHeight.apk
touch $AIOPFMDPH/pillsheight
fi
SET_PERM_RM -msgdi
fi
}

IPPSHNB () {
UCSA "Install Show/Hide Navigation Bar $VIPPSHNB?" "IPPSHNBS" "$IDPCO"
}

IPPSHNBS () {
UIP -s "Choose Variant:" "$MSGVU Show" "$MSGVD Hide"
if KEYCHOOSE; then ISHNBPVN="0"; ISHNBPV="Show"; else ISHNBPVN="1"; ISHNBPV="Hide"; fi
UIP "Installing Show/Hide Navigation Bar $IAMM"
if $MAGISK; then
PTMFI -np "$IDPSHNB" "HideNavigationBar ShowNavigationBar"
echo "qemu.hw.mainkeys=$ISHNBPVN" > $MODPATH/$MODID/system.prop
MMPR -v "$ISHNBPV Navigation Bar" "$VIPPSHNB" "$ISHNBPV Navigation Bar"
else
BUCKUPER -bp "$IPSBP"
export newprop=$(echo qemu.hw.mainkeys=$ISHNBPVN | cut -d '=' -f1)
sed -i "/qemu.hw.mainkeys=0/d" $IPSBP; sed -i "/qemu.hw.mainkeys=1/d" $IPSBP
echo -e "# Show/Hide Navigation Bar\nqemu.hw.mainkeys=$ISHNBPVN" >> $IPSBP
fi
SET_PERM_RM -msgdi
}

IPBGD () {
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 29 ] && CHECKER -sp "$XMLSECURE" "back_gesture_inset_scale_left back_gesture_inset_scale_right"; then
UCSA "Install Back Gesture Disabler $VIPBGD?" "IPBGDS" "$IDBGDS"
fi
}

IPBGDS () {
UIP -s "Disable Left Gesture?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then BGISL=0; else BGISL=1; fi
UIP -s "Disable Right Gesture?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then BGISR=0; else BGISR=1; fi
UIP "Installing Back Gesture Disabler $IAMM"
PTMFI -nmp "$IDBGDS"
MSSERVICE "$SPSECURE back_gesture_inset_scale_left 1; $SPSECURE back_gesture_inset_scale_right 1" "$SPSECURE back_gesture_inset_scale_left $BGISL; $SPSECURE back_gesture_inset_scale_right $BGISR" "BGDS"
if $BOOTMODE; then UIP "Back Gesture Disabler Activated Right Now"; $SPSECURE back_gesture_inset_scale_left $BGISL; $SPSECURE back_gesture_inset_scale_right $BGISR; fi
MMPR -v "Back Gesture Disabler" "$VIPBGD" "Back Gesture Disabler"; SET_PERM_RM -msgdi
}

IPGBNBS () {
if [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install GBoard NavBar Space $VIPGBNBS?" "IPGBNBSS" "$IDGBNBS"
fi
}

IPGBNBSS () {
UCSA -a "$(seq 0 5 40)" "Choose NavBar Space Size:" "NavBar Space" "40"
if $UCSFNM; then
UIP "Installing GBoard NavBar Space $IAMM"
if $MAGISK; then
PTMFI -np "$IDGBNBS" "NavBar_Space gboardnavbar"
echo "ro.com.google.ime.kb_pad_port_b=$UCSFNMC" > $MODPATH/$MODID/system.prop
MMPR -v "Gboard NavBar Spacing" "$VIPGBNBS" "Gboard NavBar Spacing - Set On: $UCSFNMC"
else
BUCKUPER -bp "$IPSBP"
echo -e "# Gboard NavBar Spacing\nro.com.google.ime.kb_pad_port_b=$UCSFNMC" >> $IPSBP
fi
SET_PERM_RM -msgdi
fi
}

IPGBRC () {
if [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install GBoard Rounded Corners $VIPGBRC?" "IPGBRCS" "$IDGBRC"
fi
}

IPGBRCS () {
UCSA -a "$(seq 0 5 50)" "Choose Rounded Size:" "Rounded Size" "50"
if $UCSFNM; then
UIP "Installing GBoard Rounded Corners $IAMM"
if $MAGISK; then
PTMFI -nmp "$IDGBRC"
echo "ro.com.google.ime.corner_key_r=$UCSFNMC" > $MODPATH/$MODID/system.prop
MMPR -v "GBoard Rounded Corners" "$VIPGBRC" "GBoard Rounded Corners - Set On: $UCSFNMC"
else
BUCKUPER -bp "$IPSBP"
echo -e "# GBoard NavBar Space Remover\nro.com.google.ime.corner_key_r=$UCSFNMC" >> $IPSBP
fi
SET_PERM_RM -msgdi
fi
}

IPGBT () {
UCSA "Install GBoard Themes $VIPGBT?" "IPGBTS" "$IDGBT"
}

IPGBTS () {
UCSA -a "$(seq 0 5 30)" "Choose Key Rounded Size:" "Rounded Size" "30"
if $UCSFNM; then
UIP "Installing GBoard Themes $IAMM"
UZTPN "GBoardThemes"
mkdir -p $TMPDIR/GBoardThemes/Compile $TMPDIR/GBoardThemes/gboard_theme
for f in "1A73E8" "B31818" "1ED760" "FFA842" "FF8055" "A86BD5" "FF4151" "5E97F6" "47AE84"; do
for s  in "MD2B" "MD2W" "3DB" "3DW" "FB" "FW"; do
case $s in
"MD2B") g="md2b";;
"MD2D") g="md2d";;
"MD2W") g="md2w";;
"3DB") g="3db";;
"3DW") g="3dw";;
"FB") g="fb";;
"FW") g="fw";;
esac
local n="$(< /dev/urandom tr -cd "a b c d e f g h i j k l m n o p q r s t u v w x y z" | $HEAD -c 6)"
cp -rf  $TMPDIR/GBoardThemes/$s/* $TMPDIR/GBoardThemes/Compile
sed -i "s/#ROUNDED/$UCSFNMC/g" $TMPDIR/GBoardThemes/Compile/style_sheet.css
sed -i "s/#ACCENT/#$f\FF/g" $TMPDIR/GBoardThemes/Compile/style_sheet.css
[ -f $TMPDIR/GBoardThemes/Compile/style_sheet_border.css ] && sed -i "s/#ACCENT/#$f\FF/g" $TMPDIR/GBoardThemes/Compile/style_sheet_border.css
sed -i "s/#ID/$g$n/g" $TMPDIR/GBoardThemes/Compile/metadata.json
sed -i "s/#NAME/$g$n/g" $TMPDIR/GBoardThemes/Compile/metadata.json
cd $TMPDIR/GBoardThemes/Compile
$ZIPPACKER -r -0 $TMPDIR/GBoardThemes/Compile * >/dev/null
mv $TMPDIR/GBoardThemes/Compile.zip $TMPDIR/GBoardThemes/gboard_theme/$s-$f.zip
rm -rf $TMPDIR/GBoardThemes/Compile/*
done
done
if $MAGISK; then
PTMFI "$IDGBT" "rboard-themes" "$MIPSE"
cp -rf $TMPDIR/GBoardThemes/gboard_theme $MODPATH/$MODID$MIPSE
echo -e "ro.com.google.ime.theme_file=MD2B-1A73E8.zip\nro.com.google.ime.themes_dir=$MIPSE/gboard_theme" > $MODPATH/$MODID/system.prop
MMPR -v "GBoard Themes" "$VIPGBT" "GBoard Themes, Key Rounded Size - Set On: $UCSFNMC"
else
BUCKUPER -bp "$IPSBP"
echo -e "\n# GBoard Themes\nro.com.google.ime.theme_file=MD2B-1A73E8.zip\nro.com.google.ime.themes_dir=$MIPSE/gboard_theme" >> $IPSBP
cp -rf $TMPDIR/GBoardThemes/gboard_theme $IPSE
SET_PERM_R $IPSE/gboard_theme 0 0 0755 0644
fi
SET_PERM_RM -msgdi
fi
}

IPGBSTE () {
UCSA "Install GBoard Silk Theme Changer $VIPGBSTE?" "IPGBSTES" "$IDGBSTE"
}

IPGBSTES () {
UIP -s "Enable Or Disable Silk Theme?" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then
GBSTF="false"; GBSTT="true"; GBSTS="Enabled"
else
GBSTF="true"; GBSTT="false"; GBSTS="Disabled"
fi
UIP -s "Enable Or Disable Key Shadows?" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then
GBSTKSF="true"; GBSTKST="false"
else
GBSTKSF="false"; GBSTKST="true"
fi
UIP -s "Enable Or Disable Shaped Key?" "$MSGVU Enable" "$MSGVD Disable"
if KEYCHOOSE; then
GBSTSKF="false"; GBSTSKT="true"
else
GBSTSKF="true"; GBSTSKT="false"
fi
UIP "Installing GBoard Silk Theme Changer $IAMM"
if $MAGISK; then
PTMFI -np "$IDGBSTE" "gboard-silk-theme"
MMPR -v "Gboard Silk Theme Changer" "$VIPGBSTE" "Gboard Silk Theme Changer - Silk Theme $GBSTS"
MSSERVICE "sed -i -e \"s/\\\"animate_first_content_suggestion_results\\\" value=\\\"$GBSTT\\\"/\\\"animate_first_content_suggestion_results\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"branding_fadeout_delay_ms\\\" value=\\\"9000000\\\"/\\\"branding_fadeout_delay_ms\\\" value=\\\"900\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"concept_prediction_sample_emoji_by_popularity\\\" value=\\\"$GBSTF\\\"/\\\"concept_prediction_sample_emoji_by_popularity\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"disable_vocabulary_capitalization\\\" value=\\\"$GBSTF\\\"/\\\"disable_vocabulary_capitalization\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_animated_whatsapp_sticker_webp\\\" value=\\\"$GBSTT\\\"/\\\"enable_animated_whatsapp_sticker_webp\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_fake_app_completion\\\" value=\\\"$GBSTT\\\"/\\\"enable_fake_app_completion\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_inline_suggestions_on_client_side\\\" value=\\\"$GBSTT\\\"/\\\"enable_inline_suggestions_on_client_side\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_inline_suggestions_on_decoder_side\\\" value=\\\"$GBSTT\\\"/\\\"enable_inline_suggestions_on_decoder_side\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_inline_suggestions_space_tooltip\\\" value=\\\"$GBSTT\\\"/\\\"enable_inline_suggestions_space_tooltip\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_inline_suggestions_tooltip\\\" value=\\\"$GBSTT\\\"/\\\"enable_inline_suggestions_tooltip\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_inline_suggestions_tooltip\\\" value=\\\"$GBSTT\\\"/\\\"enable_inline_suggestions_tooltip\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_keyboard_redesign\\\" value=\\\"$GBSTT\\\"/\\\"enable_keyboard_redesign\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_keyboard_redesign_theme\\\" value=\\\"$GBSTT\\\"/\\\"enable_keyboard_redesign_theme\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_matched_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTT\\\"/\\\"enable_matched_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_multiword_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTT\\\"/\\\"enable_multiword_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_multiword_suggestions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTT\\\"/\\\"enable_multiword_suggestions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_new_spellchecker\\\" value=\\\"$GBSTT\\\"/\\\"enable_new_spellchecker\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_nga\\\" value=\\\"$GBSTT\\\"/\\\"enable_nga\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_send_swipe_on_space_to_app\\\" value=\\\"$GBSTT\\\"/\\\"enable_send_swipe_on_space_to_app\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_single_word_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTT\\\"/\\\"enable_single_word_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_single_word_suggestions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTT\\\"/\\\"enable_single_word_suggestions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_spacebar_mixed_model\\\" value=\\\"$GBSTT\\\"/\\\"enable_spacebar_mixed_model\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_spell_checker_extension\\\" value=\\\"$GBSTT\\\"/\\\"nable_spell_checker_extension\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_spellchecker_chips_ui\\\" value=\\\"$GBSTT\\\"/\\\"enable_spellchecker_chips_ui\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_sticker_candidates\\\" value=\\\"$GBSTT\\\"/\\\"enable_sticker_candidates\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_tflite_triggering_model\\\" value=\\\"$GBSTT\\\"/\\\"enable_tflite_triggering_model\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_trigger_spell_check_in_composing\\\" value=\\\"$GBSTT\\\"/\\\"enable_trigger_spell_check_in_composing\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_trigger_spell_check_in_sentence\\\" value=\\\"$GBSTT\\\"/\\\"enable_trigger_spell_check_in_sentence\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_user_history_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTT\\\"/\\\"enable_user_history_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"extends_touch_below_space\\\" value=\\\"$GBSTT\\\"/\\\"extends_touch_below_space\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"fast_access_bar_enable_frequently_used\\\" value=\\\"$GBSTT\\\"/\\\"fast_access_bar_enable_frequently_used\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"fast_access_bar_enable_instantly_remove\\\" value=\\\"$GBSTT\\\"/\\\"fast_access_bar_enable_instantly_remove\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"keyboard_redesign_forbid_key_shadows\\\" value=\\\"$GBSTKST\\\"/\\\"keyboard_redesign_forbid_key_shadows\\\" value=\\\"$GBSTKSF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"keyboard_redesign_google_sans\\\" value=\\\"$GBSTT\\\"/\\\"keyboard_redesign_google_sans\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"lm_personalization_enabled\\\" value=\\\"$GBSTT\\\"/\\\"lm_personalization_enabled\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"native_language_hint_by_system_locales\\\" value=\\\"$GBSTT\\\"/\\\"native_language_hint_by_system_locales\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"nebulae_enable_input_action_collection\\\" value=\\\"$GBSTT\\\"/\\\"nebulae_enable_input_action_collection\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"nwp_threshold_for_two_words_completions\\\" value=\\\"-0.3\\\"/\\\"nwp_threshold_for_two_words_completions\\\" value=\\\"-0.4\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"pill_shaped_key\\\" value=\\\"$GBSTSKT\\\"/\\\"pill_shaped_key\\\" value=\\\"$GBSTSKF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"pseudo_spellchecker_mode\\\" value=\\\"0\\\"/\\\"pseudo_spellchecker_mode\\\" value=\\\"1\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"show_branding_interval_seconds\\\" value=\\\"0\\\"/\\\"show_branding_interval_seconds\\\" value=\\\"86400000\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"show_branding_on_space\\\" value=\\\"$GBSTT\\\"/\\\"show_branding_on_space\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"silk_on_all_pixel\\\" value=\\\"$GBSTT\\\"/\\\"silk_on_all_pixel\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"silk_theme\\\" value=\\\"$GBSTT\\\"/\\\"silk_theme\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"spellchecker_enable_language_trigger\\\" value=\\\"$GBSTT\\\"/\\\"spellchecker_enable_language_trigger\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"spellchecker_enable_rule_trigger\\\" value=\\\"$GBSTT\\\"/\\\"spellchecker_enable_rule_trigger\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"supports_battery_saver_theme\\\" value=\\\"$GBSTT\\\"/\\\"supports_battery_saver_theme\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"threshold_for_single_word_completions\\\" value=\\\"-5.0\\\"/\\\"threshold_for_single_word_completions\\\" value=\\\"-8.0\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"time_interval_percentile\\\" value=\\\"90\\\"/\\\"time_interval_percentile\\\" value=\\\"67\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"trigger_spell_check_in_composing_delay\\\" value=\\\"1500\\\"/\\\"trigger_spell_check_in_composing_delay\\\" value=\\\"3000\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"trigger_spell_check_in_sentence_delay\\\" value=\\\"1000\\\"/\\\"trigger_spell_check_in_sentence_delay\\\" value=\\\"2000\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"use_keyboard_redesign_on_existing_theme\\\" value=\\\"$GBSTT\\\"/\\\"use_keyboard_redesign_on_existing_theme\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"use_keyboard_redesign_on_existing_theme_on_all_users\\\" value=\\\"$GBSTT\\\"/\\\"use_keyboard_redesign_on_existing_theme_on_all_users\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"use_keyboard_redesign_theme_by_default\\\" value=\\\"$GBSTT\\\"/\\\"use_keyboard_redesign_theme_by_default\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"use_silk_theme_by_default\\\" value=\\\"$GBSTT\\\"/\\\"use_silk_theme_by_default\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML" "sed -i -e \"s/\\\"animate_first_content_suggestion_results\\\" value=\\\"$GBSTF\\\"/\\\"animate_first_content_suggestion_results\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"branding_fadeout_delay_ms\\\" value=\\\"900\\\"/\\\"branding_fadeout_delay_ms\\\" value=\\\"9000000\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"concept_prediction_sample_emoji_by_popularity\\\" value=\\\"$GBSTT\\\"/\\\"concept_prediction_sample_emoji_by_popularity\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"disable_vocabulary_capitalization\\\" value=\\\"$GBSTT\\\"/\\\"disable_vocabulary_capitalization\\\" value=\\\"$GBSTF\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_animated_whatsapp_sticker_webp\\\" value=\\\"$GBSTF\\\"/\\\"enable_animated_whatsapp_sticker_webp\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_fake_app_completion\\\" value=\\\"$GBSTF\\\"/\\\"enable_fake_app_completion\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_inline_suggestions_on_client_side\\\" value=\\\"$GBSTF\\\"/\\\"enable_inline_suggestions_on_client_side\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_inline_suggestions_on_decoder_side\\\" value=\\\"$GBSTF\\\"/\\\"enable_inline_suggestions_on_decoder_side\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_inline_suggestions_space_tooltip\\\" value=\\\"$GBSTF\\\"/\\\"enable_inline_suggestions_space_tooltip\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_inline_suggestions_tooltip\\\" value=\\\"$GBSTF\\\"/\\\"enable_inline_suggestions_tooltip\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_inline_suggestions_tooltip\\\" value=\\\"$GBSTF\\\"/\\\"enable_inline_suggestions_tooltip\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_keyboard_redesign\\\" value=\\\"$GBSTF\\\"/\\\"enable_keyboard_redesign\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_keyboard_redesign_theme\\\" value=\\\"$GBSTF\\\"/\\\"enable_keyboard_redesign_theme\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_matched_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTF\\\"/\\\"enable_matched_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_multiword_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTF\\\"/\\\"enable_multiword_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_multiword_suggestions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTF\\\"/\\\"enable_multiword_suggestions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_new_spellchecker\\\" value=\\\"$GBSTF\\\"/\\\"enable_new_spellchecker\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_nga\\\" value=\\\"$GBSTF\\\"/\\\"enable_nga\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_send_swipe_on_space_to_app\\\" value=\\\"$GBSTF\\\"/\\\"enable_send_swipe_on_space_to_app\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_single_word_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTF\\\"/\\\"enable_single_word_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_single_word_suggestions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTF\\\"/\\\"enable_single_word_suggestions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_spacebar_mixed_model\\\" value=\\\"$GBSTF\\\"/\\\"enable_spacebar_mixed_model\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_spell_checker_extension\\\" value=\\\"$GBSTF\\\"/\\\"nable_spell_checker_extension\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_spellchecker_chips_ui\\\" value=\\\"$GBSTF\\\"/\\\"enable_spellchecker_chips_ui\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_sticker_candidates\\\" value=\\\"$GBSTF\\\"/\\\"enable_sticker_candidates\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_tflite_triggering_model\\\" value=\\\"$GBSTF\\\"/\\\"enable_tflite_triggering_model\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_trigger_spell_check_in_composing\\\" value=\\\"$GBSTF\\\"/\\\"enable_trigger_spell_check_in_composing\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_trigger_spell_check_in_sentence\\\" value=\\\"$GBSTF\\\"/\\\"enable_trigger_spell_check_in_sentence\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"enable_user_history_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTF\\\"/\\\"enable_user_history_predictions_as_inline_from_crank_cifg\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"extends_touch_below_space\\\" value=\\\"$GBSTF\\\"/\\\"extends_touch_below_space\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"fast_access_bar_enable_frequently_used\\\" value=\\\"$GBSTF\\\"/\\\"fast_access_bar_enable_frequently_used\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"fast_access_bar_enable_instantly_remove\\\" value=\\\"$GBSTF\\\"/\\\"fast_access_bar_enable_instantly_remove\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"keyboard_redesign_forbid_key_shadows\\\" value=\\\"$GBSTKSF\\\"/\\\"keyboard_redesign_forbid_key_shadows\\\" value=\\\"$GBSTKST\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"keyboard_redesign_google_sans\\\" value=\\\"$GBSTF\\\"/\\\"keyboard_redesign_google_sans\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"lm_personalization_enabled\\\" value=\\\"$GBSTF\\\"/\\\"lm_personalization_enabled\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"native_language_hint_by_system_locales\\\" value=\\\"$GBSTF\\\"/\\\"native_language_hint_by_system_locales\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"nebulae_enable_input_action_collection\\\" value=\\\"$GBSTF\\\"/\\\"nebulae_enable_input_action_collection\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"nwp_threshold_for_two_words_completions\\\" value=\\\"-0.4\\\"/\\\"nwp_threshold_for_two_words_completions\\\" value=\\\"-0.3\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"pill_shaped_key\\\" value=\\\"$GBSTSKF\\\"/\\\"pill_shaped_key\\\" value=\\\"$GBSTSKT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"pseudo_spellchecker_mode\\\" value=\\\"0\\\"/\\\"pseudo_spellchecker_mode\\\" value=\\\"1\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"show_branding_interval_seconds\\\" value=\\\"86400000\\\"/\\\"show_branding_interval_seconds\\\" value=\\\"0\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"show_branding_on_space\\\" value=\\\"$GBSTF\\\"/\\\"show_branding_on_space\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"silk_on_all_pixel\\\" value=\\\"$GBSTF\\\"/\\\"silk_on_all_pixel\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"silk_theme\\\" value=\\\"$GBSTF\\\"/\\\"silk_theme\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"spellchecker_enable_language_trigger\\\" value=\\\"$GBSTF\\\"/\\\"spellchecker_enable_language_trigger\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"spellchecker_enable_rule_trigger\\\" value=\\\"$GBSTF\\\"/\\\"spellchecker_enable_rule_trigger\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"supports_battery_saver_theme\\\" value=\\\"$GBSTF\\\"/\\\"supports_battery_saver_theme\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"threshold_for_single_word_completions\\\" value=\\\"-8.0\\\"/\\\"threshold_for_single_word_completions\\\" value=\\\"-5.0\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"time_interval_percentile\\\" value=\\\"90\\\"/\\\"time_interval_percentile\\\" value=\\\"67\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"trigger_spell_check_in_composing_delay\\\" value=\\\"3000\\\"/\\\"trigger_spell_check_in_composing_delay\\\" value=\\\"1500\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"trigger_spell_check_in_sentence_delay\\\" value=\\\"2000\\\"/\\\"trigger_spell_check_in_sentence_delay\\\" value=\\\"1000\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"use_keyboard_redesign_on_existing_theme\\\" value=\\\"$GBSTF\\\"/\\\"use_keyboard_redesign_on_existing_theme\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"use_keyboard_redesign_on_existing_theme_on_all_users\\\" value=\\\"$GBSTF\\\"/\\\"use_keyboard_redesign_on_existing_theme_on_all_users\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"use_keyboard_redesign_theme_by_default\\\" value=\\\"$GBSTF\\\"/\\\"use_keyboard_redesign_theme_by_default\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML
sed -i -e \"s/\\\"use_silk_theme_by_default\\\" value=\\\"$GBSTF\\\"/\\\"use_silk_theme_by_default\\\" value=\\\"$GBSTT\\\"/g\" $GBFVXML" "GSTE"
fi
if [ -f $GBFVXML ]; then
sed -i -e "s/\"animate_first_content_suggestion_results\" value=\"$GBSTF\"/\"animate_first_content_suggestion_results\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"branding_fadeout_delay_ms\" value=\"900\"/\"branding_fadeout_delay_ms\" value=\"9000000\"/g" $GBFVXML
sed -i -e "s/\"concept_prediction_sample_emoji_by_popularity\" value=\"$GBSTT\"/\"concept_prediction_sample_emoji_by_popularity\" value=\"$GBSTF\"/g" $GBFVXML
sed -i -e "s/\"disable_vocabulary_capitalization\" value=\"$GBSTT\"/\"disable_vocabulary_capitalization\" value=\"$GBSTF\"/g" $GBFVXML
sed -i -e "s/\"enable_animated_whatsapp_sticker_webp\" value=\"$GBSTF\"/\"enable_animated_whatsapp_sticker_webp\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_fake_app_completion\" value=\"$GBSTF\"/\"enable_fake_app_completion\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_inline_suggestions_on_client_side\" value=\"$GBSTF\"/\"enable_inline_suggestions_on_client_side\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_inline_suggestions_on_decoder_side\" value=\"$GBSTF\"/\"enable_inline_suggestions_on_decoder_side\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_inline_suggestions_space_tooltip\" value=\"$GBSTF\"/\"enable_inline_suggestions_space_tooltip\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_inline_suggestions_tooltip\" value=\"$GBSTF\"/\"enable_inline_suggestions_tooltip\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_inline_suggestions_tooltip\" value=\"$GBSTF\"/\"enable_inline_suggestions_tooltip\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_keyboard_redesign\" value=\"$GBSTF\"/\"enable_keyboard_redesign\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_keyboard_redesign_theme\" value=\"$GBSTF\"/\"enable_keyboard_redesign_theme\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_matched_predictions_as_inline_from_crank_cifg\" value=\"$GBSTF\"/\"enable_matched_predictions_as_inline_from_crank_cifg\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_multiword_predictions_as_inline_from_crank_cifg\" value=\"$GBSTF\"/\"enable_multiword_predictions_as_inline_from_crank_cifg\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_multiword_suggestions_as_inline_from_crank_cifg\" value=\"$GBSTF\"/\"enable_multiword_suggestions_as_inline_from_crank_cifg\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_new_spellchecker\" value=\"$GBSTF\"/\"enable_new_spellchecker\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_nga\" value=\"$GBSTF\"/\"enable_nga\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_send_swipe_on_space_to_app\" value=\"$GBSTF\"/\"enable_send_swipe_on_space_to_app\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_single_word_predictions_as_inline_from_crank_cifg\" value=\"$GBSTF\"/\"enable_single_word_predictions_as_inline_from_crank_cifg\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_single_word_suggestions_as_inline_from_crank_cifg\" value=\"$GBSTF\"/\"enable_single_word_suggestions_as_inline_from_crank_cifg\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_spacebar_mixed_model\" value=\"$GBSTF\"/\"enable_spacebar_mixed_model\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_spell_checker_extension\" value=\"$GBSTF\"/\"nable_spell_checker_extension\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_spellchecker_chips_ui\" value=\"$GBSTF\"/\"enable_spellchecker_chips_ui\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_sticker_candidates\" value=\"$GBSTF\"/\"enable_sticker_candidates\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_tflite_triggering_model\" value=\"$GBSTF\"/\"enable_tflite_triggering_model\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_trigger_spell_check_in_composing\" value=\"$GBSTF\"/\"enable_trigger_spell_check_in_composing\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_trigger_spell_check_in_sentence\" value=\"$GBSTF\"/\"enable_trigger_spell_check_in_sentence\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"enable_user_history_predictions_as_inline_from_crank_cifg\" value=\"$GBSTF\"/\"enable_user_history_predictions_as_inline_from_crank_cifg\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"extends_touch_below_space\" value=\"$GBSTF\"/\"extends_touch_below_space\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"fast_access_bar_enable_frequently_used\" value=\"$GBSTF\"/\"fast_access_bar_enable_frequently_used\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"fast_access_bar_enable_instantly_remove\" value=\"$GBSTF\"/\"fast_access_bar_enable_instantly_remove\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"keyboard_redesign_forbid_key_shadows\" value=\"$GBSTKSF\"/\"keyboard_redesign_forbid_key_shadows\" value=\"$GBSTKST\"/g" $GBFVXML
sed -i -e "s/\"keyboard_redesign_google_sans\" value=\"$GBSTF\"/\"keyboard_redesign_google_sans\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"lm_personalization_enabled\" value=\"$GBSTF\"/\"lm_personalization_enabled\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"native_language_hint_by_system_locales\" value=\"$GBSTF\"/\"native_language_hint_by_system_locales\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"nebulae_enable_input_action_collection\" value=\"$GBSTF\"/\"nebulae_enable_input_action_collection\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"nwp_threshold_for_two_words_completions\" value=\"-0.4\"/\"nwp_threshold_for_two_words_completions\" value=\"-0.3\"/g" $GBFVXML
sed -i -e "s/\"pill_shaped_key\" value=\"$GBSTSKF\"/\"pill_shaped_key\" value=\"$GBSTSKT\"/g" $GBFVXML
sed -i -e "s/\"pseudo_spellchecker_mode\" value=\"0\"/\"pseudo_spellchecker_mode\" value=\"1\"/g" $GBFVXML
sed -i -e "s/\"show_branding_interval_seconds\" value=\"86400000\"/\"show_branding_interval_seconds\" value=\"0\"/g" $GBFVXML
sed -i -e "s/\"show_branding_on_space\" value=\"$GBSTF\"/\"show_branding_on_space\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"silk_on_all_pixel\" value=\"$GBSTF\"/\"silk_on_all_pixel\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"silk_theme\" value=\"$GBSTF\"/\"silk_theme\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"spellchecker_enable_language_trigger\" value=\"$GBSTF\"/\"spellchecker_enable_language_trigger\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"spellchecker_enable_rule_trigger\" value=\"$GBSTF\"/\"spellchecker_enable_rule_trigger\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"supports_battery_saver_theme\" value=\"$GBSTF\"/\"supports_battery_saver_theme\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"threshold_for_single_word_completions\" value=\"-8.0\"/\"threshold_for_single_word_completions\" value=\"-5.0\"/g" $GBFVXML
sed -i -e "s/\"time_interval_percentile\" value=\"90\"/\"time_interval_percentile\" value=\"67\"/g" $GBFVXML
sed -i -e "s/\"trigger_spell_check_in_composing_delay\" value=\"3000\"/\"trigger_spell_check_in_composing_delay\" value=\"1500\"/g" $GBFVXML
sed -i -e "s/\"trigger_spell_check_in_sentence_delay\" value=\"2000\"/\"trigger_spell_check_in_sentence_delay\" value=\"1000\"/g" $GBFVXML
sed -i -e "s/\"use_keyboard_redesign_on_existing_theme\" value=\"$GBSTF\"/\"use_keyboard_redesign_on_existing_theme\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"use_keyboard_redesign_on_existing_theme_on_all_users\" value=\"$GBSTF\"/\"use_keyboard_redesign_on_existing_theme_on_all_users\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"use_keyboard_redesign_theme_by_default\" value=\"$GBSTF\"/\"use_keyboard_redesign_theme_by_default\" value=\"$GBSTT\"/g" $GBFVXML
sed -i -e "s/\"use_silk_theme_by_default\" value=\"$GBSTF\"/\"use_silk_theme_by_default\" value=\"$GBSTT\"/g" $GBFVXML
if $BOOTMODE; then
am force-stop com.google.android.inputmethod.latin >/dev/null
am start -a android.intent.action.MAIN -n com.google.android.inputmethod.latin/com.google.android.apps.inputmethod.latin.firstrun.LatinFirstRunActivity >/dev/null
fi
fi
SET_PERM_RM -msgdi
}

IPSBINNI () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/statusbarincreasenumbernotificationicons ]; then
UIP -s "$MSGFI Status Bar Increase Number Icons, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
rm -f $IPPSO/SUIStatusBarIncreaseNumberNotificationIcons.apk $AIOPFMDPH/cutoutincreasenumbernotificationicons
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install Status Bar Increase Number Icons $VIPSBINNI?" "IPSBINNIS" "$IDSBINNI"
fi
fi
}

IPSBINNIS () {
UCSA -a "$(seq 1 1 10)" "Choose Variant Number Of Icons:" "Number Of Icons" "10"; VAACINN=$UCSFNMC
if $UCSFNM; then UCSA -a "0dip 2dip 4dip 6dip" "Choose Dot Size" "Size" "6dip"; VAACINND=$UCSFNMC; fi
if $UCSFNM; then
UIP "Installing Status Bar Increase Number Icons $IAMM"
UZTPN "SBINNI"
if $MAGISK; then
PTMFI "$IDSBINNI" "CINNOverlayMod CINNI" "$MIPPSO"
cp -f $TMPDIR/SBINNI/StatusBarIncreaseNumberNotificationIcons-$VAACINN-$VAACINND.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Status Bar Increase Number Notification Icons" "$VIPSBINNI" "Status Bar Increase Number Notification Icons - Set On: $VAACINN, Dot Size - Set On: $VAACINND"
else
cp -f $TMPDIR/SBINNI/StatusBarIncreaseNumberNotificationIcons-$VAACINN-$VAACINND.apk $IPPSO/StatusBarIncreaseNumberNotificationIcons.apk
touch $AIOPFMDPH/statusbarincreasenumbernotificationicons
fi
SET_PERM_RM -msgdi
fi
}

IPGPPM () {
if $MAGISK && $ATEN && [ $MIUI != true ] && CHECKER -sp "$XMLSECURE" "global_actions_panel_debug_enabled global_actions_panel_available"; then UCSA "Activate GPay Power Menu $VIPGPPM?" "IPGPPMS" "$IDGPPM"; fi
}

IPGPPMS () {
UIP "Installing GPay Power Menu $IAMM"
PTMFI -nmp "$IDGPPM"
MSSERVICE "$SPSECURE global_actions_panel_debug_enabled 0; $SPSECURE global_actions_panel_available 0" "$SPSECURE global_actions_panel_debug_enabled 1; $SPSECURE global_actions_panel_available 1" "GPPM"
if $BOOTMODE; then UIP "GPay Power Menu Activated Right Now"; $SPSECURE global_actions_panel_debug_enabled 1; $SPSECURE global_actions_panel_available 1; fi
MMPR -v "GPay Power Menu" "$VIPGPPM" "Enable Google Pay Quick Wallet Access In The Power Menu"; SET_PERM_RM -msgdi
}

IPRUI () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/roundedui ]; then
UIP -s "$MSGFI RoundedUI, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
rm -f $IPPSO/RoundedUI*.apk $IPPSO/RoundedSL*.apk $AIOPFMDPH/roundedui
UIP "$MSGDRM"
fi
else
if [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install RoundedUI $VIPRUI?" "IPRUIS" "$IDRUI"
fi
fi
}

IPRUIS () {
UIP "Installing RoundedUI $IAMM"
if [ "$ASDK" -ge 31 ]; then UCSFNMC=30dip; else UCSFNMC=33dip; fi
UZTPN "RoundedUI"
if $MAGISK; then
PTMFI "$IDRUI" "UIROUNDED" "$MIPPSO"
cp -f $TMPDIR/$MODID/Rounded*-$UCSFNMC.apk $MODPATH/$MODID$MIPPSO
MMPR -v "RoundedUI" "$VIPRUI" "RoundedUI For Round Apps, System UI, Launcher Recent & Etc"
else
cp -f $TMPDIR/RoundedUI/Rounded*-$UCSFNMC.apk $IPPSO; touch $AIOPFMDPH/roundedui
fi
SET_PERM_RM -msgdi
}

IPBIP () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/burninprotection ]; then
UIP -s "$MSGFI Burn In Protection, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
rm -f $IPPSO/AndroidBurnInProtection*.apk $IPPSO/SUIBurnInProtection*.apk
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install Burn In Protection $VIPBIP?" "IPBIPS" "$IDBIP"
fi
fi
}

IPBIPS () {
UCSA -a "20 40 60" "Choose Shift Interval:" "Interval" "60"; SHIFTINTERVAL=$UCSFNMC
if $UCSFNM; then UCSA -a "4dip 6dip" "Choose Horizontal Shift:" "Shift" "6dip"; HORIZONTALSWIFT=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "4dip 6dip" "Choose Vertical Shift:" "Shift" "6dip"; VERTICALSWIFT=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "20dip 30dip 40dip" "Choose AOD Horizontal Shift:" "Shift" "40dip"; AODHORIZONTALSWIFT=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "20dip 30dip 40dip" "Choose AOD Vertical Shift:" "Shift" "40dip"; AODVERTICALSWIFT=$UCSFNMC; fi
if $UCSFNM; then
UIP "Installing Burn In Protection $IAMM"
UZTPN "BIP"
if $MAGISK; then
PTMFI -nm "$IDBIP" "$MIPPSO"
cp -f $TMPDIR/BIP/*BurnInProtection*-$SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT*.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Burn In Protection" "$VIPBIP" "Burn In Protection For Status Bar, Gesture Pills/NavBar & AOD - Set On: $SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT"
else
cp -f $TMPDIR/BIP/*BurnInProtection*-$SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT*.apk $IPPSO
touch $AIOPFMDPH/burninprotection
fi
SET_PERM_RM -msgdi
fi
}

IPNSP () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/notificationsidepaddings ]; then
UIP -s "$MSGFI Notification Side Paddings, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
rm -f $IPPSO/NotificationSidePaddings*.apk $AIOPFMDPH/notificationsidepaddings
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install Notification Side Paddings $VIPNSP?" "IPNSPS" "$IDNSP"
fi
fi
}

IPNSPS () {
UCSA -a "0dip 5dip 10dip 15dip 20dip 25dip 30dip" "Side For Notification:" "Paddings Size" "30dip"; NSPCOS=$UCSFNMC
if $UCSFNM; then UCSA -a "0dip 5dip 10dip 15dip 20dip 25dip 30dip" "Side For First QS Notification:" "Paddings Size" "30dip"; NSPCOSA=$UCSFNMC; fi
if $UCSFNM; then
UIP "Installing Notification Side Paddings $IAMM"
UZTPN "NSP"
if $MAGISK; then
PTMFI -nm "$IDNSP" "$MIPPSO"
cp -f $TMPDIR/NSP/NotificationSidePaddings-$NSPCOS-$NSPCOSA.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Notification Side Paddings" "$VIPNSP" "Notification Side Paddings For QS/QS Notification/Lock Screen Notification - Set On: $NSPCOS-$NSPCOSA"
else
cp -f $TMPDIR/NSP/NotificationSidePaddings-$NSPCOS-$NSPCOSA.apk $IPPSO; touch $AIOPFMDPH/notificationsidepaddings
fi
SET_PERM_RM -msgdi
fi
}

IPSBISP () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/statusbariconspace ]; then
UIP -s "$MSGFI Status Bar Icon Space, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
rm -f $IPPSO/*StatusBarIconSpace*.apk $AIOPFMDPH/statusbariconspace
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install Status Bar Icon Space $VIPSBISP?" "IPSBISPS" "$IDSBISP"
fi
fi
}

IPSBISPS () {
UCSA -a "14dip 15dip 16dip 17dip 18dip 19dip 20dip" "Choose Space:" "Left Icon" "20dip"; ASBIS=$UCSFNMC
if $UCSFNM; then UCSA -a "-4dip -3dip -2dip -1dip 0dip 1dip 2dip 3dip 4dip" "Choose Space:" "Right Icon" "4dip"; SUISBIS=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "0dip 1dip 2dip 3dip 4dip" "Choose Space:" "Battery Icon" "4dip"; BSUISBIS=$UCSFNMC; fi
if $UCSFNM; then
UIP "Installing Status Bar Icon Space $IAMM"
UZTPN "SBIS"
if $MAGISK; then
PTMFI -nm "$IDSBISP" "$MIPPSO"
cp -f $TMPDIR/SBIS/AndroidStatusBarIconSpace-$ASBIS.apk $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/SBIS/SUIStatusBarIconSpace-$SUISBIS-$BSUISBIS.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Status Bar Icon Space" "$VIPSBISP" "Status Bar Icon Space - Set On: $ASBIS/$SUISBIS/$BSUISBIS"
else
cp -f $TMPDIR/SBIS/AndroidStatusBarIconSpace-$ASBIS.apk $IPPSO
cp -f $TMPDIR/SBIS/SUIStatusBarIconSpace-$SUISBIS-$BSUISBIS.apk $IPPSO
touch $AIOPFMDPH/statusbariconspace
fi
SET_PERM_RM -msgdi
fi
}

IPSBISI () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/statusbariconsize ]; then
UIP -s "$MSGFI Status Bar Icon Size, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
rm -f $IPPSO/*StatusBarIconSize*.apk $AIOPFMDPH/statusbariconsize
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install Status Bar Icon Size $VIPSBISI?" "IPSBISIS" "$IDSBISI"
fi
fi
}

IPSBISIS () {
UCSA -a "12dip 13dip 14dip 15dip 16dip 17dip 18dip" "Choose Size:" "Icon Size" "18dip"; ASBISI=$UCSFNMC
if $UCSFNM; then
UIP "Installing Status Bar Icon Size $IAMM"
UZTPN "SBIS"
if $MAGISK; then
PTMFI -nm "$IDSBISI" "$MIPPSO"
cp -f $TMPDIR/SBIS/StatusBarIconSize-$ASBISI.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Status Bar Icon Size" "$VIPSBISI" "Status Bar Icon Size - Set On: $ASBISI"
else
cp -f $TMPDIR/SBIS/StatusBarIconSize-$ASBISI.apk $IPPSO
touch $AIOPFMDPH/statusbariconsize
fi
SET_PERM_RM -msgdi
fi
}

IPSBCS () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/statusbarclocksize ]; then
UIP -s "$MSGFI Status Bar Clock Size, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
rm -f $IPPSO/StatusBarClockSize*.apk $AIOPFMDPH/statusbarclocksize
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install Status Bar Clock Size $VIPSBCS?" "IPSBCSS" "$IDSBCS"
fi
fi
}

IPSBCSS () {
UCSA -a "10sp 11sp 12sp 13sp 14sp 15sp 16sp 17sp 18sp 19sp 20sp" "Choose Size:" "Clock Size" "20sp"
if $UCSFNM; then
UIP "Installing Status Bar Clock Size $IAMM"
UZTPN "SBCS"
if $MAGISK; then
PTMFI -nm "$IDSBCS" "$MIPPSO"
cp -f $TMPDIR/SBCS/StatusBarClockSize-$UCSFNMC.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Status Bar Clock Size" "$VIPSBCS" "Status Bar Clock Size - Set On: $UCSFNMC"
else
cp -f $TMPDIR/SBCS/StatusBarClockSize-$UCSFNMC.apk $IPPSO
touch $AIOPFMDPH/statusbarclocksize
fi
SET_PERM_RM -msgdi
fi
}

IPSUE () {
if $MAGISK && [ $MIUI != true ] && CHECKER -sp "$XMLGLOBAL" "guest_user_enabled"; then UCSA "Install Single User Enabler $VIPSUE?" "IPSUES" "$IDSUE"; fi
}

IPSUES () {
UIP "Installing Single User Enabler $IAMM"
PTMFI -np "$IDSUE" "SingleUserMod"
MSSERVICE "$SPGLOBAL guest_user_enabled 1" "$SPGLOBAL guest_user_enabled 0" "SUM"
echo -e "fw.max_users=1\nfw.show_multiuserui=0" > $MODPATH/$MODID/system.prop
MMPR -v "Single User Enabler" "$VIPSUE" "Disable Multi Users"; SET_PERM_RM -msgdi
}

IPSBP () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/statusbarpadding ]; then
UIP -s "$MSGFI Status Bar Padding, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
rm -f $IPPSO/StatusBarPadding.apk $AIOPFMDPH/statusbarpadding
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install Status Bar Padding $VIPSBP?" "IPSBPS" "$IDSBP"
fi
fi
}

IPSBPS () {
UIP -s "Choose Variant:" "$MSGVU Choose One Start/End" "$MSGVD Choose Start/End Separately"
if KEYCHOOSE; then UCSA -a "0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip" "Choose Padding Start/End:" "Padding" "10dip"
SCSBPCO=$UCSFNMC; SCSBPCT=$UCSFNMC
else
UCSA -a "0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip" "Choose Padding Start:" "Padding" "10dip"
SCSBPCO=$UCSFNMC
if $UCSFNM; then
UCSA -a "0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip" "Choose Padding End:" "Padding" "10dip"
SCSBPCT=$UCSFNMC
fi
fi
if $UCSFNM; then
UIP "Installing Status Bar Padding $IAMM"
UZTPN "SBP"
if $MAGISK; then
PTMFI "$IDSBP" "SUIContentPadding" "$MIPPSO"
MMPR -v "Status Bar Padding" "$VIPSBP" "Status Bar Padding From The Edges Of The Screen - Set On: Start - $SCSBPCO & End - $SCSBPCT"
cp -f $TMPDIR/SBP/StatusBarPadding-$SCSBPCO-$SCSBPCT.apk $MODPATH/$MODID$MIPPSO
else
cp -f $TMPDIR/SBP/StatusBarPadding-$SCSBPCO-$SCSBPCT.apk $IPPSO/StatusBarPadding.apk
touch $AIOPFMDPH/statusbarpadding
fi
SET_PERM_RM -msgdi
fi
}

IPQSCP () {
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 29 ] && CHECKER -sp "$XMLSECURE" "sysui_rounded_content_padding"; then
UCSA -ent "Install QS Content Padding $VIPQSCP?" "IPQSCPS" "$IDQSCP"
fi
}

IPQSCPS () {
UCSA -a "$(seq 0 5 40)" "Choose Padding Size:" "Padding Size" "40"
if $UCSFNM; then
UIP "Installing QS Content Padding $IAMM"
if $BOOTMODE; then UIP "QS Content Padding Activated Right Now"; $SPSECURE sysui_rounded_content_padding $UCSFNMC; fi
PTMFI -nmp "$IDQSCP"
MSSERVICE -s "$SPSECURE sysui_rounded_content_padding $UCSFNMC"
MMPR -v "QS Content Padding" "$VIPQSCP" "QS Content Padding - Set On: $UCSFNMC"; SET_PERM_RM -msgdi
fi
}

IPSUIRSRS () {
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 29 ] && CHECKER -sp "$XMLSECURE" "sysui_rounded_size"; then
UCSA -ent "Install SUI Rounded Size $VIPSUIRSRS?" "IPSUIRSRSS" "$IDSUIRSRS"
fi
}

IPSUIRSRSS () {
if [ "$ASDK" -ge 31 ]; then UCSA -a "0 10 20 30 40 50 60 70 80 90 100" "Choose Rounded Size:" "Rounded Size" "100"; else UCSA -a "0 10 20 33 40 50 60 70 80 90 100" "Choose Rounded Size:" "Rounded Size" "100"; fi
if $UCSFNM; then
UIP "Installing SUI Rounded Size $IAMM"
if $BOOTMODE; then UIP "SUI Rounded Size Activated Right Now"; $SPSECURE sysui_rounded_size $UCSFNMC; fi
PTMFI -nmp "$IDSUIRSRS"
MSSERVICE -s "$SPSECURE sysui_rounded_size $UCSFNMC"
MMPR -v "SUI Rounded Size" "$VIPSUIRSRS" "Sui Rounded Size To Round The Screen Around The Edges - Set On: $UCSFNMC"; SET_PERM_RM -msgdi
fi
}

IPQSCIAR () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/qscounticonandrows ]; then
UIP -s "$MSGFI QS Count Icon And Rows, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
rm -f $IPPSO/QSCountIconAndRows*.apk $AIOPFMDPH/qscounticonandrows
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then UCSA -ent "Install QS Count Icon And Rows $VIPQSCIAR?" "IPQSCIARS" "$IDQSCIAR"; fi
fi
}

IPQSCIARS () {
if [ "$ASDK" -ge 31 ]; then
UCSA -a "2 3 4" "All QS:" "Count" "4"; SUIQSSNC=$UCSFNMC
if $UCSFNM; then UCSA -a "$(seq 1 1 10)" "Expand Portrait QS + All QS ($SUIQSSNC):" "Count" "10"; SUIQSMX=$UCSFNMC; fi
else
UCSA -a "$(seq 4 1 10)" "Minimized QS:" "Count" "10"; SUIQSC=$UCSFNMC
if $UCSFNM; then UCSA -a "$(seq 4 1 10)" "Expand Portrait QS:" "Count" "10"; SUIQSCP=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "$(seq 4 1 10)" "Expand Landscape QS:" "Count" "10"; SUIQSCL=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "$(seq 1 1 3)" "QS Rows Portrait:" "Count" "3"; SUIQSRP=$UCSFNMC; fi
if $UCSFNM; then UCSA -a "$(seq 1 1 3)" "QS Rows Landscape:" "Count" "3"; SUIQSRL=$UCSFNMC; fi
fi
if $UCSFNM; then
UIP "Installing QS Count Icon And Rows $IAMM"
UZTPN "QSCIAR"
if $MAGISK; then
PTMFI "$IDQSCIAR" "QSCIAR A12VerticalQS3Columns" "$MIPPSO"
if [ "$ASDK" -ge 31 ]; then
cp -f $TMPDIR/QSCIAR/QSCountIconAndRows-$SUIQSSNC-$SUIQSMX.apk $MODPATH/$MODID$MIPPSO
MMPR -v "QS Count Icon And Rows" "$VIPQSCIAR" "QS Count Icon And Rows - Set On: $SUIQSSNC-$SUIQSMX"
else
cp -f $TMPDIR/QSCIAR/QSCountIconAndRows-$SUIQSC-$SUIQSCP-$SUIQSCL-$SUIQSRP-$SUIQSRL.apk $MODPATH/$MODID$MIPPSO
MMPR -v "QS Count Icon And Rows" "$VIPQSCIAR" "QS Count Icon And Rows - Set On: $SUIQSC-$SUIQSCP-$SUIQSCL-$SUIQSRP-$SUIQSRL"
fi
else
if [ "$ASDK" -ge 31 ]; then
cp -f $TMPDIR/QSCIAR/QSCountIconAndRows-$SUIQSSNC-$SUIQSMX.apk $IPPSO
else
cp -f $TMPDIR/QSCIAR/QSCountIconAndRows-$SUIQSC-$SUIQSCP-$SUIQSCL-$SUIQSRP-$SUIQSRL.apk $IPPSO
fi
touch $AIOPFMDPH/qscounticonandrows
fi
SET_PERM_RM -msgdi
fi
}

IPSBPD () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/statusbarprivacydot ]; then
UIP -s "$MSGFI Status Bar Privacy Dot, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
rm -f $IPPSO/StatusBarPrivacyDot*.apk $AIOPFMDPH/statusbarprivacydot
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 31 ]; then UCSA -ent "Install Status Bar Privacy Dot $VIPSBPD?" "IPSBPDS" "$IDSBPD"; fi
fi
}

IPSBPDS () {
UIP -s "Choose Variant:" "$MSGVU Disable" "$MSGVD Optimized"
if KEYCHOOSE; then SBPDV=Disable; else SBPDV=Optimized; fi
UIP "Installing Status Bar Privacy Dot $IAMM"
UZTPN "SBPD"
if $MAGISK; then
PTMFI -nm "$IDSBPD" "$MIPPSO"
cp -f $TMPDIR/SBPD/StatusBarPrivacyDot-$SBPDV.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Status Bar Privacy Dot" "$VIPSBPD" "Status Bar Privacy Dot - Set On: $SBPDV"
else
cp -f $TMPDIR/DSBPD/StatusBarPrivacyDot-$SBPDV.apk $IPPSO
touch $AIOPFMDPH/statusbarprivacydot
fi
SET_PERM_RM -msgdi
}

IPEBB () {
if [ $MIUI != true ] && [ "$ASDK" -ge 30 ]; then
UCSA -ent "Install Background Blur $VIPEBB?" "IPEBBS" "$IDEBB"
fi
}

IPEBBS () {
UIP "Background Blur $IAMM"
if $MAGISK; then
PTMFI -nmp "$IDEBB"
echo "ro.surface_flinger.supports_background_blur=1" > $MODPATH/$MODID/system.prop
MMPR -v "Background Blur" "$VIPEBB" "Enable Background Blur For QS, Launcher Resents, Etc"
SET_PERM_RM
else
BUCKUPER -bp
echo -e "\n#Background Blur\nro.surface_flinger.supports_background_blur=1" >> $IPSBP
fi
UIP "$MSGDI"
}

IPBA () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/bootanimation ] && [ -f $IPPM/bootanimation.zip.bak ]; then
UIP -s "$MSGFI Boot Animation, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
BUCKUPER -r "$IPPM/bootanimation.zip $IPPM/bootanimation-dark.zip"
rm -f $AIOPFMDPH/bootanimation
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ]; then
UCSA "Install Boot Animation $VIPBA?" "IPBAS" "$IDBA"
fi
fi
}

IPBAS () {
BATC=false
UIP -s "Choose Boot Animation:" "$MSGVU Google Pixel" "$MSGVD $MSGNIS"
if KEYCHOOSE; then
UIP -s "Choose Color Variant:" "$MSGVU Black" "$MSGVD White"
if KEYCHOOSE; then BADIR=GPBAB; else BADIR=GPBAW; fi; BATC=true; BANAME=Pixel
else
UIP -s "Choose Boot Animation:" "$MSGVU TenX" "$MSGVD $MSGNIS"
if KEYCHOOSE; then
UIP -s "Choose Color Variant:" "$MSGVU Black" "$MSGVD White"
if KEYCHOOSE; then BADIR=TENXB; else BADIR=TENXW; fi; BATC=true; BANAME=TenX
else
UIP -s "Choose Boot Animation:" "$MSGVU Radiant" "$MSGVD $MSGNIS"
if KEYCHOOSE; then
BATC=true; BADIR=RADIANT; BANAME=Radiant
else
UIP -s "Choose Boot Animation:" "$MSGVU Spark" "$MSGVD $MSGNIS"
if KEYCHOOSE; then
BATC=true; BADIR=SPARK; BANAME=Spark
else
UIP -s "Choose Boot Animation:" "$MSGVU Awaken" "$MSGVD $MSGNIS"
if KEYCHOOSE; then
BATC=true; BADIR=AWAKEN; BANAME=Awaken
else
UIP -s "Choose Boot Animation:" "$MSGVU VoidUI" "$MSGVD $MSGNUS"
if KEYCHOOSE; then
BATC=true; BADIR=VOIDUI; BANAME=VoidUI
fi
fi
fi
fi
fi
fi
if $BATC; then
UIP -s "Choose FPS:" "$MSGVU 60" "$MSGVD 30"; if KEYCHOOSE; then BAFPS="60"; else BAFPS="30"; fi
UIP "Installing Boot Animation $IAMM"
UZTPN "BA"
sed -i "s/#FPS/$BAFPS/g" $TMPDIR/BA/$BADIR/desc.txt
cd $TMPDIR/BA/$BADIR
$ZIPPACKER -r -0 $TMPDIR/BA/$BADIR * >/dev/null
mv -f $TMPDIR/BA/$BADIR.zip $TMPDIR/BA/bootanimation.zip
if $MAGISK; then
PTMFI -nm "$IDBA" "$MIPPM"
cp -f $TMPDIR/BA/bootanimation.zip $MODPATH/$MODID$MIPPM
if [ -f $IPPM/bootanimation-dark.zip ]; then cp -f $TMPDIR/BA/bootanimation.zip $MODPATH/$MODID$MIPPM/bootanimation-dark.zip; fi
MMPR -v "Boot Animation" "$VIPBA" "Boot Animation From $BANAME"
else
BUCKUPER -s "$IPPM/bootanimation.zip $IPPM/bootanimation-dark.zip"
cp -f $TMPDIR/BA/bootanimation.zip $IPPM; touch $AIOPFMDPH/bootanimation
if [ -f $IPPM/bootanimation-dark.zip ]; then cp -f $TMPDIR/BA/bootanimation.zip $IPPM/bootanimation-dark.zip; fi
fi
SET_PERM_RM -msgdi
fi
}

IPIOSEMOJI () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/iosemoji ] && [ -f $IPSF/NotoColorEmoji.ttf.bak ]; then
UIP -s "$MSGFI IOS Emoji, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
BUCKUPER -r "$IPSF/NotoColorEmoji.ttf $IPSF/SamsungColorEmoji.ttf $IPSF/HTC_ColorEmoji.ttf"
rm -f $AIOPFMDPH/iosemoji
UIP "$MSGDRM"
fi
else
UCSA "Install IOS Emoji From IOS 15.4 $VIPIOSEMOJI?" "IPIOSEMOJIS" "$IDIOSEMOJI"
fi
}

IPIOSEMOJIS () {
UIP "Installing IOS Emoji $IAMM"
UZTPN "IOSEmoji"
if $MAGISK; then
PTMFI "$IDIOSEMOJI" "iOS14.6_Emoji_for_Android emoji-replacer-809887617 android11emoji EmojiReplacer" "$MIPSF"
for TTF in NotoColorEmoji SamsungColorEmoji HTC_ColorEmoji; do
if [ -f $MAGISKMP$IPSF/$TTF.ttf ]; then cp -f $TMPDIR/IOSEmoji/$TTF.ttf $MODPATH/$MODID$MIPSF; fi
done
MMPR -v "IOS Emoji" "$VIPIOSEMOJI" "Emoji From IOS 15.4"
MSSERVICE -s "sed -i \"/emoji_compat_app_whitelist/d\" $GBFVXML"
else
sed -i "/emoji_compat_app_whitelist/d" $GBFVXML
BUCKUPER -s "$IPSF/NotoColorEmoji.ttf $IPSF/SamsungColorEmoji.ttf $IPSF/HTC_ColorEmoji.ttf"
for TTF in NotoColorEmoji SamsungColorEmoji HTC_ColorEmoji; do
if [ -f $MAGISKMP$IPSF/$TTF.ttf ]; then cp -f $TMPDIR/IOSEmoji/$TTF.ttf $IPSF; fi
done
fi
if [ -f /data/fonts/config/config.xml ]; then
SFONTS=$(grep -m1 "^<updatedFontDir value=" "/data/fonts/config/config.xml" | cut -d'"' -f2 | cut -d ' ' -f1)
if [ -d /data/fonts/files/$SFONTS ]; then
UIP "Found $SFONTS in /data/fonts/files"
rm -rf /data/fonts/files/$SFONTS /data/fonts/config/config.xml
fi
fi
SET_PERM_RM -msgdi
}

IPMUIS () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/mediauisounds ]; then
UIP -s "$MSGFI Media UI Sounds, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
IPMUISSA
rm -f $AIOPFMDPH/MediaUISounds
UIP "$MSGDRM"
fi
else
UCSA "Install Media UI Sounds $VIPMUIS?" "IPMUISS" "$IDMUIS"
fi
}

IPMUISS () {
MASIKALT=false
UCSA -a "Masik OnePlus Pixel Samsung Oppo Spark Arcana" "Choose Media Variant:" "Media From" "Arcana"
if $UCSFNM; then
case $UCSFNMC in
"Masik") UIP -s "Use Masik Alt Lock Unlock Sound?" "$MSGVU Yes" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then MASIKALT=true; fi;;
"OnePlus") UIP -s "Choose UI Sound From:" "$MSGVU OOS 12" "$MSGVD OOS 11"; if KEYCHOOSE; then MUIC="/12"; else MUIC="/11"; fi;;
esac
UIP -s "Choose Sounds Volume:" "$MSGVU Standart Volume" "$MSGVD Boost Volume"; if KEYCHOOSE; then MUIP="VS"; else MUIP="VB"; fi
UIP "Installing Media UI Sounds $IAMM"
UZTPN "MediaUISounds"
if $MAGISK; then
if $MASIKALT; then mv -f $TMPDIR/MediaUISounds/$MUIP/MasikAlt/* $TMPDIR/MediaUISounds/$MUIP/Masik; fi
PTMFI "$IDMUIS" "MediaUiSounds" "$MIPPMU"
cp -f $TMPDIR/$MODID/$MUIP/$UCSFNMC$MUIC/* $MODPATH/$MODID$MIPPMU
MMPR -v "Media UI Sounds" "$VIPMUIS" "Media UI Sounds From $UCSFNMC"
else
IPMUISSA
cp -f $TMPDIR/MediaUISounds/$MUIP/$UCSFNMC$MUIC/* $IPPMU
touch $AIOPFMDPH/mediauisounds
fi
SET_PERM_RM -msgdi
fi
}

IPMUISSA () {
BUCKUPER -s "
$IPPMU/audio_end.ogg
$IPPMU/audio_initiate.ogg
$IPPMU/camera_click.ogg
$IPPMU/camera_focus.ogg
$IPPMU/ChargingStarted.ogg
$IPPMU/Dock.ogg
$IPPMU/Effect_Tick.ogg
$IPPMU/InCallNotification.ogg
$IPPMU/KeypressDelete.ogg
$IPPMU/KeypressInvalid.ogg
$IPPMU/KeypressReturn.ogg
$IPPMU/KeypressSpacebar.ogg
$IPPMU/KeypressStandard.ogg
$IPPMU/Lock.ogg
$IPPMU/LowBattery.ogg
$IPPMU/NFCFailure.ogg
$IPPMU/NFCInitiated.ogg
$IPPMU/NFCSuccess.ogg
$IPPMU/NFCTransferComplete.ogg
$IPPMU/NFCTransferInitiated.ogg
$IPPMU/Trusted.ogg
$IPPMU/Undock.ogg
$IPPMU/Unlock.ogg
$IPPMU/VideoRecord.ogg
$IPPMU/VideoStop.ogg
$IPPMU/WirelessChargingStarted.ogg
"
}

IPFDNI () {
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 29 ] && $LEGACYMODE; then
UCSA "Install Force Disable Notification Icons $VIPFDNI?" "IPFDNIS" "$IDFDNI"
fi
}

IPFDNIS () {
UIP "Installing Force Disable Notification Icons $IAMM"
PTMFI -np "$IDFDNI" "MediaUiSounds"
MSSERVICE -s "cmd statusbar send-disable-flag notification-icons"
MMPR -v "Force Disable Notification Icons" "$VIPFDNI" "Force Disable Notification Icons In Status Bar"; SET_PERM_RM -msgdi
}

IPWFAMDQSOS () {
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 31 ]; then UCSA "Install Wi-Fi & Mobile Data QS Old Style $VIPWFAMDQSOS?" "IPWFAMDQSOSS" "$IDWFAMDQSOS"; fi
}

IPWFAMDQSOSS () {
UIP "Installing Wi-Fi & Mobile Data QS Old Style $IAMM"
PTMFI -np "$IDWFAMDQSOS" "OldDataWifiQsStyle WFAMDQSSC"
MSSERVICE "$SPGLOBAL settings_provider_model true; $SPSECURE sysui_qs_tiles \"internet,\$($SGSECURE sysui_qs_tiles)\"" "$SPGLOBAL settings_provider_model false; $SPSECURE sysui_qs_tiles \"wifi,cell,\$($SGSECURE sysui_qs_tiles)\"" "WFAMDQSOS"
if $BOOTMODE; then UIP "Wi-Fi & Mobile Data QS Old Style Right Now"; $SPGLOBAL settings_provider_model false; $SPSECURE sysui_qs_tiles "wifi,cell,$($SGSECURE sysui_qs_tiles)"; fi
MMPR -v "Wi-Fi & Mobile Data QS Old Style" "$VIPGPPM" "Wi-Fi & Mobile Data QS Old Style"; SET_PERM_RM -msgdi
}

} #

{ #Launchers: Shady/Lawnchair/Sushi

IPSL () {
if $MAGISK && [ $MIUI != true ] && [ $ASDK -ge 29 ] && [ $ASDK -ne 31 ] && [ $ASDK -ne 33 ]; then
SYSTEMLESSLAUNCHERS=false
UCSA -ent "Install Systemless Launcher?" "IPSLS" "$IDSL $IDSSL $IDSSUL"
fi
}

IPSLS () {
if [ $SYSTEMLESSLAUNCHERS != true ]; then
if $ATEN || $AELEVEN; then
if $ATEN; then
UIP -s "Install Shady Launcher $VIPSSLQ?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
elif $AELEVEN; then
UIP -s "Install Shady Launcher $VIPSSLR?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
fi
if KEYCHOOSE; then IPSLSLS; fi
fi
fi
if [ $SYSTEMLESSLAUNCHERS != true ] && $ATWELVEL; then
UIP -s "Install Lawnchair $VIPASLSL - $VIPSL?" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then IPSLLS; fi
fi
if [ $SYSTEMLESSLAUNCHERS != true ] && $ATWELVEL; then
UIP -s "Install Sushi Launcher $VIPSSULA - $VIPSSUL?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then IPSLSULS; fi
fi
}

IPSLSE () {
UZTPN "QSRP"
echo -e "ro.boot.vendor.overlay.static=false\nro.control_privapp_permissions=disable" > $MODPATH/$MODID/system.prop
mkdir -p $TMPDIR/$MODID$MIPPSO; cp -f $TMPDIR/QSRP/QuickStepRecentsProvider-$PACKAGENAME.apk $TMPDIR/$MODID$MIPPSO/QuickStepRecentsProvider.apk
if [ -d $TMPDIR/$MODID$MIPSSEPA/ThemePicker ]; then
APKPERM "$TMPDIR/$MODID$MIPSSEPA/ThemePicker/ThemePicker.apk" "$TMPDIR/$MODID$MIPSSEPEP"; HAPWL "$TMPDIR/$MODID$MIPSSEPES"
fi
cp -rf $TMPDIR/$MODID/* $MODPATH/$MODID
REPLACER -f "$LAUNCHERLIST"
MOVERPATH
SET_PERM_RM -msgdi
}

IPSLSLS () {
UIP "Installing Shady Launcher $IAMM"
PTMFI -np "$IDSSL" "$MMLAUNCHERLIST"
SYSTEMLESSLAUNCHERS=true
UZTPN "$MODID-$ACNV"
cp -rf $TMPDIR/Systemless_ShadyLauncher-$ACNV $TMPDIR/$MODID
APKPERM "$TMPDIR/$MODID$MIPSPA/ShadyQuickStep/ShadyQuickStep.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"
if $ATEN; then
MMPR -vc "Systemless Shady Launcher" "$VIPSSLQ" "$VCIPSSLQ" "SKULSHADY" "Systemlessly Install Shady Launcher For Android 10 With Recents UI Support. Launcher Created By SKULSHADY."
elif $AELEVEN; then
MMPR -vc "Systemless Shady Launcher" "$VIPSSLR" "$VCIPSSLR" "SKULSHADY" "Systemlessly Install Shady Launcher For Android 11 With Recents UI Support. Launcher Created By SKULSHADY."
fi
IPSLSE
}

IPSLLS () {
UIP "Installing Lawnchair $IAMM"
PTMFI -np "$IDSL" "$MMLAUNCHERLIST"
SYSTEMLESSLAUNCHERS=true
UZTPN "$MODID-$ACNV"
cp -rf $TMPDIR/$MODID-$ACNV $TMPDIR/$MODID
APKPERM "$TMPDIR/$MODID$MIPSPA/Lawnfeed/Lawnfeed.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"
APKPERM "$TMPDIR/$MODID$MIPSPA/Lawnicons/Lawnicons.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"
APKPERM "$TMPDIR/$MODID$MIPSPA/Lawnchair/Lawnchair.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"
MMPR -v "Systemless Lawnchair" "$VIPSL" "Systemlessly Install Lawnchair For Android 12.1 With Recents UI Support"
IPSLSE
}

IPSLSULS () {
UIP "Installing Sushi Launcher $IAMM"
PTMFI -np "$IDSSUL" "$MMLAUNCHERLIST"
SYSTEMLESSLAUNCHERS=true
UZTPN "$IDSSUL-$ACNV"
cp -rf $TMPDIR/$MODID-$ACNV $TMPDIR/$MODID
APKPERM "$TMPDIR/$MODID$MIPSPA/Launcher3QuickStep/Launcher3QuickStep.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"
MMPR -v "Systemless Sushi Launcher" "$VIPSSUL" "Systemlessly Install Sushi Launcher For Android 12.1 With Recents UI Support"
IPSLSE
}

} #

{ #Install App From $STORAGE/Applications

IPAPP () {
if [ -d $STORAGE/Applications ] && find $STORAGE/Applications -type f -name "*.apk" >/dev/null; then
UCSA -ent "Install App From $STORAGE/Applications?" "IPAPPS" "AIOIARPFMD"
fi
}

IPAPPS () {
UIP -s "Choose Path Variant:" "$MSGVU Install Every App In Data" "$MSGVD Install Every App In System $MSGRI"
if KEYCHOOSE; then IAPPASD=true; else IAPPASD=false; fi
UIP -s "Choose Install Variant:" "$MSGVU Install Every App With Confirm" "$MSGVD Install Every App Without Confirm"
if KEYCHOOSE; then IEAW=true; else IEAW=false; fi
cd $STORAGE/Applications
for F in *; do if [ -f "$F" ]; then mv "$F" `echo $F | tr ' ' '_'`; fi; done
for APKINPUT in $(ls $STORAGE/Applications); do
if [ -f $STORAGE/Applications/$APKINPUT ]; then
if $IEAW; then
UIP -s "Found $APKINPUT" "$MSGVU Install?" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
IPAPPSA
fi
else
IPAPPSA
fi
fi
done
}

IPAPPSA () {
PACKAGENAME="$($AAPT list -a "$STORAGE/Applications/$APKINPUT" | awk -v FS='"' '/package=/{print $2}')"
if $IAPPASD; then
APKINSTALLER -d "$STORAGE/Applications/$APKINPUT"
else
mkdir -p $TMPDIR/$PACKAGENAME; cp -f "$STORAGE/Applications/$APKINPUT" "$TMPDIR/$PACKAGENAME/$PACKAGENAME.apk"
APKINSTALLER -a "$PACKAGENAME" "$PACKAGENAME"; rm -rf $TMPDIR/$PACKAGENAME
if [ $MAGISK != true ]; then echo "$PACKAGENAME" >> $AIOPFMDPH/AIL.txt; fi
fi
UIP "$MSGDI"
}

} #

{ #Audio: VFX(P)/DOLBY/NLS/AIST/SAQ/IB/AML/ALCF

IPVFX () {
if $MAGISK && FINDER "$AECONFXML"; then
if [ $ASDK -le 30 ] && [ ! $ASDK -le 22 ]; then
UCSA "Install ViperFX $VIPVFX - v2.5.0.5 Or v2.7.1.6?" "IPVFXS" "$IDVFX"
elif [ $ASDK -le 22 ]; then
UCSA "Install ViperFX $VIPVFX - v2.5.0.5?" "IPVFXS" "$IDVFX"
elif [ $ASDK -ge 31 ]; then
UCSA "Install ViperFX $VIPVFX - v2.7.2.1?" "IPVFXS" "$IDVFX"
fi
fi
}

IPVFXS () {
if [ $ASDK -le 30 ] && [ ! $ASDK -le 22 ]; then
UIP -s "Choose Version:" "$MSGVU ViperFX v2.5.0.5" "$MSGVD ViperFX v2.7.1.6"
if KEYCHOOSE; then V4AFX="2.5.0.5"; else V4AFX="2.7.1.6"; fi
elif [ $ASDK -le 22 ]; then V4AFX="2.5.0.5"
elif [ $ASDK -ge 31 ]; then V4AFX="2.7.2.1"
fi
UIP "Installing ViperFX $IAMM"
UZTPN "V4AFX"
PTMFI "$IDVFX" "ViPER4AndroidFX ViPER4AndroidFX-Legacy" "$MIPSVLS $MIPSPA/ViPER4AndroidFX"
if [ $ASDK -ge 31 ]; then
mkdir -p $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/V4AFX/ViPER4AndroidFX-Black-Blue.apk $MODPATH/$MODID$MIPPSO
fi
cp -f $TMPDIR/V4AFX/ViPER4AndroidFX-$V4AFX.apk $MODPATH/$MODID$MIPSPA/ViPER4AndroidFX/ViPER4AndroidFX.apk
APKPERM "$MODPATH/$MODID$MIPSPA/ViPER4AndroidFX/ViPER4AndroidFX.apk" "$MODPATH/$MODID$MIPSEP"; HAPWL "$MODPATH/$MODID$MIPSES"; MKSCXML "$MODPATH/$MODID$MIPSES"
MMPR -v "V4AFX" "$VIPVFX" "V4AFX v$V4AFX Is An Audio Enhancing Software To Provide Everyone With A Better Audio Experience"
echo -e "tunnel.decode=false\nlpa.use-stagefright=false\nlpa.releaselock=false\nlpa.decode=false\nro.control_privapp_permissions=disable" > $MODPATH/$MODID/system.prop
echo -e "#!$MIPSB/sh\nSERVERPID=\$(pidof audioserver); [ \"\$SERVERPID\" ] && kill \$SERVERPID" | tee $MODPATH/$MODID/service.sh $MODPATH/$MODID/post-fs-data.sh > /dev/null
MSSERVICE -uc "if [ ! -d \"$MODPATH/$MODID\" ]; then pm uninstall -k --user 0 com.pittvandewitt.viperfx; rm -rf $SERVICED/V4AFX.sh; break; else break; fi" "V4AFX"
cp -f $TMPDIR/V4AFX/libv4a_fx_ics.so $MODPATH/$MODID$MIPSVLS
cp -f $TMPDIR/V4AFX/libstdc++.so $MODPATH/$MODID$MIPSVL
REPLACER -f "AudioFX MusicFX"
UIP "$MSGPNF"
for FAECONFXML in $AECONFXML; do
UIP "Found $FAECONFXML" "Patching..."
PSF="$MODPATH/$MODID$FAECONFXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FAECONFXML $PSF
PSXCF -osp "$PSF"
PSXCF -aae "v4a_standard_fx" "v4a_fx" "libv4a_fx_ics.so" "41d3c987-e6cf-11e3-a88a-11aba5d5c51b"
UIP "$MSGFFAP"
done
MOVERPATH
SET_PERM_RM -msgdi
WCANFTP "-sl -ehap -alcf -aml"
}

IPVFXP () {
UCSA "Install Presets $VIPVFXP For ViperFX?" "IPVFXPS" "$IDVFXP"
}

IPVFXPS () {
UIP "Installing Presets For ViperFX $IAMM"
UZTPN "V4AFXPresets"
mkdir -p $STORAGE/Android/data/com.pittvandewitt.viperfx/files $STORAGE/ViPER4Android
cp -rf $TMPDIR/V4AFXPresets/* $STORAGE/Android/data/com.pittvandewitt.viperfx/files
cp -rf $TMPDIR/V4AFXPresets/* $STORAGE/ViPER4Android
mv $STORAGE/ViPER4Android/Preset $STORAGE/ViPER4Android/Profile
if $MAGISK; then
PTMFI -nmp "$IDVFXP"
MSSERVICE -u "rm -rf $STORAGE/Android/data/com.pittvandewitt.viperfx $STORAGE/ViPER4Android" "V4AFXP"
MMPR -v "V4AFX Presets" "$VIPVFXP" "V4AFX Presets For V4AFX"
fi
SET_PERM_RM -msgdi
}

IPDA () {
if $MAGISK && [ $ASDK -ge 28 ]; then
UCSA -eno "Install Dolby Atmos $VIPDA?" "IPDAS" "$IDDA"
fi
}

IPDAS () {
UIP "Installing Dolby Atmos $IAMM"
UZTPN "DolbyAtmos"
PTMFI -np "$IDDA" "dolbyatmos DolbyAudio MotoDolby SoundEnhancement MiSound AudioFxMoto MotoWaves"
MMPR -v "Dolby Atmos" "$VIPDA" "Dolby Atmos - Is An Audio Enhancing Software To Provide Everyone With A Better Audio Experience"
echo "dontaudit system_server system_file file write
allow system_server system_file file write
type system_lib_file
type vendor_file
type vendor_configs_file
type hal_dms_default_exec
type vendor_data_file
type vendor_media_data_file
dontaudit { system_lib_file vendor_file vendor_configs_file hal_dms_default_exec vendor_data_file vendor_media_data_file } labeledfs filesystem associate
allow { system_lib_file vendor_file vendor_configs_file hal_dms_default_exec vendor_data_file vendor_media_data_file } labeledfs filesystem associate
dontaudit init { system_lib_file vendor_file vendor_configs_file vendor_data_file vendor_media_data_file } dir relabelfrom
allow init { system_lib_file vendor_file vendor_configs_file vendor_data_file vendor_media_data_file } dir relabelfrom
dontaudit init { system_lib_file vendor_file vendor_configs_file hal_dms_default_exec vendor_data_file vendor_media_data_file } file relabelfrom
allow init { system_lib_file vendor_file vendor_configs_file hal_dms_default_exec vendor_data_file vendor_media_data_file } file relabelfrom
type same_process_hal_file
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app hal_audio_default mtk_hal_audio audioserver } { default_android_hwservice hal_dms_hwservice dms_hwservice } hwservice_manager find
allow daxservice_app permission_checker_service service_manager find
dontaudit { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } hal_dms_default binder call
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } hal_dms_default binder call
dontaudit { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } { hal_dms_default_exec vendor_displayfeature_prop } file getattr
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } { hal_dms_default_exec vendor_displayfeature_prop } file getattr
dontaudit { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } bluetooth_prop file map
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } bluetooth_prop file map
dontaudit { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } vendor_default_prop file { read open getattr }
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } vendor_default_prop file { read open getattr }
dontaudit { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } debug_mtk_gpud_prop file { read open getattr map }
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } debug_mtk_gpud_prop file { read open getattr map }
dontaudit { hal_audio_default mtk_hal_audio audioserver } system_file file { read open getattr execute }
allow { hal_audio_default mtk_hal_audio audioserver } system_file file { read open getattr execute }
dontaudit zygote { device unlabeled } file write
allow zygote { device unlabeled } file write
dontaudit init system_file file mounton
allow init system_file file mounton
dontaudit { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } device chr_file { read write open getattr ioctl }
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } device chr_file { read write open getattr ioctl }
dontaudit { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } migt_file dir search
allow { system_app priv_app platform_app untrusted_app_29 untrusted_app_27 untrusted_app } migt_file dir search
allow { hal_audio_default mtk_hal_audio audioserver } system_suspend_hwservice hwservice_manager find
dontaudit { hal_audio_default mtk_hal_audio audioserver } { default_prop boottime_prop } file { read open getattr map }
allow { hal_audio_default mtk_hal_audio audioserver } { default_prop boottime_prop } file { read open getattr map }
dontaudit { hal_audio_default mtk_hal_audio audioserver } { mnt_vendor_file system_prop } file { read open getattr }
allow { hal_audio_default mtk_hal_audio audioserver } { mnt_vendor_file system_prop } file { read open getattr }
dontaudit { hal_audio_default mtk_hal_audio audioserver } audio_prop file { read open getattr }
allow { hal_audio_default mtk_hal_audio audioserver } audio_prop file { read open getattr }
dontaudit { hal_audio_default mtk_hal_audio audioserver } sysfs_wake_lock file { write open }
allow { hal_audio_default mtk_hal_audio audioserver } sysfs_wake_lock file { write open }
dontaudit { hal_audio_default mtk_hal_audio audioserver } vendor_default_prop file open
allow { hal_audio_default mtk_hal_audio audioserver } vendor_default_prop file open
dontaudit { hal_audio_default mtk_hal_audio audioserver } sysfs_net dir read
allow { hal_audio_default mtk_hal_audio audioserver } sysfs_net dir read
dontaudit { hal_audio_default mtk_hal_audio audioserver } { diag_device vendor_diag_device } chr_file { read write open ioctl getattr }
allow { hal_audio_default mtk_hal_audio audioserver } { diag_device vendor_diag_device } chr_file { read write open ioctl getattr }
dontaudit hal_audio_default hal_audio_default capability2 block_suspend
allow hal_audio_default hal_audio_default capability2 block_suspend
dontaudit mtk_hal_audio mtk_hal_audio capability2 block_suspend
allow mtk_hal_audio mtk_hal_audio capability2 block_suspend
dontaudit audioserver audioserver capability2 block_suspend
allow audioserver audioserver capability2 block_suspend" > $MODPATH/$MODID/sepolicy.rule
echo "#!$MIPSB/sh

resetprop ro.feature.dolby_enable true
resetprop vendor.audio.dolby.ds2.enabled false
resetprop vendor.audio.dolby.ds2.hardbypass false

killall audioserver

for STOPSERVICE in \"dms-hal-1-0\" \"dms-hal-2-0\"; do
if getprop | grep \"init.svc.\$STOPSERVICE\]: \[running\"; then
stop \$STOPSERVICE
fi
done

FILE=\`realpath /vendor\`/bin/hw/vendor.dolby.hardware.dms@1.0-service
killall \$FILE
\$FILE &
PID=\`pidof \$FILE\`

GPSF=\`getprop audio.rotation\`
if [ \"\$GPSF\" == 1 ]; then
resetprop ro.audio.monitorRotation true
fi

killall com.dolby.daxservice com.dolby.atmos
VIBRATOR=\`realpath /*/bin/hw/vendor.qti.hardware.vibrator.service*\`
[ \"\$VIBRATOR\" ] && killall \$VIBRATOR
POWER=\`realpath /*/bin/hw/vendor.mediatek.hardware.mtkpower@*-service\`
[ \"\$POWER\" ] && killall \$POWER
killall android.hardware.sensors@2.0-service-mediatek
killall android.hardware.light-service.mt6768
CAMERA=\`realpath /*/bin/hw/android.hardware.camera.provider@*-service_64\`
[ \"\$CAMERA\" ] && killall \$CAMERA" > $MODPATH/$MODID/service.sh
echo "#!$MIPSB/sh
DIR=/data/vendor/dolby
if [ ! -d \$DIR ]; then mkdir -p \$DIR; fi
chmod 0770 \$DIR
chown 1013.1013 \$DIR
chcon u:object_r:vendor_data_file:s0 \$DIR
[ -d \"/sbin/.magisk\" ] && MAGISKMP=\"/sbin/.magisk\" || MAGISKMP=\`find /dev -mindepth 2 -maxdepth 2 -type d -name .magisk\`
OPMANIFESTXML=\$MAGISKMP/mirror$MIPSE/vintf/manifest.xml
PMANIFESTXML=$MODPATH/$MODID$MIPSE/vintf/manifest.xml
rm -f \$PMANIFESTXML
FMANIFESTXML=\"\$MAGISKTMP/mirror/*/etc/vintf/manifest.xml \$MAGISKTMP/mirror/*/*/etc/vintf/manifest.xml /*/etc/vintf/manifest.xml /*/*/etc/vintf/manifest.xml \$MAGISKTMP/mirror/*/etc/vintf/manifest/*.xml \$MAGISKTMP/mirror/*/*/etc/vintf/manifest/*.xml /*/etc/vintf/manifest/*.xml /*/*/etc/vintf/manifest/*.xml\"
if ! getprop | grep -Eq \"dolby.skip.*\]: \[1\"\\
&& ! grep -A2 vendor.dolby.hardware.dms \$FMANIFESTXML | grep -Eq 1.0; then
cp -f \$OPMANIFESTXML \$PMANIFESTXML
if [ -f \$PMANIFESTXML ]; then
sed -i '/<manifest/a\\
    <hal format=\"hidl\">\\
        <name>vendor.dolby.hardware.dms</name>\\
        <transport>hwbinder</transport>\\
        <version>1.0</version>\\
        <interface>\\
            <name>IDms</name>\\
            <instance>default</instance>\\
        </interface>\\
        <fqname>@1.0::IDms/default</fqname>\\
    </hal>' \$PMANIFESTXML
mount -o bind \$PMANIFESTXML $MIPSE/vintf/manifest.xml
killall hwservicemanager
fi
fi" > $MODPATH/$MODID/post-fs-data.sh
echo "ro.control_privapp_permissions=disable" > $MODPATH/$MODID/system.prop

if FINDER "$AECONFXML"; then
GPSF=`getprop stream.mode`
UIP "$MSGPNF"
for FAECONFXML in $AECONFXML; do
UIP "Found $FAECONFXML" "Patching..."
PSF="$MODPATH/$MODID$FAECONFXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FAECONFXML $PSF
case $PSF in
*.conf) sed -i "/^        ring_helper {/ {;N s/        ring_helper {\n        }//}" $PSF
sed -i "/^        alarm_helper {/ {;N s/        alarm_helper {\n        }//}" $PSF
sed -i "/^        music_helper {/ {;N s/        music_helper {\n        }//}" $PSF
sed -i "/^        voice_helper {/ {;N s/        voice_helper {\n        }//}" $PSF
sed -i "/^        notification_helper {/ {;N s/        notification_helper {\n        }//}" $PSF
sed -i "/^        ma_ring_helper {/ {;N s/        ma_ring_helper {\n        }//}" $PSF
sed -i "/^        ma_alarm_helper {/ {;N s/        ma_alarm_helper {\n        }//}" $PSF
sed -i "/^        ma_music_helper {/ {;N s/        ma_music_helper {\n        }//}" $PSF
sed -i "/^        ma_voice_helper {/ {;N s/        ma_voice_helper {\n        }//}" $PSF
sed -i "/^        ma_system_helper {/ {;N s/        ma_system_helper {\n        }//}" $PSF
sed -i "/^        ma_notification_helper {/ {;N s/        ma_notification_helper {\n        }//}" $PSF
sed -i "/^        sa3d {/ {;N s/        sa3d {\n        }//}" $PSF
sed -i "/^        fens {/ {;N s/        fens {\n        }//}" $PSF
sed -i "/^        lmfv {/ {;N s/        lmfv {\n        }//}" $PSF
sed -i "/^        dirac {/ {;N s/        dirac {\n        }//}" $PSF
sed -i "/^        dtsaudio {/ {;N s/        dtsaudio {\n        }//}" $PSF
if ! grep -Eq '^output_session_processing {' $PSF; then
sed -i -e '$a\
output_session_processing {\
    music {\
    }\
    ring {\
    }\
    alarm {\
    }\
    voice_call {\
    }\
    notification {\
    }\
}\' $PSF
else
if ! grep -Eq '^    notification {' $PSF; then
sed -i "/^output_session_processing {/a\    notification {\n    }" $PSF
fi
if ! grep -Eq '^    voice_call {' $PSF; then
sed -i "/^output_session_processing {/a\    voice_call {\n    }" $PSF
fi
if ! grep -Eq '^    alarm {' $PSF; then
sed -i "/^output_session_processing {/a\    alarm {\n    }" $PSF
fi
if ! grep -Eq '^    ring {' $PSF; then
sed -i "/^output_session_processing {/a\    ring {\n    }" $PSF
fi
if ! grep -Eq '^    music {' $PSF; then
sed -i "/^output_session_processing {/a\    music {\n    }" $PSF
fi
fi;;
*.xml) for PROC in "alarm_helper dirac dtsaudio fens lmfv ma_alarm_helper ma_music_helper ma_notification_helper ma_ring_helper ma_system_helper ma_voice_helper music_helper notification_helper ring_helper sa3d voice_helper"; do sed -i "/<apply effect=\"$PROC\"/d" $PSF; done
if ! grep -Eq '<postprocess>' $PSF || grep -Eq '<!-- Audio post processor' $PSF; then
sed -i '/<\/effects>/a\
    <postprocess>\
        <stream type="music">\
        <\/stream>\
        <stream type="ring">\
        <\/stream>\
        <stream type="alarm">\
        <\/stream>\
        <stream type="voice_call">\
        <\/stream>\
        <stream type="notification">\
        <\/stream>\
    <\/postprocess>' $PSF
else
if ! grep -Eq '<stream type="notification">' $PSF || grep -Eq '<!-- YunMang.Xiao@PSW.MM.Dolby' $PSF; then
sed -i "/<postprocess>/a\        <stream type=\"notification\">\n        <\/stream>" $PSF
fi
if ! grep -Eq '<stream type="voice_call">' $PSF; then
sed -i "/<postprocess>/a\        <stream type=\"voice_call\">\n        <\/stream>" $PSF
fi
if ! grep -Eq '<stream type="alarm">' $PSF || grep -Eq '<!-- YunMang.Xiao@PSW.MM.Dolby' $PSF; then
sed -i "/<postprocess>/a\        <stream type=\"alarm\">\n        <\/stream>" $PSF
fi
if ! grep -Eq '<stream type="ring">' $PSF || grep -Eq '<!-- YunMang.Xiao@PSW.MM.Dolby' $PSF; then
sed -i "/<postprocess>/a\        <stream type=\"ring\">\n        <\/stream>" $PSF
fi
if ! grep -Eq '<stream type="music">' $PSF || grep -Eq '<!-- YunMang.Xiao@PSW.MM.Dolby' $PSF; then
sed -i "/<postprocess>/a\        <stream type=\"music\">\n        <\/stream>" $PSF
fi
fi;;
esac
if ! getprop | grep -Eq "disable.dirac\]: \[0"; then
PSXCF -rae "libdiraceffect.so dirac_gef 3799d6d1-22c5-43c3-b3ec-d664cf8d2f0d libdirac.so dirac_controller b437f4de-da28-449b-9673-667f8b9643fe dirac_music b437f4de-da28-449b-9673-667f8b964304 dirac e069d9e0-8329-11df-9168-0002a5d5c51b"
fi
if ! getprop | grep -Eq "disable.misoundfx\]: \[0"; then
PSXCF -rae "libmisoundfx.so misoundfx 5b8e36a5-144a-4c38-b1d7-0002a5d5c51b"
fi
PSXCF -rae "dolbyatmos dolbyatmos libatmos.so 74697567-7261-6564-6864-65726f206678"
PSXCF -aae "dolbyatmos" "dolbyatmos" "libatmos.so" "74697567-7261-6564-6864-65726f206678"
UIP "$MSGFFAP"
done
fi

if FINDER "$MCXML"; then
UIP "$MSGPNF"
for FMCXML in $MCXML; do
UIP "Found $FMCXML" "Patching..."
PSF="$MODPATH/$MODID$FMCXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FMCXML $PSF
sed -i '/<MediaCodecs>/a\
    <Include href="media_codecs_dolby_audio.xml"/>' $PSF
UIP "$MSGFFAP"
done
fi

if FINDER "$AIPAOPCONF" && ! getprop | grep -Eq "disable.raw\]: \[0"; then
UIP "Disabling Ultra Low Latency Playback (RAW)"
echo "[ -d \"/sbin/.magisk\" ] && MAGISKMP=\"/sbin/.magisk/mirror\" || MAGISKMP=\$(find \`magisk --path\` -type d -name \"mirror\" | head -n 1)
AIPAOPCONF=\"\$(find /vendor -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
PAIPAOPCONF=false
for ALLMOD in \$(ls $MODPATH); do
ALLMODAIPAOPCONF=\"\$(find $MODPATH/\$ALLMOD -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
if [ ! -f $MODPATH/\$ALLMOD/disable ]; then
for FAIPAOPCONF in \$ALLMODAIPAOPCONF; do
if [ -f \$FAIPAOPCONF ] && [ ! -f \$FAIPAOPCONF.bak ]; then
PAIPAOPCONF=true
cp -f \$FAIPAOPCONF \$FAIPAOPCONF.bak
sed -i 's/RAW/NONE/g;s/,raw//g' \$FAIPAOPCONF
elif [ -f \$FAIPAOPCONF ] && [ -f \$FAIPAOPCONF.bak ]; then
PAIPAOPCONF=true
sed -i 's/RAW/NONE/g;s/,raw//g' \$FAIPAOPCONF
fi
done
fi
if [ -d $MODPATH/$IDAML ] && [ ! -f $MODPATH/$IDAML/disable ]; then
RMAIPAOPCONF=\"\$(find $MODPATH/$MODID -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
rm -rf \$RMAIPAOPCONF
fi
done
if [ \$PAIPAOPCONF != true ]; then
for FAIPAOPCONF in \$AIPAOPCONF; do
PSF=\"$MODPATH/$MODID\$FAIPAOPCONF\"
mkdir -p \`dirname \$PSF\`
cp -f \$MAGISKMP\$FAIPAOPCONF \$PSF
sed -i 's/RAW/NONE/g;s/,raw//g' \$PSF
mkdir -p $MODPATH/$MODID/system/vendor; cp -rf $MODPATH/$MODID/vendor/* $MODPATH/$MODID/system/vendor; rm -rf $MODPATH/$MODID/vendor
done
fi" >> $MODPATH/$MODID/post-fs-data.sh
echo "#!$MIPSB/sh
if [ ! -d $MODPATH/$MODID ] || [ -f $MODPATH/$MODID/disable ] || [ -f $MODPATH/$MODID/remove ]; then
AIPAOPCONF=\"\$(find $MODPATH -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
for FAIPAOPCONF in \$AIPAOPCONF; do
if [ -f \$FAIPAOPCONF.bak ]; then
cp -f \$FAIPAOPCONF.bak \$FAIPAOPCONF
rm -f \$FAIPAOPCONF.bak
if [ ! -f $MODPATH/$IDSAQ/disable ] && [ -f $MODPATH/$IDSAQ/post-fs-data.sh ]; then sh $MODPATH/$IDSAQ/post-fs-data.sh; fi
fi
done
fi
[ -d \"/sbin/.magisk\" ] && MAGISKMP=\"/sbin/.magisk\" || MAGISKMP=\`find /dev -mindepth 2 -maxdepth 2 -type d -name .magisk\`
if [ ! -d $MODPATH/$MODID ] || [ -f $MODPATH/$MODID/remove ]; then
mount -o rw,remount \$MAGISKMP/mirror/vendor
cp -f \$MAGISKMP/mirror/vendor/etc/vintf/manifest.xml.bak \$MAGISKMP/mirror/vendor/etc/vintf/manifest.xml
rm -f \$MAGISKMP/mirror/vendor/etc/vintf/manifest.xml.bak $POSTFSDATAD/$MODID.sh
else
mount -o rw,remount \$MAGISKMP/mirror/vendor
if [ ! -f \$MAGISKMP/mirror/vendor/etc/vintf/manifest.xml.bak ]; then
if ! getprop | grep -Eq \"dolby.skip.*\]: \[1\"\\
&& ! grep -A2 vendor.dolby.hardware.dms \$MAGISKMP/mirror/vendor/etc/vintf/manifest.xml | grep -Eq 1.0; then
cp -f \$MAGISKMP/mirror/vendor/etc/vintf/manifest.xml \$MAGISKMP/mirror/vendor/etc/vintf/manifest.xml.bak
sed -i '/<manifest/a\\
    <hal format=\"hidl\">\\
        <name>vendor.dolby.hardware.dms</name>\\
        <transport>hwbinder</transport>\\
        <version>1.0</version>\\
        <interface>\\
            <name>IDms</name>\\
            <instance>default</instance>\\
        </interface>\\
        <fqname>@1.0::IDms/default</fqname>\\
    </hal>' \$MAGISKMP/mirror/vendor/etc/vintf/manifest.xml
killall hwservicemanager
reboot
fi
fi
fi" > $POSTFSDATAD/$MODID.sh
chmod 0777 $POSTFSDATAD/$MODID.sh
else
UIP "Not Disabling Ultra Low Latency Playback (RAW)"
fi

if [ "$ARCH" != "arm64" ]; then
cp -rf $TMPDIR/DolbyAtmos/system_32/* $TMPDIR/DolbyAtmos/system
rm -rf `find $TMPDIR/DolbyAtmos -type d -name *64`
fi

DALIB="$(find $SYSTEM $VENDOR -type f -name "libhidltransport.so" -o -name "libhwbinder.so")"
if FINDER "$DALIB"; then :; else cp -rf $TMPDIR/DolbyAtmos/system_support/* $TMPDIR/DolbyAtmos/system; fi

if [ -f $IPVE/vintf/manifest.xml ]; then
UIP "$MSGPNF"
if $BOOTMODE; then mount -o rw,remount $MAGISKMP/vendor; DAPATH=$MAGISKMP/vendor/etc/vintf/manifest.xml; else DAPATH=$IPVE/vintf/manifest.xml; fi
if ! getprop | grep -Eq "dolby.skip.*\]: \[1"\
&& ! grep -A2 vendor.dolby.hardware.dms $DAPATH | grep -Eq 1.0; then
UIP "Found $DAPATH" "Patching..."
cp -f $DAPATH $DAPATH.bak
sed -i '/<manifest/a\
    <hal format=\"hidl\">\
        <name>vendor.dolby.hardware.dms</name>\
        <transport>hwbinder</transport>\
        <version>1.0</version>\
        <interface>\
            <name>IDms</name>\
            <instance>default</instance>\
        </interface>\
        <fqname>@1.0::IDms/default</fqname>\
    </hal>' $DAPATH
UIP "$MSGFFAP"
else
UIP "Found $DAPATH" "No Needed Patching"
fi
fi

for FDASO in inlibstagefrightdolby.so libstagefright_soft_ddpdec.so; do
if [ -f $MAGISKMP$IPVL/$FDASO ]; then
UIP "Found $IPVL/$FDASO" "Removing..."
rm -f $TMPDIR/DolbyAtmos$MIPSVL/$FDASO
fi
if [ -f $MAGISKMP$IPVL64/$FDASO ]; then
UIP "Found $IPVL64/$FDASO" "Removing..."
rm -f $TMPDIR/DolbyAtmos$MIPSVL64/$FDASO
fi
done

PSF=$TMPDIR/DolbyAtmos$MIPSVED/dap-default.xml
GPSF=`getprop dolby.bass`
if [ "$GPSF" == default ]; then
UIP "Using Default Settings For Bass Enhancer"
elif [ "$GPSF" == true ]; then
UIP "Enable Bass Enhancer For All Profiles"
sed -i 's/bass-enhancer-enable value="false"/bass-enhancer-enable value="true"/g' $PSF
elif [ "$GPSF" ] && [ "$GPSF" != false ] && [ "$GPSF" -gt 0 ]; then
UIP "Enable Bass Enhancer For All Profiles"
sed -i 's/bass-enhancer-enable value="false"/bass-enhancer-enable value="true"/g' $PSF
UIP "Changing Bass Enhancer Boost Balues To $GPSF For All Profiles"
ROW=`grep bass-enhancer-boost $PSF | sed 's/<bass-enhancer-boost value="0"\/>//p'`
echo $ROW > $TMPDIR/DAB
sed -i 's/<bass-enhancer-boost value="//g' $TMPDIR/DAB
sed -i 's/"\/>//g' $TMPDIR/DAB
ROW=`cat $TMPDIR/DAB`
UIP "Default Values: $ROW"
for ROWS in $ROW; do
sed -i "s/bass-enhancer-boost value=\"$ROWS\"/bass-enhancer-boost value=\"$GPSF\"/g" $PSF
done
else
UIP "Disable Bass Enhancer For All Profiles"
sed -i 's/bass-enhancer-enable value="true"/bass-enhancer-enable value="false"/g' $PSF
fi
if getprop | grep -Eq "dolby.virtualizer\]: \[1"; then
UIP "Enable Virtualizer For All Profiles"
sed -i 's/virtualizer-enable value="false"/virtualizer-enable value="true"/g' $PSF
elif getprop | grep -Eq "dolby.virtualizer\]: \[0"; then
UIP "Disable Virtualizer For All Profiles"
sed -i 's/virtualizer-enable value="true"/virtualizer-enable value="false"/g' $PSF
fi
if getprop | grep -Eq "dolby.volumeleveler\]: \[1"; then
UIP "Using Default Volume Leveler Settings"
elif getprop | grep -Eq "dolby.volumeleveler\]: \[2"; then
UIP "Enable Volume Leveler For All Profiles"
sed -i 's/volume-leveler-enable value="false"/volume-leveler-enable value="true"/g' $PSF
else
UIP "Disable Volume Leveler For All Profiles"
sed -i 's/volume-leveler-enable value="true"/volume-leveler-enable value="false"/g' $PSF
fi
UIP "Using Deeper Bass GEQ Frequency"
sed -i 's/frequency="47"/frequency="0"/g' $PSF
sed -i 's/frequency="141"/frequency="47"/g' $PSF
sed -i 's/frequency="234"/frequency="141"/g' $PSF
sed -i 's/frequency="328"/frequency="234"/g' $PSF
sed -i 's/frequency="469"/frequency="328"/g' $PSF
sed -i 's/frequency="656"/frequency="469"/g' $PSF
sed -i 's/frequency="844"/frequency="656"/g' $PSF
sed -i 's/frequency="1031"/frequency="844"/g' $PSF
sed -i 's/frequency="1313"/frequency="1031"/g' $PSF
sed -i 's/frequency="1688"/frequency="1313"/g' $PSF
sed -i 's/frequency="2250"/frequency="1688"/g' $PSF
sed -i 's/frequency="3000"/frequency="2250"/g' $PSF
sed -i 's/frequency="3750"/frequency="3000"/g' $PSF
sed -i 's/frequency="4688"/frequency="3750"/g' $PSF
sed -i 's/frequency="5813"/frequency="4688"/g' $PSF
sed -i 's/frequency="7125"/frequency="5813"/g' $PSF
sed -i 's/frequency="9000"/frequency="7125"/g' $PSF
sed -i 's/frequency="11250"/frequency="9000"/g' $PSF
sed -i 's/frequency="13875"/frequency="11250"/g' $PSF
sed -i 's/frequency="19688"/frequency="13875"/g' $PSF

APKPERM "$TMPDIR/$MODID$MIPSPA/DAXUI/DAXUI.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"; MKSCXML "$TMPDIR/$MODID$MIPSES"
APKPERM "$TMPDIR/$MODID$MIPSPA/DAXService/DAXService.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"; MKSCXML "$TMPDIR/$MODID$MIPSES"

echo -e "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<permissions>\n    <library name=\"dolby_dax\"\n        file=\"/system/framework/dolby_dax.jar\"/>\n</permissions>" > $TMPDIR/$MODID$MIPSEP/dolby_dax.xml
REPLACER -f "DaxUI daxService AudioFX MusicFX MiSound Dirac DiracAudioControlService"
cp -rf $TMPDIR/DolbyAtmos/system $MODPATH/$MODID
REPLACER -a "dumpstate" "$IPSB"
REPLACER -a "vendor.dolby.hardware.dms@2.0-service" "$IPVBHW"
if $MIUI || [ $ASDK -le 30 ]; then
mkdir -p $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/DolbyAtmos/DAXUI-ForceColor.apk $MODPATH/$MODID$MIPPSO
fi
MOVERPATH
SET_PERM_RM
FILE=`find $MODPATH/$MODID$MIPSVB -type f`
for FILES in $FILE; do chmod 0755 $FILES; chown 0.2000 $FILES; done
chmod 0751 $MODPATH/$MODID$MIPSVB $MODPATH/$MODID$MIPSVBHW
DIR=`find $MODPATH/$MODID$MIPSV -type d`
for DIRS in $DIR; do chown 0.2000 $DIRS; done
chcon u:object_r:hal_dms_default_exec:s0 $MODPATH/$MODID$MIPSVBHW/vendor.dolby.hardware.dms@*-service
UIP "$MSGDI"
WCANFTP "-sl -alcf -aml"
}

IPNLS () {
if $MAGISK && $SNAPSOC; then
UCSA -eno "Install NLSound $VIPNLS?" "IPNLSS" "$IDNLS"
fi
}

IPNLSS () {
STEP1=false; STEP2=false; STEP3=false; STEP4=false; STEP5=false; STEP6=false; STEP7=false; STEP8=false; STEP9=false; STEP10=false; STEP11=false; STEP12=false; STEP13=false; STEP14=false; STEP15=false
if FINDER "$ACXML"; then
UIP -s "Disable Deep Buffer?" "This Option Disable Deep Buffer In Your Device" "If You Want More Low Frequencies Skip This Option" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP1=true; fi
fi
if FINDER "$MPATHS"; then
UIP -s "Boost Sound Volume Levels?" "This Item Boosting Sound Volume Levels" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP2=true; fi
UIP -s "Boost Microphones Volume Levels?" "This Item Boosting Microphones Volume Levels" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP3=true; fi
fi
if FINDER "$MPATHS"; then
UIP -s "Patching IIR?" "IIR Directly Affects The Final Sound Quality" "And It Is Recommended To Try The Version" "With And Without It, Choosing The One That You Like The Most" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP4=true; fi
fi
if FINDER "$APIXML" || FINDER "$MPATHS"; then
UIP -s "Patching Audio Platform Files?" "Confirming This Option Will Allow The" "Module To Force 24-Bit Audio" "For Your Favorite Songs, As Well As Improve" "The Sound Quality During Video Recording" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP5=true; fi
fi
if FINDER "$MPATHS"; then
UIP -s "Disable Companders?" "Companding - Method For Reducing The Effects" "Of Channels With A Limited Dynamic Range" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP6=true; fi
fi
if FINDER "$ACXML"; then
UIP -s "Configurating Interal Audio Codec?" "This Option Configuring Your Device's Internal Audio Codec" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP7=true; fi
fi
if [ -d $MAGISKMP$IPSEDF ] || [ -d $MAGISKMP$IPVEDF ]; then
UIP -s "Patch device_features Files?" "Added More Stuff" "Enable HD Record In Camcorder" "Increase VoIP Recor Quality" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP8=true; fi
fi
UIP -s "Added New Dirac?" "This Option Added New Dirac In Your ROM" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP9=true; fi
UIP -s "Install Tweaks In Prop File?" "This Option Will Change The Sound Quality The Most" "May Cause Problems" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP10=true; fi
if FINDER "$MPATHS"; then
UIP -s "Install Patches In Mixer Paths Files?" "A Large Set Of Universal Settings For Many Devices" "If You Encounter Problems After Installation" "Try Skipping This Option First" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP11=true; fi
fi
UIP -s "Improve Bluetooth?" "This Option Will Improve The Audio Quality" "In Bluetooth, As Well As Fix The Problem" "Of Disappearing The AAC Codec Switch" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP12=true; fi
if FINDER "$AIPAOPCONF"; then
UIP -s "Switch Audio Output From DIRECT To DIRECT_PCM?" "This Option Will Switch DIRECT To DIRECT_PCM," "Which Will Improve The Sound Detail" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP13=true; fi
fi
if FINDER "$APCXML"; then
UIP -s "Turn Off Useless DRC?" "Limit The Dynamic Range Of The Soundtrack" "The Difference Between The Loudest" "And The Quietest Sounds" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP14=true; fi
fi
if FINDER "$MCGAX"; then
UIP -s "Patch Media Codecs Files?" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP15=true; fi
fi
UIP "Installing NLSound $IAMM"
if $HIRES; then UIP "Device With Support Hi-Res"; else UIP "Device Without Support Hi-Res"; fi
DIRAC=$TMPDIR/NLSound
UZTPN "NLSound"
PTMFI -np "$IDNLS" "$IDAIST"
MMPR -vcs "NLSound" "$VIPNLS" "$VCIPNLS" "NLSound Team" "This Module Globally Improves Audio Quality When Recording Video/Audio And Listening To Audio On Your Device" "https://t.me/nlsound_support"
REPLACER -f "AudioFX MusicFX"
if $STEP2 || $STEP3 || $STEP4 || $STEP5 || $STEP6 || $STEP11 || CHECKER "device" "dipper"; then PSXCF -psf "$MPATHS"; fi
if $STEP1 || $STEP7; then PSXCF -psf "$ACXML"; fi
if $STEP13; then PSXCF -psf "$AIPAOPCONF"; fi
echo "#!$MIPSB/sh
resetprop vendor.audio.flac.sw.decoder.24bit true
resetprop audio.offload.pcm.24bit.enabled true
resetprop audio.offload.pcm.16bit.enabled true
resetprop -p --delete persist.vendor.audio_hal.dsp_bit_width_enforce_mode
resetprop -n persist.vendor.audio_hal.dsp_bit_width_enforce_mode 24
[ $ASDK -ge 24 ] && killall audioserver 2>/dev/null || killall mediaserver 2>/dev/null" > $MODPATH/$MODID/service.sh
echo "dontaudit system_server system_file file write
allow system_server system_file file write
type vendor_file
type vendor_configs_file
dontaudit { vendor_file vendor_configs_file } labeledfs filesystem associate
allow { vendor_file vendor_configs_file } labeledfs filesystem associate
dontaudit init { vendor_file vendor_configs_file } dir relabelfrom
allow init { vendor_file vendor_configs_file } dir relabelfrom
dontaudit init { vendor_file vendor_configs_file } file relabelfrom
allow init { vendor_file vendor_configs_file } file relabelfrom" > $MODPATH/$MODID/sepolisy.sh
if $STEP1; then PATCH_DEEP_BUFFER -nl; fi
if $STEP2; then PATCH_VOLUMES -nl; fi
if $STEP3; then PATCH_MICROPHONE; fi
if $STEP4; then PATCH_IIR; fi
if $STEP5; then PATCH_AUDIO_PLATFORM_INFO -nl; fi
if $STEP6; then PATCH_COMPANDERS; fi
if $STEP7; then PATCH_AUDIO_CODEC; fi
if $STEP8; then PATCH_DEVICE_FEATURES -nl; fi
if $STEP9; then PATCH_DIRAC; fi
if $STEP10; then
UIP "Start GENERAL_TWEAKS"
echo -e "\n# GENERAL TWEAKS
ro.mediacodec.min_sample_rate=7350
ro.mediacodec.max_sample_rate=2822400
vendor.audio.tunnel.encode=true
tunnel.audio.encode=true
qc.tunnel.audio.encode=true
mpq.audio.decode=true
audio.nat.codec.enabled=1
audio.decoder_override_check=true
vendor.audio.aac.complexity.default=10
vendor.audio.aac.quality=100
vendor.audio.vorbis.complexity.default=10
vendor.audio.vorbis.quality=100
vendor.audio.mp3.complexity.default=10
vendor.audio.mp3.quality=100
vendor.audio.mpegh.complexity.default=10
vendor.audio.mpegh.quality=100
vendor.audio.amrnb.complexity.default=10
vendor.audio.amrnb.quality=100
vendor.audio.amrwb.complexity.default=10
vendor.audio.amrwb.quality=100
vendor.audio.g711.alaw.complexity.default=10
vendor.audio.g711.alaw.quality=100
vendor.audio.g711.mlaw.complexity.default=10
vendor.audio.g711.mlaw.quality=100
vendor.audio.opus.complexity.default=10
vendor.audio.opus.quality=100
vendor.audio.raw.complexity.default=10
vendor.audio.raw.quality=100
vendor.audio.flac.complexity.default=10
vendor.audio.flac.quality=100
vendor.audio.dsp.complexity.default=10
vendor.audio.dsp.quality=100
vendor.audio.dsd.complexity.default=10
vendor.audio.dsd.quality=100
vendor.audio.alac.complexity.default=10
vendor.audio.alac.quality=100
vendor.audio.use.sw.alac.decoder=true
vendor.audio.use.sw.mpegh.decoder=true
vendor.audio.use.sw.flac.decoder=true
vendor.audio.use.sw.aac.decoder=true
vendor.audio.use.sw.vorbis.decoder=true
vendor.audio.use.sw.wma.decoder=true
vendor.audio.use.sw.mp3.decoder=true
vendor.audio.use.sw.amrnb.decoder=true
vendor.audio.use.sw.amrwb.decoder=true
vendor.audio.use.sw.mhas.decoder=true
vendor.audio.use.sw.g711.alaw.decoder=true
vendor.audio.use.sw.g711.mlaw.decoder=true
vendor.audio.use.sw.opus.decoder=true
vendor.audio.use.sw.raw.decoder=true
vendor.audio.use.sw.qti.audio.decoder=true
vendor.audio.use.sw.dsp.decoder=true
vendor.audio.use.sw.dsd.decoder=true
vendor.audio.use.sw.alac.encoder=true
vendor.audio.use.sw.mpegh.encoder=true
vendor.audio.use.sw.flac.encoder=true
vendor.audio.use.sw.aac.encoder=true
vendor.audio.use.sw.vorbis.encoder=true
vendor.audio.use.sw.wma.encoder=true
vendor.audio.use.sw.mp3.encoder=true
vendor.audio.use.sw.amrnb.encoder=true
vendor.audio.use.sw.amrwb.encoder=true
vendor.audio.use.sw.mhas.encoder=true
vendor.audio.use.sw.g711.alaw.encoder=true
vendor.audio.use.sw.g711.mlaw.encoder=true
vendor.audio.use.sw.opus.encoder=true
vendor.audio.use.sw.raw.encoder=true
vendor.audio.use.sw.qti.audio.encoder=true
vendor.audio.use.sw.dsp.encoder=true
vendor.audio.use.sw.dsd.encoder=true
use.non-omx.alac.decoder=false
use.non-omx.mpegh.decoder=false
use.non-omx.vorbis.decoder=false
use.non-omx.wma.decoder=false
use.non-omx.amrnb.decoder=false
use.non-omx.amrwb.decoder=false
use.non-omx.mhas.decoder=false
use.non-omx.g711.alaw.decoder=false
use.non-omx.g711.mlaw.sw.decoder=false
use.non-omx.opus.decoder=false
use.non-omx.raw.decoder=false
use.non-omx.qti.decoder=false
use.non-omx.dsp.decoder=false
use.non-omx.dsd.decoder=false
use.non-omx.alac.encoder=false
use.non-omx.mpegh.encoder=false
use.non-omx.flac.encoder=false
use.non-omx.aac.encoder=false
use.non-omx.vorbis.encoder=false
use.non-omx.wma.encoder=false
use.non-omx.mp3.encoder=false
use.non-omx.amrnb.encoder=false
use.non-omx.amrwb.encoder=false
use.non-omx.mhas.encoder=false
use.non-omx.g711.alaw.encoder=false
use.non-omx.g711.mlaw.sw.encoder=false
use.non-omx.opus.encoder=false
use.non-omx.raw.encoder=false
use.non-omx.qti.encoder=false
use.non-omx.dsp.encoder=false
use.non-omx.dsd.encoder=false
media.aac_51_output_enabled=true
mm.enable.smoothstreaming=true
mmp.enable.3g2=true
mm.enable.qcom_parser=63963135
vendor.mm.enable.qcom_parser=63963135
lpa.decode=false
lpa30.decode=false
lpa.use-stagefright=false
lpa.releaselock=false
af.thread.throttle=0
audio.playback.mch.downsample=false
vendor.audio.playback.mch.downsample=false
persist.vendor.audio.playback.mch.downsample=false
vendor.audio.feature.dynamic_ecns.enable=true
vendor.audio.feature.external_dsp.enable=true
vendor.audio.feature.external_qdsp.enable=true
vendor.audio.feature.external_speaker.enable=true
vendor.audio.feature.external_speaker_tfa.enable=true
vendor.audio.feature.receiver_aided_stereo.enable=true
vendor.audio.feature.ext_hw_plugin=true
vendor.audio.feature.source_track_enabled=true
vendor.audio.feature.keep_alive.enable=true
vendor.audio.feature.compress_meta_data.enable=false
vendor.audio.feature.compr_cap.enable=false
vendor.audio.feature.devicestate_listener.enable=false
vendor.audio.feature.thermal_listener.enable=false
vendor.audio.feature.power_mode.enable=true
vendor.audio.feature.hifi_audio.enable=true
ro.hardware.hifi.support=true
ro.audio.hifi=true
ro.vendor.audio.hifi=true
persist.audio.hifi=true
persist.audio.hifi.volume=90
persist.audio.hifi.int_codec=true
persist.vendor.audio.hifi.int_codec=true
audio.offload.pcm.float.enable=true
audio.offload.track.enable=true
vendor.audio.offload.track.enable=true
vendor.audio.offload.multiaac.enable=true
vendor.audio.offload.multiple.enabled=true
vendor.audio.offload.passthrough=true
vendor.audio.offload.gapless.enabled=true
vendor.audio.offload.pcm.float.enable=true
effect.reverb.pcm=1
vendor.audio.safx.pbe.enabled=true
vendor.audio.soundfx.usb=false
vendor.audio.keep_alive.disabled=false
ro.vendor.audio.soundfx.usb=false
ro.vendor.audio.sfx.speaker=false
ro.vendor.audio.sfx.earadj=false
ro.vendor.audio.sfx.scenario=false
ro.vendor.audio.sfx.audiovisual=false
ro.vendor.audio.sfx.independentequalizer=false
ro.vendor.audio.3d.audio.support=true
persist.vendor.audio.ambisonic.capture=true
persist.vendor.audio.ambisonic.auto.profile=true
vendor.voice.dsd.playback.conc.disabled=false
vendor.audio.hdr.record.enable=true
vendor.audio.3daudio.record.enable=true
ro.qc.sdk.audio.ssr=true
ro.vendor.audio.sdk.ssr=true
ro.vendor.audio.recording.hd=true
ro.ril.enable.amr.wideband=1
persist.audio.lowlatency.rec=true
ro.vendor.audio.surround.headphone.only=true
ro.vendor.audio.support.sound.id=true
vendor.audio.matrix.limiter.enable=0
vendor.audio.capture.enforce_legacy_copp_sr=true
vendor.audio.hal.output.suspend.supported=true
vendor.audio.snd_card.open.retries=50
vendor.audio.volume.headset.gain.depcal=true
vendor.audio.tfa9874.dsp.enabled=true
ro.audio.soundtrigger.lowpower=false
ro.vendor.audio.soundtrigger.adjconf=true
ro.vendor.audio.ns.support=true
ro.vendor.audio.enhance.support=true
ro.vendor.audio.gain.support=true
persist.vendor.audio.ll_playback_bargein=true
persist.vendor.audio.bcl.enabled=false
persist.vendor.audio.delta.refresh=true
audio.safemedia.bypass=true
persist.audio.safemedia.bypass=true
persist.vendor.audio.safemedia.bypass=true
vendor.audio.safemedia.bypass=true
ro.audio.resampler.psd.enable_at_samplerate=192000
ro.audio.resampler.psd.stopband=140
ro.audio.resampler.psd.halflength=320
ro.audio.resampler.psd.cutoff_percent=91" >> $MODPATH/$MODID/system.prop
fi
if $STEP11; then PATCH_MIXER -nl; fi
if $STEP12; then PATCH_IMPROVE_BLUETOOTH -nl; fi
if $STEP13; then PATCH_AUDIO_POLICY; fi
if $STEP14; then PATCH_AUDIO_POLICY_CONFIGURATION -nl; fi
if $STEP15; then PATCH_MEDIA_CODECS; fi
if CHECKER "device" "dipper"; then PATCH_FIX_MICRO; fi
MOVERPATH
SET_PERM_RM -msgdi
WCANFTP "-alcf -aml"
}

IPAIST () {
if $MAGISK && $SNAPSOC; then
UCSA -eno "Install AIST $VIPAIST?" "IPAISTS" "$IDAIST"
fi
}

IPAISTS () {
STEP1=false; STEP2=false; STEP3=false; STEP4=false
if FINDER "$MPATHS"; then
UIP -s "Boost Sound Volume Levels?" "This Item Boosting Sound Volume Levels" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP1=true; fi
UIP -s "Boost Microphones Volume Levels?" "This Item Boosting Microphones Volume Levels" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP2=true; fi
fi
if FINDER "$APCXML" || FINDER "$AIPAOPCONF"; then
UIP -s "Fixing 96kHz Or 192kHz For Audio Output?" "Sound Failure Possible Or Bootloop!" "$MSGVU Yes" "$MSGVD No $MSGRI $MSGNIS"
if KEYCHOOSE; then
STEP3=true
UIP -s "$MSGVU 96kHz" "$MSGVD 192kHz"
if KEYCHOOSE; then SRKHZ=true; else SRKHZ=false; fi
fi
fi
if FINDER "$MCGAX"; then
UIP -s "Patch Media Codecs Files?" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then STEP4=true; fi
fi
UIP "Installing AIST $IAMM"
if $HIRES; then UIP "Device With Support Hi-Res"; else UIP "Device Without Support Hi-Res"; fi
PTMFI -np "$IDAIST" "$IDNLS"
MMPR -vcs "AIST For Devices Based On Qualcomm" "$VIPAIST" "$VCIPAIST" "Oleg_Skalskiy" "This Module Improving Audio Quality On Android" "https://t.me/AIST_FLOOD"
echo "# GENERAL PARAMETERS BY AIST
af.thread.throttle=0
af.fast_track_multiplier=0
audio.adm.buffering.ms=7
vendor.audio.adm.buffering.ms=7
audio.adm.phaseshift.ms=1
vendor.audio.adm.phaseshift.ms=1
audio.hal.boot.timeout.ms=3500
vendor.audio.hal.boot.timeout.ms=3500
audio.offload.buffer.size.kb=288
vendor.audio.offload.buffer.size.kb=288
audio.native.dsd.buffer.size.kb=512
vendor.audio.native.dsd.buffer.size.kb=512
audio.truehd.buffer.size.kb=512
vendor.audio.truehd.buffer.size.kb=512
audio.sys.noisy.broadcast.delay=0
vendor.audio.sys.noisy.broadcast.delay=0
audio.sys.offload.pstimeout.secs=0
vendor.audio.sys.offload.pstimeout.secs=0
media.stagefright.enable-player=true
media.stagefright.enable-http=true
media.stagefright.enable-aac=true
media.stagefright.enable-qcp=true
media.stagefright.enable-fma2dp=true
media.stagefright.enable-scan=true
media.stagefright.thumbnail.prefer_hw_codecs=true
media.stagefright.audio.deep=false
media.recorder.show_manufacturer_and_model=true
debug.stagefright.omx_default_rank=0
debug.stagefright.ccodec_delayed_params=0
mmp.enable.3g2=true
media.aac_51_output_enabled=true
vendor.mm.enable.qcom_parser=16777215
persist.mm.enable.prefetch=true
vendor.audio.offload.multiaac.enable=true
mpq.audio.decode=true
lpa.decode=false
lpa30.decode=false
lpa.use-stagefright=false
lpa.releaselock=false
vendor.audio.spkcal.copy.inhal=true
persist.audio.format.24bit=true
persist.vendor.audio.format.24bit=true
persist.audio.format.32bit=true
persist.vendor.audio.format.32bit=true
persist.audio.format.float=true
persist.vendor.audio.format.float=true
persist.vendor.audio.spv3.enable=false
persist.vendor.audio.spv4.enable=false
persist.vendor.audio.spv5.enable=false
persist.vendor.audio.hac.enable=false
persist.vendor.audio.delta.refresh=false
persist.vendor.audio.ha_proxy.enabled=true
persist.vendor.audio.bcl.enabled=false
persist.vendor.audio.ll_playback_bargein=false
persist.vendor.audio.ozo.codec.enable=true
persist.vendor.audio.ambisonic.auto.profile=false
persist.vendor.audio.ambisonic.capture=false
persist.vendor.audio.apptype.multirec.enabled=false
ro.qc.sdk.audio.ssr=false
ro.vendor.audio.sdk.ssr=false
ro.vendor.audio.dump.mixer=false
ro.audio.playbackScene=false
ro.vendor.audio.playbackScene=false
ro.vendor.audio.recording.hd=true
ro.vendor.audio.multiroute=true
ro.vendor.audio.sos=true
ro.vendor.audio.voice.change.support=true
ro.vendor.audio.voice.change.youme.support=true
ro.vendor.audio.spk.stereo=true
ro.vendor.audio.spk.clean=true
ro.vendor.audio.vocal.support=true
ro.vendor.audio.sfx.independentequalizer=false
ro.vendor.audio.sfx.earadj=false
ro.vendor.audio.sfx.speaker=true
ro.vendor.audio.sfx.spk.movie=true
ro.vendor.audio.gain.support=true
ro.vendor.audio.karaok.support=true
ro.vendor.camera.karaok.support=true
ro.vendor.audio.ns.support=true
ro.vendor.audio.enhance.support=true
ro.audio.monitorRotation=true
ro.vendor.audio.monitorRotation=true
ro.vendor.audio.game.mode=true
ro.vendor.audio.game.vibrate=true
ro.vendor.audio.aiasst.support=true
ro.vendor.audio.soundtrigger.lowpower=false
ro.vendor.audio.soundtrigger.adjconf=false
ro.vendor.audio.soundtrigger.pangaea=0
ro.vendor.audio.soundtrigger.sva-5.0=1
ro.vendor.audio.soundtrigger.sva-6.0=1
ro.vendor.audio.soundfx.usb=true
ro.vendor.audio.ring.filter=true
ro.vendor.audio.feature.fade=true
ro.vendor.audio.us.proximity=false
ro.vendor.audio.camera.loopback.support=true
ro.vendor.audio.support.sound.id=true
ro.vendor.standard.video.enable=true
ro.vendor.audio.videobox.switch=true
ro.vendor.video_box.version=2
ro.vendor.audio.feature.spatial=7
ro.vendor.audio.multichannel.5point1.headset=true
ro.vendor.audio.multichannel.5point1=true
ro.vendor.audio.notify5Point1InUse=true
ro.vendor.audio.multi.channel=true
ro.vendor.audio.dolby.eq.half=false
ro.vendor.audio.dolby.vision.support=false
ro.vendor.audio.dolby.vision.capture.support=false
ro.vendor.audio.dolby.surround.enable=false
ro.vendor.audio.surround.support=false
ro.vendor.audio.surround.headphone.only=false
ro.vendor.audio.elus.enable=true
ro.vendor.audio.sfx.scenario=true
persist.vendor.audio.auto.scenario=false
vendor.audio.game2D.switch=1
vendor.audio.game3D.switch=1
vendor.audio.game4D.switch=1
vendor.audio.game5D.switch=1
vendor.audio.game6D.switch=1
audio.hal.output.suspend.supported=false
vendor.audio.hal.output.suspend.supported=false
audio.safemedia.bypass=true
vendor.audio.safemedia.bypass=true
persist.vendor.audio.safemedia.bypass=true
persist.audio.safemedia.bypass=true
audio.pp.asphere.enabled=false
vendor.audio.pp.asphere.enabled=false
persist.audio.lowlatency.rec=true
persist.vendor.audio.hp=true
persist.vendor.audio.lowlatency.rec=true
persist.audio.hp=true
sys.haptic.infinitelevel=true
sys.haptic.dynamiceffect=true
sys.haptic.dynamiceffect.richtap=true
sys.haptic.ignoreWhenCamera=true
audio.safx.pbe.enabled=false
vendor.audio.safx.pbe.enabled=false
audio.playback.mch.downsample=false
vendor.audio.playback.mch.downsample=false
persist.vendor.audio.playback.mch.downsample=false
audio.nat.codec.enabled=1
vendor.audio.nat.codec.enabled=1
effect.reverb.pcm=0
vendor.audio.matrix.limiter.enable=0
audio.matrix.limiter.enable=0
vendor.audio.tunnel.encode=false
audio.tunnel.encode=false
ro.vendor.audio.tunnel.encode=false
vendor.tunnel.audio.encode=false
tunnel.audio.encode=false
persist.speaker.prot.enable=false
persist.vendor.speaker.prot.enable=false
audio.offload.pcm.enable=false
audio.offload.pcm.16bit.enable=false
audio.offload.pcm.24bit.enable=false
audio.offload.pcm.32bit.enable=false
audio.offload.pcm.64bit.enable=false
audio.offload.pcm.float.enable=false
vendor.audio.offload.pcm.enable=false
vendor.audio.offload.pcm.16bit.enable=false
vendor.audio.offload.pcm.24bit.enable=false
vendor.audio.offload.pcm.32bit.enable=false
vendor.audio.offload.pcm.64bit.enable=false
vendor.audio.offload.pcm.float.enable=false
audio.offload.pcm.enabled=false
audio.offload.pcm.16bit.enabled=false
audio.offload.pcm.24bit.enabled=false
audio.offload.pcm.32bit.enabled=false
audio.offload.pcm.64bit.enabled=false
audio.offload.pcm.float.enabled=false
vendor.audio.offload.pcm.enabled=false
vendor.audio.offload.pcm.16bit.enabled=false
vendor.audio.offload.pcm.24bit.enabled=false
vendor.audio.offload.pcm.32bit.enabled=false
vendor.audio.offload.pcm.64bit.enabled=false
vendor.audio.offload.pcm.float.enabled=false
audio.hwacceffects.needed=false
vendor.audio.hwacceffects.needed=false
audio.high.resolution.enable=true
vendor.audio.high.resolution.enable=true
persist.sys.mitalk.enable=true
vendor.audio.volume.headset.gain.depcal=false
ro.have_aacencode_feature=1
vendor.audio.playback.dsp.pathdelay=0
vendor.audio.usb.disable.sidetone=true
ro.telephony.call_ring.multiple=false
audio.legacy.postproc=false
vendor.audio.hdr.record.enable=true
persist.dirac.acs.ignore_error=1
audio.passthrough.volume.route2cec=true
persist.vendor.audio_fx.waves.maxxsense=true
persist.vendor.audio_fx.waves.processing=true
persist.vendor.audio_fx.waves.proc_twks=true
persist.vendor.audio_fx.waves.systrace=true
vendor.audio.c2.preferred=true
debug.c2.use_dmabufheaps=1
ro.camera.sound.forced=1
audio.enable.mirrorlink=false
vendor.audio.enable.mirrorlink=false
ro.vendor.audio.enable.mirrorlink=false
audio.lowpower=true
vendor.audio.lowpower=true
ro.vendor.audio.lowpower=true

# OPLUS GENERAL PARAMETERS BY AIST TEAM
ro.oplus.audio.custom.media_vol_default=true
ro.oplus.audio.support.audioscence.v2=1
ro.oplus.platform.audio.bitrate=true

# XIAO GENERAL PARAMETERS BY AIST TEAM
ro.vendor.audio.miui.karaoke.show=true
ro.vendor.audio.miui.karaoke.tencent.show=true
ro.vendor.audio.soundtrigger.xiaomievent=1
persist.vendor.audio.misound.disable=false
persist.vendor.audio.misoundasc=true
audio.misound.bluetooth.enable=true
dolby.mi.metadata.log=false
vendor.dolby.mi.metadata.log=false
vendor.audio.misound.bluetooth.enable=true
ro.vendor.audio.misound.bluetooth.enable=true

# QC2 PARAMETERS BY AIST TEAM
vendor.qc2audio.suspend.enabled=false
vendor.qc2audio.per_frame.ac3.dec.enabled=false
vendor.qc2audio.per_frame.ac4.dec.enabled=false
vendor.qc2audio.per_frame.eac3.dec.enabled=false
vendor.qc2audio.per_frame.eac3-joc.dec.enabled=false
vendor.qc2audio.per_frame.avc.dec.enabled=false
vendor.qc2audio.per_frame.h263sw.dec.enabled=false
vendor.qc2audio.per_frame.hevc.dec.enabled=false
vendor.qc2audio.per_frame.mpeg2.dec.enabled=false
vendor.qc2audio.per_frame.mpeg4sw.dec.enabled=false
vendor.qc2audio.per_frame.vp8.dec.enabled=false
vendor.qc2audio.per_frame.vp9.dec.enabled=false
vendor.qc2audio.per_frame.aac.dec.enabled=false
vendor.qc2audio.per_frame.amrnb.dec.enabled=false
vendor.qc2audio.per_frame.amrwb.dec.enabled=false
vendor.qc2audio.per_frame.flac.dec.enabled=false
vendor.qc2audio.per_frame.g711.alaw.dec.enabled=false
vendor.qc2audio.per_frame.g711.malw.dec.enabled=false
vendor.qc2audio.per_frame.opus.dec.enabled=false
vendor.qc2audio.per_frame.raw.dec.enabled=false
vendor.qc2audio.per_frame.vorbis.dec.enabled=false
vendor.qc2audio.per_frame.gsm.dec.enabled=false
vendor.qc2audio.per_frame.av1.dec.enabled=false
vendor.qc2audio.per_frame.h263.dec.enabled=false
vendor.qc2audio.per_frame.h264.dec.enabled=false
vendor.qc2audio.per_frame.mpeg4.dec.enabled=false
vendor.qc2audio.per_frame.heic.dec.enabled=false
vendor.qc2audio.per_frame.hevc.dec.enabled=false
vendor.qc2audio.per_frame.alac.dec.enabled=false
vendor.qc2audio.per_frame.mp4a.dec.enabled=false
vendor.qc2audio.per_frame.mpegh.dec.enabled=false
vendor.qc2audio.per_frame.dsd.dec.enabled=false
vendor.qc2audio.per_frame.ape.dec.enabled=false
vendor.qc2audio.per_frame.dts.dec.enabled=false
vendor.qc2audio.per_frame.wma.dec.enabled=false
vendor.qc2audio.per_frame.heif.dec.enabled=false
vendor.qc2audio.per_frame.pcm.dec.enabled=false

# DECODER/ENCODER PARAMETERS BY AIST TEAM
vendor.audio.ac3.complexity.default=10
vendor.audio.ac3.quality=100
vendor.audio.ac4.complexity.default=10
vendor.audio.ac4.quality=100
vendor.audio.eac3.complexity.default=10
vendor.audio.eac3.quality=100
vendor.audio.eac3-joc.complexity.default=10
vendor.audio.eac3-joc.quality=100
vendor.audio.avc.complexity.default=10
vendor.audio.avc.quality=100
vendor.audio.h263sw.complexity.default=10
vendor.audio.h263sw.quality=100
vendor.audio.hevc.complexity.default=10
vendor.audio.hevc.quality=100
vendor.audio.mpeg2.complexity.default=10
vendor.audio.mpeg2.quality=100
vendor.audio.mpeg4sw.complexity.default=10
vendor.audio.mpeg4sw.quality=100
vendor.audio.vp8.complexity.default=10
vendor.audio.vp8.quality=100
vendor.audio.vp9.complexity.default=10
vendor.audio.vp9.quality=100
vendor.audio.aac.complexity.default=10
vendor.audio.aac.quality=100
vendor.audio.amrnb.complexity.default=10
vendor.audio.amrnb.quality=100
vendor.audio.amrwb.complexity.default=10
vendor.audio.amrwb.quality=100
vendor.audio.flac.complexity.default=10
vendor.audio.flac.quality=100
vendor.audio.g711.alaw.complexity.default=10
vendor.audio.g711.alaw.quality=100
vendor.audio.g711.malw.complexity.default=10
vendor.audio.g711.malw.quality=100
vendor.audio.opus.complexity.default=10
vendor.audio.opus.quality=100
vendor.audio.raw.complexity.default=10
vendor.audio.raw.quality=100
vendor.audio.vorbis.complexity.default=10
vendor.audio.vorbis.quality=100
vendor.audio.gsm.complexity.default=10
vendor.audio.gsm.quality=100
vendor.audio.av1.complexity.default=10
vendor.audio.av1.quality=100
vendor.audio.h263.complexity.default=10
vendor.audio.h263.quality=100
vendor.audio.h264.complexity.default=10
vendor.audio.h264.quality=100
vendor.audio.mpeg4.complexity.default=10
vendor.audio.mpeg4.quality=100
vendor.audio.heic.complexity.default=10
vendor.audio.heic.quality=100
vendor.audio.hevc.cq.complexity.default=10
vendor.audio.hevc.cq.quality=100
vendor.audio.alac.complexity.default=10
vendor.audio.alac.quality=100
vendor.audio.mp4a.complexity.default=10
vendor.audio.mp4a.quality=100
vendor.audio.mpegh.complexity.default=10
vendor.audio.mpegh.quality=100
vendor.audio.dsd.complexity.default=10
vendor.audio.dsd.quality=100
vendor.audio.ape.complexity.default=10
vendor.audio.ape.quality=100
vendor.audio.dts.complexity.default=10
vendor.audio.dts.quality=100
vendor.audio.wma.complexity.default=10
vendor.audio.wma.quality=100
vendor.audio.heif.complexity.default=10
vendor.audio.heif.quality=100
vendor.audio.pcm.complexity.default=10
vendor.audio.pcm.quality=100
vendor.audio.use.sw.ac3.decoder=true
vendor.audio.use.sw.ac4.decoder=true
vendor.audio.use.sw.eac3.decoder=true
vendor.audio.use.sw.eac3-joc.decoder=true
vendor.audio.use.sw.avc.decoder=true
vendor.audio.use.sw.h263sw.decoder=true
vendor.audio.use.sw.hevc.decoder=true
vendor.audio.use.sw.mpeg2.decoder=true
vendor.audio.use.sw.mpeg4sw.decoder=true
vendor.audio.use.sw.vp8.decoder=true
vendor.audio.use.sw.vp9.decoder=true
vendor.audio.use.sw.aac.decoder=true
vendor.audio.use.sw.amrnb.decoder=true
vendor.audio.use.sw.amrwb.decoder=true
vendor.audio.use.sw.flac.decoder=true
vendor.audio.use.sw.g711.alaw.decoder=true
vendor.audio.use.sw.g711.malw.decoder=true
vendor.audio.use.sw.opus.decoder=true
vendor.audio.use.sw.raw.decoder=true
vendor.audio.use.sw.vorbis.decoder=true
vendor.audio.use.sw.gsm.decoder=true
vendor.audio.use.sw.av1.decoder=true
vendor.audio.use.sw.h263.decoder=true
vendor.audio.use.sw.h264.decoder=true
vendor.audio.use.sw.mpeg4.decoder=true
vendor.audio.use.sw.heic.decoder=true
vendor.audio.use.sw.hevc.decoder=true
vendor.audio.use.sw.alac.decoder=true
vendor.audio.use.sw.mp4a.decoder=true
vendor.audio.use.sw.mpegh.decoder=true
vendor.audio.use.sw.dsd.decoder=true
vendor.audio.use.sw.ape.decoder=true
vendor.audio.use.sw.dts.decoder=true
vendor.audio.use.sw.wma.decoder=true
vendor.audio.use.sw.heif.decoder=true
vendor.audio.use.sw.pcm.decoder=true
vendor.audio.use.sw.ac3.encoder=true
vendor.audio.use.sw.ac4.encoder=true
vendor.audio.use.sw.eac3.encoder=true
vendor.audio.use.sw.eac3-joc.encoder=true
vendor.audio.use.sw.avc.encoder=true
vendor.audio.use.sw.h263sw.encoder=true
vendor.audio.use.sw.hevc.encoder=true
vendor.audio.use.sw.mpeg2.encoder=true
vendor.audio.use.sw.mpeg4sw.encoder=true
vendor.audio.use.sw.vp8.encoder=true
vendor.audio.use.sw.vp9.encoder=true
vendor.audio.use.sw.aac.encoder=true
vendor.audio.use.sw.amrnb.encoder=true
vendor.audio.use.sw.amrwb.encoder=true
vendor.audio.use.sw.flac.encoder=true
vendor.audio.use.sw.g711.alaw.encoder=true
vendor.audio.use.sw.g711.malw.encoder=true
vendor.audio.use.sw.opus.encoder=true
vendor.audio.use.sw.raw.encoder=true
vendor.audio.use.sw.vorbis.encoder=true
vendor.audio.use.sw.gsm.encoder=true
vendor.audio.use.sw.av1.encoder=true
vendor.audio.use.sw.h263.encoder=true
vendor.audio.use.sw.h264.encoder=true
vendor.audio.use.sw.mpeg4.encoder=true
vendor.audio.use.sw.heic.encoder=true
vendor.audio.use.sw.hevc.encoder=true
vendor.audio.use.sw.alac.encoder=true
vendor.audio.use.sw.mp4a.encoder=true
vendor.audio.use.sw.mpegh.encoder=true
vendor.audio.use.sw.dsd.encoder=true
vendor.audio.use.sw.ape.encoder=true
vendor.audio.use.sw.dts.encoder=true
vendor.audio.use.sw.wma.encoder=true
vendor.audio.use.sw.heif.encoder=true
vendor.audio.use.sw.pcm.encoder=true
vendor.audio.ac3.sw.decoder.24bit=true
vendor.audio.ac4.sw.decoder.24bit=true
vendor.audio.eac3.sw.decoder.24bit=true
vendor.audio.eac3-joc.sw.decoder.24bit=true
vendor.audio.avc.sw.decoder.24bit=true
vendor.audio.h263sw.sw.decoder.24bit=true
vendor.audio.hevc.sw.decoder.24bit=true
vendor.audio.mpeg2.sw.decoder.24bit=true
vendor.audio.mpeg4sw.sw.decoder.24bit=true
vendor.audio.vp8.sw.decoder.24bit=true
vendor.audio.vp9.sw.decoder.24bit=true
vendor.audio.aac.sw.decoder.24bit=true
vendor.audio.amrnb.sw.decoder.24bit=true
vendor.audio.amrwb.sw.decoder.24bit=true
vendor.audio.flac.sw.decoder.24bit=true
vendor.audio.g711.alaw.sw.decoder.24bit=true
vendor.audio.g711.malw.sw.decoder.24bit=true
vendor.audio.opus.sw.decoder.24bit=true
vendor.audio.raw.sw.decoder.24bit=true
vendor.audio.vorbis.sw.decoder.24bit=true
vendor.audio.gsm.sw.decoder.24bit=true
vendor.audio.av1.sw.decoder.24bit=true
vendor.audio.h263.sw.decoder.24bit=true
vendor.audio.h264.sw.decoder.24bit=true
vendor.audio.mpeg4.sw.decoder.24bit=true
vendor.audio.heic.sw.decoder.24bit=true
vendor.audio.hevc.sw.decoder.24bit=true
vendor.audio.alac.sw.decoder.24bit=true
vendor.audio.mp4a.sw.decoder.24bit=true
vendor.audio.mpegh.sw.decoder.24bit=true
vendor.audio.dsd.sw.decoder.24bit=true
vendor.audio.ape.sw.decoder.24bit=true
vendor.audio.dts.sw.decoder.24bit=true
vendor.audio.wma.sw.decoder.24bit=true
vendor.audio.heif.sw.decoder.24bit=true
vendor.audio.pcm.sw.decoder.24bit=true
vendor.audio.ac3.sw.encoder.24bit=true
vendor.audio.ac4.sw.encoder.24bit=true
vendor.audio.eac3.sw.encoder.24bit=true
vendor.audio.eac3-joc.sw.encoder.24bit=true
vendor.audio.avc.sw.encoder.24bit=true
vendor.audio.h263sw.sw.encoder.24bit=true
vendor.audio.hevc.sw.encoder.24bit=true
vendor.audio.mpeg2.sw.encoder.24bit=true
vendor.audio.mpeg4sw.sw.encoder.24bit=true
vendor.audio.vp8.sw.encoder.24bit=true
vendor.audio.vp9.sw.encoder.24bit=true
vendor.audio.aac.sw.encoder.24bit=true
vendor.audio.amrnb.sw.encoder.24bit=true
vendor.audio.amrwb.sw.encoder.24bit=true
vendor.audio.flac.sw.encoder.24bit=true
vendor.audio.g711.alaw.sw.encoder.24bit=true
vendor.audio.g711.malw.sw.encoder.24bit=true
vendor.audio.opus.sw.encoder.24bit=true
vendor.audio.raw.sw.encoder.24bit=true
vendor.audio.vorbis.sw.encoder.24bit=true
vendor.audio.gsm.sw.encoder.24bit=true
vendor.audio.av1.sw.encoder.24bit=true
vendor.audio.h263.sw.encoder.24bit=true
vendor.audio.h264.sw.encoder.24bit=true
vendor.audio.mpeg4.sw.encoder.24bit=true
vendor.audio.heic.sw.encoder.24bit=true
vendor.audio.hevc.sw.encoder.24bit=true
vendor.audio.alac.sw.encoder.24bit=true
vendor.audio.mp4a.sw.encoder.24bit=true
vendor.audio.mpegh.sw.encoder.24bit=true
vendor.audio.dsd.sw.encoder.24bit=true
vendor.audio.ape.sw.encoder.24bit=true
vendor.audio.dts.sw.encoder.24bit=true
vendor.audio.wma.sw.encoder.24bit=true
vendor.audio.heif.sw.encoder.24bit=true
vendor.audio.pcm.sw.encoder.24bit=true
use.non-omx.ac3.decoder=false
use.non-omx.ac4.decoder=false
use.non-omx.eac3.decoder=false
use.non-omx.eac3-joc.decoder=false
use.non-omx.avc.decoder=false
use.non-omx.h263sw.decoder=false
use.non-omx.hevc.decoder=false
use.non-omx.mpeg2.decoder=false
use.non-omx.mpeg4sw.decoder=false
use.non-omx.vp8.decoder=false
use.non-omx.vp9.decoder=false
use.non-omx.aac.decoder=false
use.non-omx.amrnb.decoder=false
use.non-omx.amrwb.decoder=false
use.non-omx.flac.decoder=false
use.non-omx.g711.alaw.decoder=false
use.non-omx.g711.malw.decoder=false
use.non-omx.opus.decoder=false
use.non-omx.raw.decoder=false
use.non-omx.vorbis.decoder=false
use.non-omx.gsm.decoder=false
use.non-omx.av1.decoder=false
use.non-omx.h263.decoder=false
use.non-omx.h264.decoder=false
use.non-omx.mpeg4.decoder=false
use.non-omx.heic.decoder=false
use.non-omx.hevc.decoder=false
use.non-omx.alac.decoder=false
use.non-omx.mp4a.decoder=false
use.non-omx.mpegh.decoder=false
use.non-omx.dsd.decoder=false
use.non-omx.ape.decoder=false
use.non-omx.dts.decoder=false
use.non-omx.wma.decoder=false
use.non-omx.heif.decoder=false
use.non-omx.ac3.encoder=false
use.non-omx.ac4.encoder=false
use.non-omx.eac3.encoder=false
use.non-omx.eac3-joc.encoder=false
use.non-omx.avc.encoder=false
use.non-omx.h263sw.encoder=false
use.non-omx.hevc.encoder=false
use.non-omx.mpeg2.encoder=false
use.non-omx.mpeg4sw.encoder=false
use.non-omx.vp8.encoder=false
use.non-omx.vp9.encoder=false
use.non-omx.aac.encoder=false
use.non-omx.amrnb.encoder=false
use.non-omx.amrwb.encoder=false
use.non-omx.flac.encoder=false
use.non-omx.g711.alaw.encoder=false
use.non-omx.g711.malw.encoder=false
use.non-omx.opus.encoder=false
use.non-omx.raw.encoder=false
use.non-omx.vorbis.encoder=false
use.non-omx.gsm.encoder=false
use.non-omx.av1.encoder=false
use.non-omx.h263.encoder=false
use.non-omx.h264.encoder=false
use.non-omx.mpeg4.encoder=false
use.non-omx.heic.encoder=false
use.non-omx.hevc.encoder=false
use.non-omx.alac.encoder=false
use.non-omx.mp4a.encoder=false
use.non-omx.mpegh.encoder=false
use.non-omx.dsd.encoder=false
use.non-omx.ape.encoder=false
use.non-omx.dts.encoder=false
use.non-omx.wma.encoder=false
use.non-omx.heif.encoder=false
use.non-omx.pcm.encoder=false

# HiFi/Dolby PARAMETERS BY AIST TEAM
audio.hifi.int_codec=true
vendor.audio.hifi.int_codec=true
audio.hifi.ext_codec=true
vendor.audio.hifi.ext_codec=true
persist.audio.hifi.int_codec=true
persist.vendor.audio.hifi.int_codec=true
persist.audio.hifi.ext_codec=true
persist.vendor.audio.hifi.ext_codec=true
audio.feature.hifi_audio.enable=true
vendor.audio.feature.hifi_audio.enable=true
ro.config.hifi_enhance_support=1
audio.hifi_adv_support=1
audio.hifi_dac=ON
vendor.audio.hifi_adv_support=1
vendor.audio.hifi_dac=ON
persist.audio.hifi_adv_support=1
persist.audio.hifi_dac=ON
persist.vendor.audio.hifi_adv_support=1
persist.vendor.audio.hifi_dac=ON
persist.lge.hifiquaddac=true
use.dts_eagle=flase
audio.use.dts_eagle=flase
vendor.audio.use.dts_eagle=flase
DTS_EAGLE_PLATFORM_SUPPORT=true
DTS_NEW_PARAM_READY=1
ro.feature.dolby_enable=true
dolby.dap.param.tee=true
audio.gef.enable.traces=true
audio.gef.debug.flags=true
vendor.dolby.dap.param.tee=true
vendor.audio.gef.enable.traces=true
vendor.audio.gef.debug.flags=true
ro.platform.disable.audiorawout=true
ro.platform.support.dolby=true
ro.platform.support.dts=true
ro.vendor.platform.disable.audiorawout=true
ro.vendor.platform.support.dolby=true
ro.vendor.platform.support.dts=true
vendor.dts.audio.skip_shadow=true
vendor.dts.audio.set_bypass=true
vendor.dts.audio.log_time=false
vendor.dts.audio.allow_offload=true
vendor.dts.audio.print_eagle=true
vendor.audio.dolby.ds2.enabled=false
vendor.audio.dolby.ds2.hardbypass=false

# BT PARAMETERS BY AIST TEAM
persist.service.btui.use_aptx=1
persist.service.btui.use_aptxhd=1
persist.bt.enableAptXHD=true
persist.bt.a2dp.aptx_disable=false
persist.bt.a2dp.aptx_hd_disable=false
persist.vendor.qcom.bluetooth.connect.peer_earbud=true
persist.bluetooth.aptxadaptive_offload.enabled=true
persist.vendor.qcom.bluetooth.aptxadaptiver2_1_support=true
persist.vendor.qcom.bluetooth.aptxadaptiver2_2_support=true
persist.bt.a2dp.aac_disable=false
audio.effect.a2dp.enable=1
vendor.audio.effect.a2dp.enable=1
persist.sys.btsatck.absvolfeature=true
persist.vendor.btsatck.absvolfeature=true
persist.bluetooth.enable_dynamic_absvol=false
persist.vendor.bt.a2dp.addr_check_enabled_for_aac=true
persist.bluetooth.avrcpversion=avrcp16
persist.bluetooth.mapversion=map14
bt.max.hfpclient.connections=5
persist.sys.fflag.override.settings_bluetooth_hearing_aid=true
sys.fflag.override.settings_bluetooth_hearing_aid=true
persist.bluetooth.enablenewavrcp=true
persist.vendor.qcom.enablenewavrcp=true
persist.vendor.qcom.bluetooth.enablenewavrcp=true
persist.vendor.btstack.enablenewavrcp=true
persist.vendor.bt.enablenewavrcp=true
persist.vendor.btstack.enable.lpa=false
persist.vendor.btstack.enable.splita2dp=true
persist.vendor.qcom.bluetooth.enable.splita2dp=true
persist.vendor.bt.aac_frm_ctl.enabled=true
persist.vendor.btstack.aac_frm_ctl.enabled=true
persist.vendor.qcom.bluetooth.aac_frm_ctl.enabled=true
persist.vendor.bt.aac_vbr_frm_ctl.enabled=false
persist.vendor.btstack.aac_vbr_frm_ctl.enabled=false
persist.vendor.qcom.bluetooth.aac_vbr_frm_ctl.enabled=false
ro.vendor.bluetooth.a2dp_aac_vbr.is_disabled=true
persist.vendor.bt.enable.swb=true
persist.vendor.bt.enable.swbpm=true
persist.vendor.btstack.enable.swb=true
persist.vendor.btstack.enable.swbpm=true
persist.vendor.qcom.bluetooth.enable.swb=true
persist.vendor.qcom.bluetooth.enable.swbpm=true
vendor.bt.pts.pbap=true
persist.bluetooth.enabledelayreports=false
persist.bluetooth.sbc_hd_higher_bitrate=1
persist.bt.sbc_hd_enabled=1
persist.vendor.qcom.bluetooth.a2dp_mcast_test.enabled=false
persist.af.losslessbt.on=1
bluetooth.a2dp.lhdc=true
persist.bluetooth.a2dp.lhdc=true
persist.bluetooth.dualconnection.supported=true
persist.bluetooth.gamemode=true
vendor.bluetooth.ldac.abr=false
persist.vendor.bluetooth.a2dp.hal.implementation=false
persist.vendor.bt.a2dp.hal.implementation=false
persist.bluetooth.bluetooth_audio_hal.disabled=false
persist.vendor.bluetooth.modem_nv_support=false
persist.vendor.btstack.lc3_reset_adv_audio_mask=true
persist.bluetooth.enablepagescan=true
persist.vendor.bt.a2dp.mac_whitelist=true
audio.a2dp.codec.latency=true
vendor.audio.a2dp.codec.latency=true
ro.vendor.audio.a2dp.codec.latency=true
persist.vendor.bluetooth.heif=true
persist.vendor.service.bt.iot.enablelogging=false
persist.vendor.bt.iotinfo.report.enable=false
persist.vendor.service.bt.iotinfo.report.enable=false
persist.bt.iot.enablelogging=flase
persist.sys.bluetooth.wearcheck_support=true
persist.sys.bluetooth.gatt.cache.support=true
persist.sys.bluetooth.ble.retry.support=true
persist.sys.bluetooth.rssi_distance.support=true
bluetooth.profile.a2dp.source.enabled=true
bluetooth.profile.avrcp.target.enabled=true
bluetooth.profile.avrcp.controller.enabled=false
bluetooth.profile.hfp.ag.enabled=false
bluetooth.profile.asha.central.enabled=true
bluetooth.profile.gatt.enabled=true
bluetooth.profile.hid.host.enabled=true
bluetooth.profile.hid.device.enabled=true
bluetooth.profile.map.server.enabled=true
bluetooth.profile.opp.enabled=true
bluetooth.profile.pan.nap.enabled=true
bluetooth.profile.pan.panu.enabled=true
bluetooth.profile.pbap.server.enabled=true
bluetooth.profile.sap.server.enabled=false
vendor.audio.hfp.enable=false
ro.vendor.bluetooth.csip_qti=false
persist.vendor.service.bt.opp.cloudhighspeed=true
persist.vendor.service.bt.opp.highspeed=true

# OPLUS BT PARAMETERS BY AIST TEAM
persist.sys.oplus.bt.binaural_record=false
persist.sys.oplus.bt.acl_optimize=false
persist.sys.oplus.bt.log_off_bt=false
persist.sys.oplus.bt.switch_log.enable=false

# AHAL PARAMETERS BY AIST TEAM
audio.offload.video=true
av.offload.enable=true
audio.deep_buffer.media=true
vendor.audio.deep_buffer.media=true
ro.vendor.audio.deep_buffer.media=true
audio.offload.gapless.enabled=false
vendor.audio.offload.gapless.enabled=false
ro.vendor.audio.offload.gapless.enabled=false
ro.vendor.audio.av.streaming.offload.enable=false
vendor.audio.av.streaming.offload.enable=false
vendor.audio.offload.passthrough=false
ro.vendor.audio.offload.passthrough=false
ro.vendor.audio.offload.multiple.enabled=false
vendor.audio.offload.multiple.enabled=false
use.voice.path.for.pcm.voip=true
vendor.voice.path.for.pcm.voip=true
audio.decoder_override_check=true
ro.vendor.audio.hw.aac.decoder=true
vendor.audio.hw.aac.decoder=true
audio.hw.aac.decoder=true
ro.vendor.audio.hw.aac.encoder=true
vendor.audio.hw.aac.encoder=true
audio.hw.aac.encoder=true
qcom.hw.aac.encoder=true
audio.hw.aac.decoder=true
qcom.hw.aac.decoder=true
vendor.audio.kpi_optimize.enable=false
vendor.audio.battery_listener.enable=false
ro.bluetooth.a2dp_offload.supported=true
persist.bluetooth.a2dp_offload.disabled=false
vendor.audio.keep_alive.disabled=false
vendor.audio.feature.a2dp_offload.enable=true
vendor.audio.feature.battery_listener.enable=false
vendor.audio.feature.devicestate_listener.enable=false
vendor.audio.feature.thermal_listener.enable=false
vendor.audio.feature.custom_stereo.enable=false
vendor.audio.feature.dsm_feedback.enable=true
vendor.audio.feature.dynamic_ecns.enable=true
vendor.audio.feature.ext_hw_plugin.enable=false
vendor.audio.feature.external_dsp.enable=false
vendor.audio.feature.external_qdsp.enable=false
vendor.audio.feature.external_speaker.enable=false
vendor.audio.feature.external_speaker_tfa.enable=false
vendor.audio.feature.hfp.enable=false
vendor.audio.feature.hifi_audio.enable=false
vendor.audio.feature.hwdep_cal.enable=true
vendor.audio.feature.multi_voice_session.enable=true
vendor.audio.feature.keep_alive.enable=true
vendor.audio.feature.kpi_optimize.enable=false
vendor.audio.feature.maxx_audio.enable=true
vendor.audio.feature.ras.enable=true
vendor.audio.feature.spkr_prot.enable=false
vendor.audio.feature.usb_offload.enable=true
vendor.audio.feature.usb_offload_burst_mode.enable=true
vendor.audio.feature.usb_offload_sidetone_volume.enable=false
vendor.audio.feature.deepbuffer_as_primary.enable=false
vendor.audio.feature.audiosphere.enable=false
vendor.audio.feature.asphere.enable=false
vendor.audio.feature.audiozoom.enable=false
vendor.audio.feature.dmabuf.cma.memory.enable=true
vendor.audio.feature.power_mode.enable=false

# SYSTEM PARAMETERS BY AIST TEAM
vendor.hab.vendor.verified=false
vendor.hab.system.verified=false
vendor.hab.system_ext.verified=false
vendor.hab.oem.verified=false
vendor.hab.product.verified=false
vendor.hab.odm.verified=false
ro.control_privapp_permissions=disable
vendor.skip.init=0" > $MODPATH/$MODID/system.prop
REPLACER -f "AudioFX MusicFX"
echo -e "#!$MIPSB/sh\nSERVERPID=\$(pidof audioserver); [ \"\$SERVERPID\" ] && kill \$SERVERPID" | tee $MODPATH/$MODID/service.sh $MODPATH/$MODID/post-fs-data.sh > /dev/null
echo -e "\nresetprop -p --delete persist.vendor.audio_hal.dsp_bit_width_enforce_mode\nresetprop -p --delete persist.audio_hal.dsp_bit_width_enforce_mode\nresetprop -p --delete vendor.audio.ultrasound.stoplatency" > $MODPATH/$MODID/service.s
if FINDER "$MPATHS"; then PSXCF -psf "$MPATHS"; fi
if FINDER "$ACXML"; then PSXCF -psf "$ACXML"; fi
if FINDER "$APCXML"; then PSXCF -psf "$APCXML"; fi
if FINDER "$AIPAOPCONF"; then PSXCF -psf "$AIPAOPCONF"; fi
if FINDER "$STPIXML"; then PSXCF -psf "$STPIXML"; fi
if $STEP1; then PATCH_VOLUMES -aist; fi
if $STEP2; then PATCH_MICROPHONE -aist; fi
if $STEP4; then PATCH_MEDIA_CODECS; fi
if FINDER "$MPATHS"; then PATCH_MIXER -aist; fi
if FINDER "$APIXML"; then PATCH_AUDIO_PLATFORM_INFO -aist; fi
if FINDER "$ACXML"; then PATCH_DEEP_BUFFER -aist; fi
if FINDER "$APCXML"; then PATCH_AUDIO_POLICY_CONFIGURATION -aist; fi
if [ -d $MAGISKMP$IPSEDF ] || [ -d $MAGISKMP$IPVEDF ]; then PATCH_DEVICE_FEATURES -aist; fi
if FINDER "$BTCSCONF" || FINDER "$BTSCONF"; then PATCH_IMPROVE_BLUETOOTH -aist; fi
if FINDER "$AIPAOPCONF"; then PATCH_AUDIO_POLICY; fi
if $STEP3; then PATCH_FIXING_KHZ; fi
if FINDER "$A2DPXML"; then
for FA2DPXML in $A2DPXML; do
if [ -f $MAGISKMP$FA2DPXML ]; then
UIP "Found $FA2DPXML" "Patching..."
PSF="$MODPATH/$MODID$FA2DPXML"
sed -i 's/samplingRates="44100,48000,88200,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/g' $PSF
sed -i 's/samplingRates="44100 48000 88200 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/g' $PSF
sed -i 's/samplingRates="44100,48000,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/g' $PSF
sed -i 's/samplingRates="44100 48000 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/g' $PSF
sed -i '/AUDIO_DEVICE_OUT_BLUETOOTH_A2DP/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/AUDIO_DEVICE_OUT_BLUETOOTH_A2DP/a\
           <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
UIP "$MSGFFAP"
fi
done
fi
if FINDER "$BTQTIXML"; then
for FBTQTIXML in $BTQTIXML; do
if [ -f $MAGISKMP$FBTQTIXML ]; then
UIP "Found $FBTQTIXML" "Patching..."
PSF="$MODPATH/$MODID$FBTQTIXML"
sed -i 's/samplingRates="44100,48000,88200,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/g' $PSF
sed -i 's/samplingRates="44100 48000 88200 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/g' $PSF
sed -i 's/samplingRates="44100,48000,96000"/samplingRates="8000,11025,12000,16000,22050,24000,32000,44100,48000,64000,88200,96000,128000,176400,192000"/g' $PSF
sed -i 's/samplingRates="44100 48000 96000"/samplingRates="8000 11025 12000 16000 22050 24000 32000 44100 48000 64000 88200 96000 128000 176400 192000"/g' $PSF
sed -i '/AUDIO_DEVICE_OUT_BLUETOOTH_A2DP/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/AUDIO_DEVICE_OUT_BLUETOOTH_A2DP/a\
           <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
UIP "$MSGFFAP"
fi
done
fi
if FINDER "$VIRTXML"; then
for FVIRTXML in $VIRTXML; do
if [ -f $MAGISKMP$FVIRTXML ]; then
UIP "Found $FVIRTXML" "Patching..."
PSF="$MODPATH/$MODID$FVIRTXML"
sed -i '/name="virtual output/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/name="virtual output/a\
           <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
sed -i '/AUDIO_DEVICE_OUT_IP/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/AUDIO_DEVICE_OUT_IP/a\
           <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
UIP "$MSGFFAP"
fi
done
fi
if FINDER "$USBXML"; then
for FUSBXML in $USBXML; do
if [ -f $MAGISKMP$FUSBXML ]; then
UIP "Found $FUSBXML" "Patching..."
PSF="$MODPATH/$MODID$FUSBXML"
sed -i '/AUDIO_DEVICE_OUT_USB_ACCESSORY/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/AUDIO_DEVICE_OUT_USB_ACCESSORY/a\
           <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
sed -i '/name="usb_accessory output" role="source"/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/name="usb_accessory output" role="source"/a\
           <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
UIP "$MSGFFAP"
fi
done
fi
if FINDER "$RSUBMIXXML"; then
for FRSUBMIXXML in $RSUBMIXXML; do
if [ -f $MAGISKMP$FRSUBMIXXML ]; then
UIP "Found $FRSUBMIXXML" "Patching..."
PSF="$MODPATH/$MODID$FRSUBMIXXML"
sed -i '/AUDIO_DEVICE_OUT_REMOTE_SUBMIX/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/AUDIO_DEVICE_OUT_REMOTE_SUBMIX/a\
           <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
sed -i '/name="r_submix output" role="source"/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/name="r_submix output" role="source"/a\
           <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
UIP "$MSGFFAP"
fi
done
fi
if FINDER "$VEHICLEXML"; then
for FVEHICLEXML in $VEHICLEXML; do
if [ -f $MAGISKMP$FVEHICLEXML ]; then
UIP "Found $FVEHICLEXML" "Patching..."
PSF="$MODPATH/$MODID$FVEHICLEXML"
sed -i '/AUDIO_OUTPUT_FLAG_CAR/a\
AI2ST' $PSF
sed -i '/AI2ST/,+1d' $PSF
sed -i '/AUDIO_OUTPUT_FLAG_CAR/a\
           <profile name="" format="AUDIO_FORMAT_PCM_24_BIT_PACKED"' $PSF
UIP "$MSGFFAP"
fi
done
fi
if FINDER "$STPIXML"; then
for FSTPIXML in $STPIXML; do
if [ -f $MAGISKMP$FSTPIXML ]; then
UIP "Found $FSTPIXML" "Patching..."
PSF="$MODPATH/$MODID$FSTPIXML"
mkdir -p `dirname $PSF`
cp -f $MAGISKMP$FSTPIXML $PSF
sed -i 's/sva_transparent_disabled="false"/sva_transparent_disabled="true"/g' $PSF
sed -i 's/concurrent_capture="false"/concurrent_capture="true"/g' $PSF
sed -i 's/concurrent_voice_call="true"/concurrent_voice_call="false"/g' $PSF
sed -i 's/concurrent_voip_call="true"/concurrent_voip_call="false"/g' $PSF
sed -i 's/va_mic_clk_switch="false"/va_mic_clk_switch="true"/g' $PSF
sed -i '/<common_config>/a\
        <param concurrent_voice_call="false"/>\
        <param concurrent_voip_call="false"/>\
        <param va_mic_clk_switch="true"/>\
        <param sva_transparent_disabled="true"/>' $PSF
UIP "$MSGFFAP"
fi
done
fi
if [ -d $MAGISKMP$IPSED ] || [ -d $MAGISKMP$IPVED ]; then PATCH_DOLBY; fi
if CHECKER "device" "dipper"; then PATCH_FIX_MICRO; fi
MOVERPATH
SET_PERM_RM -msgdi
WCANFTP "-alcf"
}

IPSAQ () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/systemaudioquality ]; then
UIP -s "$MSGFI System Audio Quality, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
BUCKUPER -r "$AIPAOPCONF"
rm -f $AIOPFMDPH/systemaudioquality
UIP "$MSGDRM"
fi
else
if FINDER "$AIPAOPCONF"; then
UCSA "Install System Audio Quality $VIPSAQ?" "IPSAQS" "$IDSAQ"
fi
fi
}

IPSAQS () {
UIP "Installing System Audio Quality $IAMM"
if $MAGISK; then
PTMFI -np "$IDSAQ" "systemaudioquality2"
MMPR -vc "System Audio Quality" "$VIPSAQ" "$VCIPSAQ" "Ichigo Kywrosaki" "This Module Improves The Sound Quality Of System Sounds"
$ECHO "[ -d \"/sbin/.magisk\" ] && MAGISKMP=\"/sbin/.magisk/mirror\" || MAGISKMP=\$(find \`magisk --path\` -type d -name \"mirror\" | head -n 1)
AIPAOPCONF=\"\$(find /vendor -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
PAIPAOPCONF=false
for ALLMOD in \$(ls $MODPATH); do
ALLMODAIPAOPCONF=\"\$(find $MODPATH/\$ALLMOD -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
if [ ! -f $MODPATH/\$ALLMOD/disable ]; then
for FAIPAOPCONF in \$ALLMODAIPAOPCONF; do
if [ -f \$FAIPAOPCONF ] && [ ! -f \$FAIPAOPCONF.bak ]; then
PAIPAOPCONF=true
cp -f \$FAIPAOPCONF \$FAIPAOPCONF.bak
sed -i '/default {/p;/default {/,/}/d;' \$FAIPAOPCONF
sed -i \"s/^  default {/  default {\n    flags AUDIO_OUTPUT_FLAG_PRIMARY\n    formats AUDIO_FORMAT_PCM_16_BIT\n    sampling_rates 48000\n    bit_width 16\n    app_type 69936\n  }/\" \$FAIPAOPCONF
elif [ -f \$FAIPAOPCONF ] && [ -f \$FAIPAOPCONF.bak ]; then
PAIPAOPCONF=true
sed -i '/default {/p;/default {/,/}/d;' \$FAIPAOPCONF
sed -i \"s/^  default {/  default {\n    flags AUDIO_OUTPUT_FLAG_PRIMARY\n    formats AUDIO_FORMAT_PCM_16_BIT\n    sampling_rates 48000\n    bit_width 16\n    app_type 69936\n  }/\" \$FAIPAOPCONF
fi
done
fi
rm -rf $MODPATH/$MODID$MIPSV
done
if [ \$PAIPAOPCONF != true ]; then
for FAIPAOPCONF in \$AIPAOPCONF; do
PSF=\"$MODPATH/$MODID\$FAIPAOPCONF\"
mkdir -p \`dirname \$PSF\`
cp -f \$MAGISKMP\$FAIPAOPCONF \$PSF
sed -i '/default {/p;/default {/,/}/d;' \$PSF
sed -i \"s/^  default {/  default {\n    flags AUDIO_OUTPUT_FLAG_PRIMARY\n    formats AUDIO_FORMAT_PCM_16_BIT\n    sampling_rates 48000\n    bit_width 16\n    app_type 69936\n  }/\" \$PSF
mkdir -p $MODPATH/$MODID/system/vendor; cp -rf $MODPATH/$MODID/vendor/* $MODPATH/$MODID/system/vendor; rm -rf $MODPATH/$MODID/vendor
done
fi" > $MODPATH/$MODID/post-fs-data.sh
echo "#!$MIPSB/sh
if [ ! -d $MODPATH/$MODID ] || [ -f $MODPATH/$MODID/disable ] || [ -f $MODPATH/$MODID/remove ]; then
AIPAOPCONF=\"\$(find $MODPATH -type f -name \"*audio_io_policy*.conf\" -o -name \"*audio_output_policy*.conf\")\"
for FAIPAOPCONF in \$AIPAOPCONF; do
if [ -f \$FAIPAOPCONF.bak ]; then
cp -f \$FAIPAOPCONF.bak \$FAIPAOPCONF
rm -f \$FAIPAOPCONF.bak
if [ ! -f $MODPATH/$IDDA/disable ] && [ -f $MODPATH/$IDDA/post-fs-data.sh ]; then sh $MODPATH/$IDDA/post-fs-data.sh; fi
fi
done
fi
if [ ! -d $MODPATH/$MODID ] || [ -f $MODPATH/$MODID/remove ]; then rm -f $POSTFSDATAD/$MODID.sh; fi" > $POSTFSDATAD/$MODID.sh
chmod 0777 $POSTFSDATAD/$MODID.sh
SET_PERM_RM
else
BUCKUPER -s "$AIPAOPCONF"
UIP "$MSGPNF"
for FAIPAOPCONF in $AIPAOPCONF; do
UIP "Found $FAIPAOPCONF" "Patching..."
PSF="$FAIPAOPCONF"
sed -i '/default {/p;/default {/,/}/d;' $PSF
sed -i "s/^  default {/  default {\n    flags AUDIO_OUTPUT_FLAG_PRIMARY\n    formats AUDIO_FORMAT_PCM_16_BIT\n    sampling_rates 48000\n    bit_width 16\n    app_type 69936\n  }/" $PSF
UIP "$MSGFFAP"
done
touch $AIOPFMDPH/systemaudioquality
fi
UIP "$MSGDI"
}

IPIB () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/increasebitrate ]; then
UIP -s "$MSGFI Increase Bitrate, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
BUCKUPER -r "$MPXML"
rm -f $AIOPFMDPH/increasebitrate
UIP "$MSGDRM"
fi
else
if FINDER "$MPXML"; then
UCSA "Install Increase Bitrate $VIPIBS?" "IPIBS" "$IDIBS"
fi
fi
}

IPIBS () {
UIP "Installing Increase Bitrate $IAMM"
if $MAGISK; then
PTMFI -nmp "$IDIBS"
MMPR -v "Increase Bitrate" "$VIPIBS" "Increase Bitrate For Microphone In System (320kbps)"
echo "[ -d \"/sbin/.magisk\" ] && MAGISKMP=\"/sbin/.magisk/mirror\" || MAGISKMP=\$(find \`magisk --path\` -type d -name \"mirror\" | head -n 1)
MPXML=\"\$(find /system /vendor -type f -name \"media_profiles*.xml\")\"
PMPXML=false
for ALLMOD in \$(ls $MODPATH); do
ALLMODMPXML=\"\$(find $MODPATH/\$ALLMOD -type f -name \"media_profiles*.xml\")\"
if [ ! -f $MODPATH/\$ALLMOD/disable ]; then
for FMPXML in \$ALLMODMPXML; do
if [ -f \$FMPXML ] && [ ! -f \$FMPXML.bak ]; then
PMPXML=true
cp -f \$FMPXML \$FMPXML.bak
sed -i \"s/192000/320000/g\" $FMPXML
elif [ -f \$FMPXML ] && [ -f \$FMPXML.bak ]; then
PMPXML=true
sed -i \"s/192000/320000/g\" $FMPXML
fi
done
fi
rm -rf $MODPATH/$MODID$MIPSV
done
if [ \$PMPXML != true ]; then
for FMPXML in \$MPXML; do
PSF=\"$MODPATH/$MODID\$FMPXML\"
mkdir -p \`dirname \$PSF\`
cp -f \$MAGISKMP\$FMPXML \$PSF
sed -i \"s/192000/320000/g\" $PSF
mkdir -p $MODPATH/$MODID/system/vendor; cp -rf $MODPATH/$MODID/vendor/* $MODPATH/$MODID/system/vendor; rm -rf $MODPATH/$MODID/vendor
done
fi" > $MODPATH/$MODID/post-fs-data.sh
echo "#!$MIPSB/sh
if [ ! -d $MODPATH/$MODID ] || [ -f $MODPATH/$MODID/disable ] || [ -f $MODPATH/$MODID/remove ]; then
MPXML=\"\$(find $MODPATH -type f -name \"media_profiles*.xml\")\"
for FMPXML in \$MPXML; do
if [ -f \$FMPXML.bak ]; then
cp -f \$FMPXML.bak \$FMPXML
rm -f \$FMPXML.bak
fi
done
fi
if [ ! -d $MODPATH/$MODID ] || [ -f $MODPATH/$MODID/remove ]; then rm -f $POSTFSDATAD/$MODID.sh; fi" > $POSTFSDATAD/$MODID.sh
chmod 0777 $POSTFSDATAD/$MODID.sh
SET_PERM_RM
else
BUCKUPER -s "$MPXML"
UIP "$MSGPNF"
for FMPXML in $MPXML; do
UIP "Found $FMPXML" "Patching..."
PSF="$FMPXML"
sed -i "s/192000/320000/g" $PSF
UIP "$MSGFFAP"
done
touch $AIOPFMDPH/increasebitrate
fi
UIP "$MSGDI"
}

IPAML () {
if $MAGISK; then
UCSA "Install Audio Modification Library $VIPAML?" "IPAMLS" "$IDAML"
fi
}

IPAMLS () {
UIP "Installing Audio Modification Library $IAMM"
MODID="$IDAML"; REMOVER -emm "$MODID aml" "system"
TOUCHER $MODPATH/$MODID/update
MMPR -vcs "Audio Modification Library" "$VIPAML" "$VCIPAML" "zackptg5, ahrion" "AudModLib Is A Framework That Allows The Seamless Integration Of Multiple Audio Mods In Magisk" "https://forum.xda-developers.com/apps/magisk/module-audio-modification-library-t3579612"
echo "#!$MIPSB/sh
if [ -s $NVBASE/$MODID/modlist ]; then
while read mod; do
[ -d \"$MODPATH/\$mod\" ] || continue
for file in \$(find $NVBASE/$MODID/\$mod -type f 2>/dev/null | sed \"s|$NVBASE/$MODID/||\"); do
[ -f \"$MODPATH/\$file\" ] || cp -af $NVBASE/$MODID/\$file $MODPATH/\$file
done
done < $NVBASE/$MODID/modlist
fi
rm -rf $NVBASE/$MODID $MODPATH/$MODID/system
for AMODID in $IDDA $IDIBS $IDSAQ $IDALCF; do
if [ -d $MODPATH/\$AMODID ]; then
if [ ! -f $MODPATH/\$AMODID/disable ] || [ ! -f $MODPATH/\$AMODID/remove ]; then
sh $MODPATH/\$AMODID/post-fs-data.sh
fi
fi
done
if [ ! -d $MODPATH/$MODID ] || [ -f $MODPATH/$MODID/remove ]; then rm -f $POSTFSDATAD/$MODID.sh; fi" | tee $MODPATH/$MODID/uninstall.sh $POSTFSDATAD/$MODID.sh > /dev/null
echo "[ -d \"/sbin/.magisk\" ] && MAGISKMP=\"/sbin/.magisk\" || MAGISKMP=\"\$(find /dev -mindepth 2 -maxdepth 2 -type d -name \".magisk\")\"

SET_PERM () {
chown \$2:\$3 \$1 || return 1
chmod \$4 \$1 || return 1
CON=\$5
[ -z \$CON ] && CON=u:object_r:system_file:s0
chcon \$CON \$1 || return 1
}

SET_PERM_R () {
find \$1 -type d 2>/dev/null | while read dir; do
SET_PERM \$dir \$2 \$3 \$4 \$6
done
find \$1 -type f -o -type l 2>/dev/null | while read file; do
SET_PERM \$file \$2 \$3 \$5 \$6
done
}

CP_MV () {
mkdir -p \"\$(dirname \"\$3\")\"
cp -af \"\$2\" \"\$3\"
[ \"\$1\" == \"-m\" ] && rm -f \$2 || true
}

OSP_DETECT () {
local spaces effects type=\"\$1\"
local files=\$(find $MODPATH/$MODID/system -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\")
for file in \$files; do
for osp in \$type; do
case \$file in
*.conf) spaces=\$(sed -n \"/^output_session_processing {/,/^}/ {/^ *\$osp {/p}\" \$file | sed -r \"s/( *).*/\1/\")
effects=\$(sed -n \"/^output_session_processing {/,/^}/ {/^\$spaces\\\$osp {/,/^\$spaces}/p}\" \$file | grep -E \"^\$spaces +[A-Za-z]+\" | sed -r \"s/( *.*) .*/\1/g\")
for effect in \${effects}; do
spaces=\$(sed -n \"/^effects {/,/^}/ {/^ *\$effect {/p}\" \$file | sed -r \"s/( *).*/\1/\")
[ \"\$effect\" != \"atmos\" -a \"\$effect\" != \"dtsaudio\" ] && sed -i \"/^effects {/,/^}/ {/^\$spaces\$effect {/,/^\$spaces}/d}\" \$file
done;;
*.xml) effects=\$(sed -n \"/^ *<postprocess>\$/,/^ *<\/postprocess>\$/ {/^ *<stream type=\\\"\$osp\\\">\$/,/^ *<\/stream>\$/ {/<stream type=\\\"\$osp\\\">/d; /<\/stream>/d; s/<apply effect=\\\"//g; s/\\\"\/>//g; s/ *//g; p}}\" \$file)
for effect in \${effects}; do
[ \"\$effect\" != \"atmos\" -a \"\$effect\" != \"dtsaudio\" ] && sed -i \"/^\( *\)<apply effect=\\\"\$effect\\\"\/>/d\" \$file
done;;
esac
done
done
return 0
}

. $MODPATH/$MODID/uninstall.sh
rm -rf $NVBASE/$MODID $MODPATH/$MODID/system $MODPATH/$MODID/Errors.txt $MODPATH/$MODID/system.prop
mkdir $NVBASE/$MODID
files=\"\$(find \$MAGISKMP/mirror/system_root/system \$MAGISKMP/mirror/system \$MAGISKMP/mirror/vendor -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\" -o -name \"*audio_*policy*.conf\" -o -name \"*audio_*policy*.xml\" -o -name \"*mixer_paths*.xml\" -o -name \"*mixer_gains*.xml\" -o -name \"*audio_device*.xml\" -o -name \"*sapa_feature*.xml\" -o -name \"*audio_platform_info*.xml\" -o -name \"*audio_configs*.xml\" -o -name \"*audio_device*.xml\")\"
for file in \$files; do
name=\$(echo \"\$file\" | sed -e \"s|\$MAGISKMP/mirror||\" -e \"s|/system_root/|/|\" -e \"s|/system/|/|\")
CP_MV -c \$file $MODPATH/$MODID/system\$name
modfiles=\"/system\$name \$modfiles\"
done
OSP_DETECT \"music\"

for mod in \$(find $MODPATH/* -maxdepth 0 -type d ! -name $MODID); do
modname=\"\$(basename \$mod)\"
[ -f \"\$mod/disable\" ] && continue
files=\"\$(find \$mod/system -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\" -o -name \"*audio_*policy*.conf\" -o -name \"*audio_*policy*.xml\" -o -name \"*mixer_paths*.xml\" -o -name \"*mixer_gains*.xml\" -o -name \"*audio_device*.xml\" -o -name \"*sapa_feature*.xml\" -o -name \"*audio_platform_info*.xml\" -o -name \"*audio_configs*.xml\" -o -name \"*audio_device*.xml\" 2>/dev/null)\"
[ \"\$files\" ] && echo \"\$modname\" >> $NVBASE/$MODID/modlist || continue
for file in \$files; do
CP_MV -m \$file $NVBASE/$MODID/\$modname/\$(echo \"\$file\" | sed \"s|\$mod/||\")
done
[ $ASDK -ge 29 ] && chcon -R u:object_r:vendor_file:s0 \$mod$MIPSV/lib*/soundfx 2>/dev/null
done

for file in \$modfiles; do
[ \"\$(find $NVBASE/$MODID -type f -path \"*\$file\")\" ] || rm -f $MODPATH/$MODID\$file
done

SET_PERM_R $MODPATH/$MODID/system 0 0 0755 0644
if [ -d $MODPATH/$MODID$MIPSV ]; then
SET_PERM_R $MODPATH/$MODID$MIPSV 0 0 0755 0644 u:object_r:vendor_file:s0
[ -d $MODPATH/$MODID$MIPSVE ] && SET_PERM_R $MODPATH/$MODID$MIPSVE 0 0 0755 0644 u:object_r:vendor_configs_file:s0
fi

for AMODID in $IDDA $IDIBS $IDSAQ $IDALCF; do
if [ -d $MODPATH/\$AMODID ] && [ ! -f $MODPATH/\$AMODID/disable ]; then
sh $MODPATH/\$AMODID/post-fs-data.sh
fi
done

exit 0" > $MODPATH/$MODID/post-fs-data.sh
$ECHO "[ \"\$(magisk --path 2>/dev/null)\" ] && MAGISKTMP=\"\$(magisk --path 2>/dev/null)/.magisk\" || MAGISKTMP=\"/sbin/.magisk\"
[ $ASDK -ge 26 ] && libdir=\"/vendor\" || libdir=\"/system\"

CP_MV () {
mkdir -p \"\$(dirname \"\$3\")\"
cp -af \"\$2\" \"\$3\"
[ \"\$1\" == \"-m\" ] && rm -f \$2 || true
}

OSP_DETECT () {
local spaces effects type=\"\$1\"
local files=\$(find $MODPATH/$MODID/system -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\")
for file in \$files; do
for osp in \$type; do
case \$file in
*.conf) spaces=\$(sed -n \"/^output_session_processing {/,/^}/ {/^ *\$osp {/p}\" \$file | sed -r \"s/( *).*/\1/\")
effects=\$(sed -n \"/^output_session_processing {/,/^}/ {/^\$spaces\\\$osp {/,/^\$spaces}/p}\" \$file | grep -E \"^\$spaces +[A-Za-z]+\" | sed -r \"s/( *.*) .*/\1/g\")
for effect in \${effects}; do
spaces=\$(sed -n \"/^effects {/,/^}/ {/^ *\$effect {/p}\" \$file | sed -r \"s/( *).*/\1/\")
[ \"\$effect\" != \"atmos\" -a \"\$effect\" != \"dtsaudio\" ] && sed -i \"/^effects {/,/^}/ {/^\$spaces\$effect {/,/^\$spaces}/d}\" \$file
done;;
*.xml) effects=\$(sed -n \"/^ *<postprocess>\$/,/^ *<\/postprocess>\$/ {/^ *<stream type=\\\"\$osp\\\">\$/,/^ *<\/stream>\$/ {/<stream type=\\\"\$osp\\\">/d; /<\/stream>/d; s/<apply effect=\\\"//g; s/\\\"\/>//g; s/ *//g; p}}\" \$file)
for effect in \${effects}; do
[ \"\$effect\" != \"atmos\" -a \"\$effect\" != \"dtsaudio\" ] && sed -i \"/^\( *\)<apply effect=\\\"\$effect\\\"\/>/d\" \$file
done;;
esac
done
done
return 0
}

PATCH_CFGS () {
local first=true files=\"\" file lib=false effect=false outsp=false proxy=false replace=false libname libpath effname uid libname_sw uid_sw libname_hw uid_hw libpathsw libpathhw conf xml
local opt=\`getopt :fleoqpr \"\$@\"\`
eval set -- \"\$opt\"
while true; do
case \"\$1\" in
-f) files=\"placeholder\"; shift;;
-l) lib=true; first=false; shift;;
-e) effect=true; first=false; shift;;
-o) outsp=true; conf=output_session_processing; xml=postprocess; first=false; shift;;
-q) outsp=true; conf=pre_processing; xml=preprocess; first=false; shift;;
-p) proxy=true; effect=false; outsp=false; first=false; shift;;
-r) replace=true; shift;;
--) shift; break;;
*) return 1;;
esac
done
[ -z \"\$files\" ] && files=\$(find $MODPATH/$MODID/system -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\") || { files=\"\$1\"; shift; }
\$first && { lib=true; effect=true; }
if \$proxy; then
effname=\$1; uid=\${2:?}; shift 2
libname_sw=\$1; uid_sw=\${2:?}; shift 2
\$lib && { libpathsw=\$1; shift; }
libname_hw=\$1; uid_hw=\${2:?}; shift 2
\$lib && { libpathhw=\${1:?}; shift; }
else
\$outsp && { type=\${1:?}; shift; }
{ \$effect || \$outsp; } && { effname=\${1:?}; shift; }
\$effect && { uid=\${1:?}; shift; }
{ \$lib || \$effect; } && { libname=\${1:?}; shift; }
\$lib && { libpath=\${1:?}; shift; }
fi
for file in \$files; do
case \"\$file\" in
*.conf)
if \$proxy; then
if \$replace && [ \"\$(sed -n \"/^effects {/,/^}/ {/^  \$effname {/,/^  }/p}\" \$file)\" ]; then
spaces=\$(sed -n \"/^effects {/,/^}/ {/^ *\$effname {/p}\" \$file | sed -r \"s/( *).*/\1/\")
sed -i \"/^effects {/,/^}/ {/^\$spaces\$effname {/,/^\$spaces}/d}\" \$file
fi
[ ! \"\$(sed -n \"/^effects {/,/^}/ {/^  \$effname {/,/^  }/p}\" \$file)\" ] && sed -i \"s/^effects {/effects {\\n  \$effname {\\n    library proxy\\n    uuid \$uid\\n\\n    libsw {\\n      library \$libname_sw\\n      uuid \$uid_sw\\n    }\\n\\n    libhw {\\n      library \$libname_hw\\n      uuid \$uid_hw\\n    }\\n  }/g\" \$file
if \$lib; then
PATCH_CFGS -fl \"\$file\" \"proxy\" \"\$libdir/lib/soundfx/libeffectproxy.so\"
if \$replace; then
PATCH_CFGS -frl \"\$file\" \"\$libname_sw\" \"\$libpathsw\"
PATCH_CFGS -frl \"\$file\" \"\$libname_hw\" \"\$libpathhw\"
else
PATCH_CFGS -fl \"\$file\" \"\$libname_sw\" \"\$libpathsw\"
PATCH_CFGS -fl \"\$file\" \"\$libname_hw\" \"\$libpathhw\"
fi
fi
else
if \$lib; then
if \$replace && [ \"\$(sed -n \"/^libraries {/,/^}/ {/^ *\$libname {/,/}/p}\" \$file)\" ]; then
spaces=\$(sed -n \"/^libraries {/,/^}/ {/^ *\$libname {/p}\" \$file | sed -r \"s/( *).*/\1/\")
sed -i \"/^libraries {/,/^}/ {/^\$spaces\$libname {/,/^\$spaces}/d}\" \$file
fi
[ ! \"\$(sed -n \"/^libraries {/,/^}/ {/^ *\$libname {/,/}/p}\" \$file)\" ] && sed -i \"s|^libraries {|libraries {\\n  \$libname {\\n    path \$libpath\\n  }|\" \$file
fi
if \$effect; then
if \$replace && [ \"\$(sed -n \"/^effects {/,/^}/ {/^ *\$effname {/,/}/p}\" \$file)\" ]; then
spaces=\$(sed -n \"/^effects {/,/^}/ {/^ *\$effname {/p}\" \$file | sed -r \"s/( *).*/\1/\")
sed -i \"/^effects {/,/^}/ {/^\$spaces\$effname {/,/^\$spaces}/d}\" \$file
fi
[ ! \"\$(sed -n \"/^effects {/,/^}/ {/^ *\$effname {/,/}/p}\" \$file)\" ] && sed -i \"s|^effects {|effects {\\n  \$effname {\\n    library \$libname\\n    uuid \$uid\\n  }|\" \$file
fi
if \$outsp && [ \"$ASDK\" -ge 26 ]; then
local OIFS=\$IFS; local IFS=','
for i in \$type; do
if [ ! \"\$(sed -n \"/^\$conf {/,/^}/p\" \$file)\" ]; then
echo -e \"\\n\$conf {\\n    \$i {\\n        \$effname {\\n        }\\n    }\\n}\" >> \$file
elif [ ! \"\$(sed -n \"/^\$conf {/,/^}/ {/\$i {/,/^    }/p}\" \$file)\" ]; then
sed -i \"/^\$conf {/,/^}/ s/\$conf {/\$conf {\\n    \$i {\\n        \$effname {\\n        }\\n    }/\" \$file
elif [ ! \"\$(sed -n \"/^\$conf {/,/^}/ {/\$i {/,/^    }/ {/\$effname {/,/}/p}}\" \$file)\" ]; then
sed -i \"/^\$conf {/,/^}/ {/\$i {/,/^    }/ s/\$i {/\$i {\\n        \$effname {\\n        }/}\" \$file
fi
done
local IFS=\$OIFS
fi
fi;;
*.xml)
if \$proxy; then
if \$replace && [ \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\"\$effname\".*>/,/^ *<\/effectProxy>/p}\" \$file)\" -o \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*\/>/p}\" \$file)\" ]; then
sed -i \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\\\"\$effname\\\".*>/,/^ *<\/effectProxy>/d}\" \$file
sed -i \"/<effects>/,/<\/effects>/ {/^ *<effect name=\\\"\$effname\\\".*\/>/d}\" \$file
fi
[ ! \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\"\$effname\".*>/,/^ *<\/effectProxy>/p}\" \$file)\" -a ! \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*>/,/^ *\/>/p}\" \$file)\" ] && sed -i -e \"/<effects>/ a\        <effectProxy name=\\\"\$effname\\\" library=\\\"proxy\\\" uuid=\\\"\$uid\\\">\\n            <libsw library=\\\"\$libname_sw\\\" uuid=\\\"\$uid_sw\\\"\/>\\n            <libhw library=\\\"\$libname_hw\\\" uuid=\\\"\$uid_hw\\\"\/>\\n        <\/effectProxy>\" \$file
if \$lib; then
PATCH_CFGS -fl \"\$file\" \"proxy\" \"\$libdir/lib/soundfx/libeffectproxy.so\"
if \$replace; then
PATCH_CFGS -frl \"\$file\" \"\$libname_sw\" \"\$libpathsw\"
PATCH_CFGS -frl \"\$file\" \"\$libname_hw\" \"\$libpathhw\"
else
PATCH_CFGS -fl \"\$file\" \"\$libname_sw\" \"\$libpathsw\"
PATCH_CFGS -fl \"\$file\" \"\$libname_hw\" \"\$libpathhw\"
fi
fi
else
if \$lib; then
if \$replace && [ \"\$(sed -n \"/<libraries>/,/<\/libraries>/ {/^ *<library name=\"\$libname\" path=\"\$(basename \$libpath)\"\/>/p}\" \$file)\" ]; then
sed -i \"/<libraries>/,/<\/libraries>/ {/^ *<library name=\\\"\$libname\\\" path=\\\"\$(basename \$libpath)\\\"\/>/d}\" \$file
fi
[ ! \"\$(sed -n \"/<libraries>/,/<\/libraries>/ {/^ *<library name=\"\$libname\" path=\"\$(basename \$libpath)\"\/>/p}\" \$file)\" ] && sed -i \"/<libraries>/ a\        <library name=\\\"\$libname\\\" path=\\\"\$(basename \$libpath)\\\"\/>\" \$file
fi
if \$effect; then
if \$replace && [ \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*\/>/p}\" \$file)\" -o \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\"\$effname\".*>/,/^ *<\/effectProxy>/p}\" \$file)\" ]; then
sed -i \"/<effects>/,/<\/effects>/ {/^ *<effect name=\\\"\$effname\\\".*\/>/d}\" \$file
sed -i \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\\\"\$effname\\\".*>/,/^ *<\/effectProxy>/d}\" \$file
fi
[ ! \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*\/>/p}\" \$file)\" ] && sed -i \"/<effects>/ a\        <effect name=\\\"\$effname\\\" library=\\\"\$(basename \$libname)\\\" uuid=\\\"\$uid\\\"\/>\" \$file
fi
if \$outsp && [ \"$ASDK\" -ge 26 ]; then
local OIFS=\$IFS; local IFS=','
for i in \$type; do
if [ ! \"\$(sed -n \"/^ *<\$xml>/,/^ *<\/\$xml>/p\" \$file)\" ]; then
sed -i \"/<\/audio_effects_conf>/i\    <\$xml>\\n       <stream type=\\\"\$type\\\">\\n            <apply effect=\\\"\$effname\\\"\/>\\n        <\/stream>\\n    <\/\$xml>\" \$file
elif [ ! \"\$(sed -n \"/^ *<\$xml>/,/^ *<\/\$xml>/ {/<stream type=\\\"\$type\\\">/,/<\/stream>/p}\" \$file)\" ]; then
sed -i \"/^ *<\$xml>/,/^ *<\/\$xml>/ s/    <\$xml>/    <\$xml>\\n        <stream type=\\\"\$type\\\">\\n            <apply effect=\\\"\$effname\\\"\/>\\n        <\/stream>/\" \$file
elif [ ! \"\$(sed -n \"/^ *<\$xml>/,/^ *<\/\$xml>/ {/<stream type=\\\"\$type\\\">/,/<\/stream>/ {/^ *<apply effect=\"\$effname\"\/>/p}}\" \$file)\" ]; then
sed -i \"/^ *<\$xml>/,/^ *<\/\$xml>/ {/<stream type=\\\"\$type\\\">/,/<\/stream>/ s/<stream type=\\\"\$type\\\">/<stream type=\\\"\$type\\\">\\n            <apply effect=\\\"\$effname\\\"\/>/}\" \$file
fi
done
local IFS=\$OIFS
fi
fi;;
esac
done
return 0
}

LEGACY_SCRIPT () {
local RUNONCE=false COUNT=1 LIBDIR=\$libdir/lib/soundfx MOD=\$mod
(. \$mod/.aml.sh) || echo \"Error in \$modname aml.sh script\" >> $MODPATH/$MODID/Errors.txt
for file in \$files; do
local NAME=\$(echo \"\$file\" | sed \"s|\$mod|system|\")
\$RUNONCE || { case \$file in
*audio_effects*) (. \$mod/.aml.sh) || [ \"\$(grep -x \"\$modname\" $MODPATH/$MODID/Errors.txt)\" ] || echo \"Error in \$modname aml.sh script\" >> $MODPATH/$MODID/Errors.txt; COUNT=\$((\$COUNT + 1));;
esac; }
done
}

HEXUUID_CHECKER () {
UUID=\"\$1\"
HEXUUID=\"\$(echo \$UUID | sed -r -e \"s/^(..)(..)(..)(..)-(..)(..)-(..)(..)-/\4\3\2\1\6\5\8\7-/\" -e \"s/-(..)(..)-(............)\$/\2\1\3/\")\"
xxd -p \$lib | tr -d '\\n' | grep -q \"\$HEXUUID\" || continue
\$(grep -xq \"\$modname\" $NVBASE/$MODID/modlist || echo \"\$modname\" >> $NVBASE/$MODID/modlist)
}

(

for mod in \$(find $MODPATH/* -maxdepth 0 -type d ! -name $MODID); do
modname=\"\$(basename \$mod)\"
[ -f \"\$mod/disable\" ] && continue
[ -f \"\$mod/aml.sh\" ] && cp -f \$mod/aml.sh \$mod/.aml.sh
if [ -f \"\$mod/.aml.sh\" ]; then
grep -qx \"\$modname\" $NVBASE/$MODID/modlist || echo \"\$modname\" >> $NVBASE/$MODID/modlist
if grep -qE '$MODPATH/$MODID/\\$NAME|RUNONCE=|COUNT=' \$mod/.aml.sh; then
LEGACY_SCRIPT
else
(. \$mod/.aml.sh) || echo \"Error in \$modname aml.sh script\" >> $MODPATH/$MODID/Errors.txt
fi
else
libs=\"\$(find \$mod$MIPSLS \$mod$MIPSVLS -type f -name \"libam3daudioenhancement.so\" -o -name \"libarkamys.so\" -o -name \"libatmos.so\" -o -name \"libbassboostMz.so\" -o -name \"libdirac.so\" -o -name \"libdirac.so\" -o -name \"libdseffect.so\" -o -name \"libdtsaudio.so\" -o -name \"libhwdap.so\" -o -name \"libhwdax.so\" -o -name \"libicepower.so\" -o -name \"libjamesdsp.so\" -o -name \"libmaxxeffect-cembedded.so\" -o -name \"libsonysweffect.so\" -o -name \"libswdap.so\" -o -name \"libswdap_ds1se.so\" -o -name \"libswdax.so\" -o -name \"libswvlldp.so\" -o -name \"libv4a_fx.so\" -o -name \"libv4a_fx_ics.so\" -o -name \"libv4a_xhifi_ics.so\" -o -name \"libdiraceffect.so\")\"
for lib in \$libs; do
libfile=\"\$(echo \$lib | sed -e \"s|\$mod||\" -e \"s|$MIPSV|/vendor|\")\"
case \$(basename \$lib) in
libam3daudioenhancement.so) HEXUUID_CHECKER 6723dd80-f0b7-11e0-98a2-0002a5d5c51b
PATCH_CFGS am3daudioenhancement \$UUID am3daudioenhancement \$libfile;;
libv4a_fx.so) HEXUUID_CHECKER 41d3c987-e6cf-11e3-a88a-11aba5d5c51b
PATCH_CFGS v4a_standard_fx \$UUID v4a_fx \$libfile;;
libv4a_fx_ics.so) HEXUUID_CHECKER 41d3c987-e6cf-11e3-a88a-11aba5d5c51b
PATCH_CFGS v4a_standard_fx \$UUID v4a_fx \$libfile;;
libv4a_xhifi_ics.so) HEXUUID_CHECKER d92c3a90-3e26-11e2-a25f-0800200c9a66
PATCH_CFGS v4a_standard_xhifi \$UUID v4a_xhifi \$libfile;;
libhwdax.so) HEXUUID_CHECKER 9d4921da-8225-4f29-aefa-6e6f69726861
PATCH_CFGS -pl dax \$UUID dax_sw 6ab06da4-c516-4611-8166-6168726e6f69 \$(dirname \$libfile)/libswdax.so dax_hw a0c30891-8246-4aef-b8ad-696f6e726861 \$libfile;;
libswdax.so) HEXUUID_CHECKER 9d4921da-8225-4f29-aefa-6e6f69726861
PATCH_CFGS dax \$UUID dax \$libfile;;
libswdap.so) HEXUUID_CHECKER 9d4921da-8225-4f29-aefa-39537a04bcaa
PATCH_CFGS dap \$UUID dap \$libfile;;
libhwdap.so) HEXUUID_CHECKER a0c30891-8246-4aef-b8ad-d53e26da0253
PATCH_CFGS -pl dap 9d4921da-8225-4f29-aefa-6e6f69726861 dap_sw 6ab06da4-c516-4611-8166-452799218539 \$(dirname \$libfile)/libswdap.so dap_hw \$UUID \$libfile;;
libdseffect.so) HEXUUID_CHECKER 9d4921da-8225-4f29-aefa-39537a04bcaa
PATCH_CFGS dsplus \$UUID ds \$libfile;;
libswvlldp.so) HEXUUID_CHECKER 3783c334-d3a0-4d13-874f-0032e5fb80e2
PATCH_CFGS vlldp \$UUID vlldp \$libfile
PATCH_CFGS -ole music atmos 9d4921da-8225-4f29-aefa-aacb40a73593 atmos \$(dirname \$libfile)/libatmos.so;;
libicepower.so) HEXUUID_CHECKER f1c02420-777f-11e3-981f-0800200c9a66
PATCH_CFGS -l icepower \$libfile
PATCH_CFGS -e icepower_algo \$UUID icepower
PATCH_CFGS -e icepower_eq 50dbef80-4ad4-11e3-8f96-0800200c9a66 icepower
PATCH_CFGS -e icepower_test e5456320-5391-11e3-8f96-0800200c9a66 icepower
PATCH_CFGS -e icepower_load bf51a790-512b-11e3-8f96-0800200c9a66 icepower
PATCH_CFGS -e icepower_null 63509430-52aa-11e3-8f96-0800200c9a66 icepower;;
libarkamys.so) HEXUUID_CHECKER 17852d50-161e-11e2-892e-0800200c9a66
PATCH_CFGS -ole music Arkamysfx \$UUID arkamys \$libfile;;
libdirac.so) HEXUUID_CHECKER 4c6383e0-ff7d-11e0-b6d8-0002a5d5c51b
PATCH_CFGS dirac \$UUID dirac \$libfile
PATCH_CFGS -e dirac_controller b437f4de-da28-449b-9673-667f8b9643fe dirac
PATCH_CFGS -e dirac_music b437f4de-da28-449b-9673-667f8b964304 dirac;;
libdirac.so) HEXUUID_CHECKER e069d9e0-8329-11df-9168-0002a5d5c51b
PATCH_CFGS -ole music dirac \$UUID dirac \$libfile;;
libjamesdsp.so) HEXUUID_CHECKER f27317f4-c984-4de6-9a90-545759495bf2
PATCH_CFGS jamesdsp \$UUID jdsp \$libfile;;
libmaxxeffect-cembedded.so) HEXUUID_CHECKER ae12da60-99ac-11df-b456-0002a5d5c51b
PATCH_CFGS -ole music maxxaudio3 \$UUID maxxaudio3 \$libfile;;
libbassboostMz.so) HEXUUID_CHECKER 850b6319-bf66-4f93-bec0-dc6964367786
PATCH_CFGS bassboostMz \$UUID bassboostMz \$libfile
PATCH_CFGS virtualizerMz 0e9779c9-4e8f-494d-b2b1-b4ad4e37c54c virtualizerMz \$(dirname \$libfile)/libvirtualizerMz.so
PATCH_CFGS livemusicMz 0bbc89fe-52dc-4c40-8211-cae4da538b50 livemusicMz \$(dirname \$libfile)/liblivemusicMz.so
PATCH_CFGS equalizerMz 9626da93-9c71-4bb2-8e23-9fc707fb9703 equalizerMz \$(dirname \$libfile)/ibequalizerMz.so;;
libsonysweffect.so) HEXUUID_CHECKER 50786e95-da76-4557-976b-7981bdf6feb9
PATCH_CFGS -qle mic,camcorder ZNR b8a031e0-6bbf-11e5-b9ef-0002a5d5c51b znrwrapper \$(dirname \$libfile)/libznrwrapper.so
PATCH_CFGS -pl sonyeffect af8da7e0-2ca1-11e3-b71d-0002a5d5c51b sonyeffect_sw \$UUID \$libfile sonyeffect_hw f9ed8ae0-1b9c-11e4-8900-0002a5d5c51b \$(dirname \$libfile)/libsonypostprocbundle.so;;
libatmos.so) HEXUUID_CHECKER 74697567-7261-6564-6864-65726f206678
PATCH_CFGS dolbyatmos \$UUID dolbyatmos \$libfile
OSP_DETECT \"alarm notification ring\";;
libswdap_ds1se.so) HEXUUID_CHECKER 74697567-7261-6564-6864-65726f206678
PATCH_CFGS dolbyatmos \$UUID dolbyatmos \$libfile
OSP_DETECT \"alarm notification ring\";;
libdtsaudio.so) HEXUUID_CHECKER 146edfc0-7ed2-11e4-80eb-0002a5d5c51b
PATCH_CFGS -ole music dtsaudio \$UUID dtsaudio \$libfile;;
libdiraceffect.so) HEXUUID_CHECKER 3799d6d1-22c5-43c3-b3ec-d664cf8d2f0d
PATCH_CFGS dirac_gef \$UUID dirac_gef \$libfile;;
esac
done
fi
done
for i in \$(find $MODPATH/$MODID/system -type f); do
j=\"\$(echo \$i | sed \"s|$MODPATH/$MODID||\")\"
umount \$j
mount -o bind \$i \$j
done
[ $ASDK -ge 24 ] && killall audioserver 2>/dev/null || killall mediaserver 2>/dev/null
exit 0
)&" > $MODPATH/$MODID/service.sh
sed -i "3aif [ -f \"$MODPATH/$MODID/disable\" ]; then :; elif [ -d \"$MODPATH/$MODID\" ]; then exit 0; fi" $POSTFSDATAD/$MODID.sh
chmod 0777 $POSTFSDATAD/$MODID.sh
SET_PERM_RM -msgdi
}

IPALCF () {
if $MAGISK; then
UCSA "Install Audio Library Crackling Fix $VIPALCF?" "IPALCFS" "$IDALCF"
fi
}

IPALCFS () {
UIP "Installing Audio Library Crackling Fix $IAMM"
PTMFI -nmp "$IDALCF"
MMPR -v "Audio Library Crackling Fix" "$VIPALCF" "Audio Library Crackling Fix For Audio Modules, Stock Equalizers Or Libraries With Problems And Crackling System Sound/Notifications"
REPLACER -a "libaudiopreprocessing.so libasphere.so libdownmix.so libldnhncr.so libqcomvoiceprocessing.so libshoebox.so libvolumelistener.so" "$IPVLS $IPVLS64"
MOVERPATH
echo "[ -d \"/sbin/.magisk\" ] && MAGISKMP=\"/sbin/.magisk/mirror\" || MAGISKMP=\$(find \`magisk --path\` -type d -name \"mirror\" | head -n 1)
AECONFXML=\"\$(find /vendor -type f -name \"*audio_effects*.xml\")\"
PAECONFXML=false
for ALLMOD in \$(ls $MODPATH); do
ALLMODAECONFXML=\"\$(find $MODPATH/\$ALLMOD -type f -name \"*audio_effects*.xml\")\"
if [ ! -f $MODPATH/\$ALLMOD/disable ]; then
for FAECONFXML in \$ALLMODAECONFXML; do
if [ -f \$FAECONFXML ] && [ ! -f \$FAECONFXML.bak ]; then
PAECONFXML=true
cp -f \$FAECONFXML \$FAECONFXML.bak
sed -i \"/audio_pre_processing/d;/audiosphere/d;/downmix/d;/loudness_enhancer/d;/shoebox/d;/volume_listener/d\" \$FAECONFXML
elif [ -f \$FAECONFXML ] && [ -f \$FAECONFXML.bak ]; then
PAECONFXML=true
sed -i \"/audio_pre_processing/d;/audiosphere/d;/downmix/d;/loudness_enhancer/d;/shoebox/d;/volume_listener/d\" \$FAECONFXML
fi
done
fi
rm -rf $MODPATH/$MODID$MIPSVE
done
if [ \$PAECONFXML != true ]; then
for FAECONFXML in \$AECONFXML; do
PSF=\"$MODPATH/$MODID\$FAECONFXML\"
mkdir -p \`dirname \$PSF\`
cp -f \$MAGISKMP\$FAECONFXML \$PSF
sed -i \"/audio_pre_processing/d;/audiosphere/d;/downmix/d;/loudness_enhancer/d;/shoebox/d;/volume_listener/d\" \$PSF
mkdir -p $MODPATH/$MODID/system/vendor; cp -rf $MODPATH/$MODID/vendor/* $MODPATH/$MODID/system/vendor; rm -rf $MODPATH/$MODID/vendor
done
fi" > $MODPATH/$MODID/post-fs-data.sh
echo "#!$MIPSB/sh
if [ ! -d $MODPATH/$MODID ] || [ -f $MODPATH/$MODID/disable ] || [ -f $MODPATH/$MODID/remove ]; then
AECONFXML=\"\$(find $MODPATH -type f -name \"*audio_effects*.xml\")\"
for FAECONFXML in \$AECONFXML; do
if [ -f \$FAECONFXML.bak ]; then
cp -f \$FAECONFXML.bak \$FAECONFXML
rm -f \$FAECONFXML.bak
fi
done
fi
if [ ! -d $MODPATH/$MODID ] || [ -f $MODPATH/$MODID/remove ]; then rm -f $POSTFSDATAD/$MODID.sh; fi" > $POSTFSDATAD/$MODID.sh
chmod 0777 $POSTFSDATAD/$MODID.sh
SET_PERM_RM -msgdi
}

} #

{ #Removal: RSL/RSO/RSTA/RWFSB

RPASSF () {
if [ $BOOTMODE != true ] && [ -d $IPDS ] && [ ! -f $IPDS/storage.xml ]; then
UCSA "Reset Screen Lock?" "RPASSFS"
fi
}

RPASSFS () {
UIP "Remove Password Files"
rm -f $IPDS/gatekeeper*.key $IPDS/locksettings* $IPDS/password.key $IPDS/gesture.key
UIP "$MSGDRM"
}

RSWIFTO () {
if [ $BOOTMODE != true ] && [ -d $MODPATH/swift_installer ]; then
UCSA "Remove All Swift Installer Overlays?" "RSWIFTOS"
fi
}

RSWIFTOS () {
MODID="swift_installer"
UIP "Swift Installer Overlays Remover"
[ -d "$STORAGE/.swift" ] && UIP "Removing Temporary Overlays Folder"; rm -rf $STORAGE/.swift
UIP "Removing Overlays From $IPSA"
for overlay in $(ls $IPSA | grep .swiftinstaller.overlay); do
rm -rf $IPSA/$overlay
done
UIP "Removing Overlays From $MODPATH/$MODID$MIPSA"
for overlay in $(ls $MODPATH/$MODID$MIPSA | grep .swiftinstaller.overlay); do
rm -rf $MODPATH/$MODID$MIPSA/$overlay
done
UIP "Clear Cache In $IPDRESC"
rm -rf $IPDRESC/*swiftinstaller.overlay*
UIP "Removing Overlays Saved State"
rm -rf $IPDS/overlays.xml
UIP "$MSGDRM"
}

GTRRRM () {
UCSA -ent "Go To Remove/Replace/Restore Mode?" "GTRRRMS" "RTSA"
}

GTRRRMS () {
DWSGTRRRM=false; RWSGTRRRM=false; RMTSAV=false; CAILIST=false
if [ -f $AIOPFMDPH/Replace.txt ] && [ $BOOTMODE != true ]; then
UIP -s "Found Replace APK, Restote?" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
REPLACELIST=$(cat $AIOPFMDPH/Replace.txt)
UIP -s "Choose Variant:" "$MSGVU Restore Every App With Confirm $MSGRI" "$MSGVD Restore Every App Without Confirm"
if KEYCHOOSE; then
RWSGTRRRM=true
fi
for FINDTRASH in $REPLACELIST; do
for NAMEPATHDELLTRASH in "$IPSA" "$IPSPA" "$IPSSPA" "$IPSSPPA" "$IPSSEA" "$IPSSEPA"; do
if [ -d $NAMEPATHDELLTRASH/$FINDTRASH ]; then
if $RWSGTRRRM; then
UCSA -s "Found ($FINDTRASH)" "Restore?" "Next $MSGNUS" "GTRRRMSAAA"
else
UIP "Found ($FINDTRASH)"
GTRRRMSAAA
fi
fi
done
done
fi
fi
if $BOOTMODE; then
RMTSAV=true
else
UIP -s "Choose Variant:" "$MSGVU Replace All Find Apps" "$MSGVD Remove All Find Apps"
if KEYCHOOSE; then
RMTSAV=true
fi
fi
if $RMTSAV; then
UIP -s "Choose Variant For Stock List & APPRMLIST.conf:" "$MSGVU Replace Every App Found With Confirm $MSGRI" "$MSGVD Replace Every App Found Without Confirm"
else
UIP -s "Choose Variant For Stock List & APPRMLIST.conf:" "$MSGVU Remove Every App Found With Confirm $MSGRI" "$MSGVD Remove Every App Found Without Confirm"
fi
if KEYCHOOSE; then
RMLISTCHOICECONFIRMATION=true
else
RMLISTCHOICECONFIRMATION=false
DWSGTRRRM=true
fi
if [ -f $STORAGE/APPRMLIST* ]; then APPRMLISTFILE="$(find $STORAGE/APPRMLIST*)"; FINDAPPRMLIST=true; else for f in $(ls $STORAGE); do if [ -f $STORAGE/$f/APPRMLIST* ]; then APPRMLISTFILE="$(find $STORAGE/$f/APPRMLIST*)"; FINDAPPRMLIST=true; break; else FINDAPPRMLIST=false; fi; done; fi
if $FINDAPPRMLIST; then
UIP -s "Choose Variant:" "$MSGVU Use APPRMLIST.conf & Patch List" "$MSGVD Use Only APPRMLIST.conf"
if KEYCHOOSE; then
RMLISTCHOICEVARIANT=true
else
RMLISTCHOICEVARIANT=false
fi
RMLIST=$(cat $APPRMLISTFILE)
REMOVETRASHNAME="$RMLIST"
UIP "Search App, Please Wait..."
GTRRRMSA
UIP "Other App Not Found"
sleep 3
DWSGTRRRM=false
fi
if $RMLISTCHOICEVARIANT; then
if [ -f $AIOPFMDPH/AIL.txt ]; then
UIP -s "Found $AIOPFMDPH/AIL.txt" "$MSGVU Use AIL.txt List" "$MSGVD No, Next List $MSGNUS"
if KEYCHOOSE; then
CAILIST=true
AILIST=$(cat $AIOPFMDPH/AIL.txt)
REMOVETRASHNAME="$AILIST"
UIP "Search App, Please Wait..."
GTRRRMSA
UIP "Other App Not Found"
sleep 3
fi
fi
UIP -s "Choose Variant:" "$MSGVU Use Stock List" "$MSGVD No, Next List $MSGNUS"
if KEYCHOOSE; then
UIP "Search App, Please Wait..."
if [ $MIUI != true ] || $RMLISTCHOICECONFIRMATION; then
REMOVETRASHNAME="$STOCKLISTNOMIUI"
GTRRRMSA
fi
REMOVETRASHNAME="$STOCKLIST"
GTRRRMSA
UIP "Other App Not Found"
sleep 3
fi
UIP -s "Choose Variant:" "$MSGVU Use Experimental List" "$MSGVD No, Next List $MSGNUS"
if KEYCHOOSE; then
RMLISTCHOICECONFIRMATION=true
REMOVETRASHNAME="$EXPERIMENTALLIST"
UIP "Search App, Please Wait..."
GTRRRMSA
UIP "Other App Not Found"
sleep 3
fi
if [ $MIUI != true ]; then
UIP -s "Choose Variant:" "$MSGVU Use Launchers List" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
RMLISTCHOICECONFIRMATION=true
REMOVETRASHNAME="$LAUNCHERLIST"
UIP "Search App, Please Wait..."
GTRRRMSA
UIP "Other App Not Found"
sleep 3
fi
fi
fi
}

GTRRRMSA () {
for FINDTRASH in $REMOVETRASHNAME; do
for NAMEPATHDELLTRASH in "$IPSA" "$IPSPA" "$IPSSPA" "$IPSSPPA" "$IPSSEA" "$IPSSEPA" "$IPVA" "$IPVPA"; do
if [ -d $NAMEPATHDELLTRASH/$FINDTRASH ] && [ ! -f $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.replace ] && [ ! -f $NAMEPATHDELLTRASH/$FINDTRASH/.replace ]; then
if $DWSGTRRRM; then
UIP "Found ($FINDTRASH)"
GTRRRMSAA
else
if $RMTSAV; then
UCSA -s "Found ($FINDTRASH)" "Replace" "Next Search $MSGNUS" "GTRRRMSAA"
else
UCSA -s "Found ($FINDTRASH)" "Remove" "Next Search $MSGNUS" "GTRRRMSAA"
fi
fi
break
UIP "Other Search App, Please Wait..."
fi
done
done
}

GTRRRMSAA () {
if $RMTSAV; then
if $MAGISK; then
MODID="RTSA"; REPLACER "$NAMEPATHDELLTRASH/$FINDTRASH"; MOVERPATH
touch $MODPATH/$MODID/update
MMPR -v "Replace Trash System App" "$VAIOPFMD" "Replace Trash System App"
UIP "$MSGDRP"
else
mv $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.apk $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.replace
echo "$FINDTRASH" >> $AIOPFMDPH/Replace.txt
UIP "$MSGDRP"
fi
else
rm -rf $NAMEPATHDELLTRASH/$FINDTRASH; UIP "$MSGDRM"
if $CAILIST; then sed -i "/$FINDTRASH/d" $AIOPFMDPH/AIL.txt; if [ ! -s $AIOPFMDPH/AIL.txt ]; then rm -f $AIOPFMDPH/AIL.txt; fi; fi
fi
}

GTRRRMSAAA () {
sed -i "/$FINDTRASH/d" $AIOPFMDPH/Replace.txt
mv $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.replace $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.apk
if [ ! -s $AIOPFMDPH/Replace.txt ]; then rm -f $AIOPFMDPH/Replace.txt; fi
UIP "$MSGDRS"
}

GTRMFL () {
if [ $BOOTMODE != true ] && [ -f $STORAGE/FILERMLIST.sh ]; then
UCSA "Found FILERMLIST.sh Remove All Files?" "GTRMFLS"
fi
}

GTRMFLS () {
FILERMLIST=$(cat $STORAGE/FILERMLIST.sh)
for f in $FILERMLIST; do
if [ -e $SYSTEM/$f ]; then
UIP "Found $SYSTEM/$f"
rm -rf $SYSTEM/$f
elif [ -e $VENDOR/$f ]; then
UIP "Found $VENDOR/$f"
rm -rf $VENDOR/$f
fi
done
}

RWFS () {
if [ $BOOTMODE != true ]; then
if [ -f $IPDSU/wallpaper ] || [ -f $IPDSU/wallpaper_orig ]; then
UCSA "Remove Wallpaper (Fix Softloop)?" "RWFSS"
fi
fi
}

RWFSS () {
UIP "Remove Wallpaper"
rm -f $IPDSU/wallpaper*
UIP "$MSGDRM"
}

RRTPXML () {
if [ $BOOTMODE != true ] && [ -f $IPDMDE/0/apexdata/com.android.permission/runtime-permissions.xml ]; then
UCSA "Remove runtime-permissions.xml (If UI Softloop)?" "RRTPXMLS"
fi
}

RRTPXMLS () {
UIP "Removing runtime-permissions.xml"
rm -f $IPDMDE/0/apexdata/com.android.permission/runtime-permissions.xml
UIP "$MSGDRM"
}

RAPEXA () {
if [ $BOOTMODE != true ] && [ -d /data/apex/active ]; then
UCSA "Remove Apex Active (If Logoloop)?" "RAPEXAS"
fi
}

RAPEXAS () {
UIP "Removing Apex Active"
rm -rf /data/apex/active
UIP "$MSGDRM"
}

} #

{ #Test/Coming Soon

ROUNDEDUIC () {
UCSA "Rounded UI Compile" "ROUNDEDUICS"
}

ROUNDEDUICS () {
UIP -s "Choose Variant:" "$MSGVU 0dip 5dip 10dip 15dip 20dip 25dip 30dip 33dip" "$MSGVD 30dip 33dip"
if KEYCHOOSE; then ROUNDEDUICSL="0dip 5dip 10dip 15dip 20dip 25dip 30dip 33dip"; else ROUNDEDUICSL="30dip 33dip"; fi

for ROUNDEDSIZE in $ROUNDEDUICSL; do
ORSLL3="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLLaucher3"
ORSLLQ="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLLawnchairQ"
ORSLLR="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLLawnchairR"
ORSLOP="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLOneplus"
ORSLOUI="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLOneui"
ORSLP="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLPixel"
ORSLPD="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLPixelated"
ORSLM="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLMoto"
ORSLA="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLAsus"
ORSLNEO="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLNEO"
ORSLNEOA="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLNEOA"
ORSLNEOD="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLNEOD"
ORUIONE="$STORAGE/AIOCOMPILE/RoundedUI/RoundedUIAndroid"
ORUITWO="$STORAGE/AIOCOMPILE/RoundedUI/RoundedUISUI"
mkdir -p $ORSLL3/res/values $ORSLLQ/res/values $ORSLLR/res/values $ORSLOP/res/values $ORSLOUI/res/values $ORSLP/res/values $ORSLPD/res/values $ORSLM/res/values $ORSLA/res/values $ORSLNEO/res/values $ORSLNEOA/res/values $ORSLNEOD/res/values $ORUIONE/res/values $ORUITWO/res/values $ORUITWO/res/drawable

ROUNDEDUISTRING="	<dimen name=\"abc_control_corner_material\">$ROUNDEDSIZE</dimen>
	<dimen name=\"abc_dialog_corner_radius_material\">$ROUNDEDSIZE</dimen>
	<dimen name=\"borderless_button_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"cardview_default_elevation\">$ROUNDEDSIZE</dimen>
	<dimen name=\"cardview_default_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"chooser_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"compat_control_corner_material\">$ROUNDEDSIZE</dimen>
	<dimen name=\"config_bottomDialogCornerRadius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"config_buttonCornerRadius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"config_dialogCornerRadius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"control_corner_material\">$ROUNDEDSIZE</dimen>
	<dimen name=\"control_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"corner_size\">$ROUNDEDSIZE</dimen>
	<dimen name=\"default_dialog_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"default_magnifier_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"dialog_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"fingerprint_dialog_corner_size\">$ROUNDEDSIZE</dimen>
	<dimen name=\"global_actions_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"halo_inner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"lb_action_button_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"lb_rounded_rect_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"logout_button_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"mtrl_badge_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"mtrl_btn_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"mtrl_card_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"notification_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"notification_custom_view_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"notification_group_overflow_bg_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"notification_item_bg_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"notification_scrim_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"notification_shadow_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"ongoing_appops_chip_bg_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"panel_content_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"pip_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"progress_bar_corner_material\">$ROUNDEDSIZE</dimen>
	<dimen name=\"qs_control_brightness_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"qs_control_corner_general_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"qs_control_customizer_others_bg_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"qs_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"qs_footer_action_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"recents_onboarding_toast_arrow_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"rect_button_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"rounded_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"rounded_corner_radius_bottom\">$ROUNDEDSIZE</dimen>
	<dimen name=\"rounded_corner_radius_top\">$ROUNDEDSIZE</dimen>
	<dimen name=\"rounded_slider_background_rounded_corner\">$ROUNDEDSIZE</dimen>
	<dimen name=\"rounded_slider_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"screenshot_action_container_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"screenshot_button_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"searchbar_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"seek_bar_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"subtitle_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"subtitle_shadow_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"task_card_menu_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"tooltip_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"volume_dialog_slider_corner_radius\">$ROUNDEDSIZE</dimen>"

ROUNDEDLSTRING="	<dimen name=\"all_apps_scrim_view_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"arrow_toast_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"bg_round_rect_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"bg_searchbox_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"clear_all_button_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"grid_visualization_rounding_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"oneplus_contorl_layout_margin_bottom1\">$ROUNDEDSIZE</dimen>
	<dimen name=\"oneplus_contorl_radius_r0\">$ROUNDEDSIZE</dimen>
	<dimen name=\"oneplus_contorl_radius_r12\">$ROUNDEDSIZE</dimen>
	<dimen name=\"oneplus_contorl_radius_r16\">$ROUNDEDSIZE</dimen>
	<dimen name=\"oneplus_contorl_radius_r2\">$ROUNDEDSIZE</dimen>
	<dimen name=\"oneplus_contorl_radius_r32\">$ROUNDEDSIZE</dimen>
	<dimen name=\"oneplus_contorl_radius_r4\">$ROUNDEDSIZE</dimen>
	<dimen name=\"oneplus_contorl_radius_r8\">$ROUNDEDSIZE</dimen>
	<dimen name=\"op_control_menu_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"op_control_radius_r0\">$ROUNDEDSIZE</dimen>
	<dimen name=\"op_control_radius_r12\">$ROUNDEDSIZE</dimen>
	<dimen name=\"op_control_radius_r16\">$ROUNDEDSIZE</dimen>
	<dimen name=\"op_control_radius_r2\">$ROUNDEDSIZE</dimen>
	<dimen name=\"op_control_radius_r32\">$ROUNDEDSIZE</dimen>
	<dimen name=\"op_control_radius_r4\">$ROUNDEDSIZE</dimen>
	<dimen name=\"op_control_radius_r8\">$ROUNDEDSIZE</dimen>
	<dimen name=\"popup_arrow_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"popup_container_with_arrow_round_rect_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"recents_grid_task_view_focused_frame_rounded_corners_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"recents_grid_task_view_rounded_corners_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"recents_task_view_shadow_rounded_corners_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"sesl_menu_popup_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"task_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"task_corner_radius_17819\">$ROUNDEDSIZE</dimen>
	<dimen name=\"task_corner_radius_oneui\">$ROUNDEDSIZE</dimen>
	<dimen name=\"task_corner_radius_small\">$ROUNDEDSIZE</dimen>
	<dimen name=\"tooltip_body_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"wallpaper_picker_list_item_rect_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"wallpaper_picker_preview_bg_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"widget_list_top_bottom_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"widget_preview_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_17819\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_18857\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_18865\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_19801\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_19801_fhd\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_19811\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_19811_fhd\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_19821\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_19855\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_19855_fhd\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_19863\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_8998\">$ROUNDEDSIZE</dimen>
	<dimen name=\"window_corner_radius_fhd\">$ROUNDEDSIZE</dimen>
	<dimen name=\"workspace_bg_round_rect_radius\">$ROUNDEDSIZE</dimen>"

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
$ROUNDEDUISTRING
$ROUNDEDLSTRING
</resources>" > $STORAGE/AIOCOMPILE/RoundedUI/dimens.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.roundedui\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Android Rounded - $ROUNDEDSIZE\"/>
</manifest>" > $ORUIONE/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
$ROUNDEDUISTRING
</resources>" | tee $ORUIONE/res/values/dimens.xml $ORUITWO/res/values/dimens.xml > /dev/null

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.roundedui\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"SUI Rounded - $ROUNDEDSIZE\"/>
</manifest>" > $ORUITWO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<bool name=\"config_pipEnableRoundCorner\">true</bool>
</resources>" > $ORUITWO/res/values/bools.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/colorPrimary\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"?android:attr/dialogCornerRadius\" android:bottomRightRadius=\"0dp\" android:topRightRadius=\"0dp\" />
</shape>" > $ORUITWO/res/drawable/rounded_bg.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/colorPrimaryDark\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"0dp\" android:bottomRightRadius=\"0dp\" android:topRightRadius=\"0dp\" />
</shape>" > $ORUITWO/res/drawable/rounded_bg_bottom.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/panelColorBackground\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"0dp\" android:bottomRightRadius=\"?android:attr/dialogCornerRadius\" android:topRightRadius=\"0dp\" />
</shape>" > $ORUITWO/res/drawable/rounded_bg_bottom_background.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/colorBackgroundFloating\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"?android:attr/dialogCornerRadius\" android:bottomRightRadius=\"?android:attr/dialogCornerRadius\" android:topRightRadius=\"?android:attr/dialogCornerRadius\" />
</shape>" > $ORUITWO/res/drawable/rounded_bg_full.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/colorPrimaryDark\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"0dp\" android:bottomRightRadius=\"?android:attr/dialogCornerRadius\" android:topRightRadius=\"0dp\" />
</shape>" > $ORUITWO/res/drawable/rounded_full_bg_bottom.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<ripple xmlns:android=\"http://schemas.android.com/apk/res/android\"
		android:color=\"?android:attr/colorControlHighlight\">
	<item android:id=\"@android:id/mask\">
		<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">
			<solid android:color=\"#FFFFFFFF\"/>
			<corners android:radius=\"?android:attr/dialogCornerRadius\"/>
		</shape>
	</item>
	<item android:id=\"@android:id/background\">
		<shape android:shape=\"rectangle\">
			<solid android:color=\"?android:attr/colorBackgroundFloating\"/>
			<corners android:radius=\"?android:attr/dialogCornerRadius\"/>
		</shape>
	</item>
</ripple>" > $ORUITWO/res/drawable/rounded_ripple.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<shape
  xmlns:android=\"http://schemas.android.com/apk/res/android\">
	<solid android:color=\"?android:colorPrimaryDark\" />
	<corners android:radius=\"$ROUNDEDSIZE\" />
</shape>" > $ORUITWO/res/drawable/brightness_mirror_background.xml

APKBUILDER "$ORUIONE" "$ORUIONE-$ROUNDEDSIZE.apk"
APKBUILDER "$ORUITWO" "$ORUITWO-$ROUNDEDSIZE.apk"

for LAUNCHERPNAME in "com.saggitt.omega" "com.saggitt.omega.neo" "com.saggitt.omega.debug" "com.pixelated.launcher" "com.motorola.launcher3" "com.android.launcher3" "ch.deletescape.lawnchair.ci" "app.lawnchair" "net.oneplus.launcher" "com.sec.android.app.launcher" "com.google.android.apps.nexuslauncher" "com.asus.launcher"; do
case $LAUNCHERPNAME in
"com.saggitt.omega") LAUNCHERPATH="$ORSLNEO"; LAUNCHERNAME="NEO Launcher";;
"com.saggitt.omega.neo") LAUNCHERPATH="$ORSLNEOA"; LAUNCHERNAME="NEO Launcher";;
"com.saggitt.omega.debug") LAUNCHERPATH="$ORSLNEOD"; LAUNCHERNAME="NEO Launcher Debug";;
"com.pixelated.launcher") LAUNCHERPATH="$ORSLPD"; LAUNCHERNAME="Pixelated Launcher";;
"com.motorola.launcher3") LAUNCHERPATH="$ORSLM"; LAUNCHERNAME="Mototola Launcher";;
"com.android.launcher3") LAUNCHERPATH="$ORSLL3"; LAUNCHERNAME="Launcher3";;
"ch.deletescape.lawnchair.ci") LAUNCHERPATH="$ORSLLQ"; LAUNCHERNAME="Lawnchair Q";;
"app.lawnchair") LAUNCHERPATH="$ORSLLR"; LAUNCHERNAME="Lawnchair R/S";;
"net.oneplus.launcher") LAUNCHERPATH="$ORSLOP"; LAUNCHERNAME="OnePlus Launcher";;
"com.sec.android.app.launcher") LAUNCHERPATH="$ORSLOUI"; LAUNCHERNAME="OneUI Launcher";;
"com.google.android.apps.nexuslauncher") LAUNCHERPATH="$ORSLP"; LAUNCHERNAME="Pixel Launcher";;
"com.asus.launcher") LAUNCHERPATH="$ORSLA"; LAUNCHERNAME="Asus Launcher";;
esac
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"$LAUNCHERPNAME.roundedui\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"$LAUNCHERPNAME\"/>
	<application android:hasCode=\"false\" android:label=\"$LAUNCHERNAME Rounded - $ROUNDEDSIZE\"/>
</manifest>" > $LAUNCHERPATH/AndroidManifest.xml

echo -e "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n$ROUNDEDUISTRING\n$ROUNDEDLSTRING\n</resources>" | tee $ORSLL3/res/values/dimens.xml $ORSLLQ/res/values/dimens.xml $ORSLLR/res/values/dimens.xml $ORSLOP/res/values/dimens.xml $ORSLOUI/res/values/dimens.xml $ORSLP/res/values/dimens.xml $ORSLPD/res/values/dimens.xml $ORSLM/res/values/dimens.xml $ORSLA/res/values/dimens.xml > /dev/null
done
APKBUILDER "$ORSLL3" "$ORSLL3-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLLQ" "$ORSLLQ-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLLR" "$ORSLLR-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLOP" "$ORSLOP-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLOUI" "$ORSLOUI-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLP" "$ORSLP-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLPD" "$ORSLPD-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLM" "$ORSLM-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLA" "$ORSLA-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLNEO" "$ORSLNEO-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLNEOA" "$ORSLNEOA-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLNEOD" "$ORSLNEOD-$ROUNDEDSIZE.apk"
done
rm -f $STORAGE/AIOCOMPILE/RoundedUI/dimens.xml
}

PILLSOVERLAYC () {
UCSA "Pills Overlay Compile" "PILLSOVERLAYCS"
}

PILLSOVERLAYCS () {

for PILLSFATSIZE in "0dip" "1dip" "2dip" "3dip" "4dip"; do
for PILLSWIDTHSIZE in "0dip" "60dip" "120dip" "180dip" "240dip" "300dip" "8dip"; do
OPTO="$STORAGE/AIOCOMPILE/Pills/Pills"
mkdir -p $OPTO/res/values $OPNTO/res/values
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.pills\">
	<overlay android:category=\"com.android.internal.navigation_bar_mode\" android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Pills - $PILLSFATSIZE/$PILLSWIDTHSIZE\"/>
</manifest>" > $OPTO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"navigation_handle_radius\">$PILLSFATSIZE</dimen>
	<dimen name=\"navigation_home_handle_width\">$PILLSWIDTHSIZE</dimen>
</resources>" > $OPTO/res/values/dimens.xml

APKBUILDER "$OPTO" "$OPTO-$PILLSFATSIZE-$PILLSWIDTHSIZE.apk"
done
done

for HIDE in "0dip" "16dip"; do
for FRAME in "0dip" "48dip"; do
NBMGO="$STORAGE/AIOCOMPILE/Pills/NavigationBarModeGesturalOverlay"
NBMGOEWB="$STORAGE/AIOCOMPILE/Pills/NavigationBarModeGesturalOverlayExtraWideBack"
NBMGONB="$STORAGE/AIOCOMPILE/Pills/NavigationBarModeGesturalOverlayNarrowBack"
NBMGOWB="$STORAGE/AIOCOMPILE/Pills/NavigationBarModeGesturalOverlayWideBack"
mkdir -p $NBMGO/res/values $NBMGOEWB/res/values $NBMGONB/res/values $NBMGOWB/res/values

for PNNBMGO in "com.android.internal.systemui.navbar.gestural" "com.android.internal.systemui.navbar.gestural_extra_wide_back" "com.android.internal.systemui.navbar.gestural_narrow_back" "com.android.internal.systemui.navbar.gestural_wide_back"; do
case $PNNBMGO in
"com.android.internal.systemui.navbar.gestural") NAME=$NBMGO;;
"com.android.internal.systemui.navbar.gestural_extra_wide_back") NAME=$NBMGOEWB;;
"com.android.internal.systemui.navbar.gestural_narrow_back") NAME=$NBMGONB;;
"com.android.internal.systemui.navbar.gestural_wide_back") NAME=$NBMGOWB;;
esac
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"$PNNBMGO\">
	<overlay android:category=\"com.android.internal.navigation_bar_mode\" android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Gestural Navigation Bar\"/>
</manifest>" > $NAME/AndroidManifest.xml
done

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<integer name=\"config_navBarInteractionMode\">2</integer>
	<integer name=\"config_navBarOpacityMode\">2</integer>
</resources>" | tee $NBMGO/res/values/integers.xml $NBMGOEWB/res/values/integers.xml $NBMGONB/res/values/integers.xml $NBMGOWB/res/values/integers.xml > /dev/null

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<bool name=\"config_allowSeamlessRotationDespiteNavBarMoving\">true</bool>
	<bool name=\"config_navBarAlwaysShowOnSideEdgeGesture\">true</bool>
	<bool name=\"config_navBarCanMove\">false</bool>
	<bool name=\"config_navBarNeedsScrim\">false</bool>
	<bool name=\"config_navBarTapThrough\">true</bool>
</resources>" | tee $NBMGO/res/values/bools.xml $NBMGOEWB/res/values/bools.xml $NBMGONB/res/values/bools.xml $NBMGOWB/res/values/bools.xml > /dev/null

for CBGI in "18dip" "24dip" "32dip" "40dip"; do
case $CBGI in
"18dip") OP=$NBMGONB;;
"24dip") OP=$NBMGO;;
"32dip") OP=$NBMGOWB;;
"40dip") OP=$NBMGOEWB;;
esac
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"config_backGestureInset\">$CBGI</dimen>
	<dimen name=\"navigation_bar_frame_height\">$FRAME</dimen>
	<dimen name=\"navigation_bar_gesture_height\">18dip</dimen>
	<dimen name=\"navigation_bar_height\">$HIDE</dimen>
	<dimen name=\"navigation_bar_height_landscape\">$HIDE</dimen>
	<dimen name=\"navigation_bar_width\">$HIDE</dimen>
</resources>" > $OP/res/values/dimens.xml
APKBUILDER "$OP" "$OP-$HIDE-$FRAME-$CBGI.apk"
done
done
done

for PILLSLIGHTCOLORS in "ff1a73e8" "ffb31818" "ff1ed760" "ffffa842" "ffff8055" "ffa86bd5" "ffff4151" "ff5e97f6" "ff47ae84"; do
for PILLSDARKCOLORS in "ff1a73e8" "ffb31818" "ff1ed760" "ffffa842" "ffff8055" "ffa86bd5" "ffff4151" "ff5e97f6" "ff47ae84"; do
OPCO="$STORAGE/AIOCOMPILE/Pills/PillsColors"
mkdir -p $OPCO/res/values
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.internal.systemui.pill.colors\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Pill Colors - $PILLSLIGHTCOLORS-$PILLSDARKCOLORS\"/>
</manifest>" > $OPCO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<color name=\"navigation_bar_home_handle_light_color\">#$PILLSLIGHTCOLORS</color>
	<color name=\"navigation_bar_home_handle_dark_color\">#$PILLSDARKCOLORS</color>
</resources>" > $OPCO/res/values/colors.xml

APKBUILDER "$OPCO" "$OPCO-$PILLSLIGHTCOLORS-$PILLSDARKCOLORS.apk"
done
done

for PILLSHEIGHTSIZE in "0dip" "1dip" "2dip" "3dip" "4dip" "5dip" "6dip" "7dip" "8dip" "9dip" "10dip"; do
OPHO="$STORAGE/AIOCOMPILE/Pills/PillsHeight"
mkdir -p $OPHO/res/values
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.pills.height\">
	<overlay android:category=\"com.android.internal.margin.navigation_bar_mode\" android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Pills Height - $PILLSHEIGHTSIZE\"/>
</manifest>" > $OPHO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"navigation_handle_bottom\">$PILLSHEIGHTSIZE</dimen>
</resources>" > $OPHO/res/values/dimens.xml

APKBUILDER "$OPHO" "$OPHO-$PILLSHEIGHTSIZE.apk"
done
}

SBINNIC () {
UCSA "Status Bar Increase Number Notification Icons Compile" "SBINNICS"
}

SBINNICS () {
ASBINNI="$STORAGE/AIOCOMPILE/SBINNI/AndroidStatusBarIncreaseNumberNotificationIcons"; SUISBINNI="$STORAGE/AIOCOMPILE/SBINNI/StatusBarIncreaseNumberNotificationIcons"
mkdir -p $ASBINNI/res/values $SUISBINNI/res/values

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.status.bar.increase.number.notification.icons\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Status Bar Increase Number Notification Icons\"/>
</manifest>" > $SUISBINNI/AndroidManifest.xml

for f in 1 2 3 4 5 6 7 8 9 10; do
for d in 0dip 2dip 4dip 6dip; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"overflow_dot_radius\">$d</dimen>
</resources>" > $SUISBINNI/res/values/dimens.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<integer name=\"config_maxVisibleNotificationIconsWhenDark\">$f</integer>
	<integer name=\"config_maxVisibleNotificationIcons\">$f</integer>
	<integer name=\"config_maxVisibleStatusIcons\">$f</integer>
</resources>" > $SUISBINNI/res/values/integers.xml

APKBUILDER "$SUISBINNI" "$SUISBINNI-$f-$d.apk"
done
done
}

SHNBC () {
UCSA "Show Hide Navigation Bar Compile" "SHNBCS"
}

SHNBCS () {
ONBHS="$STORAGE/AIOCOMPILE/ShowHideNavigationBar/NavigationBar"
mkdir -p $ONBHS/res/values

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.show.hide.navigation.bar\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Show Hide Navigation Bar\"/>
</manifest>" > $ONBHS/AndroidManifest.xml

for SHNBSS in "false" "true"; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<bool name=\"config_showNavigationBar\">$SHNBSS</bool>
</resources>" > $ONBHS/res/values/bools.xml
APKBUILDER "$ONBHS" "$ONBHS-$SHNBSS.apk"
done
}

QUICKSTEPC () {
UCSA "Compile QuickStep?" "QUICKSTEPCS"
}

QUICKSTEPCS () {
for QSRP in "com.saggitt.omega" "com.saggitt.omega.neo" "com.saggitt.omega.debug" "com.pixelated.launcher" "com.pixelated.launcher" "com.motorola.launcher3" "com.android.launcher3" "ch.deletescape.lawnchair.ci" "net.oneplus.launcher" "com.sec.android.app.launcher" "com.google.android.apps.nexuslauncher" "com.asus.launcher" "app.lawnchair"; do
OSL="$STORAGE/AIOCOMPILE/QuickStepRecentsProvider/QuickStepRecentsProvider"
mkdir -p $OSL/res/values
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>
<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.quickstep.recents.overlay\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"QuickStep Recents Provider\"/>
</manifest>" > $OSL/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<bool name=\"config_swipe_up_gesture_setting_available\">true</bool>
	<bool name=\"config_custom_swipe_up_gesture_setting_available\">true</bool>
</resources>" > $OSL/res/values/bools.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<string name=\"config_recentsComponentName\">$QSRP/com.android.quickstep.RecentsActivity</string>
</resources>" > $OSL/res/values/strings.xml

APKBUILDER "$OSL" "$OSL-$QSRP.apk"
done
}

BIPC () {
UCSA "Compile BurnInProtection?" "BIPCS"
}

BIPCS () {
BIPAO="$STORAGE/AIOCOMPILE/BurnInProtection/AndroidBurnInProtection"
BIPSUIO="$STORAGE/AIOCOMPILE/BurnInProtection/SUIBurnInProtection"
mkdir -p $BIPAO/res/values $BIPSUIO/res/values
for SHIFTINTERVAL in 20 40 60; do
for HORIZONTALSWIFT in 4dip 6dip; do
for VERTICALSWIFT in 4dip 6dip; do
for AODHORIZONTALSWIFT in 20dip 30dip 40dip; do
for AODVERTICALSWIFT in 20dip 30dip 40dip; do

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>
<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.burn.in.protection\">
	<overlay android:category=\"com.android.internal.display_cutout_emulation\" android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Android Burn In Protection\"/>
</manifest>" > $BIPAO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>
<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.burn.in.protection\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"SUI Burn In Protection\"/>
</manifest>" > $BIPSUIO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<bool name=\"config_statusBarBurnInProtection\">true</bool>
	<bool name=\"config_enableBurnInProtection\">true</bool>
</resources>" | tee $BIPAO/res/values/bools.xml $BIPSUIO/res/values/bools.xml > /dev/null

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<integer name=\"config_burnInProtectionMaxVerticalOffset\">0</integer>
	<integer name=\"config_burnInProtectionMinHorizontalOffset\">0</integer>
	<integer name=\"config_burnInProtectionMinVerticalOffset\">0</integer>
	<integer name=\"config_shift_interval\">$SHIFTINTERVAL</integer>
	<integer name=\"config_burnInProtectionMaxHorizontalOffset\">0</integer>
	<integer name=\"config_burnInProtectionMaxRadius\">-1</integer>
</resources>" | tee $BIPAO/res/values/integers.xml $BIPSUIO/res/values/integers.xml > /dev/null

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"horizontal_max_swift\">$HORIZONTALSWIFT</dimen>
	<dimen name=\"vertical_max_swift\">$VERTICALSWIFT</dimen>
	<dimen name=\"udfps_burn_in_offset_x\">$HORIZONTALSWIFT</dimen>
	<dimen name=\"udfps_burn_in_offset_y\">$VERTICALSWIFT</dimen>
	<dimen name=\"burn_in_prevention_offset_x\">$AODHORIZONTALSWIFT</dimen>
	<dimen name=\"burn_in_prevention_offset_y\">$AODVERTICALSWIFT</dimen>
	<dimen name=\"burn_in_prevention_offset_y_large_clock\">$AODVERTICALSWIFT</dimen>
	<dimen name=\"default_burn_in_prevention_offset\">$AODVERTICALSWIFT</dimen>
</resources>" | tee $BIPAO/res/values/dimens.xml $BIPSUIO/res/values/dimens.xml > /dev/null

APKBUILDER "$BIPAO" "$BIPAO-$SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT.apk"
APKBUILDER "$BIPSUIO" "$BIPSUIO-$SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT.apk"
done
done
done
done
done
}

FACEUNLOCKSERVICEC () {
UCSA "Compile FaceUnlockService?" "FACEUNLOCKSERVICECS"
}

FACEUNLOCKSERVICECS () {
OFULS="$STORAGE/AIOCOMPILE/FaceUnlockService/FaceUnlockService"
mkdir -p $OFULS/res/values
for FULS in "org.pixelexperience.faceunlock" "com.crdroid.faceunlock" "com.aospextended.faceunlock"; do
for SFULS in "5" "-1"; do
case $SFULS in "5") VSFULS="true";; "-1") VSFULS="false";; esac
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"$FULS.auto_generated_rro_vendor__\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"$FULS\"/>
	<application android:hasCode=\"false\" android:label=\"IR FaceUnlock Service\"/>
</manifest>" > $OFULS/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<bool name=\"use_alternative_vendor_impl\">$VSFULS</bool>
</resources>" > $OFULS/res/values/bools.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<integer name=\"override_front_cam_id\">$SFULS</integer>
</resources>" > $OFULS/res/values/integers.xml
case $SFULS in "5") SFULS="On";; "-1") SFULS="Off";; esac
APKBUILDER "$OFULS" "$OFULS-$FULS-$SFULS.apk"
done
done
}

NSPC () {
UCSA "Notification Side Paddings Compile" "NSPCS"
}

NSPCS () {
NSPCO="$STORAGE/AIOCOMPILE/NotificationSidePaddings/NotificationSidePaddings"
mkdir -p $NSPCO/res/values
for NSPCOSA in 0dip 5dip 10dip 15dip 20dip 25dip 30dip; do
for NSPCOS in 0dip 5dip 10dip 15dip 20dip 25dip 30dip; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.notification.side.paddings\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Notification Side Paddings\"/>
</manifest>" > $NSPCO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"notification_side_paddings\">$NSPCOS</dimen>
	<dimen name=\"qs_header_image_side_margin\">$NSPCOS</dimen>
	<dimen name=\"qs_notification_padding\">$NSPCOSA</dimen>
</resources>" > $NSPCO/res/values/dimens.xml
APKBUILDER "$NSPCO" "$NSPCO-$NSPCOS-$NSPCOSA.apk"
done
done
}

SBPC () {
UCSA "Status Bar Padding" "SBPCS"
}

SBPCS () {
SBPCSO="$STORAGE/AIOCOMPILE/StatusBarPadding/StatusBarPadding"
mkdir -p $SBPCSO/res/values

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.status.bar.padding\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Status Bar Padding\"/>
</manifest>" > $SBPCSO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.roundedui\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Android Rounded - $ROUNDEDSIZE\"/>
</manifest>" > $ORUIONE/AndroidManifest.xml

for SCSBPCO in 0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip; do
for SCSBPCT in 0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"status_bar_padding_start\">$SCSBPCO</dimen>
	<dimen name=\"status_bar_padding_end\">$SCSBPCT</dimen>
</resources>" > $SBPCSO/res/values/dimens.xml
APKBUILDER "$SBPCSO" "$SBPCSO-$SCSBPCO-$SCSBPCT.apk"
done
done
}

CSBISC () {
UCSA "Status Bar Icon Space" "CSBISCS"
}

CSBISCS () {
ASBISDS="$STORAGE/AIOCOMPILE/StatusBarIconSpace/AndroidStatusBarIconSpace" SUISBISDS="$STORAGE/AIOCOMPILE/StatusBarIconSpace/SUIStatusBarIconSpace"
mkdir -p $ASBISDS/res/values $SUISBISDS/res/values

for f in 14dip 15dip 16dip 17dip 18dip 19dip 20dip; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.status.bar.icon.space\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Android Status Bar Icon Space - $f\"/>
</manifest>" > $ASBISDS/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"status_bar_icon_size\">$f</dimen>
</resources>" > $ASBISDS/res/values/dimens.xml
APKBUILDER "$ASBISDS" "$ASBISDS-$f.apk"
done

for f in -4dip -3dip -2dip -1dip 0dip 1dip 2dip 3dip 4dip; do
for r in 0dip 1dip 2dip 3dip 4dip; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.status.bar.icon.space\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"SUI Status Bar Icon Space - $f\"/>
</manifest>" > $SUISBISDS/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"status_bar_left_clock_end_padding\">2dip</dimen>
	<dimen name=\"signal_cluster_battery_padding\">$r</dimen>
	<dimen name=\"status_bar_clock_starting_padding\">2dip</dimen>
	<dimen name=\"status_bar_system_icon_spacing\">$f</dimen>
</resources>" > $SUISBISDS/res/values/dimens.xml

APKBUILDER "$SUISBISDS" "$SUISBISDS-$f-$r.apk"
done
done
}

COSBCSC () {
UCSA "Status Bar Clock Size" "COSBCSCS"
}

COSBCSCS () {
PCOSBCSS="$STORAGE/AIOCOMPILE/StatusBarClockSize/StatusBarClockSize"
mkdir -p $PCOSBCSS/res/values
for f in 10sp 11sp 12sp 13sp 14sp 15sp 16sp 17sp 18sp 19sp 20sp; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.status.bar.clock.size\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Status Bar Clock Size - $f\"/>
</manifest>" > $PCOSBCSS/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"status_bar_clock_size\">$f</dimen>
</resources>" > $PCOSBCSS/res/values/dimens.xml

APKBUILDER "$PCOSBCSS" "$PCOSBCSS-$f.apk"
done
}

QSCIARC () {
UCSA "QS Count Icon And Rows" "QSCIARCS"
}

QSCIARCS () {
QSCIAR="$STORAGE/AIOCOMPILE/QSCountIconAndRows/QSCountIconAndRows"
mkdir -p $QSCIAR/res/values $QSCIAR/res/values-land

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.qs.count.icon.and.rows\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"QS Count Icon And Rows\"/>
</manifest>" > $QSCIAR/AndroidManifest.xml

for SUIQSNC in 2 3 4; do
for SUIQSMR in $(seq 1 1 10); do
QQSPMTL="4"; SUIQSNCL="4"
case $SUIQSNC in
"2") QQSPMTP="4";;
"3") QQSPMTP="6";;
"4") QQSPMTP="8";;
esac

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<integer name=\"quick_qs_panel_max_tiles\">$QQSPMTP</integer>
	<integer name=\"quick_settings_max_rows\">$SUIQSMR</integer>
	<integer name=\"quick_settings_num_columns\">$SUIQSNC</integer>
</resources>" > $QSCIAR/res/values/integers.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<integer name=\"quick_qs_panel_max_tiles\">$QQSPMTL</integer>
	<integer name=\"quick_settings_num_columns\">$SUIQSNCL</integer>
</resources>" > $QSCIAR/res/values-land/integers.xml

APKBUILDER "$QSCIAR" "$QSCIAR-$SUIQSNC-$SUIQSMR.apk"
done
done

for SUIQSC in $(seq 4 1 10); do
for SUIQSCP in $(seq 4 1 10); do
for SUIQSCL in $(seq 4 1 10); do
for SUIQSRP in $(seq 1 1 3); do
for SUIQSRL in $(seq 1 1 3); do
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<integer name=\"quick_qs_panel_max_columns\">$SUIQSC</integer>
	<integer name=\"config_qs_columns_portrait\">$SUIQSCP</integer>
	<integer name=\"config_qs_columns_landscape\">$SUIQSCL</integer>
	<integer name=\"config_qs_rows_portrait\">$SUIQSRP</integer>
	<integer name=\"config_qs_rows_landscape\">$SUIQSRL</integer>
</resources>" > $QSCIAR/res/values/integers.xml

APKBUILDER "$QSCIAR" "$QSCIAR-$SUIQSC-$SUIQSCP-$SUIQSCL-$SUIQSRP-$SUIQSRL.apk"
done
done
done
done
done
}

CSBISIZEC () {
UCSA "Status Bar Icon Size" "CSBISIZECS"
}

CSBISIZECS () {
SBISS="$STORAGE/AIOCOMPILE/StatusBarIconSize/StatusBarIconSize"
mkdir -p $SBISS/res/values

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.status.bar.icon.size\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Status Bar Icon Size\"/>
</manifest>" > $SBISS/AndroidManifest.xml

for SBISSC in 12dip 13dip 14dip 15dip 16dip 17dip 18dip; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"status_bar_icon_drawing_size\">$SBISSC</dimen>
</resources>" > $SBISS/res/values/dimens.xml
APKBUILDER "$SBISS" "$SBISS-$SBISSC.apk"
done
}

CSBPDC () {
UCSA "Status Bar Privacy Dot" "CSBPDCS"
}

CSBPDCS () {
CSBPDPO="$STORAGE/AIOCOMPILE/StatusBarPrivacyDot/StatusBarPrivacyDot"
mkdir -p $CSBPDPO-Disable/res/values $CSBPDPO-Optimized/res/values

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"ongoing_appops_chip_bg_corner_radius\">30dp</dimen>
	<dimen name=\"ongoing_appops_chip_icon_margin\">3.25dip</dimen>
	<dimen name=\"ongoing_appops_chip_max_width\">56dp</dimen>
	<dimen name=\"ongoing_appops_chip_min_width\">24dp</dimen>
	<dimen name=\"ongoing_appops_chip_side_padding\">4dp</dimen>
	<dimen name=\"ongoing_appops_dot_diameter\">5dp</dimen>
	<dimen name=\"ongoing_appops_dot_min_padding\">15dp</dimen>
</resources>" | tee $CSBPDPO-Disable/res/values/dimens.xml $CSBPDPO-Optimized/res/values/dimens.xml > /dev/null

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.status.bar.privacy.dot.disable\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Status Bar Privacy Dot - Disable\"/>
</manifest>" > $CSBPDPO-Disable/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<bool name=\"config_enablePrivacyDot\">false</bool>
</resources>" > $CSBPDPO-Disable/res/values/bools.xml
APKBUILDER "$CSBPDPO-Disable" "$CSBPDPO-Disable.apk"

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.status.bar.privacy.dot.optimized\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Status Bar Privacy Dot - Optimized\"/>
</manifest>" > $CSBPDPO-Optimized/AndroidManifest.xml

APKBUILDER "$CSBPDPO-Optimized" "$CSBPDPO-Optimized.apk"
}

} #

{ #AdBlock/Hosts

IPHF () {
if [ $BOOTMODE != true ] && [ -f $IPSE/hosts.bak ]; then
UIP -s "$MSGFI Hosts Files, Restore?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Restore Stock Hosts Files"
BUCKUPER -r "$IPSE/hosts"
UIP "$MSGDRS"
fi
else
UCSA -ent "AdBlock/Hosts" "IPHFS" "$IDDAB $IDVAAH $IDVSH $IDEH"
fi
}

IPHFS () {
UIP -s "Choose Hosts File" "$MSGVU Empty Hosts $VIPDAB" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
IPESHFS
else
UIP -s "$MSGVU AdAway Hosts $VIPVAAH (12000+)" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
IPAAHFS
else
UIP -s "$MSGVU Systemless Hosts $VIPVSH (90000+)" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
IPSHFS
else
UIP -s "$MSGVU Energized Hosts $VIPEH (400000+ Or 700000+)" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
IPEHFS
fi
fi
fi
fi
}

IPESHFS () {
UIP "Installing Empty Hosts Files $IAMM"
UZTPN "Hosts"
if $MAGISK; then
PTMFI "$IDDAB" "$MMHOSTSLIST" "$MIPSE"
MMPR -vc "Disable Ad Blocker" "$VIPDAB" "$VCIPDAB" "DriffeX" "Restores Stock Hosts File For Disable Ad Block"
echo -e "127.0.0.1 localhost\n::1 ip6-localhost" > $MODPATH/$MODID$MIPSE/hosts
else
BUCKUPER -s "$IPSE/hosts"
echo -e "127.0.0.1 localhost/n::1 ip6-localhost" > $IPSE/hosts
fi
SET_PERM_RM -msgdi
}

IPAAHFS () {
UIP "Installing AdAway Hosts Files $IAMM"
UZTPN "Hosts"
HOSTSFILE="AdAway-hosts"
if $MAGISK; then
PTMFI "$IDVAAH" "$MMHOSTSLIST" "$MIPSE"
cp -f $TMPDIR/Hosts/$HOSTSFILE $MODPATH/$MODID$MIPSE/hosts
MMPR -v "AdAway Hosts" "$VIPVAAH" "Hosts File From AdAway"
else
BUCKUPER -s "$IPSE/hosts"; cp -f $TMPDIR/Hosts/$HOSTSFILE $IPSE/hosts
fi
SET_PERM_RM -msgdi
}

IPSHFS () {
UIP "Installing Systemless Hosts Files $IAMM"
UZTPN "Hosts"
HOSTSFILE="Systemless-hosts"
if $MAGISK; then
PTMFI "$IDVSH" "$MMHOSTSLIST" "$MIPSE"
cp -f $TMPDIR/Hosts/$HOSTSFILE $MODPATH/$MODID$MIPSE/hosts
MMPR -vc "Systemless Hosts - Unified" "$VIPVSH" "$VCIPVSH" "gloeyisk" "An Efficient Ad Blocker, With No User Interface"
else
BUCKUPER -s "$IPSE/hosts"; cp -f $TMPDIR/Hosts/$HOSTSFILE $IPSE/hosts
fi
SET_PERM_RM -msgdi
}

IPEHFS () {
UIP -s "Choose Basic Or Unified" "$MSGVU Basic (400000+) $MSGRI" "$MSGVD Unified (700000+)"; if KEYCHOOSE; then FEHF="Basic"; else FEHF="Unified"; fi
UIP "Installing Energized Hosts Files $IAMM"
UZTPN "Hosts"
HOSTSFILE="Energized-$FEHF-hosts"
if $MAGISK; then
PTMFI "$IDEH" "$MMHOSTSLIST" "$MIPSE"
cp -f $TMPDIR/Hosts/$HOSTSFILE $MODPATH/$MODID$MIPSE/hosts
MMPR -v "$MODID" "$VIPEH" "Energized Hosts $FEHF Files"
else
BUCKUPER -s "$IPSE/hosts"; cp -f $TMPDIR/Hosts/$HOSTSFILE $IPSE/hosts
fi
SET_PERM_RM -msgdi
}

} #

{ #Net: GPS/WIFI/TTL/DNS/APAUSBTF

IPGPSP () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/gpspatcher ]; then
UIP -s "$MSGFI GPS Patcher, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
BUCKUPER -r "$GPSCONF"
rm -f $AIOPFMDPH/gpspatcher
UIP "$MSGDRM"
fi
else
if $SNAPSOC && [ $ASDK -ge 27 ] && FINDER "$GPSCONF"; then
UCSA "Install GPS Patcher $VIPGPSP?" "IPGPSPS" "$IDGPSP"
fi
fi
}

IPGPSPS () {
UIP "Installing GPS Patcher $IAMM"
[ -f $IPSE/gps.conf ] && cp -f $MAGISKMP$IPSE/gps.conf $TMPDIR/sgps.conf
[ -f $IPVE/gps.conf ] && cp -f $MAGISKMP$IPVE/gps.conf $TMPDIR/vgps.conf
EQCDFP="$TMPDIR/sgps.conf $TMPDIR/vgps.conf"
QCDFP "XTRA_SERVER_QUERY" "0" "# Whether to use the predefined XTRA servers below (XTRA_SERVER_), or to query them from the modem.\n# Values: 0 - use predefined, 1 - query modem"
QCDFP "XTRA_SERVER_1" "https://xtrapath1.izatcloud.net/xtra3grc.bin" "# The predefined XTRA servers 1 to be used if modem querying (XTRA_SERVER_QUERY) is off.\n# Values: URL"
QCDFP "XTRA_SERVER_2" "https://xtrapath2.izatcloud.net/xtra3grc.bin" "# The predefined XTRA servers 2 to be used if modem querying (XTRA_SERVER_QUERY) is off.\n# Values: URL"
QCDFP "XTRA_SERVER_3" "https://xtrapath3.izatcloud.net/xtra3grc.bin" "# The predefined XTRA servers 3 to be used if modem querying (XTRA_SERVER_QUERY) is off.\n# Values: URL"
QCDFP "XTRA_SERVER_4" "https://ssl.gpsonextra.net/xtra3grc.bin" "# The predefined XTRA servers 4 to be used if modem querying (XTRA_SERVER_QUERY) is off.\n# Values: URL"
QCDFP "XTRA_SERVER_5" "https://ssl.izatcloud.net/xtra3grc.bin" "# The predefined XTRA servers 5 to be used if modem querying (XTRA_SERVER_QUERY) is off.\n# Values: URL"
QCDFP "NTP_SERVER" "pool.ntp.org" "# The NTP servers used for time synchronisation.\n# Values: URL"
QCDFP "NTP_SERVER_1" "0.pool.ntp.org" "The NTP servers used for time synchronisation.\n# Values: URL"
QCDFP "NTP_SERVER_2" "1.pool.ntp.org" "The NTP servers used for time synchronisation.\n# Values: URL"
QCDFP "NTP_SERVER_3" "2.pool.ntp.org" "The NTP servers used for time synchronisation.\n# Values: URL"
QCDFP "NTP_SERVER_4" "3.pool.ntp.org" "The NTP servers used for time synchronisation.\n# Values: URL"
QCDFP "DEBUG_LEVEL" "0" "# Debugging\n# The Android logging level of the GPS service.\n# If commented out, then Android's default logging level will be used.\n# Values: 0 - none, 1 - error, 2 - warning, 3 - info, 4 - debug, 5 - verbose"
QCDFP "XTRA_CA_PATH" "/system/etc/security/cacerts" "# Certificates\n# Path to the CA certificates used to validate the XTRA data.\n# Values: correct path with certificates"
QCDFP "ERR_ESTIMATE" "0" "# Error estimation\n# Whether or not to use error estimation.\n# Values: 0 - don't use, 1 - use"
QCDFP "XTRA_VERSION_CHECK" "3" "#Version check for XTRA\n# The version of the XTRA data used. XTRA v3 supports digital signing and is advised.\n# Values: 0 - disable XTRA, 1 - automatic check, 2 - XTRA v2, 3 - XTRA v3"
QCDFP "XTRA_TEST_ENABLED" "1" "# Whether or not to test for XTRA support.\n# Values: 0 - don't test, 1 - test"
QCDFP "INTERMEDIATE_POS" "1" "Whether or not to report intermediate positions.\n# Values: 0 - don't report, 1 - report"
QCDFP "ACCURACY_THRES" "1" "# Accuracy threshold for intermediate positions.\n# Set to 0 to pass all positions.\n# Values: unknown"
QCDFP "GPS_LOCK" "0" "# Functionalities to switch off when GPS is disabled.\n# Default is to lock nothing for backward compatibility.\n# Bitmask: 0x1 - lock MO GPS, 0x2 - lock NI GPS"
QCDFP "NMEA_PROVIDER" "0" "# NMEA provider\n# Modem Processor - 1, Application Processor - 0)"
QCDFP "SGLTE_TARGET" "1" "# Whether the device supports being a SGLTE target.\n# Mark if it is a SGLTE target.\n# SGLTE - 1, nonSGLTE - 0"
QCDFP "SUPL_VER" "0x30000" "# The version of SUPL to be used.\n# Values: bitmask"
QCDFP "REPORT_POSITION_USE_SUPL_REFLOC" "1" "# Whether to report the reference SUPL location as the current position.\n# Values: 0 - don't report, 1 - report"
QCDFP "SUPL_ES" "1" "# Whether to use SUPL in an emergency situations (eg. calling emergency services).\n# Values: 0 - disable, 1 - enable"
QCDFP "USE_EMERGENCY_PDN_FOR_EMERGENCY_SUPL" "1" "# The PDN to ve used for emergency SUPL.\n# Values: 0 - emergency PDN, 1 - regular SUPL PDN"
QCDFP "SUPL_MODE" "0x2" "# Carrier-set GPS mode for SUPL.\n# If commented, will be taken from config.xml.\n# Bitmask: MSA - 0X2, MSB - 0X1"
QCDFP "SUPL_HOST" "supl.google.com" "# The SUPL server used.\n# Values: URL, IP"
QCDFP "SUPL_PORT" "7275" "# The port to connect to the SUPL server.\n# Values: port"
QCDFP "CAPABILITIES" "0x37" "# GPS features which are supported.\n# default = MSA | MSB | SCHEDULING | ON_DEMAND_TIME | GEOFENCING\n# Bitmask: 0x01 - SCHEDULING, 0x02 - MSB, 0x04 - MSA, 0x10 - ON_DEMAND_TIME, 0x20 - GEOFENCING"
QCDFP "ENABLE_WIPER" "1" "# Whether to use WiFi positioning.\n# Values: 0 - disable, 1 - enable"
QCDFP "AGPS_CERT_WRITABLE_MASK" "0" "# Bitmask of slots that are available for write/install to, where 1s indicate writable, and the default value is 0 where no slots are writable. For example, AGPS_CERT_WRITABLE_MASK of b1000001010 makes 3 slots available and the remaining 7 slots unwritable.\n# Values: bitmask"
QCDFP "AGPS_CONFIG_INJECT" "1" "# Whether to use A-GPS configuration injection: SUPL_VER, SUPL_HOST,SUPL_PORT, MO_SUPL_HOST, MO_SUPL_PORT, C2K_HOST, C2K_PORT, LPP_PROFILE, A_GLONASS_POS_PROTOCOL_SELECT\n# Values: 0 - disable, 1 - enable"
QCDFP "LPP_PROFILE" "3" "# LTE Positioning Profile Settings.\n# Values: 0 - RRLP, 1 - LPP_User_Plane, 2 - LPP_Control_Plane, 3 - LPP_Control_Plane and LPP_User_Plane"
QCDFP "A_GLONASS_POS_PROTOCOL_SELECT" "0x4" "# The A-GLONASS positioning protocol used.\n# Bitmask: 0x1 - RRC CPlane, 0x2 - RRLP UPlane, 0x4 - LLP Uplane"
QCDFP "LPPE_CP_TECHNOLOGY" "0x10" "# The LPPe control plane method.\n# Bitmask: 0x1 - DBH, 0x2 - WLAN AP measurements, 0x4 - SRN AP measurement, 0x8 - Sensor barometer measurement"
QCDFP "LPPE_UP_TECHNOLOGY" "0x10" "# The LPPe user plane method.\n# Bitmask: 0x1 - DBH, 0x2 - WLAN AP measurements, 0x4 - SRN AP measurement, 0x8 - Sensor barometer measurement"
QCDFP "AP_TIMESTAMP_UNCERTAINTY" "10" "# The AP coarse timestamp uncertainty until the GNSS receiver is able to acquire better timing information.\n# Values: 10"
QCDFP "AP_CLOCK_PPM" "100" "# Quality of APPS processor clock (in PPM).\n# Value specified is used for calculation of APPS time stamp uncertainty.\n# Values: PPM"
QCDFP "EXTERNAL_DR_ENABLED" "0" "# Whether to use the QDR configuration.\n# This settings enables QDR Configuration for automotive use case, if enabled then DR_AP_Service needs to be enabled in izat.conf\n# Recommended for automobile use cases. If used, the DR_AP_Service needs to be enabled.\n# Values: 0 - NO QDR (default), 1 - QDR enabled"
QCDFP "DR_SYNC_ENABLED" "0" "# This configuration enables the driver to make use of PPS events generated by DR_SYNC pulse Standard Linux PPS driver needs to be enabled.\n# Values: 0 - DR_SYNC pulse not available (default), 1 - DR_SYNC pulse available"
QCDFP "PPS_DEVICENAME" "/dev/pps0" "# The path to the Linux PPS device.\n# Values: path"
QCDFP "MISSING_PULSE_TIME_DELTA" "900" "# MAX ms difference to detect missing pulse.\n# Specifies time threshold in ms to validate any missing PPS pulses\n# Values: ms"
QCDFP "PROPAGATION_TIME_UNCERTAINTY" "1" "# Whether to use time uncertainty propagation logic in the case of missing PPS pulse.\n# Values: 0 - don't use, 1 - use"
if $MAGISK; then
PTMFI "$IDGPSP" "optmizedgpsconf" "$MIPSVE $MIPSE"
[ -f $TMPDIR/sgps.conf ] && cp -f $TMPDIR/sgps.conf $MODPATH/$MODID$MIPSVE/gps.conf
[ -f $TMPDIR/vgps.conf ] && cp -f $TMPDIR/vgps.conf $MODPATH/$MODID$MIPSE/gps.conf
MMPR -v "GPS Patcher" "$VIPGPSP" "GPS Patcher - Patching gps.conf & Adds Correct Certificate Paths, Disables Logs, Improves Gps Communication (None), Exposes Universal Pool.Ntp.Org And Other Improvements"
else
BUCKUPER -s "$GPSCONF"
[ -f $TMPDIR/sgps.conf ] && cp -f $TMPDIR/sgps.conf $IPSE/gps.conf
[ -f $TMPDIR/vgps.conf ] && cp -f $TMPDIR/vgps.conf $IPVE/gps.conf
touch $AIOPFMDPH/gpspatcher
fi
SET_PERM_RM -msgdi
}

IPWIFIP () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/wifipatcher ]; then
UIP -s "$MSGFI Wifi Patcher, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
BUCKUPER -r "$WCNSQCCFGI"
rm -f $AIOPFMDPH/wifipatcher
UIP "$MSGDRM"
fi
else
if $SNAPSOC && [ $ASDK -ge 27 ] && FINDER "$WCNSQCCFGI"; then
UCSA "Install Wifi Patcher $VIPWIFIP?" "IPWIFIPS" "$IDWIFIP"
fi
fi
}

IPWIFIPS () {
UIP "Installing Wifi Patcher $IAMM"
if $MAGISK; then
PTMFI "$IDWIFIP" "wifi-bonding" "$MIPSVE/wifi"
MMPR -v "Wifi Patcher" "$VIPWIFIP" "Wifi Patcher - Patching WCNSS_qcom_cfg.ini To Increase Wifi Bandwidth, Disable Unnecessary Logging And Other Improvements (Although In Fact This Module Can Return The Standard Speed On Custom)"
PWIFIP="$MODPATH/$MODID$MIPSVE/wifi"
else
BUCKUPER -s "$WCNSQCCFGI"
PWIFIP="$IPVE/wifi"
touch $AIOPFMDPH/wifipatcher
fi
cp -f $MAGISKMP$IPVE/wifi/WCNSS_qcom_cfg.ini $TMPDIR
EQCDFP="$TMPDIR/WCNSS_qcom_cfg.ini"
sed -i "/END/d" $EQCDFP
QCDFP "gChannelBondingMode24GHz" "1" "# Configures Channel Bonding in 24 GHz"
QCDFP "gChannelBondingMode5GHz" "1" "# Configures Channel Bonding in 5 GHz"
QCDFP "gForce1x1Exception" "0" "# 0: Disable force 1x1 on MTK solution AP\n# 1: Enable force 1x1 on MTK solution AP"
QCDFP "gEnablefwlog" "0" "# Firmware log mode\n# Valid values are 0,1,2\n# 0=Disable, 1=WMI, 2=DIAG"
QCDFP "gEnablePacketLog" "0" "# Enable pkt log\n# 1 - enable, 0 - disable"
echo -e "\nEND" >> $EQCDFP
cp -f $TMPDIR/WCNSS_qcom_cfg.ini $PWIFIP
SET_PERM_RM -msgdi
}

IPTTLF () {
if $MAGISK; then
UCSA "Install TTL Fix $VIPTTLF?" "IPTTLFS" "$IDTTLF"
fi
}

IPTTLFS () {
UIP "Installing Time To Live Fix $IAMM"
UZTPN "NFQTTL"
PTMFI -np "$IDTTLF" "nfqttl"
MMPR -vcs "Nfqttl" "$VIPTTLF" "$VCIPTTLF" "Cyborg-one" "Nfqttl Is A Module Fix Heder Field TTL" "https://github.com/cyborg-one/nfqttl"
echo "#!$MIPSB/sh
MODDIR=\${0%/*}
iptables -t mangle -I FORWARD -j DROP
ip6tables -t mangle -I FORWARD -j DROP
sleep 30
iptables -t mangle -D FORWARD -j DROP
ip6tables -t mangle -D FORWARD -j DROP
count=0
while true
do
if ps | grep \$MODDIR/nfqttl | grep -v grep | grep -q \$MODDIR/nfqttl
then
break
fi
if [ \"\$count\" -ge 8 ]
then
exit 1
fi
count=\$((\$count+1))
\$MODDIR/nfqttl -d -t64 -s4
sleep 5
done
iptables -t mangle -N nfqttli
iptables -t mangle -A nfqttli -j NFQUEUE --queue-num 6464
iptables -t mangle -N nfqttlo
iptables -t mangle -A nfqttlo -j NFQUEUE --queue-num 6464
iptables -t mangle -A PREROUTING -j nfqttli
iptables -t mangle -A OUTPUT -j nfqttlo
ip6tables -t mangle -N nfqttli
ip6tables -t mangle -A nfqttli -j NFQUEUE --queue-num 6464
ip6tables -t mangle -N nfqttlo
ip6tables -t mangle -A nfqttlo -j NFQUEUE --queue-num 6464
ip6tables -t mangle -A PREROUTING -j nfqttli
ip6tables -t mangle -A POSTROUTING -j nfqttlo
exit 0" > $MODPATH/$MODID/service.sh
cp -f $TMPDIR/NFQTTL/nfqttl-$ARCH $MODPATH/$MODID/nfqttl
if $BOOTMODE; then
pkill -9 nfqttl
if $MODPATH/$MODID/nfqttl -d -s4; then
UIP "Run nfqttl Success!"
else
UIP "Run nfqttl Fail!"
fi
iptables -t mangle -D PREROUTING -j nfqttli
iptables -t mangle -D OUTPUT -j nfqttlo
iptables -t mangle -F nfqttli
iptables -t mangle -X nfqttli
iptables -t mangle -F nfqttlo
iptables -t mangle -X nfqttlo
ip6tables -t mangle -D PREROUTING -j nfqttli
ip6tables -t mangle -D POSTROUTING -j nfqttlo
ip6tables -t mangle -F nfqttli
ip6tables -t mangle -X nfqttli
ip6tables -t mangle -F nfqttlo
ip6tables -t mangle -X nfqttlo
if iptables -t mangle -N nfqttli &&\
iptables -t mangle -A nfqttli -j NFQUEUE --queue-num 6464 &&\
iptables -t mangle -N nfqttlo &&\
iptables -t mangle -A nfqttlo -j NFQUEUE --queue-num 6464 &&\
iptables -t mangle -A PREROUTING -j nfqttli &&\
iptables -t mangle -A OUTPUT -j nfqttlo &&\
ip6tables -t mangle -N nfqttli &&\
ip6tables -t mangle -A nfqttli -j NFQUEUE --queue-num 6464 &&\
ip6tables -t mangle -N nfqttlo &&\
ip6tables -t mangle -A nfqttlo -j NFQUEUE --queue-num 6464 &&\
ip6tables -t mangle -A PREROUTING -j nfqttli &&\
ip6tables -t mangle -A POSTROUTING -j nfqttlo; then
UIP "Set Rule IpTables Success!"
else
UIP "Set Rule IpTables Fail!"
fi
else
SET_PERM_RM -msgdi
fi
}

IPNT () {
UCSA "Install Network Tweak $VIPNT?" "IPNTS" "$IDNT"
}

IPNTS () {
NTOGoogle="8.8.8.8"; NTTGoogle="8.8.4.4"; NTOCloudFlare="1.1.1.1"; NTTCloudFlare="1.0.0.1"
UIP -s "Choose DNS Method:" "$MSGVU Google & CloudFlare DNS" "$MSGVD Google || CloudFlare DNS"
if KEYCHOOSE; then
ONetworkTweak="$NTOGoogle"; TNetworkTweak="$NTOCloudFlare"
DNSSETPROP="setprop 2001:4860:4860::8.8.8.8
setprop 2606:4700:4700::1.1.1.1"
else
UIP -s "Choose DNS Method:" "$MSGVU Google DNS" "$MSGVD CloudFlare DNS"
if KEYCHOOSE; then
ONetworkTweak="$NTOGoogle"; TNetworkTweak="$NTTGoogle"
DNSSETPROP="setprop 2001:4860:4860::8888
setprop 2001:4860:4860::8844"
else
ONetworkTweak="$NTOCloudFlare"; TNetworkTweak="$NTTCloudFlare"
DNSSETPROP="setprop 2606:4700:4700::1111
setprop 2606:4700:4700::1001"
fi
fi
UIP "Installing Network Tweak $IAMM"
if $MAGISK; then
PTMFI -nmp "$IDNT"
$ECHO "#!$MIPSB/sh
MODDIR=\${0%/*}

# Set CF DNS servers address
setprop net.rmnet0.dns1 $ONetworkTweak
setprop net.rmnet0.dns2 $TNetworkTweak
setprop net.rmnet1.dns1 $ONetworkTweak
setprop net.rmnet1.dns2 $TNetworkTweak
setprop net.dns1 $ONetworkTweak
setprop net.dns2 $TNetworkTweak
setprop net.gprs.dns1 $ONetworkTweak
setprop net.gprs.dns2 $TNetworkTweak
setprop net.wcdma.dns1 $ONetworkTweak
setprop net.wcdma.dns2 $TNetworkTweak
setprop net.hspa.dns1 $ONetworkTweak
setprop net.hspa.dns2 $TNetworkTweak
setprop net.hsdpa.dns1 $ONetworkTweak
setprop net.hsdpa.dns2 $TNetworkTweak
setprop net.lte.dns1 $ONetworkTweak
setprop net.lte.dns2 $TNetworkTweak
setprop net.ltea.dns1 $ONetworkTweak
setprop net.ltea.dns2 $TNetworkTweak
setprop net.ppp0.dns1 $ONetworkTweak
setprop net.ppp0.dns2 $TNetworkTweak
setprop net.pdpbr1.dns1 $ONetworkTweak
setprop net.pdpbr1.dns2 $TNetworkTweak
setprop net.wlan0.dns1 $ONetworkTweak
setprop net.wlan0.dns2 $TNetworkTweak
setprop net.eth0.dns1 $ONetworkTweak
setprop net.eth0.dns2 $TNetworkTweak

$DNSSETPROP

# Edit the resolv conf file if it exist
if [ -a $MIPSE/resolv.conf ]; then
mkdir -p \$MODDIR$MIPSE
printf \"nameserver $ONetworkTweak\\nnameserver $TNetworkTweak\" >> \$MODDIR$MIPSE/resolv.conf
chmod 0644 \$MODDIR$MIPSE/resolv.conf
fi

echo \"0\" > /proc/sys/net/ipv4/tcp_timestamps
echo \"1\" > /proc/sys/net/ipv4/tcp_tw_reuse
echo \"1\" > /proc/sys/net/ipv4/tcp_sack
echo \"1\" > /proc/sys/net/ipv4/tcp_tw_recycle
echo \"1\" > /proc/sys/net/ipv4/tcp_window_scaling
echo \"5\" > /proc/sys/net/ipv4/tcp_keepalive_probes
echo \"30\" > /proc/sys/net/ipv4/tcp_keepalive_intvl
echo \"30\" > /proc/sys/net/ipv4/tcp_fin_timeout
echo \"404480\" > /proc/sys/net/core/wmem_max
echo \"404480\" > /proc/sys/net/core/rmem_max
echo \"256960\" > /proc/sys/net/core/rmem_default
echo \"256960\" > /proc/sys/net/core/wmem_default
echo \"4096 16384 404480\" > /proc/sys/net/ipv4/tcp_wmem
echo \"4096 87380 404480\" > /proc/sys/net/ipv4/tcp_rmem" > $MODPATH/$MODID/post-fs-data.sh
MSSERVICE -s "iptables -t nat -A OUTPUT -p tcp --dport 53 -j DNAT --to-destination $ONetworkTweak:53; iptables -t nat -A OUTPUT -p udp --dport 53 -j DNAT --to-destination $TNetworkTweak:53; iptables -t nat -I OUTPUT -p tcp --dport 53 -j DNAT --to-destination $ONetworkTweak:53; iptables -t nat -I OUTPUT -p udp --dport 53 -j DNAT --to-destination $TNetworkTweak:53"
MMPR -vc "Network Tweak" "$VIPNT" "$VCIPNT" "IMMIX" "Various Network Tweaks Which Will Help To Get Better Internet Connectivity And Low Ping"
PINT=$MODPATH/$MODID/system.prop
else
BUCKUPER -bp "$IPSBP"; PINT=$IPSBP
fi
echo "# Internet Tweaks
net.tcp.buffersize.default=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.wifi=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.lte=524288,1048576,2097152,524288,1048576,2097152
net.tcp.buffersize.umts=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.evdo=4096,87380,563200,4096,16384,262144
net.tcp.buffersize.evdo_b=6144,262144,1048576,6144,262144,1048576
net.tcp.buffersize.gprs=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.edge=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.hsdpa=6144,87380,1048576,6144,87380,1048576
net.tcp.buffersize.hspa=6144,87380,524288,6144,16384,262144
net.tcp.buffersize.hspap=4096,87380,1220608,4096,16384,393216
net.tcp.buffersize.hsupa=4096,87380,704512,4096,16384,262144
ro.ril.hsxpa=2
ro.ril.hspa=2
ro.ril.lte=2
ro.ril.ltea=2
ro.ril.hep=0
ro.ril.def.agps.mode=2
ro.ril.enable.3g.prefix=1
ro.ril.enable.4g.prefix=1
ro.ril.htcmaskw1.bitmask=4294967295
ro.ril.htcmaskw1=14449
ro.ril.enable.dtm=1
ro.ril.hspaclass=15
ro.ril.lteclass=15
ro.ril.gprsclass=15
ro.ril.hsupa.category=10
ro.ril.hsdpa.category=30
ro.ril.lte.category=10
ro.ril.ltea.category=30
ro.ril.enable.a51=1
ro.ril.enable.a52=1
ro.ril.enable.a53=1
ro.ril.enable.a54=1
ro.ril.enable.a55=1

# Wireless + TCP Speed & Security Tweaks
net.core.wmem_max=1048576
net.core.rmem_max=1048576
net.core.rmem_default=262144
net.core.wmem_default=262144
net.core.optmem_max=20480
net.unix.max_dgram_qlen=50
net.ipv4.tcp_ecn=0
net.ipv4.route.flush=1
net.ipv4.tcp_rfc1337=1
net.ipv4.ip_no_pmtu_disc=0
net.ipv4.tcp_sack=1
net.ipv4.tcp_fack=1
net.ipv4.tcp_window_scaling=1
net.ipv4.tcp_timestamps=1
net.ipv4.tcp_rmem=4096 39000 187000
net.ipv4.tcp_wmem=4096 39000 187000
net.ipv4.tcp_mem=187000 187000 187000
net.ipv4.tcp_no_metrics_save=1
net.ipv4.tcp_moderate_rcvbuf=1
net.ipv6.tcp_ecn=0
net.ipv6.route.flush=1
net.ipv6.tcp_rfc1337=1
net.ipv6.ip_no_pmtu_disc=0
net.ipv6.tcp_sack=1
net.ipv6.tcp_fack=1
net.ipv6.tcp_window_scaling=1
net.ipv6.tcp_timestamps=1
net.ipv6.tcp_rmem=4096 39000 187000
net.ipv6.tcp_wmem=4096 39000 187000
net.ipv6.tcp_mem=187000 187000 187000
net.ipv6.tcp_no_metrics_save=1
net.ipv6.tcp_moderate_rcvbuf=1
net.tethering.noprovisioning=true

# DNS Tweaks
net.rmnet0.dns1=$ONetworkTweak
net.rmnet0.dns2=$TNetworkTweak
net.rmnet1.dns1=$ONetworkTweak
net.rmnet1.dns2=$TNetworkTweak
net.dns1=$ONetworkTweak
net.dns2=$TNetworkTweak
net.gprs.dns1=$ONetworkTweak
net.gprs.dns2=$TNetworkTweak
net.wcdma.dns1=$ONetworkTweak
net.wcdma.dns2=$TNetworkTweak
net.hspa.dns1=$ONetworkTweak
net.hspa.dns2=$TNetworkTweak
net.hsdpa.dns1=$ONetworkTweak
net.hsdpa.dns2=$TNetworkTweak
net.lte.dns1=$ONetworkTweak
net.lte.dns2=$TNetworkTweak
net.ltea.dns1=$ONetworkTweak
net.ltea.dns2=$TNetworkTweak
net.ppp0.dns1=$ONetworkTweak
net.ppp0.dns2=$TNetworkTweak
net.pdpbr1.dns1=$ONetworkTweak
net.pdpbr1.dns2=$TNetworkTweak
net.wlan0.dns1=$ONetworkTweak
net.wlan0.dns2=$TNetworkTweak
net.eth0.dns1=$ONetworkTweak
net.eth0.dns2=$TNetworkTweak

# Signal Tweaks
persist.cust.tel.eons=1
ro.config.hw_fast_dormancy=1
ro.config.combined_signal=true
telephony.lteOnCdmaDevice=1
ro.telephony.default_network=33,33

# Support For IPV4 and IPV6
persist.telephony.support.ipv6=1
persist.telephony.support.ipv4=1" >> $PINT
SET_PERM_RM -msgdi
}

IPAPAUSBTF () {
if CHECKER "device" "dipper" && [ -d $IPDSNS ]; then
UCSA "Install AP & USB Tethering Fix $VIPAPAUSBTF?" "IPAPAUSBTFS" "$IDAPAUSBTF"
fi
}

IPAPAUSBTFS () {
UIP "Installing AP & USB Tethering Fix $IAMM"
if $MAGISK; then
PTMFI -np "$IDAPAUSBTF" "USBTF"
MMPR -v "AP & USB Tethering Fix" "$VIPAPAUSBTF" "Access Point & USB Tethering Fix If Crash SUI Or If Rom Not Boot, Reboot & Etc"
MSSERVICE -s "rm -rf $IPDSNS/*; chmod 0400 $IPDSNS"
fi
rm -rf $IPDSNS/*; chmod 0400 $IPDSNS
UIP "$MSGDI"
}

} #

{ #Utilities: BB/SELC/CC/MMFR/DETACH/LSPosed

IPBB () {
if [ $BOOTMODE != true ] && [ -f $SYSTEM/$BUSYBOX/busybox ]; then
UIP -s "$MSGFI Brutal BusyBox In $BUSYBOX, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Remove Symlinking BB Applets"
for applet in $($SYSTEM/$BUSYBOX/busybox --list); do
rm -f $SYSTEM/$BUSYBOX/$applet
done
UIP "Remove BB"
rm -f $SYSTEM/$BUSYBOX/busybox $AIOPFMDPH/busyboxbrutal
UIP "$MSGDRM"
fi
else
UCSA "Install Brutal BusyBox $VIPBB?" "IPBBS" "$IDBB"
fi
}

IPBBS () {
UIP "Installing Brutal BusyBox $IAMM"
if $MAGISK; then
PTMFI "$IDBB" "busybox-ndk busybox-brutal" "$IPPSXBM"
MMPR -vcs "Brutal BusyBox" "$VIPBB" "$VCIPBB" "FeraVolt" "Brutal Busybox With Almost All Available Applets. Compiled With NDK Clang + LTO + Ofast + llvm Polly. Has All Android NDK Patches. ARMv7/ARMv8." "https://github.com/feravolt/Brutal_busybox"
FIPBB=$MODPATH/$MODID$IPPSXBM
if [ -d $IPSB ] && [ ! -d $IPSXB ]; then echo -e "#!$MIPSB/sh\nfor sd in $MIPSB/*; do\nrm -f $MODPATH/$MODID/\${sd};\ndone;" > $MODPATH/$MODID/post-fs-data.sh; fi
else
FIPBB=$IPPSXB
touch $AIOPFMDPH/busyboxbrutal
fi
cp -f $BB/busybox-$ARCH $FIPBB/busybox
UIP "Setting BB Permissions"
chmod 0777 $FIPBB/busybox
UIP "Symlinking BB Applets"
$FIPBB/busybox --install -s $FIPBB
SET_PERM_RM -msgdi
UIP "Usage:" "Run \"su -c busybox\" In Terminal On BootMode"
}

IPSELC () {
if $MAGISK; then
PAI=false
UCSA "Install SELinux Changer $VIPSELC?" "IPSELCS" "$IDSELC"
fi
}

IPSELCS () {
PTMFI -np "$IDSELC" "SeLinuxChanger"
SLSP="Permissive"; SLSE="Enforcing"
CHECKER "sel"
if $PAI; then
SLSC=$SLSP; SLSCN=0
else
UIP "Change SELinux" "SELinux Now: $SELINUXS" "$MSGVU In $SLSP" "$MSGVD In $SLSE"
if KEYCHOOSE; then SLSC=$SLSP; SLSCN=0; else SLSC=$SLSE; SLSCN=1; fi
fi
UIP "Installing SELinux Changer $IAMM"
MMPR -v "SELinux Changer" "$VIPSELC" "Switch SELinux In $SLSC"
echo -e "setenforce $SLSCN\necho -n $SLSCN > /sys/fs/selinux/enforce" > $MODPATH/$MODID/service.sh
if $BOOTMODE; then
setenforce $SLSCN
echo -n $SLSCN > /sys/fs/selinux/enforce
UIP "SELinux Will Now Be In $SLSC"
fi
SET_PERM_RM -msgdi
}

IPCC () {
if $MAGISK; then
UCSA "Install Cache Cleaner $VIPCC?" "IPCCS" "$IDCC"
fi
}

IPCCS () {
UIP "Installing Cache Cleaner $IAMM"
PTMFI -nm "$IDCC" "$MIPSB"
MMPR -v "Cache Cleaner" "$VIPCC" "Cache Cleaner For Remove More Empty/TMP/Trash Folder & Files - Usage: Run \"su -c CC\" In Terminal On BootMode Or Run \"*/CC\" In Recovery Terminal"
$ECHO "#!$MIPSB/sh

Spinner () {
case \${_indicator} in
'|') _indicator='/';;
'/') _indicator='-';;
'-') _indicator='\\\';;
'\\\') _indicator='|';;
*) _indicator='\\\';;
esac
printf \"\r\${@} [\${_indicator}] \"
}

RMLOG () {
clear

KLRML=\"
$IPDM/Stats-data
$IPDS/dropbox
$IPDS/graphicsstats
$IPDS/log-files.xml
$IPDS/procstats
$IPDS/syncmanager-log
$IPDS/usagestats
$IPDSUDE/0/com.android.shell/files/bugreports
$STORAGE/MIUI/.debug_log
$STORAGE/mtklog
/data/anr
/data/log
/data/log_other_mode
/data/tombstones
/dev/log
\"

for kll in \$KLRML; do if [ -d \$kll ]; then echo \"$MSGSD Found Logs In \$kll\"; rm -rf \$kll; elif [ -f \$kll ]; then echo \"$MSGSD Found \$kll\"; rm -f \$kll; fi; done
echo \"$MSGSD Other Logs Not Found\"
}

CC () {
clear

if [ $MIUI != true ] && [ -d $STORAGE/MIUI ]; then
rm -rf $STORAGE/MIUI
fi

RMFILELIST=\"
baidu
camera_events/session.pb
dctp
did
dmesg.log
flamegapps_debug_logs.tar.gz
journal*.tmp
miad
open_gapps_debug.logs.tar.gz
open_gapps_log.txt
ramdump
zlsdk.bin
\"

RMFOLDERLIST=\"
.AICPROMStats
.DataStorage
.UTSystemConfig
.com.android.providers.downloads.ui
.gs_fs0
.temp
.thumbnails
.tmfs
.vdevdir
.xlDownload
Crash_Reports
cache
dalvik-cache
resource-cache
thumbs
package_cache
\"

echo \"$MSGSD Search In /data...\"

MSGCC=true
for FILECLEANER in \$RMFILELIST; do
Spinner && if \$MSGCC; then echo \"$MSGSD Remove Trash Files...\"; MSGCC=false; fi && find /data -depth -type f -name \$FILECLEANER -exec rm -f {} \;
done

MSGCC=true
for FOLDERCLEANER in \$RMFOLDERLIST; do
Spinner && if \$MSGCC; then echo \"$MSGSD Remove Trash/Cache/TMP Folders...\"; MSGCC=false; fi && find /data -depth -type d -name \$FOLDERCLEANER -exec rm -rf {} \;
done

CCSDAS=\$(ls $STORAGE/Android/data)
for CCF in \$CCSDAS; do
if find $IPDD/\$CCF -type d -name \$CCF; then
Spinner
else
Spinner && rm -rf $STORAGE/Android/data/\$CCF
fi
done

RMEF
echo \"$MSGSD Please, Reboot Device!\"
}

RMEF () {
Spinner && echo \"$MSGSD Remove Empty Files...\"
\$FIND $STORAGE/ -depth -type f -not -name .nomedia -empty -exec rm -f {} \;
Spinner && echo \"$MSGSD Remove Empty Folders...\"
case \$1 in
-l) RMEFP=\"$STORAGE/\";;
*) RMEFP=\"/data/\";;
esac
\$FIND \$RMEFP -depth -type d -empty -exec rmdir {} \;
echo \"$MSGSD Remove Done.\"
}

VMDL () {
VMDLTMP=\"\$(find $IPDA -type d -name \"vmdl*.tmp\" -o -name \"com.google.android.trichromelibrary*\")\"
for f in \$VMDLTMP; do
echo \"$MSGSD Found \$f\"
rm -rf \$f
echo \"$MSGSD Remove Done.\"
done
}

RMMB () {
clear
for rmmb in \$(ls /data); do
case \$rmmb in
magisk_backup_*) echo \"$MSGSD Remove \$rmmb\"; rm -rf /data/\$rmmb;;
esac
done
echo \"$MSGSD Other Magisk Backup Not Found\"
}

OPTIONS () {
VMDLC=false
VMDLTMP=\"\$(find $IPDA -type d -name \"vmdl*.tmp\" -o -name \"com.google.android.trichromelibrary*\")\"
for f in \$VMDLTMP; do
VMDLC=true
done

MMB=false
for rmmb in \$(ls /data); do
case \$rmmb in
magisk_backup_*) MMB=true; break;;
esac
done
clear
echo \"$MSGSD Cache Cleaner $VIPCC\"
[ -d $MODPATH/$IDBB$MIPSB ] && FIND=$MODPATH/$IDBB$MIPSB/find || FIND=$MODPATH/$IDBB$MIPSXB/find
[ ! -d $MODPATH/$IDBB ] && echo -e \"$MSGSD Brutal Busybox No Found!\\n$MSGSD Use Stock Find\" && FIND=find
local opt=\"\"
while :; do
echo -n \"$MSGCS
$MSGSD Choose Varian:
$MSGCS
c) Cache Cleaner
e) Remove Empty Files/Folders (All In /data)
el) Remove Empty Files/Folders (Only In /sdcard)
l) Remove Logs\\n\"
if \$VMDLC; then echo -e \"t) Remove VMDLTMP & Trash TrichromeLibrary\"; fi
if \$MMB; then echo -e \"m) Remove All Magisk Backup\"; fi
echo \"r) Reboot Device
q) Quit
$MSGCS
?)\"
read opt
echo
case \$opt in
c | C) CC;;
e | E) clear; RMEF;;
el | EL) clear; RMEF -l;;
l | L) RMLOG;;
t | T) if \$VMDLC; then VMDL; fi;;
m | M) if \$MMB; then RMMB; fi;;
r | R) reboot;;
q | Q) exit 0;;
*) OPTIONS;;
esac
break
done
echo -en \"\\n$MSGSD Press <Enter> To Continue, \\\"q <Enter>\\\" To Quit \"
read opt
[ -z \"\$opt\" ] || exit 0
echo
OPTIONS
}
OPTIONS" | tee /data/CC $MODPATH/$MODID$MIPSB/CC > /dev/null
MSSERVICE -u "rm -f /data/CC" "CC"
sed -i "s/#!\/system\/bin\/sh/#!\/sbin\/sh/g" /data/CC
SET_PERM /data/CC 0 0 0700
SET_PERM_RM -msgdi
UIP "Usage:" "Run \"su -c CC\" In Terminal On BootMode" "Or Run \"*/CC\" In Recovery Terminal"
WCANFTP "-bb"
}

IPMMFR () {
if $MAGISK; then
UCSA "Install Magisk Manager For Recovery $VIPMMFR?" "IPMMFRS" "$IDMMFR"
fi
}

IPMMFRS () {
UIP "Magisk Manager For Recovery $IAMM"
PTMFI "$IDMMFR" "mm" "$MIPSB"
$ECHO "#!/sbin/sh

MMODULES () { ls -1 \$MMFRP | grep -v 'lost+found' || echo \"$MSGSD <None>\"; }

MCHANGER () {
local input=\"\" MODULES=\"\"
local FILE=\"\$1\" PRESENT=\"\$2\" ABSENT=\"\$3\"
for MODULES in \$(MMODULES | grep -v \<None\> || :); do
echo -n \"$MSGSD \$MODULES [\"
[ -f \$MMFRP/\$MODULES/\$FILE ] && echo \"\$PRESENT]\" || echo \"\$ABSENT]\"
done
echo -en \"\\n$MSGSD Input Pattern(s) (NAME Or GBoardThemes|GBoardT|GBoa):\"
read input
echo
for MODULES in \$(MMODULES | grep -v \<None\> || :); do
if echo \$MODULES | grep -Eq \"\${input:-_noMatch_}\"; then
[ -f \$MMFRP/\$MODULES/\$FILE ] && { rm \$MMFRP/\$MODULES/\$FILE; echo \"\$MODULES [\$ABSENT]\"; } \
|| { touch \$MMFRP/\$MODULES/\$FILE; echo \"\$MODULES [\$PRESENT]\"; }
fi
done
}

MMNT () {
echo -e \"$MSGSD Status Magisk Mount\\n\"
[ -f $NVBASE/magisk.img ] && { MCHANGER auto_mount ON OFF || :; } \
|| MCHANGER skip_mount OFF ON
}

MDISABLE () {
echo -e \"$MSGSD Status ON/OFF\\n\"
MCHANGER disable OFF ON
}

MREMOVE () {
echo -e \"$MSGSD Mark For Removal ([X])\\n\"
MCHANGER remove X \" \"
}

MCORE () {
if [ \$MAGISKVC -le 20414 ]; then
if [ -f /cache/.disable_magisk ] || [ -f /data/cache/.disable_magisk ]; then
rm /data/cache/.disable_magisk /cache/.disable_magisk 2>/dev/null || :
echo \"$MSGSD Magisk Core [OFF]\"
else
touch /data/cache/.disable_magisk /cache/.disable_magisk 2>/dev/null || :
echo \"$MSGSD Magisk Core [ON]\"
fi
else
local MODULES=\"\"
if [ ! -f $NVBASE/magiskcore ]; then
for MODULES in \$(MMODULES | grep -v \<None\> || :); do
touch \$MMFRP/\$MODULES/disable
done
touch $NVBASE/magiskcore
echo \"$MSGSD Magisk Core [ON]\"
else
for MODULES in \$(MMODULES | grep -v \<None\> || :); do
rm -f \$MMFRP/\$MODULES/disable
done
rm -f $NVBASE/magiskcore
echo \"$MSGSD Magisk Core [OFF]\"
fi
fi
}

OPTIONS () {
MMFRP=$MODPATH
if [ -f /cache/.disable_magisk ] || [ -f /data/cache/.disable_magisk ] || [ -f $NVBASE/magiskcore ]; then MCS=\"[ON]\"; else MCS=\"[OFF]\"; fi
if [ -d $IPDMM ] && [ -f $IPDMM/util_functions.sh ]; then
MAGISKVC=\"\$(grep -m1 \"^MAGISK_VER_CODE=\" \"$IPDMM/util_functions.sh\")\"
elif [ -d $NVBASE/magisk ] && [ -f $NVBASE/magisk/util_functions.sh ]; then
MAGISKVC=\"\$(grep -m1 \"^MAGISK_VER_CODE=\" \"$NVBASE/magisk/util_functions.sh\")\"
else
echo -e \"$MSGSD No Magisk Installation Found Or Installed Version Is Not Supported!\\n\"
exit 1
fi
clear
echo \"$MSGSD Magisk Manager For Recovery $VIPMMFR\"
local opt=\"\"
while :; do
echo -n \"$MSGCS
$MSGSD Choose Varian:
$MSGCS
l) List Installed Modules
c) Magisk Core \$MCS
m) Mount Modules
d) Disable Modules
r) Remove Modules
q) Quit
$MSGCS
?)\"
read opt
echo
case \$opt in
l | L) echo -e \"$MSGSD Installed Modules\\n\"; MMODULES;;
c | C) MCORE;;
m | M) MMNT;;
d | D) MDISABLE;;
r | R) MREMOVE;;
q | Q) exit 0;;
*) OPTIONS;;
esac
break
done
echo -en \"\\n$MSGSD Press <Enter> To Continue, \\\"q <Enter>\\\" To Quit \"
read opt
[ -z \"\$opt\" ] || exit 0
echo
OPTIONS
}

OPTIONS" | tee /data/MMFR $MODPATH/$MODID$MIPSB/MMFR > /dev/null
sed -i "s/#!\/sbin\/sh/#!\/system\/bin\/sh/g" $MODPATH/$MODID$MIPSB/MMFR
SET_PERM /data/MMFR 0 0 0700
MMPR -v "Magisk Manager For Recovery" "$VIPMMFR" "Magisk Manager For Recovery - Usage: Run \"su -c MMFR\" In Terminal On BootMode Or Run \"*/MMFR\" In Recovery Terminal"
MSSERVICE -u "rm -f /data/MMFR" "MMFR"
SET_PERM_RM -msgdi
UIP "Usage:" "Run \"su -c MMFR\" In Terminal On BootMode" "Or Run \"*/MMFR\" In Recovery Terminal"
}

IPDETACH () {
if $MAGISK && $FINDGAPPS; then
UCSA "Install DETACH $VIPDETACH?" "IPDETACHS" "$IDDETACH"
fi
}

IPDETACHS () {
UIP "Installing DETACH $IAMM"
PTMFI "$IDDETACH" "detach3 Detach" "$MIPSB"
MMPR -v "DETACH" "$VIPDETACH" "Detach User Update Apps From Play Market - Usage: Run \"su -c DETACH\" In Terminal On BootMode"
echo "#!$MIPSB/sh

OPTIONS () {
if [ -f $STORAGE/DETACH* ]; then DETACHCFG=\"\$(find $STORAGE/DETACH*)\"; FINDDETACHCFG=true; else for f in \$(ls $STORAGE); do if [ -f $STORAGE/\$f/DETACH* ]; then DETACHCFG=\"\$(find $STORAGE/\$f/DETACH*)\"; FINDDETACHCFG=true; break; else FINDDETACHCFG=false; fi; done; fi; if [ \$FINDDETACHCFG != true ]; then echo \"com.google.android.youtube\" > $STORAGE/DETACH.conf; DETACHCFG=\"$STORAGE/DETACH.conf\"; fi
clear
echo \"$MSGSD DETACH $VIPDETACH\"
local opt=\"\"
while :; do
echo -n \"$MSGCS
$MSGSD Choose Varian:
$MSGCS
d) Detaching
l) Show DETACH List
q) Quit
$MSGCS
?)\"
read opt
echo
case \$opt in
d | D) sh $MODPATH/$MODID/service.sh;;
l | L) clear; for f in \$(cat \$DETACHCFG); do echo \"$MSGSD \$f\"; done;;
q | Q) exit 0;;
*) OPTIONS;;
esac
break
done
echo -en \"\n$MSGSD Press <Enter> To Continue, \\\"q <Enter>\\\" To Quit \"
read opt
[ -z \"\$opt\" ] || exit 0
echo
OPTIONS
}

OPTIONS" > $MODPATH/$MODID$MIPSB/DETACH

cp -f $SQLITE3 $MODPATH/$MODID

VENDINGPKG="com.android.vending"
VENDINGLIBDB="$IPDD/$VENDINGPKG/databases/library.db"
VENDINGLOCDB="$IPDD/$VENDINGPKG/databases/localappstate.db"

if $BOOTMODE; then
KEY="$((5*5))"
if [ -f $STORAGE/DETACH* ]; then DETACHCFG="$(find $STORAGE/DETACH*)"; FINDDETACHCFG=true; else for f in $(ls $STORAGE); do if [ -f $STORAGE/$f/DETACH* ]; then DETACHCFG="$(find $STORAGE/$f/DETACH*)"; FINDDETACHCFG=true; break; else FINDDETACHCFG=false; fi; done; fi; if [ $FINDDETACHCFG != true ]; then echo -e "com.google.android.youtube\ncom.google.android.apps.youtube.music\ncom.google.ar.core" > $STORAGE/DETACH.conf; DETACHCFG="$STORAGE/DETACH.conf"; fi
UIP "Disable Vending Components"
pm disable "$VENDINGPKG/com.google.android.finsky.scheduler.process.backgroundimpl.AlarmManagerServiceBackground" >&2
pm disable "$VENDINGPKG/com.google.android.finsky.rollbackmanager.RollbackReceiver" >&2
pm disable "$VENDINGPKG/com.google.android.gms.measurement.AppMeasurementReceiver" >&2
pm disable "$VENDINGPKG/com.google.android.gms.measurement.AppMeasurementJobService" >&2
pm disable "$VENDINGPKG/com.google.android.gms.measurement.AppMeasurementService" >&2
cmd appops set --uid $VENDINGPKG GET_USAGE_STATS ignore
pkill -f $VENDINGPKG
am force-stop $VENDINGPKG

if [ "`grep -v '#' $DETACHCFG`" ]; then
UIP "Detaching Packages"
while read -r PKGNAME; do
if [ ! -z "$PKGNAME" ] && [ ! "`echo $PKGNAME | grep "#"`" ]; then
UIP "Add $PKGNAME"
$SQLITE3 $VENDINGLIBDB "UPDATE ownership SET doc_type = '$KEY' WHERE doc_id = '$PKGNAME'"
$SQLITE3 $VENDINGLOCDB "UPDATE appstate SET auto_update = '2' WHERE package_name = '$PKGNAME'"
fi
done < "$DETACHCFG"
fi

if [ "`grep '#' $DETACHCFG`" ]; then
UIP "UnDetaching Packages"
while read -r PKGNAME; do
if [ ! -z "$PKGNAME" ] && [ "`echo $PKGNAME | grep "#"`" ]; then
UIP "Remove $PKGNAME"
PKGNAME="`echo $PKGNAME | cut -c 2-`"
$SQLITE3 $VENDINGLIBDB "UPDATE ownership SET doc_type = '$(($KEY/$KEY))' WHERE doc_id = '$PKGNAME'"
$SQLITE3 $VENDINGLOCDB "UPDATE appstate SET auto_update = '1' WHERE package_name = '$PKGNAME'"
fi
done < "$DETACHCFG"
fi
fi

$ECHO "#/sbin/sh
while true; do
if [ \$(getprop sys.boot_completed) -eq 1 ]; then
if [ -f $STORAGE/DETACH* ]; then DETACHCFG=\"\$(find $STORAGE/DETACH*)\"; FINDDETACHCFG=true; else for f in \$(ls $STORAGE); do if [ -f $STORAGE/\$f/DETACH* ]; then DETACHCFG=\"\$(find $STORAGE/\$f/DETACH*)\"; FINDDETACHCFG=true; break; else FINDDETACHCFG=false; fi; done; fi; if [ \$FINDDETACHCFG != true ]; then echo -e \"com.google.android.youtube\ncom.google.android.apps.youtube.music\ncom.google.ar.core\" > $STORAGE/DETACH.conf; DETACHCFG=\"$STORAGE/DETACH.conf\"; fi

SET_PERM () {
chown \$2:\$3 \$1 || return 1
chmod \$4 \$1 || return 1
CON=\$5
[ -z \$CON ] && CON=u:object_r:system_file:s0
chcon \$CON \$1 || return 1
}

SQLITE3=\"$MODPATH/$MODID/sqlite3-$ARCH\"
SET_PERM \$SQLITE3 0 2000 0755
KEY=\"\$((5*5))\"
pm disable \"$VENDINGPKG/com.google.android.finsky.scheduler.process.backgroundimpl.AlarmManagerServiceBackground\" >&2
pm disable \"$VENDINGPKG/com.google.android.finsky.rollbackmanager.RollbackReceiver\" >&2
pm disable \"$VENDINGPKG/com.google.android.gms.measurement.AppMeasurementReceiver\" >&2
pm disable \"$VENDINGPKG/com.google.android.gms.measurement.AppMeasurementJobService\" >&2
pm disable \"$VENDINGPKG/com.google.android.gms.measurement.AppMeasurementService\" >&2
cmd appops set --uid $VENDINGPKG GET_USAGE_STATS ignore
pkill -f $VENDINGPKG
am force-stop $VENDINGPKG

if [ \"\`grep -v '#' \$DETACHCFG\`\" ]; then
echo \"Detaching Packages\"
while read -r PKGNAME; do
if [ ! -z \"\$PKGNAME\" ] && [ ! \"\`echo \$PKGNAME | grep \"#\"\`\" ]; then
echo \"Add \$PKGNAME\"
\$SQLITE3 $VENDINGLIBDB \"UPDATE ownership SET doc_type = '\$KEY' WHERE doc_id = '\$PKGNAME'\"
\$SQLITE3 $VENDINGLOCDB \"UPDATE appstate SET auto_update = '2' WHERE package_name = '\$PKGNAME'\"
fi
done < \"\$DETACHCFG\"
fi

if [ \"\`grep '#' \$DETACHCFG\`\" ]; then
echo \"UnDetaching Packages\"
while read -r PKGNAME; do
if [ ! -z \"\$PKGNAME\" ] && [ \"\`echo \$PKGNAME | grep \"#\"\`\" ]; then
echo \"Remove \$PKGNAME\"
PKGNAME=\"\`echo \$PKGNAME | cut -c 2-\`\"
\$SQLITE3 $VENDINGLIBDB \"UPDATE ownership SET doc_type = '\$((\$KEY/\$KEY))' WHERE doc_id = '\$PKGNAME'\"
\$SQLITE3 $VENDINGLOCDB \"UPDATE appstate SET auto_update = '1' WHERE package_name = '\$PKGNAME'\"
fi
done < \"\$DETACHCFG\"
fi
break
fi
done" > $MODPATH/$MODID/service.sh

SET_PERM_RM -msgdi
UIP "Usage:" "Run \"su -c DETACH\" In Terminal On BootMode"
}

IPLSPOSEDR () {
if $MAGISK && $ZYGISK && [ "$ASDK" -ge 27 ]; then
UCSA "Install LSPosed Zygisk $VIPLSPOSEDZ?" "IPLSPOSEDS" "$IDLSPOSEDZ"
fi
}

IPLSPOSEDS () {
UIP "Installing LSPosed Zygisk $IAMM"
PTMFI "$IDLSPOSEDZ" "riru_lsposed riru_edxpose" "/zygisk"
UZTPN "LSPosed"
UIP "Copy arm Libraries"
cp -f $TMPDIR/LSPosed/$MODID$MIPSL/liblspd.so $MODPATH/$MODID/zygisk/armeabi-v7a.so
cp -rf $TMPDIR/LSPosed/$MODID$MIPSFW $MODPATH/$MODID
if [ "$ARCH" = "arm64" ]; then
UIP "Copy arm64 Libraries"
cp -f $TMPDIR/LSPosed/$MODID$MIPSL64/liblspd.so $MODPATH/$MODID/zygisk/arm64-v8a.so
fi
if [ "$ASDK" -ge 29 ]; then
UIP "Copy dex2oat Binaries"
cp -rf $TMPDIR/LSPosed/bin $MODPATH/$MODID
UIP "Patching Binaries"
DEV_PATH=$(tr -dc 'a-f0-9' < /dev/urandom | head -c 16)
while [ -d "/dev/$DEV_PATH" ]; do
DEV_PATH=$(tr -dc 'a-f0-9' < /dev/urandom | head -c 16)
done
sed -i "s/placeholder_\/dev\/................/placeholder_\/dev\/$DEV_PATH/" "$MODPATH/$MODID/bin/dex2oat32"
sed -i "s/placeholder_\/dev\/................/placeholder_\/dev\/$DEV_PATH/" "$MODPATH/$MODID/bin/dex2oat64"
else
echo "dalvik.vm.dex2oat-flags=--inline-max-code-units=0" > $MODPATH/$MODID/system.prop
fi
touch $MODPATH/$MODID/update
echo "#!$MIPSB/sh

dir=\${0%/*}
magiskPath=\$(magisk --path)
tmpLspdApk=\"$IPDLTMP/daemon.apk\"
debug=false

if [ -r \$tmpLspdApk ]; then
java_options=\"-Djava.class.path=\$tmpLspdApk\"
java_options=\"\$java_options -Dlsp.library.path=/data/local/tmp\"
debug=\"true\"
else
java_options=\"-Djava.class.path=\$dir/daemon.apk\"
java_options=\"\$java_options -Dlsp.library.path=\$dir\"
fi

if [ \$debug = \"true\" ]; then
os_version=\$(getprop ro.build.version.sdk)
if [ \"\$os_version\" -eq \"27\" ]; then
java_options=\"\$java_options -Xrunjdwp:transport=dt_android_adb,suspend=n,server=y -Xcompiler-option --debuggable\"
elif [ \"\$os_version\" -eq \"28\" ]; then
java_options=\"\$java_options -XjdwpProvider:adbconnection -XjdwpOptions:suspend=n,server=y -Xcompiler-option --debuggable\"
else
java_options=\"\$java_options -XjdwpProvider:adbconnection -XjdwpOptions:suspend=n,server=y\"
fi
fi

mount tmpfs -t tmpfs $IPDRESC

if [ ! -S \"/dev/socket/zygote\" ]; then
timeout 0.5 inotifyd - /dev/socket:near | while read -r line; do
\$debug && log -p v -t \"LSPosed\" \"inotify: \$line\"
if [ -S \"/dev/socket/zygote\" ]; then
\$debug && log -p v -t \"LSPosed\" \"zygote started\"
touch /dev/socket&
exit
fi
done
fi
\$debug && log -p d -t \"LSPosed\" \"start zygisk daemon \$*\"

exec $MIPSB/app_process \$java_options $MIPSB --nice-name=lspd org.lsposed.lspd.Main \"\$@\" >/dev/null 2>&1" > $MODPATH/$MODID/daemon
MMPR -vcuj "Zygisk - LSPosed" "$VIPLSPOSEDZ" "$VCIPLSPOSEDZ" "LSPosed Developers" "Another enhanced implementation of Xposed Framework. Supports Android 8.1 ~ 13. Requires Magisk 24.0+ and Zygisk enabled." "https://lsposed.github.io/LSPosed/release/zygisk.json"
echo "#!$MIPSB/sh
MODDIR=\${0%/*}
rm -f \"$IPDLTMP/daemon.apk\"
cd \"\$MODDIR\"
unshare -m sh -c \"\$MODDIR/daemon \$@&\"" > $MODPATH/$MODID/post-fs-data.sh
echo "#!$MIPSB/sh
MODDIR=\${0%/*}
cd \"\$MODDIR\"
unshare -m \"\$MODDIR/daemon\" --from-service \"\$@\"&" > $MODPATH/$MODID/service.sh
MSSERVICE -uc "if [ ! -d \"$MODPATH/zygisk_lsposed\" ]; then pm uninstall -k --user 0 org.lsposed.manager; rm -rf $NVBASE/lspd $NVBASE/riru/modules/lspd $SERVICED/LSP.sh; break; else break; fi" "LSP"
UIP "Installing LSPosed Manager"
if $BOOTMODE; then
pm install -r $TMPDIR/LSPosed/manager.apk >/dev/null
else
mkdir -p $MODPATH/$MODID$MIPSA/LSPosedManager
cp -f $TMPDIR/LSPosed/manager.apk $MODPATH/$MODID$MIPSA/LSPosedManager/LSPosedManager.apk
fi
mkdir -p $NVBASE/lspd
cp -f $TMPDIR/LSPosed/manager.apk $NVBASE/lspd
cp -f $TMPDIR/LSPosed/daemon.apk $MODPATH/$MODID
SET_PERM_RM -msgdi
}

} #

{ #Other: FA/LED/FSFM/UAA/SBU/GASL

IPFPA () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/pfpm ]; then
UIP -s "$MSGFI Fingerprint Actions, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
BUCKUPER -r "$IPSUKL/uinput-fpc.kl $IPSUKL/uinput-gf.kl $IPSUKL/uinput-goodix.kl $IPVUKL/uinput-fpc.kl $IPVUKL/uinput-gf.kl $IPVUKL/uinput-goodix.kl"
UIP "$MSGDRM"
fi
else
if [ -f $IPSUKL/uinput-fpc.kl ] || [ -f $IPSUKL/uinput-gf.kl ] || [ -f $IPSUKL/uinput-goodix.kl ] || [ -f $IPVUKL/uinput-fpc.kl ] || [ -f $IPVUKL/uinput-gf.kl ] || [ -f $IPVUKL/uinput-goodix.kl ]; then
UCSA -ent "Install Fingerprint Actions $VIPFPA?" "IPFPAS" "$IDFPA"
fi
fi
}

IPFPAS () {
MSGPF=true
for NAMEKEYFUNCTION in "POWER" "WAKEUP" "HOME" "MUSIC" "CAMERA" "EXPLORER" "BACK" "MENU" "APP_SWITCH" "MEDIA_PLAY_PAUSE" "VOICE_ASSIST" "CALENDAR" "CALL" "CONTACTS" "CALCULATOR" "ENDCALL" "HEADSETHOOK" "ENVELOPE"; do
MSGPFA="$MSGNIS"
case $NAMEKEYFUNCTION in
"POWER") APF="Button Power";; "WAKEUP") APF="Action Wake Up";; "HOME") APF="Action Home";; "MUSIC") APF="Launch Music Player";; "CAMERA") APF="Launch Camera";; "EXPLORER") APF="Launch Explorer";; "BACK") APF="Action Back";; "MENU") APF="Action Menu";; "APP_SWITCH") APF="Action App Switch/Recent/Split Screen";; "MEDIA_PLAY_PAUSE") APF="Action Media Play/Pause";; "VOICE_ASSIST") APF="Launch Voice Assistant";; "CALENDAR") APF="Launch Calendar";; "CALL") APF="Launch Dialer";; "CONTACTS") APF="Launch Contacts";; "CALCULATOR") APF="Launch Calculator";; "ENDCALL") APF="End Call";; "HEADSETHOOK") APF="Play/Pause/Open Music Player/End Call";; "ENVELOPE") APF="Launch Gmail/Mail" MSGPFA="$MSGNUS";; *) APF=false;;
esac
if $MSGPF; then
UIP -s "Choose Fingerprint Action Variant"
MSGPF=false
else
MSGCS
fi
UIP "$APF" "$MSGVU Yes" "$MSGVD No $MSGPFA"
if KEYCHOOSE; then
FINGERVARIANT=true
break
else
FINGERVARIANT=false
fi
done
if $FINGERVARIANT; then
UIP "Installing Fingerprint Actions $IAMM"
mkdir -p $TMPDIR/FingerprintActions$MIPSVUKL $TMPDIR/FingerprintActions$MIPSUKL
for kln in fpc gf goodix; do
if [ -f $MAGISKMP$IPSUKL/uinput-$kln.kl ]; then cp -f $MAGISKMP$IPSUKL/uinput-$kln.kl $TMPDIR/FingerprintActions/$MIPSUKL; sed -i "/96/d;/102/d" $TMPDIR/FingerprintActions/$MIPSUKL/uinput-$kln.kl; echo -e "key 96 $NAMEKEYFUNCTION\nkey 102 $NAMEKEYFUNCTION" >> $TMPDIR/FingerprintActions/$MIPSUKL/uinput-$kln.kl; fi
if [ -f $MAGISKMP$IPVUKL/uinput-$kln.kl ]; then cp -f $MAGISKMP$IPVUKL/uinput-$kln.kl $TMPDIR/FingerprintActions/$MIPSVUKL; sed -i "/96/d;/102/d" $TMPDIR/FingerprintActions/$MIPSVUKL/uinput-$kln.kl; echo -e "key 96 $NAMEKEYFUNCTION\nkey 102 $NAMEKEYFUNCTION" >> $TMPDIR/FingerprintActions/$MIPSVUKL/uinput-$kln.kl; fi
done
if $MAGISK; then
PTMFI -nmp "$IDFPA"
cp -rf $TMPDIR/$MODID/* $MODPATH/$MODID
MMPR -v "Fingerprint Actions" "$VIPFPA" "This Module Makes The Fingerprint Scanner Work Like The Power Button/Lock/Unlock The Screen/Reboot Menu With A Long Press/etc - Set On: $NAMEKEYFUNCTION"
else
BUCKUPER -s "$IPSUKL/uinput-fpc.kl $IPSUKL/uinput-gf.kl $IPSUKL/uinput-goodix.kl $IPVUKL/uinput-fpc.kl $IPVUKL/uinput-gf.kl $IPVUKL/uinput-goodix.kl"
cp -f $TMPDIR/FingerprintActions$MIPSVUKL/* $IPSUKL; cp -f $TMPDIR/FingerprintActions$MIPSUKL/* $IPVUKL
touch $AIOPFMDPH/pfpm
fi
MOVERPATH
SET_PERM_RM -msgdi
fi
}

IPLEDLO () {
if $MAGISK; then
if [ -f $LEDMBRED ] || [ -f $LEDMBGREEN ] || [ -f $LEDMBBLUE ] || [ -f $LEDMBWHITE ]; then
UCSA "Install LED Light Off $VIPLEDLO?" "IPLEDLOS" "$IDLEDLO"
fi
fi
}

IPLEDLOS () {
UIP "Installing LED Light Off $IAMM"
PTMFI -np "$IDLEDLO" "$IDLEDLA ChargingLedLightOff ChargingLEDLightOff"
echo "$LEDLSC; echo \"0\" | tee $LEDMBRED $LEDMBGREEN $LEDMBBLUE $LEDMBWHITE" > $MODPATH/$MODID/service.sh
MMPR -v "LED Light Off" "$VIPLEDLO" "LED Light Off"; SET_PERM_RM -msgdi
}

IPLEDLA () {
if $MAGISK; then
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ] || [ -f $FLASHLIGHT ] || [ -f $BUTTONBACKLIGHT ]; then
UCSA -ent "Install LED Light Animation $VIPLEDLA?" "IPLEDLAS" "$IDLEDLA"
fi
fi
}

IPLEDLAS () {

LEDSTANDART="if [ -f $LEDWHITE ]; then
ANIMSPEED=\"0 1 2 3 4 5 6 7 8 9 10 9 8 7 6 5 4 3 2 1 0\"
ANIMCOUNT=\"\$(seq 10)\"
elif [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ]; then
ANIMSPEED=\"0 1 0 0 1 0 0 1 0\"
ANIMCOUNT=\"\$(seq 10)\"
fi"

mkdir -p $TMPDIR/LEDLightAnimation
echo "$LEDLSC
$LEDSTANDART
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
if [ -f $LEDWHITE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDWHITE $FLASHLIGHT $BUTTONBACKLIGHT
fi
if [ -f $LEDRED ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDRED $FLASHLIGHT $BUTTONBACKLIGHT
fi
if [ -f $LEDGREEN ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDGREEN $FLASHLIGHT $BUTTONBACKLIGHT
fi
if [ -f $LEDBLUE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDBLUE $FLASHLIGHT $BUTTONBACKLIGHT
fi
done
done" > $TMPDIR/LEDLightAnimation/serviceledflashbutton.sh

echo "$LEDLSC
$LEDSTANDART
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
if [ -f $LEDWHITE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDWHITE $FLASHLIGHT
fi
if [ -f $LEDRED ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDRED $FLASHLIGHT
fi
if [ -f $LEDGREEN ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDGREEN $FLASHLIGHT
fi
if [ -f $LEDBLUE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDBLUE $FLASHLIGHT
fi
done
done" > $TMPDIR/LEDLightAnimation/serviceledflash.sh

echo "$LEDLSC
$LEDSTANDART
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
if [ -f $LEDWHITE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDWHITE $BUTTONBACKLIGHT
fi
if [ -f $LEDRED ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDRED $BUTTONBACKLIGHT
fi
if [ -f $LEDGREEN ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDGREEN $BUTTONBACKLIGHT
fi
if [ -f $LEDBLUE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDBLUE $BUTTONBACKLIGHT
fi
done
done" > $TMPDIR/LEDLightAnimation/serviceledbutton.sh

echo "$LEDLSC
$LEDSTANDART
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
if [ -f $LEDWHITE ]; then
sleep 0.1
echo \$ADDSTRING > $LEDWHITE
elif [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ]; then
sleep 0.1
echo \$ADDSTRING > $LEDRED
sleep 0.1
echo \$ADDSTRING > $LEDGREEN
sleep 0.1
echo \$ADDSTRING > $LEDBLUE
fi
done
done" > $TMPDIR/LEDLightAnimation/serviceled.sh

echo "$LEDLSC
ANIMSPEED=\"0 1 0 0 0 1 0 0 0 1 0\"
ANIMCOUNT=\"\$(seq 10)\"
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
sleep 0.1
echo \$ADDSTRING | tee $FLASHLIGHT $BUTTONBACKLIGHT
done
done" > $TMPDIR/LEDLightAnimation/serviceflashbutton.sh

echo "$LEDLSC
ANIMSPEED=\"0 1 0 0 0 1 0 0 0 1 0\"
ANIMCOUNT=\"\$(seq 10)\"
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
sleep 0.1
echo \$ADDSTRING > $FLASHLIGHT
done
done" > $TMPDIR/LEDLightAnimation/serviceflash.sh

echo "$LEDLSC
ANIMSPEED=\"0 1 0 0 1 0 0 1 0\"
ANIMCOUNT=\"\$(seq 10)\"
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
sleep 0.1
echo \$ADDSTRING > $BUTTONBACKLIGHT
done
done" > $TMPDIR/LEDLightAnimation/servicebutton.sh

UIP -s "Test Or Flash?" "$MSGVU Test" "$MSGVD Flash"
if KEYCHOOSE; then TEST=true; else TEST=false; fi
PTMFI -np "$IDLEDLA" "$IDLEDLO"
UIP -s "Choose Animation Variant"
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ]; then
UIP "(Only LED)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/serviceled.sh
UIP -s "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if KEYCHOOSE; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/serviceled.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/serviceled.sh $MODPATH/$MODID/service.sh
fi
fi

if [ $ANIMATIONVARIANT != true ]; then
if [ -f $FLASHLIGHT ]; then
UIP -s "(Only Flash)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/serviceflash.sh
UIP -s "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if KEYCHOOSE; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/serviceflash.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/serviceflash.sh $MODPATH/$MODID/service.sh
fi
fi
fi

if [ $ANIMATIONVARIANT != true ]; then
if [ -f $BUTTONBACKLIGHT ]; then
UIP -s "(Only Buttons)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/servicebutton.sh
UIP -s "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if KEYCHOOSE; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/servicebutton.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/servicebutton.sh $MODPATH/$MODID/service.sh
fi
fi
fi

if [ $ANIMATIONVARIANT != true ]; then
if [ -f $FLASHLIGHT ]; then
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ]; then
UIP -s "(LED And Flash)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/serviceledflash.sh
UIP -s "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if KEYCHOOSE; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/serviceledflash.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/serviceledflash.sh $MODPATH/$MODID/service.sh
fi
fi
fi
fi

if [ $ANIMATIONVARIANT != true ]; then
if [ -f $FLASHLIGHT ] && [ -f $BUTTONBACKLIGHT ]; then
UIP -s "(Flash And Buttons)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/serviceflashbutton.sh
UIP -s "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if KEYCHOOSE; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/serviceflashbutton.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/serviceflashbutton.sh $MODPATH/$MODID/service.sh
fi
fi
fi

if [ $ANIMATIONVARIANT != true ]; then
if [ -f $BUTTONBACKLIGHT ]; then
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ]; then
UIP -s "(LED And Buttons)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if KEYCHOOSE; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/serviceledbutton.sh
UIP -s "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if KEYCHOOSE; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/serviceledbutton.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/serviceledbutton.sh $MODPATH/$MODID/service.sh
fi
fi
fi
fi

if [ $ANIMATIONVARIANT != true ]; then
if [ -f $FLASHLIGHT ] && [ -f $BUTTONBACKLIGHT ]; then
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ]; then
UIP -s "(LED, Flash, Buttons)" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/serviceledflashbutton.sh
UIP -s "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if KEYCHOOSE; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/serviceledflashbutton.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/serviceledflashbutton.sh $MODPATH/$MODID/service.sh
fi
fi
fi
fi

if $ANIMATIONVARIANT; then
UIP "Installing LED Light Animation $IAMM"
MMPR -v "LED Light Animation" "$VIPLEDLA" "LED Light Animation At Boot Time"
SET_PERM_RM -msgdi
else
REMOVER -mm "$MODID"
fi
}

IPFSLFM () {
if $MAGISK && [ $BOOTMODE != true ] && $MIUI; then
UCSA "Install Fix Softloop For Miui (If DPI 800+) $VIPFSLFM?" "IPFSLFMS" "$IDFSLFM"
fi
}

IPFSLFMS () {
UIP "Installing Fix Softloop For Miui $IAMM"
PTMFI -nmp "$IDFSLFM"
MSSERVICE -s "wm density reset; rm -rf $MODPATH/$MODID"
MMPR -v "Fix Softloop For Miui" "$VIPFSLFM" "Fix Softloop For Miui If DPI 800+"; SET_PERM_RM -msgdi
}

UFAAPP () {
if [ $BOOTMODE != true ]; then
if [ -f $IPDS/packages.xml ] || [ -f $IPDSU/package-restrictions.xml ]; then
UCSA "Unfreeze All Applications (If Frozen)?" "UFAAPPS"
fi
fi
}

UFAAPPS () {
UIP "Defrosting All Applications" "Patching $IPDS/packages.xml"
sed -i 's/enabled="false"/enabled="true"/g' $IPDS/packages.xml
sed -i 's/enabled="2"/enabled="1"/g' $IPDS/packages.xml
sed -i 's/enabled="3"/enabled="1"/g' $IPDS/packages.xml
UIP "Patching $IPDSU/package-restrictions.xml"
sed -i 's/enabled="2"/enabled="1"/g' $IPDSU/package-restrictions.xml
sed -i 's/enabled="3"/enabled="1"/g' $IPDSU/package-restrictions.xml
UIP "Defrosting Done"
}

SBATTERYUSAGE () {
if [ -f /sys/class/power_supply/battery/charge_full_design ] || [ -f /sys/class/power_supply/battery/constant_charge_current_max ]; then
UCSA "Show Battery Usage?" "SBATTERYUSAGES"
fi
}

SBATTERYUSAGES () {
cat /sys/class/power_supply/battery/uevent >> $TMPDIR/battery.stat
BATTERYREMAINING="$(GET_FILE_PROP -s "$TMPDIR/battery.stat" "POWER_SUPPLY_CHARGE_FULL")"
if [ -f /sys/class/power_supply/battery/charge_full_design ]; then
CURRENTMAXMAH="$(GET_FILE_PROP -s "$TMPDIR/battery.stat" "POWER_SUPPLY_CHARGE_FULL_DESIGN")"
elif [ -f /sys/class/power_supply/battery/constant_charge_current_max ]; then
CURRENTMAXMAH="$(GET_FILE_PROP -s "$TMPDIR/battery.stat" "POWER_SUPPLY_CONSTANT_CHARGE_CURRENT_MAX")"
fi
let LOSTMAH=$CURRENTMAXMAH-$BATTERYREMAINING; let LOSTMAHALT=$CURRENTMAXMAH"000"-$BATTERYREMAINING
MAHATTHEMOMENT="$(GET_FILE_PROP -s "$TMPDIR/battery.stat" "POWER_SUPPLY_CHARGE_COUNTER")"
MAHATTHEMOMENTCAPACITY="$(GET_FILE_PROP -s "$TMPDIR/battery.stat" "POWER_SUPPLY_CAPACITY")"
BATTERYCHARGECYCLE="$(GET_FILE_PROP -s "$TMPDIR/battery.stat" "POWER_SUPPLY_CYCLE_COUNT")"
UIP "Battery Remaining: $BATTERYREMAINING" "Lost mAh: $LOSTMAH Or $LOSTMAHALT" "mAh & % At The Moment: $MAHATTHEMOMENT ($MAHATTHEMOMENTCAPACITY%)" "Battery Charge Cycle: $BATTERYCHARGECYCLE"
}

GASL () {
if $BOOTMODE; then
UCSA "Get All Settings List?" "GASLS"
fi
}

GASLS () {
UIP "Getting All System List..."
settings list system > $STORAGE/SystemList.sh
UIP "Getting All Secure List..."
settings list secure > $STORAGE/SecureList.sh
UIP "Getting All Global List..."
settings list global > $STORAGE/GlobalList.sh
UIP "Done"
}

} #

{ #Tweaks: FGS/BP/KL/UGMSD/USGP/VS

IPFGS () {
if $MAGISK; then
if $BOOTMODE; then
UCSA "Run Or Install Force Google Sync?" "IPFGSS" "$IDFGS"
else
UCSA "Install Force Google Sync $VIPFGS?" "IPFGSS" "$IDFGS"
fi
fi
}

IPFGSS () {
if $BOOTMODE; then
UIP "Force Google Sync In Progress, Wait..."
bmgr run >/dev/null
UIP "Running Incremental Backup For Requested Packages"
bmgr backupnow appdata >/dev/null
UIP "Running Incremental Backup For All Packages"
bmgr backupnow --all >/dev/null
UIP "Force Google Sync Done" "Check The Settings, After A Couple Of Minutes Everything Is In Sync"
UIP -s "Install Force Google Sync $VIPFGS?" "$MSGVU Yes" "$MSGVD No $MSGNUS" "$IDFGS"
fi
if KEYCHOOSE || [ $BOOTMODE != true ]; then
UIP "Installing Force Google Sync After Boot $IAMM"
PTMFI -nmp "$IDFGS"
MSSERVICE -s "bmgr run; bmgr backupnow appdata; bmgr backupnow --all"
MMPR -v "Force Google Sync" "$VIPFGS" "Force Google Sync After Boot"; SET_PERM_RM -msgdi
fi
}

IPFEG () {
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Force Gestures $VIPFEG?" "IPFEGS" "$IDFEG"
fi
}

IPFEGS () {
UIP "Installing Force Gestures $IAMM"
PTMFI -nmp "$IDFEG"
MSSERVICE -s "cmd overlay enable com.android.internal.systemui.navbar.gestural"
MMPR -v "Force Gestures" "$VIPFEG" "Force Gestures - If The Gesture Selection Item Disappeared After Installing Other Launchers Or Forced Hiding Gestures"; SET_PERM_RM -msgdi
}

IPHAP () {
if $MAGISK && [ "$ASDK" -ge 30 ]; then
UCSA "Install Enabling Hidden Api Policy $VIPHAP?" "IPHAPS" "$IDHAP"
fi
}

IPHAPS () {
UIP "Installing Enabling Hidden Api Policy $IAMM"
PTMFI -nmp "$IDHAP"
if $BOOTMODE; then UIP "Enabling Hidden Api Policy Right Now"; $SPGLOBAL hidden_api_policy 1; $SPGLOBAL hidden_api_policy_pre_p_apps 1; $SPGLOBAL hidden_api_policy_p_apps 1; fi
MSSERVICE -s "$SPGLOBAL hidden_api_policy 1; $SPGLOBAL hidden_api_policy_pre_p_apps 1; $SPGLOBAL hidden_api_policy_p_apps 1"
MMPR -v "Enabling Hidden Api Policy" "$VIPHAP" "Enabling Hidden Api Policy"; SET_PERM_RM -msgdi
}

IPAFUS () {
if $MAGISK && [ "$ASDK" -le 28 ] && CHECKER -sp "$XMLSECURE" "install_non_market_apps"; then UCSA "Force Install Apps From Unknown Sources $VIPAFUS?" "IPAFUSS" "$IDAFUS"; fi
}

IPAFUSS () {
UIP "Installing AIOAFUS $IAMM"
if $BOOTMODE; then UIP "Enabling Install Apps From Unknown Sources Right Now"; $SPSECURE install_non_market_apps 1; fi
PTMFI -nmp "$IDAFUS"
MSSERVICE -s "$SPSECURE install_non_market_apps 1"
MMPR -v "Allow Installation Of Apps From Unknown Sources" "$VIPAFUS" "Force Allow Installation Of Apps From Unknown Sources"; SET_PERM_RM -msgdi
}

IPBPT () {
UCSA "Install Build Prop Tweaks $VIPBPT?" "IPBPTS" "$IDBPT"
}

IPBPTS () {
UIP "Installing Build Prop Tweaks $IAMM"
if $MAGISK; then
PTMFI -nmp "$IDBPT"
MMPR -v "Build Prop Tweaks" "$VIPBPT" "Build Prop Tweaks: Enable 4K in YouTube, Animation AOD & LS Fix, Disable Safemedia & Force Fake Encryption"; IPBPT="$MODPATH/$MODID/system.prop"
else
BUCKUPER -bp "$IPSBP"; IPBPT="$IPSBP"
fi

echo "# Enable 4K in YouTube
sys.display-size=3840x2160

# Animation AOD & LS Fix
debug.force_no_blanking=true

# Disable Safemedia
audio.safemedia.bypass=true
persist.audio.safemedia.bypass=true
persist.vendor.audio.safemedia.bypass=true
vendor.audio.safemedia.bypass=true

# Force Fake Encryption
ro.crypto.state=encrypted" >> $IPBPT
SET_PERM_RM -msgdi
}

IPKL () {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/killlogger ]; then
UIP -s "$MSGFI Kill Logger, Remove?" "$MSGVU Yes $MSGEEFTC" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Restore Stock Files"
RSKL=$(ls $AIOPFMDPH/KL/bin)
cp -f $AIOPFMDPH/KL/bin/* $IPSB
for f in $RSKL; do chmod 0777 $IPSB/$f; done
RSKL=$(ls $AIOPFMDPH/KL/init)
cp -f $AIOPFMDPH/KL/init/* $IPSEI
for f in $RSKL; do chmod 0777 $IPSEI/$f; done
rm -rf $AIOPFMDPH/KL $AIOPFMDPH/killlogger
UIP "$MSGDRS"
fi
else
UCSA "Install Kill Logger $VIPKL?" "IPKLS" "$IDKL"
fi
}

IPKLS () {
KLLOGCAT=false
if [ -f $IPSB/logcat ]; then UIP -s "You Need logcat?" "$MSGVU Yes, Need" "$MSGVD No Need"; if KEYCHOOSE; then :; else KLLOGCAT=true; fi
UIP "Installing Kill Logger $IAMM"
if $MAGISK; then
PTMFI "$IDKL" "killlogger killlogger++" "$MIPSB $MIPSEI"
MMPR -vc "KillLogger" "$VIPKL" "$VCIPKL" "mrfrost475" "This Module Deletes The Files Responsible For The Dump, Logcat, And Bug Reports Also Prescribes Logcat Ban In build.prop"
KLIPP=$MODPATH/$MODID/system.prop
if CHECKER -sp "$XMLGLOBAL" "activity_starts_logging_enabled dropbox_max_files"; then MSSERVICE "$SPGLOBAL dropbox_max_files 1; $SPGLOBAL activity_starts_logging_enabled 1; echo \"1\" > /sys/block/mmcblk0/queue/iostats; echo \"1\" > /sys/block/mmcblk1/queue/iostats" "$SPGLOBAL dropbox_max_files 0; $SPGLOBAL activity_starts_logging_enabled 0; echo \"0\" > /sys/block/mmcblk0/queue/iostats; echo \"0\" > /sys/block/mmcblk1/queue/iostats" "KL"; fi
else
BUCKUPER -bp "$IPSBP"; KLIPP=$IPSBP; touch $AIOPFMDPH/killlogger
fi
UIP "Create Daemons Dummy Files In $MIPSB"
if $KLLOGCAT; then if $MAGISK; then echo '' > $MODPATH/$MODID$MIPSB/logcat; else mkdir -p $AIOPFMDPH/KL; cp -f $IPSB/logcat $AIOPFMDPH/KL; echo '' > $IPSB/logcat; fi; fi; fi

KLDL="
DumpSystemInfo
aee_dumpstate
atrace
bugreport
bugreportz
cnss_diag
cplog
crash_dump32
crash_dump64
dataLogDaemon
debuggerd
debuggerd64
dexdump
dexoptanalyzer
diag_socket_log
dmesg
dmlog
dumpkmap
dumpleases
dumpstate
emdlogger1
emdlogger2
emdlogger3
emdlogger5
hcidump
hexdump
i2cdump
klogd
lastlog.sh
log
log_ctr
log_service
logd
logger
loggerlauncher
logname
logread
logwrapper
lpdump
lpdumpd
mdlogger
memorydumper
minidumpd
mobile_log_d
nanddump
notify_traceur.sh
oatdump
outdump
setlogcons
subsystem_ramdump
svlogd
tcpdump
tombstoned
trace.sh
traced
traced_probes
traceroute
traceroute6
wpdiagd
xlog
ylog
ylogbox
ylogctl
ylogdebug.sh
ylogkat
"
for kll in $KLDL; do if [ -f $IPSB/$kll ]; then if $MAGISK; then touch $MODPATH/$MODID$MIPSB/$kll; else mkdir -p $AIOPFMDPH/KL/bin; cp -f $IPSB/$kll $AIOPFMDPH/KL/bin; echo '' > $IPSB/$kll; fi; fi; done

KLDL="
atrace.rc
atrace_userdebug.rc
bugreport.rc
dataLogDaemon.rc
debuggerd.rc
debuggerd64.rc
dumpstate.rc
emdlogger1.rc
emdlogger2.rc
emdlogger5.rc
log_service.rc
logd.rc
lpdumpd.rc
mdlogger.rc
mobile_log_d.rc
modemlog_connmgr_service.rc
slogmodem.rc
tombstoned.rc
traceur.rc
ylog.rc
"
for kll in $KLDL; do if [ -f $IPSEI/$kll ]; then if $MAGISK; then touch $MODPATH/$MODID$MIPSEI/$kll; else mkdir -p $AIOPFMDPH/KL/init; cp -f $IPSEI/$kll $AIOPFMDPH/KL/init; echo '' > $IPSEI/$kll; fi; fi; done

UIP "Clearing All Logs"
KLRML="
$IPDM/Stats-data
$IPDS/dropbox
$IPDS/graphicsstats
$IPDS/log-files.xml
$IPDS/procstats
$IPDS/syncmanager-log
$IPDS/usagestats
$IPDSUDE/0/com.android.shell/files/bugreports
$STORAGE/MIUI/.debug_log
$STORAGE/mtklog
/data/anr
/data/log
/data/log_other_mode
/data/tombstones
/dev/log
"
for kll in $KLRML; do if [ -d $kll ]; then UIP "Found Logs In $kll"; rm -rf $kll; elif [ -f $kll ]; then UIP "Found $kll"; rm -f $kll; fi; done
if $MIUI; then touch $STORAGE/MIUI/debug_log; fi
echo -e "\n# KillLogger
av.debug.disable.pers.cache=true
config.disable_rtt=true
dalvik.vm.checkjni=false
dalvik.vm.verify-bytecode=false
db.log.slow_query_threshold=0
debug.egl.profiler=0
debug.enable.gamed=0
debug.enable.wl_log=0
debug.hwc.otf=0
debug.hwc_dump_en=0
debug.qualcomm.sns.daemon=0
debug.qualcomm.sns.hal=0
debug.qualcomm.sns.libsensor1=0
debug.sf.ddms=0
debug.sf.disable_backpressure=1
debug.sf.dump=0
debug.sf.gpu_comp_tiling=0
debug.sf.recomputecrop=0
debug_test=0
debugtool.anrhistory=0
hwui.use_gpu_pixel_buffers=false
libc.debug.malloc=0
live.logcat=disable
log.cffdump=0
log.cffdump_no_memzero=0
log.cffdump_with_ifh=0
log.dumpx=0
log.pm4=0
log.pm4mem=0
log.primitives=0
log.resolves=0
log.sc_dev=0
log.shaders=0
log.tag.EDEN=OFF
log.tag.NPUC=OFF
log_ao=0
log_audiodecnode=0
log_audiooutput=0
log_basedecnode=0
log_datapath=0
log_fps_interval=0
log_frame_info=0
log_metadatadriver=0
log_mp4dectime=0
log_mp4parsernode=0
log_omxmp4=0
log_outputnode=0
log_outputnodeinputport=0
log_playerdriver=0
log_playerengine=0
log_posttime=0
log_profile=0
log_surfaceoutput=0
log_videodecnode=0
logcast.live=disable
logcat.live=disable
media.stagefright.log-uri=0
net.ipv4.tcp_no_metrics_save=1
persist.android.strictmode=0
persist.brcm.cp_crash=none
persist.brcm.log=none
persist.data.qmi.adb_logmask=0
persist.debug.sensors.hal=0
persist.debug.wfd.enable=0
persist.ims.disableDebugLogs=1
persist.ims.disableIMSLogs=0
persist.ims.disableQXDMLogs=0
persist.ims.disabled=1
persist.ims.enableADBLogs=0
persist.ims.enableDebugLogs=0
persist.oem.dump=0
persist.sys.dun.override=0
persist.sys.offlinelog.kernel=1
persist.sys.offlinelog.logcat=1
persist.vendor.ssr.enable_ramdumps=0
profiler.debugmonitor=false
profiler.force_disable_err_rpt=1
profiler.force_disable_ulog=1
profiler.hung.dumpdobugreport=false
ro.config.nocheckin=1
ro.debuggable=0
ro.kernel.android.checkjni=0
ro.kernel.checkjni=0
ro.kernel.qemu.gles=0
ro.logd.size=0
ro.sf.battery.log.enabled=0
ro.sf.battery_log=0
rw.logger=0
sdm.debug.disable_inline_rotator=1
sdm.debug.disable_skip_validate=1
sys.games.gt.prof=1
sys.hwc.gpu_perf_mode=0
vidc.debug.level=0" >> $KLIPP
SET_PERM_RM -msgdi
}

IPFMSAAS () {
UCSA "Install Force 4X MSAA Switcher $VIPFMSAAS?" "IPFMSAASS" "$IDFMSAAS"
}

IPFMSAASS () {
UIP "Installing Force 4X MSAA Switcher $IAMM"
if $MAGISK; then
PTMFI -nmp "$IDFMSAAS"
echo "debug.egl.force_msaa=true" > $MODPATH/$MODID/system.prop
MMPR -v "Force MSAA Switcher" "$VIPFMSAAS" "Force 4X MSAA Switcher In Developer Settings After ReBoot"
else
BUCKUPER -bp "$IPSBP"
echo -e "\n# Force 4X MSAA Switcher\ndebug.egl.force_msaa=true" >> $IPSBP
fi
SET_PERM_RM -msgdi
}

IPFDHWO () {
if $MAGISK; then
UCSA "Install Force Disable HW Overlays $VIPFDHWO?" "IPFDHWOS" "$IDFDHWO"
fi
}

IPFDHWOS () {
UIP "Installing Force Disable HW Overlays $IAMM"
PTMFI -nmp "$IDFDHWO"
MSSERVICE -s "service call SurfaceFlinger 1008 i32 1"
MMPR -v "Force Disable HW Overlays" "$VIPFDHWO" "Force Disable HW Overlays In Developer Settings After ReBoot"; SET_PERM_RM -msgdi
}

IPFDEVADB () {
if $MAGISK && CHECKER -sp "$XMLGLOBAL" "development_settings_enabled adb_enabled adb_wifi_enabled verifier_verify_adb_installs"; then UCSA "Install Force Activate DEV & ADB $VIPFDEVADB?" "IPFDEVADBS" "$IDFDEVADB"; fi
}

IPFDEVADBS () {
UIP -s "Enabled ADB WIFI?" "$MSGVU Yes" "$MSGVD No"; if KEYCHOOSE; then ADBWIFI="; sleep 20; $SPGLOBAL adb_wifi_enabled 1"; else ADBWIFI=""; fi
UIP "Installing Force Activate DEV & ADB $IAMM"
PTMFI -nmp "$IDFDEVADB"
MSSERVICE -s "$SPGLOBAL development_settings_enabled 1; $SPGLOBAL adb_enabled 1; $SPGLOBAL verifier_verify_adb_installs 0$ADBWIFI"
echo "persist.security.adbinput=1
persist.security.adbinstall=1
persist.service.adb.enable=1
persist.service.debuggable=1
persist.sys.usb.config=mtp,adb
ro.debuggable=1
service.adb.tcp.port=5555" > $MODPATH/$MODID/system.prop
MMPR -v "Force DEV & ADB" "$VIPFDEVADB" "Force Activate Developer Settings & ADB/ADB Wifi With Port 5555"; SET_PERM_RM -msgdi
}

IPFMTP () {
if $MAGISK && $LEGACYMODE && [ "$ASDK" -le 30 ]; then
UCSA "Install Force Activate MTP $VIPFMTP?" "IPFMTPS" "$IDFMTP"
fi
}

IPFMTPS () {
UIP "Installing Force Activate MTP $IAMM"
mkdir -p $IPDSDE/0
PTMFI -nmp "$IDFMTP"
MSSERVICE -s "echo \"<?xml version='1.0' encoding='utf-8' standalone='yes' ?>\n<map>\n    <string name=\\\"usb-screen-unlocked-config-0\\\">mtp</string>\n</map>\" > $IPDSDE/0/UsbDeviceManagerPrefs.xml"
MMPR -v "Force MTP" "$VIPFMTP" "Force Activate MTP In Developer Settings After ReBoot"
echo -e "<?xml version='1.0' encoding='utf-8' standalone='yes' ?>\n<map>\n    <string name=\"usb-screen-unlocked-config-0\">mtp</string>\n</map>" > $IPDSDE/0/UsbDeviceManagerPrefs.xml
SET_PERM_RM -msgdi
}

IPSOOOFUIRC () {
if CHECKER "device" "dipper" || CHECKER "device" "beryllium"; then
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/sooofuirc ]; then UIP -s "$MSGFI On/Off Face UnLock IR Camera, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if KEYCHOOSE; then
UIP "Removing..."
BUCKUPER -r "$IPPVO/FaceUnlockService__auto_generated_rro_vendor.apk"
rm -f $AIOPFMDPH/sooofuirc
UIP "$MSGDRM"
fi
else
if [ -f $IPSEP/com.motorola.faceunlock.xml ] || [ -f $IPSEP/privapp-permissions-org.pixelexperience.faceunlock.xml ] || [ -f $IPSEP/privapp-permissions-com.crdroid.faceunlock.xml ] || [ -f $IPSEP/privapp-permissions-com.aospextended.faceunlock.xml ]; then
UCSA "Switch On/Off Face UnLock IR Camera $VIPSOOOFUIRC?" "IPSOOOFUIRCS" "$IDSOOOFUIRC"
fi
fi
fi
}

IPSOOOFUIRCS () {
UIP -s "Switching" "$MSGVU On" "$MSGVD Off"
if KEYCHOOSE; then SWITCHIR="5"; MSGSWITCHIR=On; ASWITCHIR="true"; else SWITCHIR=""; MSGSWITCHIR=Off; ASWITCHIR="false"; fi
UIP "Installing Switch $MSGSWITCHIR Face UnLock IR Camera $IAMM"
UZTPN "SOOOFUIRC"
if [ -f $IPSEP/com.motorola.faceunlock.xml ]; then
FUPNXML="com.motorola.faceunlock"
elif [ -f $IPSEP/privapp-permissions-org.pixelexperience.faceunlock.xml ]; then
FUPNXML="org.pixelexperience.faceunlock"
elif [ -f $IPSEP/privapp-permissions-com.crdroid.faceunlock.xml ]; then
FUPNXML="com.crdroid.faceunlock"
elif [ -f $IPSEP/privapp-permissions-com.aospextended.faceunlock.xml ]; then
FUPNXML="com.aospextended.faceunlock"
fi
if $MAGISK; then
PTMFI -nmp "$IDSOOOFUIRC"
echo -e "vendor.camera.aux.packagelist=org.codeaurora.snapcam,com.android.camera,org.lineageos.snap,$FUPNXML\nro.face_unlock_service.enabled=$ASWITCHIR" > $MODPATH/$MODID/system.prop
if [ -f $IPSEP/com.motorola.faceunlock.xml ]; then
echo -e "\nro.face.moto_unlock_service.cam_id=$SWITCHIR" > $MODPATH/$MODID/system.prop
else
mkdir -p $MODPATH/$MODID$MIPPVO
cp -f $TMPDIR/SOOOFUIRC/FaceUnlockService-$FUPNXML-$MSGSWITCHIR.apk $MODPATH/$MODID$MIPPVO/FaceUnlockService__auto_generated_rro_vendor.apk
fi
MMPR -v "Switch $MSGSWITCHIR Face UnLock IR Camera" "$VIPSOOOFUIRC" "Switch $MSGSWITCHIR Face UnLock IR Camera For MI8/POCOF1"
else
BUCKUPER -bp "$IPSBP"
echo -e "\nvendor.camera.aux.packagelist=org.codeaurora.snapcam,com.android.camera,org.lineageos.snap,$FUPNXML\nro.face_unlock_service.enabled=$ASWITCHIR" >> $IPSBP
if [ -f $IPSEP/com.motorola.faceunlock.xml ]; then
echo -e "\nro.face.moto_unlock_service.cam_id=$SWITCHIR" >> $IPSBP
else
touch $AIOPFMDPH/sooofuirc
BUCKUPER -s "$IPPVO/FaceUnlockService__auto_generated_rro_vendor.apk"
cp -f $TMPDIR/SOOOFUIRC/FaceUnlockService-$FUPNXML-$MSGSWITCHIR.apk $IPPVO/FaceUnlockService__auto_generated_rro_vendor.apk
fi
fi
SET_PERM_RM -msgdi
WCANFTP "-sl"
}

IPFDM () {
if [ $MIUI != true ] && [ "$ASDK" -ge 27 ]; then
UCSA "Install Force Dark Theme $VIPFDM?" "IPFDMS" "$IDFDM"
fi
}

IPFDMS () {
UIP "Installing Force Dark Mode $IAMM"
if $MAGISK; then
PTMFI -nmp "$IDFDM"
echo "debug.hwui.force_dark=true" > $MODPATH/$MODID/system.prop
MMPR -v "Force Dark Mode" "$VIPFDM" "Force Dark Mode In Developer Settings After ReBoot"
else
BUCKUPER -bp "$IPSBP"
echo -e "\n# Force Dark\ndebug.hwui.force_dark=true" >> $IPSBP
fi
SET_PERM_RM -msgdi
}

IPFDPP () {
if $MAGISK && CHECKER -sp "$XMLGLOBAL" "upload_apk_enable package_verifier_enable package_verifier_user_consent verifier_verify_adb_installs"; then UCSA "Install Force Disabling Play Protect $VIPFDPP?" "IPFDPPS" "$IDFDPP"; fi
}

IPFDPPS () {
UIP "Installing Force Disabling Play Protect $IAMM"
PTMFI -nmp "$IDFDPP"
MSSERVICE -s "$SPGLOBAL upload_apk_enable 0; $SPGLOBAL package_verifier_enable 0; $SPGLOBAL package_verifier_user_consent -1; $SPGLOBAL verifier_verify_adb_installs 0"
MMPR -v "Force Disabling Play Protect" "$VIPFDPP" "Force Disabling Play Protect"; SET_PERM_RM -msgdi
}

IPFI () {
if $MAGISK && $LEGACYMODE; then UCSA "Install Force Idle $VIPFI?" "IPFIS" "$IDFI"; fi
}

IPFIS () {
UIP "Installing Force Idle $IAMM"
PTMFI -nmp "$IDFI"
if CHECKER -sp "$XMLGLOBAL" "aggressive_idle_enabled aggressive_standby_enabled"; then MSSERVICE -s "$SPGLOBAL aggressive_idle_enabled 1; $SPGLOBAL aggressive_standby_enabled 1; dumpsys deviceidle force-idle; dumpsys deviceidle enable"; else MSSERVICE -s "dumpsys deviceidle force-idle; dumpsys deviceidle enable"; fi
MMPR -v "Force Idle" "$VIPFI" "Force Idle"; SET_PERM_RM -msgdi
}

IPUGMSD () {
if $MAGISK && $FINDGAPPS && [ $ASDK -ge 23 ]; then
UCSA "Install Universal GMS Doze $VIPUGMSD?" "IPUGMSDS" "$IDUGMSD"
fi
}

IPUGMSDS () {
UIP "Installing Universal GMS Doze $IAMM"
PTMFI -np "$IDUGMSD" "universal-gms-doze"
UIP "$MSGPNF"
LOCATION=$(XML=$(find $SYSTEM $VENDOR -name "*.xml"); for i in $XML; do if grep -q 'allow-unthrottled-location package="com.google.android.gms"' $MAGISKMP$i 2>/dev/null; then echo "$i"; fi; done)
SAVE=$(XML=$(find $SYSTEM $VENDOR -name "*.xml"); for i in $XML; do if grep -q 'allow-in-power-save package="com.google.android.gms"' $MAGISKMP$i 2>/dev/null; then echo "$i"; fi; done)
IGNORE=$(XML=$(find $SYSTEM $VENDOR -name "*.xml"); for i in $XML; do if grep -q 'allow-ignore-location-settings package="com.google.android.gms"' $MAGISKMP$i 2>/dev/null; then echo "$i"; fi; done)
for i in $LOCATION $SAVE $IGNORE; do
if [ ! -f $MODPATH/$MODID$i ]; then
UIP "Found $i" "Patching..."
mkdir -p `dirname $MODPATH/$MODID$i`
cp -f $i $MODPATH/$MODID$i
sed -i '/allow-unthrottled-location package="com.google.android.gms"/d;/allow-in-power-save package="com.google.android.gms"/d;/allow-ignore-location-settings package="com.google.android.gms"/d' $MODPATH/$MODID$i
UIP "$MSGFFAP"
fi
done
echo "#!$MIPSB/sh
if [ -d $MODPATH/$MODID ] && [ ! -f $MODPATH/$MODID/disable ]; then
LOCATION=\$(XML=\$(find $MODPATH -name \"*.xml\");for i in \$XML; do if grep -q 'allow-unthrottled-location package=\"com.google.android.gms\"' \$i 2>/dev/null; then echo \"\$i\"; fi; done)
SAVE=\$(XML=\$(find $MODPATH -name \"*.xml\"); for i in \$XML; do if grep -q 'allow-in-power-save package=\"com.google.android.gms\"' \$i 2>/dev/null; then echo \"\$i\"; fi; done)
IGNORE=\$(XML=\$(find $MODPATH -name \"*.xml\");for i in \$XML; do if grep -q 'allow-ignore-location-settings package=\"com.google.android.gms\"' \$i 2>/dev/null; then echo \"\$i\"; fi; done)
for i in \$LOCATION \$SAVE \$IGNORE; do
SEARCH=\$(echo \"\$i\" | sed -e 's/\// /g' | awk '{print \$4}')
sed -i '/allow-in-power-save package=\"com.google.android.gms\"/d;/allow-in-power-save package=\"com.google.android.gms\"/d;/allow-in-data-usage-save package=\"com.google.android.gms\"/d' \$i
done
cd $IPDD; find . -type f -name '*gms*' -delete
elif [ ! -d $MODPATH/$MODID ]; then
rm -f $POSTFSDATAD/UGMSD.sh
fi" > $POSTFSDATAD/UGMSD.sh
echo "sleep 1m
pm disable com.google.android.gms/com.google.android.gms.auth.managed.admin.DeviceAdminReceiver
pm disable com.google.android.gms/com.google.android.gms.mdm.receivers.MdmDeviceAdminReceiver
pm disable com.google.android.gms/.chimera.GmsIntentOperationService
cmd appops set com.google.android.gms BOOT_COMPLETED ignore
cmd appops set com.google.android.ims BOOT_COMPLETED ignore
cmd appops set com.google.android.gms BOOT_COMPLETED ignore
cmd appops set com.google.android.ims BOOT_COMPLETED ignore
cmd appops set com.google.android.gms.location.history BOOT_COMPLETED ignore
cmd appops set com.google.android.gm BOOT_COMPLETED ignore
cmd appops set com.google.android.marvin.talkback BOOT_COMPLETED ignore
cmd appops set com.google.android.apps.googleassistant BOOT_COMPLETED ignore
cmd appops set com.google.android.apps.carrier.log BOOT_COMPLETED ignore
cmd appops set com.android.providers.partnerbookmarks BOOT_COMPLETED ignore
cmd appops set com.google.android.apps.wellbeing BOOT_COMPLETED ignore
cmd appops set com.google.android.as BOOT_COMPLETED ignore
cmd appops set com.android.connectivity.metrics BOOT_COMPLETED ignore
cmd appops set com.android.bips BOOT_COMPLETED ignore
cmd appops set com.google.android.printservice.recommendation BOOT_COMPLETED ignore
cmd appops set com.android.hotwordenrollment.xgoogle BOOT_COMPLETED ignore
cmd appops set com.google.android.printservice.recommendation BOOT_COMPLETED ignore
cmd appops set com.android.hotwordenrollment.xgoogle BOOT_COMPLETED ignore
cmd appops set com.google.android.gms AUTO_START ignore
cmd appops set com.google.android.ims AUTO_START ignore
cmd appops set com.xiaomi.finddevice AUTO_START ignore
cmd appops set com.miui.analytics AUTO_START ignore
cmd appops set com.google.android.gms.location.history AUTO_START ignore
cmd appops set com.google.android.gm AUTO_START ignore
cmd appops set com.google.android.marvin.talkback AUTO_START ignore
cmd appops set com.google.android.apps.googleassistant AUTO_START ignore
cmd appops set com.google.android.apps.carrier.log AUTO_START ignore
cmd appops set com.android.providers.partnerbookmarks AUTO_START ignore
cmd appops set com.google.android.apps.wellbeing AUTO_START ignore
cmd appops set com.google.android.as AUTO_START ignore
cmd appops set com.android.connectivity.metrics AUTO_START ignore
cmd appops set com.android.bips AUTO_START ignore
cmd appops set com.google.android.printservice.recommendation AUTO_START ignore
cmd appops set com.android.hotwordenrollment.okgoogle AUTO_START ignore
cmd appops set com.android.hotwordenrollment.xgoogle AUTO_START ignore
dumpsys deviceidle whitelist -com.google.android.gms" > $MODPATH/$MODID/service.sh
MMPR -vc "Universal GMS Doze" "$VIPUGMSD" "$VCIPUGMSD" "gloeyisk" "Patches Google Play Services App And Its Background Processes To Be Able To Use Battery Optimizations"
MOVERPATH; SET_PERM_RM -msgdi
}

IPUSGP () {
if [ $ASDK -ge 28 ]; then
UCSA "Install Unlimited Storage For GPhotos $VIPUSGP?" "IPUSGPS" "$IDUSGP"
fi
}

IPUSGPS () {
UIP "Installing USGP $IAMM"
mkdir -p $TMPDIR/USGP
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!-- Copyright (C) 2014 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the \"License\");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an \"AS IS\" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->

<!-- These are configurations that must exist on all GMS devices. -->
<config>
    <!-- These are the standard packages that are white-listed to always have internet
         access while in power save mode, even if they aren't in the foreground. -->

    <!-- GmsCore must always have network access for GCM and other things. -->
    <allow-in-power-save package=\"com.google.android.gms\" />
    <allow-in-data-usage-save package=\"com.google.android.gms\" />
    <allow-unthrottled-location package=\"com.google.android.gms\" />
    <allow-ignore-location-settings package=\"com.google.android.gms\" attributionTag=\"com.google.android.gms.thunderbird\" />
    <allow-ignore-location-settings package=\"com.google.android.dialer\" attributionTag=\"*\" />

    <!-- OobConfig must always have network access to fetch enterprise and carrier lock config. -->
    <allow-in-power-save-except-idle package=\"com.google.android.apps.work.oobconfig\" />
    <allow-in-data-usage-save package=\"com.google.android.apps.work.oobconfig\" />

    <!-- Turbo must not have App Standby restrictions in order to push new
         App Standby buckets to the platform periodically -->
    <allow-in-power-save-except-idle package=\"com.google.android.apps.turbo\" />

    <!-- Certain broadcasts must still go to legacy implicit receivers -->
    <allow-implicit-broadcast action=\"com.google.android.checkin.CHECKIN_COMPLETE\" />
    <allow-implicit-broadcast action=\"com.google.gservices.intent.action.GSERVICES_CHANGED\" />
    <allow-implicit-broadcast action=\"com.google.gservices.intent.action.GSERVICES_OVERRIDE\" />
    <allow-implicit-broadcast action=\"com.google.android.c2dm.intent.RECEIVE\" />
    <!-- TODO: This is a temporary workaround for allowing GmsCore to receive this broadcast.
         This can be removed once OneTimeInitializer functionality is moved to GmsCore. -->
    <allow-implicit-broadcast action=\"com.google.android.onetimeinitializer.ONE_TIME_INITIALIZED\" />

    <!-- Play Store likewise must have network access to support other applications. -->
    <allow-in-power-save-except-idle package=\"com.android.vending\" />

    <!-- If the volta app is pre-installed (for monitoring power use), let it do checkins. -->
    <allow-in-power-save package=\"com.google.android.volta\" />

    <!-- If GoogleCellBroadcastServiceModule is installed, let it run in the background -->
    <allow-in-power-save package=\"com.google.android.cellbroadcastreceiver\" />

    <!-- If \"Personal Safety\" app is installed, let it run in the background -->
    <allow-in-power-save package=\"com.google.android.apps.safetyhub\" />

    <!-- If CarrierServices is installed, it must always have network access to
         reliably receive IMS messages. -->
    <allow-in-power-save package=\"com.google.android.ims\" />
    <allow-in-data-usage-save package=\"com.google.android.ims\" />

    <!-- These Google applications all handle URLs to their websites by default -->

    <!-- Apps below are required on all GMS devices -->
    <app-link package=\"com.android.vending\" />
    <app-link package=\"com.google.android.gms\" />
    <app-link package=\"com.google.android.apps.maps\" />
    <app-link package=\"com.google.android.youtube\" />
    <app-link package=\"com.google.android.apps.docs\" />
    <app-link package=\"com.google.android.talk\" />
    <app-link package=\"com.google.android.apps.photos\" />
    <app-link package=\"com.google.android.apps.youtube.music\" />
    <app-link package=\"com.google.android.googlequicksearchbox\" />

    <!-- Apps below are optional on GMS devices -->
    <app-link package=\"com.google.android.apps.tycho\" />
    <app-link package=\"com.google.android.apps.plus\" />
    <app-link package=\"com.google.android.apps.docs.editors.sheets\" />
    <app-link package=\"com.google.android.apps.docs.editors.slides\" />
    <app-link package=\"com.google.android.apps.docs.editors.docs\" />
    <app-link package=\"com.google.android.talk\" />
    <app-link package=\"com.google.android.videos\" />
    <app-link package=\"com.google.android.calendar\" />
    <app-link package=\"com.google.android.apps.wallpaper\" />
    <app-link package=\"com.google.android.apps.tips\" />

    <!-- Whitelist of what components are permitted as backup data transports.  The
         'service' attribute here is a flattened ComponentName string. -->
    <backup-transport-whitelisted-service
        service=\"com.google.android.gms/.backup.BackupTransportService\" />
    <backup-transport-whitelisted-service
        service=\"com.google.android.gms/.backup.component.D2dTransportService\" />

    <!-- Specify the explicit set of other applications that AI services are allowed to
         interact with, including the providers that back the implementation of the APIs
         provided by the package. -->
    <allow-association target=\"com.google.android.as\" allowed=\"com.android.bluetooth\" />
    <allow-association target=\"com.google.android.as\" allowed=\"com.android.providers.contacts\" />
    <allow-association target=\"com.google.android.as\" allowed=\"com.android.providers.media\" />
    <allow-association target=\"com.google.android.as\" allowed=\"com.android.providers.telephony\" />
    <allow-association target=\"com.google.android.as\" allowed=\"com.android.systemui\" />
    <allow-association target=\"com.google.android.as\" allowed=\"com.google.android.providers.media.module\" />
    <!-- AI services can bind to its open-source network component. -->
    <allow-association target=\"com.google.android.as\" allowed=\"com.google.android.as.oss\" />

    <!-- AI services open-source network component can only bind back to the core package. -->
    <allow-association target=\"com.google.android.as.oss\" allowed=\"com.google.android.as\" />

    <!-- Specify the explicit set of other applications whose app data directories are
        accessible by other applications. -->
    <app-data-isolation-whitelisted-app package=\"com.google.android.gms\" />

    <!-- Whitelist of packages that eligible for rollback -->
    <rollback-whitelisted-app package=\"com.android.vending\" />
</config>" > $TMPDIR/USGP/google.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!-- Copyright (C) 2014 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the \"License\");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an \"AS IS\" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->

<!-- These are configurations that should exist on Google's own Nexus and GPe devices. -->
<config>
    <feature name=\"com.google.android.feature.GOOGLE_BUILD\" />
    <!-- This should be added to all Nexus and GPe devices -->
    <feature name=\"com.google.android.feature.GOOGLE_EXPERIENCE\" />
    <!-- This should declare the version of Exchange that ships -->
    <feature name=\"com.google.android.feature.EXCHANGE_6_2\" />
</config>" > $TMPDIR/USGP/google_build.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!--
  ~ Copyright (C) 2018 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the \"License\");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an \"AS IS\" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License
  -->

<!--
This XML file declares which platform apps that need to access internal APIs.
-->
<config>
  <hidden-api-whitelisted-app package=\"android.car.cluster.maserati\" />
  <hidden-api-whitelisted-app package=\"com.android.apps.tag\" />
  <hidden-api-whitelisted-app package=\"com.android.auto.embedded.cts.verifier\" />
  <hidden-api-whitelisted-app package=\"com.android.car.bugreport\" />
  <hidden-api-whitelisted-app package=\"com.android.car.carlauncher\" />
  <hidden-api-whitelisted-app package=\"com.android.car.home\" />
  <hidden-api-whitelisted-app package=\"com.android.car.retaildemo\" />
  <hidden-api-whitelisted-app package=\"com.android.car.settingslib.robotests\" />
  <hidden-api-whitelisted-app package=\"com.android.car.setupwizardlib.robotests\" />
  <hidden-api-whitelisted-app package=\"com.android.cardock\" />
  <hidden-api-whitelisted-app package=\"com.android.connectivity.metrics\" />
  <hidden-api-whitelisted-app package=\"com.android.facelock\" />
  <hidden-api-whitelisted-app package=\"com.android.google.gce.gceservice\" />
  <hidden-api-whitelisted-app package=\"com.android.hotwordenrollment.okgoogle\" />
  <hidden-api-whitelisted-app package=\"com.android.hotwordenrollment.tgoogle\" />
  <hidden-api-whitelisted-app package=\"com.android.hotwordenrollment.xgoogle\" />
  <hidden-api-whitelisted-app package=\"com.android.inputmethod.latin\" />
  <hidden-api-whitelisted-app package=\"com.android.media.update\" />
  <hidden-api-whitelisted-app package=\"com.android.netspeed\" />
  <hidden-api-whitelisted-app package=\"com.android.onemedia\" />
  <hidden-api-whitelisted-app package=\"com.android.pixellogger\" />
  <hidden-api-whitelisted-app package=\"com.android.ramdump\" />
  <hidden-api-whitelisted-app package=\"com.android.settingslib.robotests\" />
  <hidden-api-whitelisted-app package=\"com.android.simappdialog\" />
  <hidden-api-whitelisted-app package=\"com.android.statsd.dogfood\" />
  <hidden-api-whitelisted-app package=\"com.android.statsd.loadtest\" />
  <hidden-api-whitelisted-app package=\"com.android.systemui.shared\" />
  <hidden-api-whitelisted-app package=\"com.android.test.power\" />
  <hidden-api-whitelisted-app package=\"com.android.test.voiceenrollment\" />
  <hidden-api-whitelisted-app package=\"com.android.tv.provision\" />
  <hidden-api-whitelisted-app package=\"com.google.SSRestartDetector\" />
  <hidden-api-whitelisted-app package=\"com.google.android.apps.nexuslauncher\" />
  <hidden-api-whitelisted-app package=\"com.google.android.apps.wallpaper\" />
  <hidden-api-whitelisted-app package=\"com.google.android.asdiv\" />
  <hidden-api-whitelisted-app package=\"com.google.android.athome.globalkeyinterceptor\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.defaultstoragemonitoringcompanionapp\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.diagnosticrecorder\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.diagnosticverifier\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.diskwriteapp\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.flashapp\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.kitchensink\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.obd2app\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.setupwizard\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.usb.aoap.host\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.vms.subscriber\" />
  <hidden-api-whitelisted-app package=\"com.google.android.carrier\" />
  <hidden-api-whitelisted-app package=\"com.google.android.carriersetup\" />
  <hidden-api-whitelisted-app package=\"com.google.android.connectivitymonitor\" />
  <hidden-api-whitelisted-app package=\"com.google.android.edu.harnesssettings\" />
  <hidden-api-whitelisted-app package=\"com.google.android.ext.services\" />
  <hidden-api-whitelisted-app package=\"com.google.android.factoryota\" />
  <hidden-api-whitelisted-app package=\"com.google.android.feedback\" />
  <hidden-api-whitelisted-app package=\"com.google.android.gsf\" />
  <hidden-api-whitelisted-app package=\"com.google.android.hardwareinfo\" />
  <hidden-api-whitelisted-app package=\"com.google.android.hiddenmenu\" />
  <hidden-api-whitelisted-app package=\"com.google.android.permissioncontroller\" />
  <hidden-api-whitelisted-app package=\"com.google.android.partner.provisioning\" />
  <hidden-api-whitelisted-app package=\"com.google.android.partnersetup\" />
  <hidden-api-whitelisted-app package=\"com.google.android.pixel.setupwizard\" />
  <hidden-api-whitelisted-app package=\"com.google.android.preloaded_drawable_viewer\" />
  <hidden-api-whitelisted-app package=\"com.google.android.printservice.recommendation\" />
  <hidden-api-whitelisted-app package=\"com.google.android.sampledeviceowner\" />
  <hidden-api-whitelisted-app package=\"com.google.android.apps.scone\" />
  <hidden-api-whitelisted-app package=\"com.google.android.sdksetup\" />
  <hidden-api-whitelisted-app package=\"com.google.android.setupwizard\" />
  <hidden-api-whitelisted-app package=\"com.google.android.storagemanager\" />
  <hidden-api-whitelisted-app package=\"com.google.android.tag\" />
  <hidden-api-whitelisted-app package=\"com.google.android.tungsten.setupwraith\" />
  <hidden-api-whitelisted-app package=\"com.google.android.tv.bugreportsender\" />
  <hidden-api-whitelisted-app package=\"com.google.android.tv.frameworkpackagestubs\" />
  <hidden-api-whitelisted-app package=\"com.google.android.vendorloggingservice\" />
  <hidden-api-whitelisted-app package=\"com.google.android.volta\" />
  <hidden-api-whitelisted-app package=\"com.google.android.wfcactivation\" />
  <hidden-api-whitelisted-app package=\"com.google.mds\" />
  <hidden-api-whitelisted-app package=\"com.google.modemservice\" />
  <hidden-api-whitelisted-app package=\"com.htc.omadm.trigger\" />
  <hidden-api-whitelisted-app package=\"com.qualcomm.qcrilmsgtunnel\" />
  <hidden-api-whitelisted-app package=\"com.ustwo.lwp\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.accessibilityhelper\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.apkcacheprovider\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.applauncher\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.backup_settings\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.cast_receiver\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.crash_collector\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.file_system\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.gms\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.home\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.intent_helper\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.tts\" />
</config>" > $TMPDIR/USGP/google-hiddenapi-package-whitelist.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2016 and newer Nexus devices. -->
<config>
    <!-- This is meant to be the canonical feature identifying 2016 and newer Nexus devices. -->
    <feature name=\"com.google.android.feature.PIXEL_EXPERIENCE\" />

    <!-- The feature identifying devices which are able to use the Turbo app -->
    <feature name=\"com.google.android.feature.TURBO_PRELOAD\" />

    <!-- The feature identifying devices which are able to use the Android Wellbeing app. -->
    <feature name=\"com.google.android.feature.WELLBEING\" />

    <!-- The feature identifying devices which are able to use the device-to-device migration
        over cable provided by the Pixelmigrate app. -->
    <feature name=\"com.google.android.feature.D2D_CABLE_MIGRATION_FEATURE\" />

    <!-- Allow WfcActivation app scheduled jobs to run when app in background. -->
    <allow-in-power-save-except-idle package=\"com.google.android.wfcactivation\" />

    <!-- Allow ssr detector service in background -->
    <allow-in-power-save package=\"com.google.SSRestartDetector\" />

    <!-- Allow connectivitymonitor service in background -->
    <allow-in-power-save package=\"com.google.android.connectivitymonitor\" />

    <!-- Allow connectivitythermalpowermanager service in background -->
    <allow-in-power-save package=\"com.google.android.connectivitythermalpowermanager\" />

    <!-- Allow iwlan service in backgroud-->
    <allow-in-power-save package=\"com.google.android.iwlan\" />

    <!-- Allow ramdump uploader service in background -->
    <allow-in-power-save package=\"com.android.ramdump\" />

    <!-- Whitelist log pkg so JobIntentService can work. b/71630894 -->
    <allow-in-power-save-except-idle package=\"com.google.android.apps.carrier.log\" />

    <!-- Whitelist so headless app JobIntentService can work. b/73250911 -->
    <allow-in-power-save-except-idle package=\"com.google.android.carrier\" />

    <!-- Whitelist so headless app JobService can work. b/135126855 -->
    <allow-in-power-save-except-idle package=\"com.google.android.apps.carrier.carrierwifi\" />

    <!-- These are telephony components that need to run in the background -->
    <allow-in-power-save package=\"com.qualcomm.atfwd\" />
    <allow-in-power-save package=\"com.qualcomm.embms\" />
    <allow-in-power-save package=\"com.qualcomm.qti.telephonyservice\" />
    <allow-in-power-save package=\"com.qulacomm.qcrilmsgtunnel\" />
    <allow-in-power-save package=\"com.qualcomm.qti.ims\" />
    <allow-in-power-save package=\"com.qualcomm.qti.radioconfiginterface\" />

    <!-- Pre-installed carrier apps which should be disabled until a matching SIM is inserted. -->
    <disabled-until-used-preinstalled-carrier-app package=\"com.google.android.apps.tycho\" />

    <!-- Whitelist so the app can run JobIntentService in background. b/77932342 -->
    <allow-in-power-save-except-idle package=\"com.google.android.tetheringentitlement\" />
    <!-- Tethering entitlement check app should have Internet access while in data saving mode,
         even if they're in background. -->
    <allow-in-data-usage-save package=\"com.google.android.tetheringentitlement\" />

    <!-- Allow eMBMS middleware services to run in the background -->
    <allow-in-power-save package=\"com.qualcomm.ltebc_vzw\" />
    <allow-in-power-save package=\"com.qualcomm.ltebc\" />

    <!-- Allow gnss pixel monitor to run in the background -->
    <allow-in-power-save package=\"com.google.android.gnsspixelmonitor\" />
</config>" > $TMPDIR/USGP/nexus.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2017 and newer Nexus devices. -->
<config>
    <!-- This is meant to be the canonical feature identifying 2017 and newer Nexus devices. -->
    <feature name=\"com.google.android.feature.PIXEL_2017_EXPERIENCE\" />

    <!--
       This is the canonical feature identifying devices which bundle Google Fi support. The
       Fi app and associated apps will be bundled (but may be disabled until a matching SIM
       is inserted).
       This feature may not be present before Android S.
    -->
    <feature name=\"com.google.android.feature.GOOGLE_FI_BUNDLED\" />

    <!-- Allow SCONE JobIntentService & Services to run in background -->
    <allow-in-power-save package=\"com.google.android.apps.scone\" />

    <!-- Allow Flipendo in power save. Will be present on pre-2020 devices for dogfooding. -->
    <allow-in-power-save-except-idle package=\"com.google.android.flipendo\" />

    <!-- Allow Better Bug to take bug report. -->
    <bugreport-whitelisted package=\"com.google.android.apps.betterbug\" />
    <bugreport-whitelisted package=\"com.google.android.apps.internal.betterbug\" />
    <bugreport-whitelisted package=\"com.google.android.apps.betterbug.partners\" />

    <!-- Allow Pixel modem service to run in background -->
    <allow-in-power-save package=\"com.google.modemservice\" />

    <!-- Allow MDS ExperimentService to run in background -->
    <allow-in-power-save package=\"com.google.mds\" />

    <!-- Allow OMA DM to run in background -->
    <allow-in-power-save package=\"com.android.omadm.service\" />
    <allow-in-power-save package=\"com.android.sdm.plugins.connmo\" />
    <allow-in-power-save package=\"com.android.sdm.plugins.dcmo\" />
    <allow-in-power-save package=\"com.android.sdm.plugins.diagmon\" />
    <allow-in-power-save package=\"com.android.vzwomatrigger\" />
    <allow-in-power-save package=\"com.android.sdm.plugins.usccdm\" />

    <!-- Hide DocumentsUi Launcher/Downloads intent handling. DocumentsUi
         PrebootReceiver does not properly hide the launcher in work profile,
         so we need to include this as well. -->
    <component-override package=\"com.google.android.documentsui\" >
        <component class=\"com.android.documentsui.LauncherActivity\" enabled=\"false\" />
        <component class=\"com.android.documentsui.ViewDownloadsActivity\" enabled=\"false\" />
    </component-override>

    <!-- ACTION_MANAGE_STORAGE handled by Files by Google -->
    <component-override package=\"com.google.android.storagemanager\" >
        <component class=\"com.android.storagemanager.deletionhelper.DeletionHelperActivity\" enabled=\"false\" />
    </component-override>

    <!-- Make sure photos/video previews are handled by Photos. -->
    <component-override package=\"com.google.android.apps.nbu.files\" >
        <component class=\"com.google.android.apps.nbu.files.gateway.preview.PreviewActivity\" enabled=\"false\" />
    </component-override>

    <component-override package=\"com.android.settings\" >
        <!-- Display regulatory info in settings. -->
        <component class=\".RegulatoryInfoDisplayActivity\" enabled=\"true\" />
    </component-override>

    <!-- Feature flag on RVC builds for AER requirements, b/159247801 -->
    <feature name=\"com.google.android.feature.AER_OPTIMIZED\" />

</config>" > $TMPDIR/USGP/pixel_experience_2017.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2018 and newer Pixel devices. -->
<config>
    <!-- Allow Pixel modem service in background -->
    <allow-in-power-save package=\"com.google.modemservice\" />

    <!-- Allow PixelLogger LoggingService to run in background -->
    <allow-in-power-save package=\"com.android.pixellogger\" />

    <!-- Allow Pixel Logger to take bug report. -->
    <bugreport-whitelisted package=\"com.android.pixellogger\" />

    <!-- Allow Flipendo in power save. Will be present on pre-2020 devices for dogfooding. -->
    <allow-in-power-save-except-idle package=\"com.google.android.flipendo\" />

    <!-- The AI services open-source network component can bind to the odad package. -->
    <allow-association target=\"com.google.android.as.oss\" allowed=\"com.google.android.odad\" />

    <!-- The odad package can only bind to the AI services open-source network component. -->
    <allow-association target=\"com.google.android.odad\" allowed=\"com.google.android.as.oss\" />

    <!-- This is meant to be the canonical feature identifying 2018 and newer Pixel devices. -->
    <feature name=\"com.google.android.feature.PIXEL_2018_EXPERIENCE\" />
</config>" > $TMPDIR/USGP/pixel_experience_2018.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2019 and newer devices. -->
<config>
    <!-- This is meant to be the canonical feature identifying 2019 and newer devices. -->
    <feature name=\"com.google.android.feature.PIXEL_2019_EXPERIENCE\" />

    <!-- Allow Flipendo in power save. Will be present on pre-2020 devices for dogfooding. -->
    <allow-in-power-save-except-idle package=\"com.google.android.flipendo\" />
</config>" > $TMPDIR/USGP/pixel_experience_2019.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2019 mid year and newer devices. -->
<config>
    <!-- This is meant to be the canonical feature identifying 2019 mid year and newer devices. -->
    <feature name=\"com.google.android.feature.PIXEL_2019_MIDYEAR_EXPERIENCE\" />

    <!-- Allow Flipendo in power save. Will be present on pre-2020 devices for dogfooding. -->
    <allow-in-power-save-except-idle package=\"com.google.android.flipendo\" />
</config>" > $TMPDIR/USGP/pixel_experience_2019_midyear.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2020 and newer devices. -->
<config>
    <!-- This is meant to be the canonical feature identifying 2020 and newer devices. -->
    <feature name=\"com.google.android.feature.PIXEL_2020_EXPERIENCE\" />

    <!-- Allow Flipendo in power save. -->
    <allow-in-power-save-except-idle package=\"com.google.android.flipendo\" />
</config>" > $TMPDIR/USGP/pixel_experience_2020.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2020 mid year and newer devices. -->
<config>
    <!-- This is meant to be the canonical feature identifying 2020 mid year and newer devices. -->
    <feature name=\"com.google.android.feature.PIXEL_2020_MIDYEAR_EXPERIENCE\" />

    <!-- Allow Flipendo in power save. -->
    <allow-in-power-save-except-idle package=\"com.google.android.flipendo\" />
</config>" > $TMPDIR/USGP/pixel_experience_2020_midyear.xml
if $MAGISK; then
PTMFI -nm "$IDUSGP" "$MIPSES $MIPSSPES"
cp -f $TMPDIR/$MODID/* $MODPATH/$MODID$MIPSES
cp -f $TMPDIR/$MODID/* $MODPATH/$MODID$MIPSSPES
MMPR -v "$MODID" "$VIPUSGP" "Activating Unlimited Storage For Google Photos"
echo -e "ro.com.google.clientidbase=android-google\nro.opa.eligible_device=true" >> $MODPATH/$MODID/system.prop
else
BUCKUPER -bp "$IPSBP"
echo -e "\n# Activating Unlimited Storage For Google Photos\nro.com.google.clientidbase=android-google\nro.opa.eligible_device=true" >> $IPSBP
touch $AIOPFMDPH/USGP
[ -d $IPSES ] && cp -f $TMPDIR/USGP/* $IPSES
[ -d $IPSSPES ] && cp -f $TMPDIR/USGP/* $IPSSPES
fi
SET_PERM_RM -msgdi
}

IPAS () {
if $MAGISK && CHECKER -sp "$XMLGLOBAL" "window_animation_scale transition_animation_scale animator_duration_scale"; then UCSA "Install Animation Scale $VIPAS?" "IPASS" "$IDAS"; fi
}

IPASS () {
UCSA -a "0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0" "Choose Animation Scale:" "Animation Scale" "1.0"
if $UCSFNM; then
UIP "Installing Animation Scale $IAMM"
PTMFI -nmp "$IDAS"
MSSERVICE -s "$SPGLOBAL window_animation_scale $UCSFNMC; $SPGLOBAL transition_animation_scale $UCSFNMC; $SPGLOBAL animator_duration_scale $UCSFNMC"
if $BOOTMODE; then UIP "Enabling Animation Scale Right Now"; $SPGLOBAL window_animation_scale $UCSFNMC; $SPGLOBAL transition_animation_scale $UCSFNMC; $SPGLOBAL animator_duration_scale $UCSFNMC; fi
MMPR -v "Animation Scale" "$VIPAS" "Animation Scale - Set On: $UCSFNMC"; SET_PERM_RM -msgdi
fi
}

IPGPUR () {
if [ "$ASDK" -ge 29 ]; then
UCSA -ent "Install GPU Rendering $VIPGPUR?" "IPGPURS" "$IDGPUR"
fi
}

IPGPURS () {
MSGGPURVR=true
for GPURVR in "OpenGL (Default)" "OpenGL Skia (Faster)" "OpenGL Skia Vulkan (Very Fast)"; do
MSGVGPURVR="$MSGNIS"
case $GPURVR in
"OpenGL (Default)") GPURV="opengl";; "OpenGL Skia (Faster)") GPURV="skiagl";; "OpenGL Skia Vulkan (Very Fast)") GPURV="skiavk"; MSGVGPURVR="$MSGNUS";; *) VGPUR=false;;
esac
if $MSGGPURVR; then
UIP -s "Choose GPU Rendering"
MSGGPURVR=false
else
MSGCS
fi
UIP "$MSGVU $GPURVR" "$MSGVD No $MSGVGPURVR"
if KEYCHOOSE; then
VGPUR=true
break
else
VGPUR=false
fi
done
if $VGPUR; then
UIP "Installing GPU Rendering $IAMM"
if $MAGISK; then
PTMFI -nmp "$IDGPUR"
echo "$GPURV" > $MODPATH/$MODID/build.prop
MMPR -v "GPU Rendering" "$VIPGPUR" "GPU Rendering - Set On: $GPURVR"
else
BUCKUPER -bp "$IPSBP"
echo -e "# GPU Rendering\ndebug.hwui.renderer=$GPURV\ndebug.composition.type=$GPURV" >> $IPSBP
fi
SET_PERM_RM -msgdi
fi
}

IPVS () {
if [ $ENDMODE != true ]; then MSGNUS="$MSGEND"; fi; UCSA -ent "Install Volume Steps $VIPVS?" "IPVSS" "$IDVS"
}

IPVSS () {
UIP -s "$MSGFI Choose Variant:" "$MSGVU Edit All Lines Together" "$MSGVD Edit All Lines Separately"
MSGVS=true; SETMEDIAVOLUMESTEPS=false; SETCALLVOLUMESTEPS=false; SETSYSTEMVOLUMESTEPS=false; SETALARMVOLUMESTEPS=false; MSGVSA="$MSGNIS"
if KEYCHOOSE; then
for VS in $(seq 10 5 50); do
MSGVSA="$MSGNIS"
case $VS in
"40") MSGVSA="$MSGNUS";;
esac
if $MSGVS; then
UIP -s "Choose Volume Steps:"
MSGVS=false
else
MSGCS
fi
UIP "Step Set On ($VS)" "$MSGVU Yes" "$MSGVD No $MSGVSA"
if KEYCHOOSE; then
VOLUMESTEPSC=true; SETMEDIAVOLUMESTEPS=true; SETCALLVOLUMESTEPS=true; SETSYSTEMVOLUMESTEPS=true; SETALARMVOLUMESTEPS=true; MEDIAVOLUMESTEPS="$VS"; CALLVOLUMESTEPS="$VS"; SYSTEMVOLUMESTEPS="$VS"; ALARMVOLUMESTEPS="$VS"
break
else
VOLUMESTEPSC=false
fi
done
else
for ALLVVS in "Media" "Call" "System" "Alarm"; do
case $ALLVVS in "Alarm") MSGVSA="$MSGNUS";; esac
UIP -s "Set For $ALLVVS" "$MSGVU Yes" "$MSGVD No $MSGVSA"
if KEYCHOOSE; then
for VS in $(seq 10 5 50); do
MSGVSA="$MSGNIS"
case $VS in "50") MSGVSA="$MSGNUS";; esac
if $MSGVS; then
UIP -s "Choose Volume Steps:"
MSGVS=false
else
MSGCS
fi
UIP "Step For $ALLVVS Set On ($VS)" "$MSGVU Yes" "$MSGVD No $MSGVSA"
if KEYCHOOSE; then
VOLUMESTEPSC=true
case $ALLVVS in
"Media") SETMEDIAVOLUMESTEPS=true; MEDIAVOLUMESTEPS="$VS";; "Call") SETCALLVOLUMESTEPS=true; CALLVOLUMESTEPS="$VS";; "System") SETSYSTEMVOLUMESTEPS=true; SYSTEMVOLUMESTEPS="$VS";; "Alarm") SETALARMVOLUMESTEPS=true; ALARMVOLUMESTEPS="$VS";;
esac
break
fi
done
fi
done
fi
if $VOLUMESTEPSC; then
UIP "Installing Volume Steps $IAMM"
if $MAGISK; then
PTMFI -nmp "$IDVS"
MMPR -v "Volume Steps" "$VIPVS" "Volume Steps"; IPVS=$MODPATH/$MODID/system.prop
else
BUCKUPER -bp "$IPSBP"; IPVS=$IPSBP
fi
if $SETMEDIAVOLUMESTEPS; then echo "ro.config.media_vol_steps=$MEDIAVOLUMESTEPS" >> $IPVS; fi
if $SETCALLVOLUMESTEPS; then echo "ro.config.vc_call_vol_steps=$CALLVOLUMESTEPS" >> $IPVS; fi
if $SETSYSTEMVOLUMESTEPS; then echo "ro.config.system_vol_steps=$SYSTEMVOLUMESTEPS" >> $IPVS; fi
if $SETALARMVOLUMESTEPS; then echo "ro.config.alarm_vol_steps=$ALARMVOLUMESTEPS" >> $IPVS; fi
SET_PERM_RM -msgdi
fi
}

} #

} #

{ #Presets

PRESETS () {
if [ -d $MODPATH ] && [ $MAGISKFIRSTTIME != true ] && $MAGISK && $MMUPDC; then for mmc in $(ls $MODPATH); do if [ -d "$MODPATH/$mmc" ]; then UCSA -ent "Checking Update?" "MMUPD_LIST" && break; fi; done; fi
UIP -s "UI: Pills/NavBar/Gboard/Themes/BA/Sounds" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then UI_PRESETS; fi
IPSL
if [ -d $STORAGE/Applications ] && find $STORAGE/Applications -type f -name "*.apk" >/dev/null; then IPAPP; fi
UIP -s "Audio: VFX(P)/DOLBY/NLS/AIST/SAQ/IB/AML/ALCF" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then AUDIO_PRESETS; fi
if $BOOTMODE; then REMOVAL_PRESETS; else UIP -s "Removal: RSL/RSO/RSTA/RWFSB" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then REMOVAL_PRESETS; fi; fi
if $TESTMODE; then UIP -s "Test/Coming Soon" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then TEST_COMING_SOON_PRESETS; fi; fi
UIP -s "Net: GPS/WIFI/TTL/DNS/APAUSBTF" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then NET_PRESETS; fi
UIP -s "Utilities: BB/SELC/CC/MMFR/DETACH/LSPosed" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then UTILITIES_PRESETS; fi
UIP -s "Other: FA/LED/FSFM/UAA/SBU/GASL" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then OTHER_PRESETS; fi
IPHF
if [ $ENDMODE != true ]; then MSGNUS="$MSGEND"; fi
UIP -s "Tweaks: FGS/BP/KL/UGMSD/USGP/VS" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if KEYCHOOSE; then MSGNUS="(/)"; TWEAKS_PRESETS; fi
}

UI_PRESETS () {
IPPO
IPPCO
IPPHO
IPPSHNB
IPBGD
IPGBNBS
IPGBRC
IPGBT
IPGBSTE
IPSBINNI
IPGPPM
IPRUI
IPBIP
IPNSP
IPSBISP
IPSBISI
IPSBCS
IPSUE
IPSBP
IPQSCP
IPSUIRSRS
IPQSCIAR
IPSBPD
IPEBB
IPBA
IPIOSEMOJI
IPMUIS
IPFDNI
IPWFAMDQSOS
}

AUDIO_PRESETS () {
IPVFX
IPVFXP
IPDA
IPNLS
IPAIST
IPSAQ
IPIB
IPAML
IPALCF
}

REMOVAL_PRESETS () {
RPASSF
RSWIFTO
GTRRRM
GTRMFL
RWFS
RRTPXML
RAPEXA
}

TEST_COMING_SOON_PRESETS () {
ROUNDEDUIC
PILLSOVERLAYC
SBINNIC
SHNBC
QUICKSTEPC
BIPC
FACEUNLOCKSERVICEC
NSPC
SBPC
COSBCSC
CSBISC
QSCIARC
CSBISIZEC
CSBPDC
}

NET_PRESETS () {
IPGPSP
IPWIFIP
IPTTLF
IPNT
IPAPAUSBTF
}

UTILITIES_PRESETS () {
IPBB
IPSELC
IPCC
IPMMFR
IPDETACH
IPLSPOSEDR
}

OTHER_PRESETS () {
IPFPA
IPLEDLO
IPLEDLA
IPFSLFM
UFAAPP
SBATTERYUSAGE
GASL
}

TWEAKS_PRESETS () {
IPFGS
IPFEG
IPHAP
IPAFUS
IPBPT
IPKL
IPFMSAAS
IPFDHWO
IPFDEVADB
IPFMTP
IPSOOOFUIRC
IPFDM
IPFDPP
IPFI
IPUGMSD
IPUSGP
IPAS
IPGPUR
IPVS
}

} #

AIOPFMD