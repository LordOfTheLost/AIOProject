#!/sbin/sh

VAIOPFMD="28.11.21 (64)"

{ #TMPDIR, Magisk Default Var, BB & Other Useful Links
IPDLTMP="/data/local/tmp"
TMPDIR="$IPDLTMP/AIOPFMD"
ALTTMPDIR="/dev/AIOPFMD"
NVBASE="/data/adb"
SERVICED="$NVBASE/service.d"
POSTFSDATAD="$NVBASE/post-fs-data.d"
IN="$1"
OUTFD="$2"
ZIPFILE="$3"
ADDONS="$ALTTMPDIR/Addons"
AADDONS="$TMPDIR/AltAddons"
BB="$ALTTMPDIR/BB"
EVENTS="$BB/events"
UNTARXZ="$BB/tar"
UNZIP="$BB/unzip"
TIMEOUT="$BB/timeout"
ECHO="$BB/echo"
ZIPSIGNER="$AADDONS/zipsigner"
ZIPSIGNERJAR="$ZIPSIGNER-3.0-dexed.jar"
ZIPALIGN="$AADDONS/zipalign"
ZIPPACKER="$AADDONS/zip-arm"
} #

{ #Version Or Date Of Patches In This Patch
#UI: Pills/NavBar/Gboard/Themes/BA/Sounds
IDPO="Pills"; VIPPO="v2.0"
IDPCO="PillsColors"; VIPPCO="v1.4"
IDPHOS="PillsHeight"; VIPPHO="v1.4"
IDPSHNB="ShowHideNavigationBar"; VIPPSHNB="v1.0"
IDBGDS="BackGestureDisabler"; VIPBGD="v1.0"
IDGBNBS="GboardNavBarSpacing"; VIPGBNBS="v1.2"
IDGBRC="GBoardRoundedCorners"; VIPGBRC="v1.1"
IDGBT="GBoardThemes"; VIPGBT="v1.3"
IDGBSTE="gboard-silk-theme"; VIPGBSTE="v0.4"; VCIPGBSTE="04"
IDSBINNI="SBINNI"; VIPSBINNI="v1.8"
IDGPPM="GPayPowerMenu"; VIPGPPM="v1.1"
IDRUI="RoundedUI"; VIPRUI="v2.6"
IDBIP="BurnInProtection"; VIPBIP="v1.6"
IDNSP="NotificationSidePaddings"; VIPNSP="v1.4"
IDSBIS="StatusBarIconSpace"; VIPSBIS="v1.3"
IDSBCS="StatusBarClockSize"; VIPSBCS="v1.0"
IDSUE="SingleUserEnabler"; VIPSUE="v1.1"
IDSBP="StatusBarPadding"; VIPSBP="v1.5"
IDQSCP="QSContentPadding"; VIPQSCP="v1.1"
IDSUIRSRS="SUIRoundedSize"; VIPSUIRSRS="v1.2"
IDQSCIAR="QSCountIconAndRows"; VIPQSCIAR="v1.4"
IDEBB="BackgroundBlur"; VIPEBB="v1.0"
IDBA="BootAnimation"; VIPBA="v1.4"
IDOSEMOJI="iOS14.6_Emoji_for_Android"; VIPOSEMOJI="v1.5"; VCIPOSEMOJI="1"
IDMUIS="MediaUISounds"; VIPMUIS="v1.3"
IDFDNI="ForceDisableNotificationIcons"; VIPFDNI="v1.0"
#Apps: GFU/GSF/SL/ASUSS/IA
IDGFUL="FaceLock"; VIPGFUL="v1.0"
IDGSF="GSF"; VIPGSF="v1.0"
IDSL="Systemless_Lawnchair"; VIPSL="v1.8"; VIPASLQ="10.0 Alpha 8"; VIPASLR="11 Alpha 6.1"; VIPASLS="12 Alpha 4"
IDSOPL="Systemless_OPLauncher"; VIPSOPL="v6.2"; VCIPSOPL="30100"; VAIPSOPL="v5.1.0"
IDSOUH="Systemless_OneUIHome"; VIPSOUHQ="v2.1"; VCIPSOUHQ="21"; VAIPSOUHQ="v11.0.50.67"; VIPSOUHR="v1.0"; VCIPSOUHR="1"; VAIPSOUHR="v12.1.07.19"
IDSPL="Systemless_PixelLauncher"; VIPSPL="v1.0"; VIPASPLQ="v10 (703)"; VIPASPLR="v11 (825)"
IDSSL="Systemless_ShadyLauncher"; VIPSSLQ="v1.5"; VCIPSSLQ="15"; VIPSSLR="v2021.08.04"; VCIPSSLR="20210804"
IDSLA="Systemless_AsusLauncher"; VIPSLA="v1.0"; VCIPSLA="1000"; VIPSLAQ="7.0.1.60"; VIPSLAR="7.5.0.24"
IDASUSS="AsusLongshot3"; VIPASUSS="v3.0"; VCIPASUSS="30"
IDAIOIARPFMD="AIOIARPFMD"; VAIOIARPFMD="$VAIOPFMD"
#Audio: VFX(P)/NL/AIST/SAQ/IB/ACP/AML
IDVFXL="ViPER4AndroidFX-Legacy"; VIPVFXL="v2.5.0.5"; VCIPVFXL="86"
IDVFX="ViPER4AndroidFX"; VIPVFX="v2.7.1.6"; VCIPVFX="2716"
IDVFXP="V4AFXPresets"; VIPVFXP="v1.3"
IDJDSPM="ainur_jamesdsp"; VIPJDSPM="v4.3 (9-8-2021)"; VCIPJDSPM="83"
IDDTSHPX="DTS_HPX"; VIPDTSHPX="zenz"; VCIPDTSHPX="58"
IDAN="ainur_narsil"; VIPAN="MK I (09.09.2021)"; VCIPAN="52"
IDNLS="NLSound"; VIPNLS="v3.0 STABLE"; VCIPNLS="7"
IDAIST="AIST"; VIPAIST="v1.2"; VCIPAIST="15"
IDSAQ="systemaudioquality2"; VIPSAQ="2.0"; VCIPSAQ="2"
IDIBS="IncreaseBitrate"; VIPIBS="v1.0"
IDUSBPP="upp"; VIPUSBPP="v1.5"; VCIPUSBPP="7"
IDACP="acp"; VIPACP="v2.4"; VCIPACP="38"
IDAML="aml"; VIPAML="v4.0"; VCIPAML="55"
#AdBlock/Hosts
IDDAB="disableadblock"; VIPDAB="1.0"; VCIPDAB="1"
IDVAAH="AdAwayHosts"; VIPVAAH="24.11.2021"
IDVLPH="LuckyPatcherHosts"; VIPVLPH="v9.8.1"; VCIPLPH="1741"
IDVSH="SystemlessHostsUnified"; VIPVSH="v16.9-210829"; VCIPVSH="169"
IDVOH="Hosts"; VIPVOH="v1.1"
#Net: GPS/TTL/DNS/WB/USBTF
IDGOGPS="optmizedgpsconf"; VIPGOGPS="v6"; VCIPGOGPS="6"
IDTTLF="nfqttl"; VIPTTLF="v2.7"; VCIPTTLF="2"
IDNT="NetworkTweak"; VIPNT="v6"; VCIPNT="6"
IDWIFIB="wifi-bonding"; VIPWIFIB="1.14"; VCIPWIFIB="15"
IDUSBTF="USBTF"; VIPUSBTF="v1.0"
#Utilities: BB/ZS/SELC/ASTE/CC/Detach
IDBB="busybox-brutal"; VIPBB="v1.35.0.1"; VCIPBB="13501"
IDZSAAPT="zipsigner"; VIPZSAAPT="3.0" VCIPZSAAPT="3016"
IDSELC="SeLinuxChanger"; VIPSELC="v1.3"
IDASTE="terminal_systemizer"; VIPASTE="v17.3.1"; VCIPASTE="70"
IDCC="CacheCleaner"; VIPCC="v2.3"
IDDETACH="Detach"; VIPDETACH="v5.3"; VCIPDETACH="530"
IDDETACH3="detach3"; VIPDETACH3="v3.08"; VCIPDETACH3="308"
IDSQL3="73sydney.sqlite3"; VIPSQL3="v1.0"; VCIPSQL3="1"
IDMMFRM="mm"; VIPMMFRM="2020.4.17"; VCIPMMFRM="202004170"
#Other: DFO/STZD/DDVFE/FA/SBU
IDBDFFSOQSS="BDFFSLOQS"; VIPBDFFSOQSS="v1.2"
IDSTZD="Systemless_TZData"; VIPSTZD="2020A&F"; VCIPSTZD="16"
VIPDDVFE="02.11.2020"
IDFPA="FingerprintActions"; VIPFPA="v1.1"
IDFSLFM="FSFM"; VIPFSLFM="v1.2"
#SafetyNet/MHPC/GPay
IDSNP="petnoires-safetyspoofer"; VIPSNP="v1-beta2"; VCIPSNP="16"
IDSNPA="safetypatcher"; VIPSNPA="v3"; VCIPSNPA="5"
IDSNPRZ="safetynet-fix"; VIPSNPR="v2.1.1"; VCIPSNPR="20101"; VIPSNPZ="v2.2.0"; VCIPSNPZ="20200"
IDSNET="SafetyNetEvalType"; VIPSNET="v1.0"
IDMHPC="MagiskHidePropsConf"; VIPMHPC="v6.1.2-v137"; VCIPMHPC="75"
IDGPF="73sydney.gpay"; VIPGPF="v2.4"; VCIPGPF="1"
IDFPMC="ForcePlayMarketCertified"; VIPFPMC="v1.0"
#Riru/Edx/LS/Posed/Mudules
IDRIRU="riru-core"; VIPRIRU="v26.1.3.r513.8e95115fd4"; VCIPRIRU="513"; VIPRIRUL="v25.4.4.r426.05efc94"; VCIPRIRUL="426"
IDEDXPOSED="riru_edxposed"; VIPEDXPOSED="v0.5.2.2_4683-master"; VCIPEDXPOSED="4683"
IDLSPOSEDR="riru_lsposed"; VIPLSPOSEDR="v1.6.3 (6255)"; VCIPLSPOSEDR="6255"
IDLSPOSEDZ="zygisk_lsposed"; VIPLSPOSEDZ="v1.6.3 (6255)"; VCIPLSPOSEDZ="6255"
IDRIRUCW="riru_clipboard_whitelist"; VIPRIRUCW="v11"; VCIPRIRUCW="11"
IDRMH="riru_momohider"; VIPRMH="0.0.7"; VCIPRMH="7"
#Tweaks: FGS/BP/LED/UGMSD/USGP/VS
IDFGS="ForceGoogleSync"; VIPFGS="v1.1"
IDFEG="ForceGestures"; VIPFEG="v1.1"
IDHAP="EnablingHiddenApiPolicy"; VIPHAP="v1.2"
IDAFUS="AFUSS"; VIPAFUS="v1.1"
IDBPT="BuildPropTweaks"; VIPBPT="v2.0"
IDKL="killlogger"; VIPKL="v1.5"; VCIPKL="6"
IDFMSAAS="ForceMSAASwitcher"; VIPFMSAAS="v1.0"
IDFDHWO="ForceDisableHWOverlays"; VIPFDHWO="v1.1"
IDFDEVADB="ForceDEVADB"; VIPFDEVADB="v1.4"
IDSOOOFUIRC="SOOOFUIRC"; VIPSOOOFUIRC="v1.7"
IDFDM="ForceDarkMode"; VIPFDM="v1.0"
IDFDPP="ForceDisablingPlayProtect"; VIPFDPP="v1.0"
IDFI="ForceIdle"; VIPFI="v1.0"
IDCLEDLO="ChargingLedLightOff"; VIPCLEDLO="v1.2"
IDLEDLA="LEDLightAnimation"; VIPLEDLA="v1.2"
IDUGMSD="UniversalGMSDoze"; VIPUGMSD="v1.8.3"; VCIPUGMSD="183"
IDUSGP="USGP"; VIPUSGP="v1.1"
IDAS="AnimationScale"; VIPAS="v1.1"
IDGPUR="GPURendering"; VIPGPUR="v1.0"
IDVS="VolumeSteps"; VIPVS="v1.2"
} #

{ #Helper Functions

BOOT_DETECTED() {
[ -z $BOOTMODE ] && ps | grep zygote | grep -qv grep && BOOTMODE=true
[ -z $BOOTMODE ] && ps -A 2>/dev/null | grep zygote | grep -qv grep && BOOTMODE=true
[ -z $BOOTMODE ] && BOOTMODE=false
}

APMSGASD() {
MSGSD="•"
MSGDELIMITER="••••••••••••••••••••••••••••••••••••••••••••••••••"
if $BOOTMODE; then
MSGVU="▲ ►"; MSGVD="▼ ►"
else
MSGVU="+ >"; MSGVD="- >"
fi
MSGDI="Install Done"
MSGUD="Uninstall Done"
MSGDRM="Remove Done"
MSGDRP="Replace Done"
MSGDRS="Restore Done"
MSGDD="Disable Done"
MSGED="Enable Done"
MSGFI="Found Install"
MSGIIP="(I)"
MSGEFTC="(\)"
MSGNIS="(|)"
MSGNUS="(/)"
MSGEEFTC="(|\)"
MSGEND="(//)"
MSGRI="(R)"
MSGWDI="Community"
MSGFMM="For AOSP/LOS & Other Rom"
MSGPMODE="$MSGSD Opens Some Test Items/Patches - Set: U(ser) Or D(ebug)"
MSGKMETHOD="$MSGSD Force Switching Between Old And New \"KeyCheck\" Method - Set: N(ew), O(ld) Or A(lt)"
MSGTKEY="$MSGSD A Second Check Is Turned On For KMETHOD O(ld) - Set: false Or true"
MSGPDESIGN="$MSGSD Changes The \"Design\" Of The Patch - Set: N(ew) Or O(ld)"
MSGLEDCOLOR="$MSGSD This Is The Color Of Your Diode - Set: R(ed), G(reen), B(lue) Or W(hite)"
MSGHFMODE="$MSGSD Adds Tactile Feedback To Patch Selections - Set: Values From 1 To 255 For Weak/Strong Vibration"
MSGHFSMODE="$MSGSD Sets Values From HFMODE Not To duration, But To enable And/Or activate - Set: false Or true"
MSGMCMODE="$MSGSD Enables Or Disables The Choice In TWRP How To Install Via Magisk Or Not With DEBUGMODE - Set: false Or true"
MSGENDMODE="$MSGSD Allows You To Return To The Beginning Of The Patch Without Reselecting If You Missed Something - Set: false Or true"
MSGBIDMODE="$MSGSD Writes The ID Of The Buttons For Alt KMETHOD O(ld) Without A Bind - Default: ButtonIDUP=42 & ButtonIDDOWN=41"
MSGDRMODE="$MSGSD Display Resolution For Boot Animation"
MSGMMUPDC="$MSGSD Adds Version Checking Of Magisk Modules Between Patch And Installed - Set: false Or true"
MSGLEGACYMODE="$MSGSD Includes Showing Old/Obsolete Patches/Features - Set: false Or true"
MSGEVENTSMODE="$MSGSD Adds Events To The Patch - Set: false Or true"
}

IS_MOUNTED() {
grep -q " `readlink -f $1` " /proc/mounts 2>/dev/null
return $?
}

PARTITION_AND_MOUNTS() {
if $BOOTMODE; then
MSGDELIMITER
else
if [ -n "$(cat /proc/cmdline | grep slot_suffix)" ]; then DABP=true; SYSTEM_MOUNT="/system"; SYSTEM="$SYSTEM_MOUNT/system"; VENDOR="/vendor/vendor"; elif [ -n "$(cat /etc/fstab | grep /system_root)" ]; then DABP=false; SYSTEM_MOUNT="/system_root"; SYSTEM="$SYSTEM_MOUNT/system"; VENDOR="/vendor"; else DABP=false; SYSTEM_MOUNT="/system"; SYSTEM="$SYSTEM_MOUNT"; VENDOR="/vendor"; fi
Mounts=""
for p in "$SYSTEM_MOUNT" "$VENDOR"; do
if [ -d "$p" ] && grep -q "$p" "/etc/fstab"; then
Mounts="$Mounts $p"
fi
done
for m in $Mounts; do
if IS_MOUNTED "$m"; then
umount "$m"
fi
mount "$m"
done
grep -q "$SYSTEM_MOUNT.*\sro[\s,]" /proc/mounts && mount -o remount,rw $SYSTEM_MOUNT  # remount whatever $SYSTEM_MOUNT is, sometimes necessary if mounted read-only
UIP -d "Mounting$Mounts"
fi
if [ -f /system/system/build.prop ]; then FTSYSTEM=true; FTSYSTEMROOT=false; SYSTEM="/system/system"; elif [ -f /system_root/system/build.prop ]; then FTSYSTEM=true; FTSYSTEMROOT=true; SYSTEM="/system_root/system"; elif [ -f /system/build.prop ]; then FTSYSTEM=false; FTSYSTEMROOT=false; SYSTEM="/system"; fi
if [ $BOOTMODE != true ] && [ -n "$(cat /etc/fstab | grep /vendor)" ]; then FVENDOR=true; elif [ $BOOTMODE != true ] && [ -d $SYSTEM/vendor ]; then FVENDOR=false; VENDOR="$SYSTEM/vendor"; else VENDOR="/vendor"; fi
}

IMPORTANT_VARIABLES() {
MODPATH="$NVBASE/modules"; MODPATHUPD="$NVBASE/modules_update"
MIPSV="/system/vendor"
IPSAX="$SYSTEM/apex"; MIPSAX="/system/apex"
IPSB="$SYSTEM/bin"; MIPSB="/system/bin"
IPSXB="$SYSTEM/xbin"; MIPSXB="/system/xbin"
IPSA="$SYSTEM/app"; MIPSA="/system/app"
IPSPA="$SYSTEM/priv-app"; MIPSPA="/system/priv-app"
IPSE="$SYSTEM/etc"; MIPSE="/system/etc"
IPSEID="$IPSE/init.d"; MIPSEID="$MIPSE/init.d"
IPSES="$IPSE/sysconfig"; MIPSES="$MIPSE/sysconfig"
IPSEP="$IPSE/permissions"; MIPSEP="$MIPSE/permissions"
IPSEDP="$IPSE/default-permissions"; MIPSEDP="$MIPSE/default-permissions"
IPSL="$SYSTEM/lib"; MIPSL="/system/lib"
IPSL64="$SYSTEM/lib64"; MIPSL64="/system/lib64"
IPSLM="$IPSL/modules"; MIPSLM="$MIPSL/modules"
IPSLS="$IPSL/soundfx"; MIPSLS="$MIPSL/soundfx"
IPSLS64="$IPSL64/soundfx"; MIPSLS64="$MIPSL64/soundfx"
IPSAD="$SYSTEM/addon.d"; MIPSAD="/system/addon.d"
IPSBP="$SYSTEM/build.prop"; MIPSBP="/system/build.prop"
IPSSP="$SYSTEM/product"; MIPSSP="/system/product"
IPSSPBP="$IPSSP/build.prop"; MIPSSPBP="$MIPSSP/build.prop"
IPSDP="$SYSTEM/default.prop"; MIPSDP="/system/default.prop"
IPSSPA="$IPSSP/app"; MIPSSPA="$MIPSSP/app"
IPSSPPA="$IPSSP/priv-app"; MIPSSPPA="$MIPSSP/priv-app"
IPSSPE="$IPSSP/etc"; MIPSSPE="$MIPSSP/etc"
IPSSPES="$IPSSPE/sysconfig"; MIPSSPES="$MIPSSPE/sysconfig"
IPSSPER="$IPSSPE/res"; MIPSSPER="$MIPSSPE/res"
IPSSPERVC="$IPSSPER/values/charger"; MIPSSPERVC="$MIPSSPER/values/charger"
IPSSPERIC="$IPSSPER/images/charger"; MIPSSPERIC="$MIPSSPER/images/charger"
IPSSPEP="$IPSSPE/permissions"; MIPSSPEP="$MIPSSPE/permissions"
IPSSE="$SYSTEM/system_ext"; MIPSSE="/system/system_ext"
IPSSEA="$IPSSE/app"; MIPSSEA="$MIPSSE/app"
IPSSEPA="$IPSSE/priv-app"; MIPSSEPA="$MIPSSE/priv-app"
IPSFW="$SYSTEM/framework"; MIPSFW="/system/framework"
IPSPO="$IPSSP/overlay"; MIPSPO="$MIPSSP/overlay"
IPSO="$SYSTEM/overlay"; MIPSO="/system/overlay"
IPSUKL="$SYSTEM/usr/keylayout"; MIPSUKL="/system/usr/keylayout"
IPSUSZI="$SYSTEM/usr/share/zoneinfo"; MIPSUSZI="/system/usr/share/zoneinfo"
IPSPM="$IPSSP/media"; MIPSPM="$MIPSSP/media"
IPSPMAU="$IPSPM/audio/ui"; MIPSPMAU="$MIPSPM/audio/ui"
IPSM="$SYSTEM/media"; MIPSM="/system/media"
IPSMAU="$IPSM/audio/ui"; MIPSMAU="$MIPSM/audio/ui"
IPSF="$SYSTEM/fonts"; MIPSF="/system/fonts"
IPSEDF="$IPSE/device_features"; MIPSEDF="/system/device_features"
IPVBP="$VENDOR/build.prop"; MIPSVBP="$MIPSV/build.prop"
IPVE="$VENDOR/etc"; MIPSVE="$MIPSV/etc"
IPVED="$IPVE/dirac"; MIPSVED="$MIPSVE/dirac"
IPVL="$VENDOR/lib"; MIPSVL="$MIPSV/lib"
IPVL64="$VENDOR/lib64"; MIPSVL64="$MIPSV/lib64"
IPVLRA="$IPVL/rfsa/adsp"; MIPSVLRA="$MIPSVL/rfsa/adsp"
IPVDA="$VENDOR/dsp/adsp"; IPSVDA="$MIPSV/dsp/adsp"
IPVLM="$IPVL/modules"; MIPSVLM="$MIPSVL/modules"
IPVLS="$IPVL/soundfx"; MIPSVLS="$MIPSVL/soundfx"
IPVLS64="$IPVL64/soundfx"; MIPSVLS64="$MIPSVL64/soundfx"
IPVO="$VENDOR/overlay"; MIPSVO="$MIPSV/overlay"
IPVUKL="$VENDOR/usr/keylayout"; MIPSVUKL="/vendor/usr/keylayout"
IPVF="$VENDOR/firmware"; MIPSVF="$MIPSV/firmware"
IPVA="$VENDOR/app"; MIPSVA="$MIPSV/app"
IPVPA="$VENDOR/priv-app"; MIPSVPA="$MIPSV/priv-app"
IPVEDF="$IPVE/device_features"; MIPSVEDF="$MIPSV/device_features"
IPDA="/data/app"
IPDD="/data/data"
IPDS="/data/system"
IPDSU="$IPDS/users"
IPDSUDE="/data/user_de"
IPDSNS="$IPDS/netstats"
IPDBBN="/dev/block/by-name"
IPDM="/data/misc"
IPDMDE="/data/misc_de"
IPDRESC="/data/resource-cache"
STORAGE="/sdcard"
ASTORAGE="/data/media"
ACXML="$(find $SYSTEM $VENDOR -type f -name "audio_configs*.xml")"
ACCONF="$(find $SYSTEM $VENDOR -type f -name "audio_configs*.xml")"
APIIEXML="$(find $SYSTEM $VENDOR -type f -name "audio_platform_info*.xml" -o -name "audio_platform_info_intcodec*.xml" -o -name "audio_platform_info_extcodec*.xml")"
AECONFXML="$(find $SYSTEM $VENDOR -type f -name "*audio_effects*.conf" -o -name "*audio_effects*.xml")"
MPATHS="$(find $SYSTEM $VENDOR -type f -name "mixer_paths*.xml")"
STPI="$(find $SYSTEM $VENDOR -type f -name "sound_trigger_platform_info*.xml")"
AIPCONF="$(find $SYSTEM $VENDOR -type f -name "*audio_io_policy*.conf" -o -name "*audio_output_policy*.conf")"
AIPCONFA="$(find $SYSTEM $VENDOR -type f -name "audio_io_policy*.conf")"
APCXML="$(find $SYSTEM $VENDOR -type f -name "audio_policy_configuration.xml")"
MCGAX="$(find $SYSTEM $VENDOR -type f -name "*media_codecs_google_c2_audio*.xml" -o -name "*media_codecs_google_audio*.xml" -o -name "*media_codecs_vendor_audio*.xml")"
USBAPCXML="$(find $SYSTEM $VENDOR -type f -name "usb_audio_policy_configuration.xml")"
APCONF="$(find $SYSTEM $VENDOR -type f -name "*audio_*policy*.conf")"
APCONFXML="$(find $SYSTEM $VENDOR -type f -name "*audio_*policy*.conf" -o -name "*audio_*policy*.xml")"
MPXML="$(find $IPVE -type f -name "media_profiles*.xml")"
WCNSQCCFGI="$(find $SYSTEM $VENDOR -type f -name "WCNSS_qcom_cfg.ini")"
SFXML="$(find $SYSTEM $VENDOR -type f -name "*SFXML_feature*.xml")"
MGXML="$(find $SYSTEM $VENDOR -type f -name "*mixer_gains*.xml")"
ADXML="$(find $SYSTEM $VENDOR -type f -name "*audio_device*.xml")"
AETXML="$(find $SYSTEM $VENDOR -type f -name "*audio_effects_tune*.xml")"
VNDK="$(find $IPSL $IPVL -type d -iname "*vndk*")"
VNDK64="$(find $IPSL64 $IPSVL64 -type d -iname "*vndk*")"
VNDKQ="$(find $IPSL $IPVL -type d -iname "vndk*-Q")"
VNDKQ64="$(find $IPSL64 $IPVL64 -type d -iname "vndk*-Q")"
SDEVFE="$IPSEDF/*.xml"; VDEVFE="$IPVEDF/*.xml"
SPGLOBAL="settings put global"; SPSECURE="settings put secure"; SPSYSTEM="settings put system"
if [ -f $STORAGE/PATCHMODE* ]; then PATCHMODEFILE="$(find $STORAGE/PATCHMODE*)"; FINDPATCHMODE=true; else for f in $(ls $STORAGE); do if [ -f $STORAGE/$f/PATCHMODE* ]; then PATCHMODEFILE="$(find $STORAGE/$f/PATCHMODE*)"; FINDPATCHMODE=true; break; else FINDPATCHMODE=false; fi; done; fi; if [ $FINDPATCHMODE != true ]; then touch $STORAGE/PATCHMODE.conf; PATCHMODEFILE="$STORAGE/PATCHMODE.conf"; fi
case $PATCHMODEFILE in *sh*) mv $PATCHMODEFILE $STORAGE/PATCHMODE.conf; PATCHMODEFILE="$STORAGE/PATCHMODE.conf";; esac
PMODE="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "PMODE")"
HFDURATION="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "HFMODE")"
HFSWAPMODE="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "HFSMODE")"
PDESIGN="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "PDESIGN")"
LEDCOLOR="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "LEDCOLOR")"
KMETHOD="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "KMETHOD")"
TKEY="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "TKEY")"
MCMODE="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "MCMODE")"
ENDMODE="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "ENDMODE")"
BUTTONIDUP="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "ButtonIDUP")"
BUTTONIDDOWN="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "ButtonIDDOWN")"
DRMODE="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "DRMODE")"
MMUPDC="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "MMUPDC")"
LEGACYMODE="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "LEGACYMODE")"
EVENTSMODE="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "EVENTSMODE")"
PROPFILES="$IPSDP $IPSBP $IPVBP /data/local.prop /default.prop /build.prop"
PROPFILESALT="$IPSBP $IPVBP"
DMYHMS="$( date +"%d-%m-%Y-%H:%M:%S" )"; TIMED="$( date +"%d" )"; TIMEM="$( date +"%m" )"; TIMEY="$( date +"%Y" )"
SYSCL="/sys/class/leds"
LEDLSC="chmod 755 /sys/class/*/*/* /sys/module/*/*/*"
LEDMBRED="$SYSCL/red/max_brightness"
LEDMBGREEN="$SYSCL/green/max_brightness"
LEDMBBLUE="$SYSCL/blue/max_brightness"
LEDMBWHITE="$SYSCL/white/max_brightness"
LEDRED="$SYSCL/red/brightness"
LEDGREEN="$SYSCL/green/brightness"
LEDBLUE="$SYSCL/blue/brightness"
LEDWHITE="$SYSCL/white/brightness"
FLASHLIGHT="$SYSCL/flashlight/brightness"
BUTTONBACKLIGHT="$SYSCL/button-backlight/brightness"
if [ -d $IPSPO ] && [ -d $IPVO ]; then IPPSO="$IPSPO"; MIPPSO="$MIPSPO"; IPPVO="$IPVO"; MIPPVO="$MIPSVO"; elif [ -d $IPSPO ]; then IPPSO="$IPSPO"; MIPPSO="$MIPSPO"; IPPVO="$IPSPO"; MIPPVO="$MIPSPO"; elif [ -d $IPSO ]; then IPPSO="$IPSO"; MIPPSO="$MIPSO"; IPPVO="$IPSO"; MIPPVO="$MIPSO"; fi
if [ -d $IPSPMAU ]; then IPPMU="$IPSPMAU"; MIPPMU="$MIPSPMAU"; elif [ -d $IPSMAU ]; then IPPMU="$IPSMAU"; MIPPMU="$MIPSMAU"; fi
if [ -d $IPSPM ]; then IPPM="$IPSPM"; MIPPM="$MIPSPM"; elif [ -d $IPSM ]; then IPPM="$IPSM"; MIPPM="$MIPSM"; fi
for f in Fox TWRP SHRP PBRP; do if [ -d $STORAGE/$f ]; then PLOGS="$STORAGE/$f/AIOLogs"; FPLOGS=true; break; else FPLOGS=false; fi; done; if [ $FPLOGS != true ]; then PLOGS="$STORAGE/AIOLogs"; fi
if [ ! -d $IPSXB ] && [ $BOOTMODE != true ]; then mkdir -p $IPSXB; IPPSXB=$IPSXB; IPPSXBM=$MIPSXB; BINPATH=xbin; elif [ ! -d $IPSXB ] && $BOOTMODE; then IPPSXB=$IPSB; IPPSXBM=$MIPSB; BINPATH=bin; else IPPSXB=$IPSXB; IPPSXBM=$MIPSXB; BINPATH=xbin; fi
if [ -f $STORAGE/AIOPFMDA* ]; then AIOPFMDAFILE="$(find $STORAGE/AIOPFMDA*)"; FINDAIOPFMDA=true; else for f in $(ls $STORAGE); do if [ -f $STORAGE/$f/AIOPFMDA* ]; then AIOPFMDAFILE="$(find $STORAGE/$f/AIOPFMDA*)"; FINDAIOPFMDA=true; break; else FINDAIOPFMDA=false; fi; done; fi
}

APP_LIST() {

STOCKLISTNOMIUI="
Calculator
Calendar
Contacts
DeskClock
FileExplorer
FileExplorerGlobal
MiuiCamera
Mms
"

STOCKLIST="
404Clock
AEXPapers
ANGLE
APlayer
AbleMusic
Abstruct
AccuweatherPhone2015_MASS_HD_SWS
AdAway
Aegis
AirDots
AirDotsPlugin
AnalyticsCore
AncientClockWidget
AndroidAutoPrebuilt
AndroidAutoStub
AndroidAutoStubPrebuilt
AndroidForWork
AudioFX
BatteryTile
BookmarkProvider
Books
BooksPhone
BooksStub
Browser
Browser2
BrowserXposed
CMFileManager
CalculatorGoogle
CalculatorGooglePrebuilt
CalendarGoogle
CalendarGooglePrebuilt
Camera2
CameraGo
CarHomeGoogle
CarrierServices
CatchLog
CellBroadcastApp
ChocoEUKor
Chrome
Chrome-Stub
ChromeCustomizations
ClockPackage_MASS_Le
CloudPrint
CloudPrint2
ColtPapers
DeskClockGoogle
DevicePersonalizationPrebuiltPixel2020
DevicePersonalizationPrebuiltPixel4
DevicePolicyPrebuilt
DiagMonAgent
DiagnosticsToolPrebuilt
Dialer
DigitalClockEasy_L
DigitalClock_L
DotFEWallpapers
DotWallpapers
Drive
DualClockDigital_L
DuckDuckGo
Duo
EasterEgg
EasymodeContactsWidget
Eleven
Email
EmergencyInfo
EngineerMode
Etar
ExactCalculator
Excel_SamsungStub
Exchange2
FBAppManager_NS
FBInstaller_NS
FDroid
FDroidPrivilegedExtension
FM
FM2
FMRadio
FM_TEST
Facebook_stub
FilesPrebuilt
FitnessPrebuilt
Focus
FotaAgent
GCS
GCam
GCamGOPrebuilt
GCamGo
Galaxy4
GalaxyApps
Gallery
Gallery2
GalleryGo
GalleryGoPrebuilt
GalleryGoogle
GalleryPrebuilt
GameCenter
GameCenterGlobal
Gboard
Gcam
GenieWidget
GlobalTrendNews
GlobalUserGuide
Gmail
Gmail2
GoogleCalendar
GoogleCamera
GoogleCameraGo
GoogleCameraLegacy
GoogleCloudPrint
GoogleContacts
GoogleDialer
GoogleEars
GoogleEarth
GoogleFeedback
GoogleHangouts
GoogleHindiIME
GoogleHome
GoogleJapaneseInput
GoogleKeep
GoogleKeyboard
GoogleLatinIme
GoogleMusic
GoogleNow
GoogleNowVoiceSearch
GooglePinyinIME
GooglePlus
GooglePrintRecommendationService
GoogleTTS
GoogleVrCore
HTMLViewer
Hangouts
HangoutsDialer
Health
HelpRtcPrebuilt
HoloSpiralWallpaper
HotwordEnrollment
HotwordEnrollmentOKGoogle*
HotwordEnrollmentXGoogle*
HybridAccessory
HybridPlatform
HybridRadio2015
HyconWallpapers
IdMipay
InMipay
Jelly
Joyose
KLMSAgent
Keep
KimciRecorder
KoreanIME
KoreanIMEStub
LPaper-v1.0.0-release
LPaper-v2.0-release
LatinIME
LatinIMEGooglePrebuild
LatinIMEGooglePrebuilt
LatinImeDictionaryPack
LatinImeGoogle
LatinImeGoogleWithLatinIME
LatinImeTutorial
Lawnfeed
Leaflet
Lens
MSA-Global
MSSkype_stub
MaestroPrebuilt
Maps
MatLog
MatchmakerPrebuilt
MatchmakerPrebuiltPixel4
Megogo
Megogo_vender
Messages
Messaging
MiBrowser
MiBrowserGlobal
MiDrive
MiDrop
MiGalleryLockscreen
MiHealth
MiMover
MiMusic
MiPicks
MiService
MiShare
MiVideo
Mimoji
MiuiBugReport
MiuiCompass
MiuiScanner
MiuiSuperMarket
MiuiVideo
MiuiVideoGlobal
MiuiVideoPlayer
MozillaNlpBackend
Music
Music2
MusicFX
MusicPlayerGO
MyVerizonServices
NeMate
Netflix_activation
NewsWeather
Newsstand
NewsstandStub
NextPay
NexusLauncherIcons
NexusWallpapersStubPrebuilt2017
NexusWallpapersStubPrebuilt2019
NezukoMusic
NoiseField
Notes
NovaBugreportWrapper
ONESettings
OPFileManager
OPIconpackOnePlus
OPIconpackOxygen
OPIconpackRound
OPScreenRecord
OPScreenRecorder
OPWeather
OPWidget
OmniSwitch
OneNote
OneOSLogcat
OneOSSTATS
OneOSSpace
Opera
OperaMax
OperaMax_PreinstallProvider
Opera_data
Ornament
Papers
PartnerBookmarksProvider
PaymentService
PersonalAssistant
PersonalAssistantGlobal
PhaseBeam
Phonograph
PhotoTable
Photos
PicoTts
PixelLiveWallpaperPrebuilt
PixelWallpapers2020
PlayGames
PowerPoint_SamsungStub
PrebuiltBugle
PrebuiltBugleStub
PrebuiltDeskClockGoogle
PrebuiltEmailGoogle
PrebuiltExchange3Google
PrebuiltGmail
PrebuiltGoogleTelemetryTvp
PulseMusic
PureBrowser
QPGallery
QuickAccessWallet
QuickSearchBox
RRWallpapers
Recorder
RecorderPrebuilt
RetroMusicPlayer
RetroMusicPlayerPrebuilt
RevengeMessages
RevengeOSCalculator
RockClient
RomStats
RoseEUKor
SBrowser_3.0.38_MASS_LATEST
SOAgent
SPPPushClient_Prod
SPenSdk3
SPlannerWidget_Essential
SPlanner_Essential
SafetyHubPrebuilt
SamsungIMEv2
SamsungSans
SamsungTTS
ScribePrebuilt
SecCalculator2_L
SecEmailComposer-mass
SecEmailProvider-mass
SecEmailSync-mass
SecEmailUI-mass
SecEmailWidget-mass
SecHTMLViewer
SecMyFiles2015_ESS
SecSetupWizard2015
SecurityLogAgent
ShiftPapers
Simple-Calendar
SimpleCalendar
SimpleGallery
SimpleGalleryPro
SmartManagerSDK
SmartManager_OLEDHD
Snap
SnapdragonMusic
SoundAmplifierPrebuilt
SprdQuickSearchBox
StatusBarLyricExt
Street
Superiorwalls
Talk
TeamOctavi
Terminal
TipsPrebuilt
TouchAssistant
Translate
TranslatePrebuilt
Turbo
TurboAdapter
TurboPrebuilt
Tycho
UPTsmService
Velvet
Velvet_update
Via
ViaBrowser
Videos
VinylMusicPlayer
VoiceSearch
VoiceSearchStub
Wallet
Wallpaper
WallpaperPickerGoogle
WallpaperPickerGooglePrebuilt
WallpaperPickerGoogleRelease
WallpapersBReel2017
WallpapersBReel2019
WallpapersBReel2020
WallpapersBReel2020a
WarpShare
WaveWidget
WeatherDaemon
WeatherTile
WebManual
Wellbeing
WellbeingPrebuilt
Word_SamsungStub
XiaomiKeyboard
YGPS
YellowPage
YouDaoEngine
YouTube
YouTubeMusicPrebuilt
YouTubeVanced
ZVideoMass
arcore
com.google.ar.core
crDroidMusic
facebook-appmanager
facebook-installer
facebook-services
greenguard
iWnnIME
iWnnIME_Kbd_White
mab
madCamera
madLauncher
madWallpapers
messaging
stats
talkback
"

EXPERIMENTALLIST="
AmbientSensePrebuilt
AndroidMigratePrebuilt
AndroidPlatformServices
BackupRestoreConfirmation
BasicDreams
BrowserProviderProxy
BuiltInPrintService
CalendarProvider
CellBroadcastReceiver
ChromeBookmarksSyncAdapter
ConfigUpdater
ConnMO
Currents
DMAgent
EditorsDocs
EditorsDocsStub
EditorsSheets
EditorsSheetsStub
EditorsSlides
EditorsSlidesStub
EuiccGoogle
ExchangeServices
FOTAKill
FaceLock
Finsky
GmsCore
GmsCoreSetupPrebuilt
GmsCore_update
GoogleBackupTransport
GoogleCalendarSyncAdapter
GoogleContactsSyncAdapter
GoogleLoginService
GoogleOneTimeInitializer
GooglePartnerSetup
GooglePlay
GoogleQuickSearchBox
GoogleSearch
GoogleServicesFramework
GoogleZhuyinIME
LineageSetupWizard
LocationHistoryPrebuilt
Magazines
MarketUpdater
Markup
MarkupGoogle
MediaUploader
NetworkLocation
OccamQuickOffice
OneTimeInitializer
Phonesky
PlayAutoInstallConfig
PlayStore
PlusOne
PrebuiltGmsCore
PrebuiltGmsCorePix
PrebuiltGmsCoreQt
PrebuiltGmsCoreRvc
PrebuiltKeep
PrebuiltKeepStub
PrebuiltNewsWeather
PrintSpooler
QuickOffice
SPrintSpoolerLMR1
SamsungBilling
SettingsGoogle
SettingsIntelligenceGooglePrebuilt
SoundPicker
SoundPickerPrebuilt
Stk
Stk2
StorageManagerGoogle
Tag
TagGoogle
TrichromeLibrary
TrichromeLibrary-Stub
VZWAPNLib
Vending
WallpaperPicker_Zero2
WebView
WebViewGoogle
WebViewGoogle-Stub
WebViewStub
"

LAUNCHERLIST="
AsusLauncher
AsusLauncherDev
EasyLauncher2_Zero
EnigmaLauncher
Launcher3QuickStep
Lawnchair
NeLauncher
NexusLauncher
NexusLauncherPrebuilt
NexusLauncherRelease
OPLauncher
OPLauncher2
OPLauncherReleases
ParanoidQuickStep
PixelLauncher
RevengeLauncherQuickStep
ShadyLauncher
ShadyQuickStep
TWLauncherESS
Trebuchet
TrebuchetQuickStep
"
}

MIUI_CHECKER() {
if [ -d /data/miui ] || $(grep "ro.miui.ui.version.*|ro.product.brand=Xiaomi*" $PROPFILESALT) || grep "ro.miui.build.region" $IPSBP || grep "ro.miui.region" $IPSBP || grep "ro.miui.ui.version*" $IPSBP || grep "ro.miui.ui.version.name*" $IPSBP; then MIUI=true; else MIUI=false; fi
}

BB_CHECKER() {
if [ -f $IPSB/busybox ]; then
BUSYBOX=/bin; FBUSYBOX=true
elif [ -f $IPSXB/busybox ]; then
BUSYBOX=/xbin; FBUSYBOX=true
elif [ -d $MODPATH/busybox-brutal ] || [ -d $MODPATHUPD/busybox-brutal ] || [ -d $MODPATH/busybox-ndk ] || [ -d $MODPATHUPD/busybox-ndk ]; then
FBUSYBOX=true
else
FBUSYBOX=false
fi
}

ARCH_CHECKER() {
DARCH="$(GET_PROP "ro.product.cpu.abi")"
case "$DARCH" in
*x86_64*) arch="x86_64"; libarch="lib64"; UIP -d "Warning, Arch $arch Not Supported!";;
*x86*) arch="x86"; libarch="lib"; UIP -d "Warning, Arch $arch Not Supported!";;
*arm64*) arch="arm64"; libarch="lib64";;
*armeabi*) arch="arm"; libarch="lib";;
*) arch="unknown"; UIP -d "Warning, $arch Not Supported/Found!";;
esac
AAPT="$AADDONS/aapt-$arch"
XMLSTARLET="$AADDONS/xmlstarlet-$arch"
SQLITE3="$TMPDIR/SQLite3/sqlite3-$arch"
FKEYCHECK="$ADDONS/keycheck-$arch"
TINYMIX="$AADDONS/tinymix-$arch"
}

SELINUX_CHECKER() {
if grep -q "1" /sys/fs/selinux/enforce || [ $BOOTMODE != true ]; then SELINUX=true; SELINUXP=false; SELINUXS='Enforcing'; SELINUXSN='1'; elif grep -q "0" /sys/fs/selinux/enforce; then SELINUX=false; SELINUXP=true; SELINUXS='Permissive'; SELINUXSN='0'; fi
}

SQLITE_CHECKER() {
if [ -d "$MODPATH/73sydney.sqlite3" ] || [ -d "$MODPATHUPD/73sydney.sqlite3" ] || [ -d "$MODPATH/sqlite3" ] || [ -d "$MODPATHUPD/sqlite3" ] || [ -f $IPSB/sqlite3 ] || [ -f $IPSXB/sqlite3 ]; then FSQLITE=true; else FSQLITE=false; fi
}

SOC_CHECKER() {
KIR970=$(grep "ro.board.platform=kirin970" $PROPFILESALT)
SD617=$(grep "ro.board.platform=msm8952" $PROPFILESALT)
SD625=$(grep "ro.board.platform=msm8953" $PROPFILESALT)
SD660=$(grep "ro.board.platform=sdm660" $PROPFILESALT)
SD662=$(grep "ro.board.platform=bengal" $PROPFILESALT)
SD665=$(grep "ro.board.platform=trinket" $PROPFILESALT)
SD670=$(grep "ro.board.platform=sdm670" $PROPFILESALT)
SD690=$(grep "ro.board.platform=lito" $PROPFILESALT)
SD710=$(grep "ro.board.platform=sdm710" $PROPFILESALT)
SD720G=$(grep "ro.board.platform=atoll" $PROPFILESALT)
SD730=$(grep "ro.board.platform=sm6150" $PROPFILESALT)
SD730G=$(grep "ro.board.platform=sm6150" $PROPFILESALT)
SD765G=$(grep "ro.board.platform=lito" $PROPFILESALT)
SD810=$(grep "ro.board.platform=msm8994" $PROPFILESALT)
SD820=$(grep "ro.board.platform=msm8996" $PROPFILESALT)
SD835=$(grep "ro.board.platform=msm8998" $PROPFILESALT)
SD845=$(grep "ro.board.platform=sdm845" $PROPFILESALT)
SD855=$(grep "ro.board.platform=msmnile" $PROPFILESALT)
SD865=$(grep "ro.board.platform=kona" $PROPFILESALT)
SD888=$(grep "ro.board.platform=lahaina" $PROPFILESALT)
if [ "$SD662" ] || [ "$SD665" ] || [ "$SD670" ] || [ "$SD690" ] || [ "$SD710" ] || [ "$SD720G" ] || [ "$SD730" ] || [ "$SD730G" ] || [ "$SD765G" ] || [ "$SD820" ] || [ "$SD835" ] || [ "$SD845" ] || [ "$SD855" ] || [ "$SD865" ] || [ "$SD888" ]; then
HIFI=true
else
HIFI=false
fi
SNAPSOC=false; MTKSOC=false; EXYSOC=false; KIRSOC=false
if [ "$(grep -E "ro.board.platform=apq.*|ro.board.platform=msm.*|ro.board.platform=sdm.*" $PROPFILESALT)" ] || [ "$(grep "ro.board.platform=msm*" $PROPFILESALT)" ] || [ "$(grep "ro.board.platform=sdm*" $PROPFILESALT)" ] || [ "$SD617" ] || [ "$SD625" ] || [ "$SD660" ] || [ "$SD662" ] || [ "$SD665" ] || [ "$SD670" ] || [ "$SD690" ] || [ "$SD710" ] || [ "$SD720G" ] || [ "$SD730" ] || [ "$SD730G" ] || [ "$SD765G" ] || [ "$SD810" ] || [ "$SD820" ] || [ "$SD835" ] || [ "$SD845" ] || [ "$SD855" ] || [ "$SD865" ] || [ "$SD888" ]; then
SNAPSOC=true
elif "$(grep -E "ro.mediatek.version.*|ro.hardware=mt*" $PROPFILESALT)" ] ||  [ "$(grep "ro.board.platform=mt*" $PROPFILESALT)" ] || [ "$(grep "ro.board.platform=MT*" $PROPFILESALT)" ] || [ "$(grep "Build.BRAND=MTK*" $PROPFILESALT)" ]; then
MTKSOC=true
elif "$(grep -E "ro.chipname=exynos*|ro.board.platform=exynos*" $PROPFILESALT)"; then
EXYSOC=true
elif "$(grep -E "ro.board.platform=hi.*|ro.board.platform=kirin*" $PROPFILESALT)"; then
KIRSOC=true
fi
}

GAPPS_CHECKER() {
FINDGAPPS=false
for f in "$IPSA" "$IPSPA" "$IPSSPA" "$IPSSPPA" "$IPSSEA" "$IPSSEPA"; do
for gms in "GmsCore" "PrebuiltGmsCore" "GoogleServicesFramework" "Phonesky"; do
if [ -d $f/$gms ]; then FINDGAPPS=true; break 2; fi
done
done
if [ $FINDGAPPS != true ]; then
for gms in "*bitgapps*.sh" "*flame*.sh" "*nikgapps*.sh" "*gapps*.sh"; do
if find $IPSAD -type f -name $gms >/dev/null; then FINDGAPPS=true; break; fi
done
fi
}

PATCHMODE() {
case "$PMODE" in
D) DEBUGMODE=true; TESTMODE=false; MSGPMODE=", Debug Mode";;
T) TESTMODE=true; DEBUGMODE=true; MSGPMODE=", Test Mode";;
U) MSGPMODE=", User Mode"; DEBUGMODE=false; TESTMODE=false;;
*) echo -e "$MSGPMODE\nPMODE=D" >> $PATCHMODEFILE; MSGPMODE=", Debug Mode"; DEBUGMODE=true; TESTMODE=false;;
esac
case "$MCMODE" in
"true") MCMODE=true;;
"false") MCMODE=false;;
*) echo -e "$MSGMCMODE\nMCMODE=true" >> $PATCHMODEFILE; MCMODE=true;;
esac
if find /sys/class -name leds >/dev/null; then
LEDPATH="$(find /sys/class -name leds)"
case "$LEDCOLOR" in
R) LEDCOLOR=red;;
G) LEDCOLOR=green;;
B) LEDCOLOR=blue;;
W) LEDCOLOR=white;;
"false") BLINKMODE=false;;
*) BLINKMODE=false; echo -e "$MSGLEDCOLOR\nLEDCOLOR=false" >> $PATCHMODEFILE;;
esac
if [ -f $LEDPATH/$LEDCOLOR/blink ]; then echo -n 1 > $LEDPATH/$LEDCOLOR/blink; BLINKMODE=true; fi
fi
case "$HFDURATION" in
"false") HFMODE=false;;
[0-255]*) HFMODE=true; HFPATH="$(find /sys/class -name vibrator)"; if [ -f $HFPATH/duration ]; then echo -n $HFDURATION > $HFPATH/duration; fi; if [ -f $HFPATH/activate ]; then HFFPATH=$HFPATH/activate; elif [ -f $HFPATH/enable ]; then HFFPATH=$HFPATH/enable; fi;;
*) HFMODE=false; echo -e "$MSGHFMODE\nHFMODE=false" >> $PATCHMODEFILE;;
esac
case "$HFSWAPMODE" in
"true") HFSWAPMODE=true;;
"false") HFSWAPMODE=false;;
*) echo -e "$MSGHFSMODE\nHFSMODE=false" >> $PATCHMODEFILE; HFSWAPMODE=false;;
esac
case "$PDESIGN" in
N) PDESIGN=true;;
O) PDESIGN=false;;
*) PDESIGN=true; echo -e "$MSGPDESIGN\nPDESIGN=N" >> $PATCHMODEFILE;;
esac
case "$KMETHOD" in
N) AKOLD=false; KNEW=true; KOLD=false;;
O) AKOLD=false; KNEW=false; KOLD=true;;
A) AKOLD=true; KNEW=false; KOLD=false;;
"false") AKOLD=false; KOLD=false; KNEW=false;;
*) echo -e "$MSGKMETHOD\nKMETHOD=false" >> $PATCHMODEFILE; AKOLD=false; KOLD=false; KNEW=false;;
esac
case "$TKEY" in
"true") TKEYCHECK=true;;
"false") TKEYCHECK=false;;
*) TKEYCHECK=false; echo -e "$MSGTKEY\nTKEY=false" >> $PATCHMODEFILE;;
esac
case "$ENDMODE" in
"true") ENDMODE=true;;
"false") ENDMODE=false;;
*) ENDMODE=true; echo -e "$MSGENDMODE\nENDMODE=true" >> $PATCHMODEFILE;;
esac
if grep ButtonIDUP $PATCHMODEFILE >/dev/null; then true; else echo -e "$MSGBIDMODE\nButtonIDUP=#UP\nButtonIDDOWN=#DOWN" >> $PATCHMODEFILE; fi
# case "$DRMODE" in
# "true") DRMODE=true; DISPLAYRESOLUTION="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "DisplayResolution")";;
# "false") DRMODE=false;;
# *) if $BOOTMODE; then echo -e "$MSGDRMODE\nDRMODE=true\n$(wm size)" >> $PATCHMODEFILE; sed -i 's/Physical size: /DisplayResolution=/g' $PATCHMODEFILE; DISPLAYRESOLUTION="$(GET_FILE_PROP -pm "$PATCHMODEFILE" "DisplayResolution")"; DRMODE=true; else DRMODE=false; echo -e "$MSGDRMODE\nDRMODE=false" >> $PATCHMODEFILE; fi;;
# esac
case "$MMUPDC" in
"true") MMUPDC=true;;
"false") MMUPDC=false;;
*) MMUPDC=true; echo -e "$MSGMMUPDC\nMMUPDC=true" >> $PATCHMODEFILE;;
esac
case "$LEGACYMODE" in
"true") LEGACYMODE=true;;
"false") LEGACYMODE=false;;
*) LEGACYMODE=false; echo -e "$MSGLEGACYMODE\nLEGACYMODE=false" >> $PATCHMODEFILE;;
esac
case "$EVENTSMODE" in
"true") EVENTSMODE=true;;
"false") EVENTSMODE=false;;
*) EVENTSMODE=true; echo -e "$MSGEVENTSMODE\nEVENTSMODE=true" >> $PATCHMODEFILE;;
esac
if $EVENTSMODE; then
if [ $TIMEM == 10 ]; then
for t in $(seq 20 1 31); do
if [ $TIMED == $t ]; then
if $BOOTMODE; then
UIP "Happy Halloween 🎃!"
else
UIP "Happy Halloween!"
fi
fi
done
elif [ $TIMEM == 12 ]; then
for t in $(seq 20 1 31); do
if [ $TIMED == $t ]; then
UIP "Holiday Greetings!"
fi
done
elif [ $TIMEM == 01 ]; then
for t in 01; do
if [ $TIMED == $t ]; then
if $BOOTMODE; then
UIP "Happy New Year ❄!"
else
UIP "Happy New Year!"
fi
fi
done
for t in 02 03 04 05 06 07 08 09 10; do
if [ $TIMED == $t ]; then
UIP "Happy Holidays!"
fi
done
fi
fi
}

AIOPFMD() {
if $DEBUGMODE || $TESTMODE; then mkdir -p $PLOGS/TWRP $PLOGS/MM; fi; [ -d $TMPDIR ] && rm -rf $TMPDIR; mkdir -p $TMPDIR; [ -d $ALTTMPDIR ] && rm -rf $ALTTMPDIR; mkdir -p $ALTTMPDIR
UIP "Copy AIOPFMD To TMPDIR$MSGPMODE"
unzip -oq $ZIPFILE BB.zip Addons.tar.xz -d $ALTTMPDIR 2>/dev/null
unzip -oq $BB.zip -d $ALTTMPDIR 2>/dev/null; rm -f $BB.zip
chmod -R 777 $TMPDIR $ALTTMPDIR
$BB/busybox-$arch --install -s $BB
$UNTARXZ -xf $ADDONS.tar.xz -C $ALTTMPDIR; rm -f $ADDONS.tar.xz
AIOPFMDPH="$IPSB/aiopfmdph"
[ $BOOTMODE != true ] && mkdir -p $AIOPFMDPH
UZTPN "AltAddons" "SQLite3" &
FMAGISKMIRROR=false
if $FINDAIOPFMDA; then unzip -oq $AIOPFMDAFILE -d $TMPDIR 2>/dev/null; fi &
}

CHECK_AVERSION() {
ASDK="$(GREP_PROP "ro.build.version.sdk")"
AVERSION="$(GREP_PROP "ro.build.version.release")"
AKITKAT=false; ALOLLIPOP=false; AMARSHMALLOW=false; ANOUGAT=false; AOREO=false; APIE=false; ATEN=false; AELEVEN=false; ATWELVE=false
if [ "$ASDK" = "19" ] || [ "$AVERSION" = "4.4.4" ]; then AKITKAT=true; ACNV="KK"
elif [ "$ASDK" = "22" ] || [ "$AVERSION" = "5.1.1" ]; then ALOLLIPOP=true; ACNV="L"
elif [ "$ASDK" = "23" ] || [ "$AVERSION" = "6.0.1" ]; then AMARSHMALLOW=true; ACNV="M"
elif [ "$ASDK" = "25" ] || [ "$AVERSION" = "7.1.2" ]; then ANOUGAT=true; ACNV="N"
elif [ "$ASDK" = "27" ] || [ "$AVERSION" = "8.1" ] || [ "$AVERSION" = "8.1.0" ]; then AOREO=true; ACNV="O"
elif [ "$ASDK" = "28" ] || [ "$AVERSION" = "9" ] || [ "$AVERSION" = "9.0" ]; then APIE=true; ACNV="P"
elif [ "$ASDK" = "29" ] || [ "$AVERSION" = "10" ] || [ "$AVERSION" = "10.0" ]; then ATEN=true; ACNV="Q"
elif [ "$ASDK" = "30" ] || [ "$AVERSION" = "11" ] || [ "$AVERSION" = "11.0" ]; then AELEVEN=true; ACNV="R"
elif [ "$ASDK" = "31" ] || [ "$AVERSION" = "12" ] || [ "$AVERSION" = "12.0" ]; then UIP -d "Warning, SDK $ASDK Is Not Fully Support!"; ATWELVE=true; ACNV="S"
fi
case $ASDK in
"19");; "21");; "22");; "23");; "24");; "25");; "26");; "27");; "28");; "29");; "30");; "31");; *) UIP -d "Warning, SDK Not Supported/Found!";;
esac
DYNLIB=true
[ $ASDK -lt 26 ] && DYNLIB=false
[ -z $DYNLIB ] && DYNLIB=false
if $DYNLIB; then DYNLIBPATCH="\/vendor"; else DYNLIBPATCH="\/system"; fi
}

CHECK_DEVICE() {
case $1 in
-x) SONY=$(grep "ro.semc.*" $PROPFILESALT)
M9=$(grep -E "ro.aa.modelid=0PJA.*|ro.product.device=himaul*" $PROPFILESALT)
AX7=$(grep -E "ro.build.product=axon7|ro.build.product=ailsa_ii" $PROPFILESALT)
BOLT=$(grep "ro.aa.modelid=2PYB.*" $PROPFILESALT)
G6=$(grep "ro.product.device=lucye" $PROPFILESALT)
G7=$(grep "ro.product.device=judyln" $PROPFILESALT)
K20P=$(grep -E "ro.product.vendor.device=raphael.*|ro.product.vendor.device=raphaelin.*|ro.product.vendor.device=raphaels.*" $PROPFILESALT)
LG=$(grep "ro.product.brand=lge" $PROPFILESALT)
LX3=$(grep -E "ro.build.product=X3c50|ro.build.product=X3c70|ro.build.product=x3_row" $PROPFILESALT)
M10=$(grep "ro.aa.modelid=2PS6.*" $PROPFILESALT)
M8=$(grep "ro.aa.modelid=0P6B.*" $PROPFILESALT)
MI10=$(grep -E "ro.product.vendor.device=umi.*" $PROPFILESALT)
MI10LITE=$(grep -E "ro.product.vendor.device=vangogh.*" $PROPFILESALT)
MI10PRO=$(grep -E "ro.product.vendor.device=cmi.*" $PROPFILESALT)
MI10T=$(grep -E "ro.product.vendor.device=apollo.*" $PROPFILESALT)
MI10Ultra=$(grep -E "ro.product.vendor.device=cas.*" $PROPFILESALT)
MI10i5GRN95G=$(grep -E "ro.product.vendor.device=gauguin.*" $PROPFILESALT)
MI11=$(grep -E "ro.product.vendor.device=venus.*" $PROPFILESALT)
MI11Lite4G=$(grep -E "ro.product.vendor.device=courbet.*" $PROPFILESALT)
MI11Lite5G=$(grep -E "ro.product.vendor.device=renoir.*" $PROPFILESALT)
MI8=$(grep -E "ro.product.vendor.device=dipper.*" $PROPFILESALT)
MI8EE=$(grep "ro.vendor.product.name=ursa.*" $PROPFILESALT)
MI8P=$(grep -E "ro.product.vendor.device=equuleus.*" $PROPFILESALT)
MI8SE=$(grep "ro.vendor.product.name=sirius.*" $PROPFILESALT)
MI8UD=$(grep "ro.vendor.product.name=equuleus.*" $PROPFILESALT)
MI9=$(grep -E "ro.product.vendor.name=cepheus.*|ro.product.name=cepheus.*" $PROPFILESALT)
MI9P=$(grep -E "ro.product.vendor.device=crux.*" $PROPFILESALT)
MI9SE=$(grep -E "ro.product.vendor.device=grus.*" $PROPFILESALT)
MI9T=$(grep -E "ro.product.vendor.device=davinci.*" $PROPFILESALT)
MIA2=$(grep -E "ro.product.vendor.device=jasmine.*" $PROPFILESALT)
MIA2LITE=$(grep -E "ro.product.vendor.device=daisy.*" $PROPFILESALT)
MIA3=$(grep -E "ro.product.vendor.device=laurel.*" $PROPFILESALT)
MICC9=$(grep -E "ro.product.vendor.device=pyxis.*" $PROPFILESALT)
MICC9E=$(grep -E "ro.product.vendor.device=laurus.*" $PROPFILESALT)
MINOTE10LITE=$(grep -E "ro.product.vendor.device=toco.*" $PROPFILESALT)
MINOTE10LITEZOOM=$(grep -E "ro.product.vendor.device=vangogh.*" $PROPFILESALT)
MINOTECC9PRO=$(grep -E "ro.product.vendor.device=tucana.*" $PROPFILESALT)
MNPRO=$(grep "ro.product.device=virgo" $PROPFILESALT)
NX9=$(grep -E "ro.product.name=volantis.*|ro.product.board=flounder.*" $PROPFILESALT)
OP3=$(grep -E "ro.build.product=OnePlus3.*|ro.build.product=oneplus3.*|ro.vendor.product.device=oneplus3.*|ro.vendor.product.device=OnePlus3.*" $PROPFILESALT)
OP5=$(grep -E "ro.build.product=OnePlus5.*|ro.build.product=cheeseburger|ro.build.product=Cheeseburger|ro.build.product=dumpling|ro.build.product=Dumpling" $PROPFILESALT)
POCOF1=$(grep -E "ro.product.vendor.name=beryllium.*|ro.product.name=beryllium.*" $PROPFILESALT)
POCOF2P=$(grep -E "ro.product.vendor.device=lmi.*" $PROPFILESALT)
POCOF3=$(grep -E "ro.product.vendor.device=alioth.*" $PROPFILESALT)
POCOF3P=$(grep -E "ro.product.vendor.device=vayu.*" $PROPFILESALT)
POCOM2P=$(grep -E "ro.product.vendor.device=gram.*" $PROPFILESALT)
POCOM3=$(grep -E "ro.product.vendor.device=citrus.*" $PROPFILESALT)
POCOX3=$(grep -E "ro.product.vendor.device=surya.*" $PROPFILESALT)
POCOX3Pro=$(grep -E "ro.product.vendor.device=vayu.*" $PROPFILESALT)
PX1=$(grep -E "ro.vendor.product.device=sailfish|ro.vendor.product.name=sailfish|ro.product.device=sailfish|ro.product.model=Pixel|ro.product.name=sailfish" $PROPFILESALT)
PX1XL=$(grep -E "ro.vendor.product.device=marlin|ro.vendor.product.name=marlin|ro.product.model=Pixel XL|ro.product.device=marlin|ro.product.name=marlin" $PROPFILESALT)
PX2=$(grep -E "ro.vendor.product.device=walleye|ro.vendor.product.name=walleye|ro.product.model=Pixel 2|ro.product.name=walleye|ro.product.device=walleye" $PROPFILESALT)
PX2XL=$(grep -E "ro.vendor.product.name=taimen|ro.vendor.product.device=taimen|ro.product.model=Pixel 2 XL|ro.product.name=taimen|ro.product.device=taimen" $PROPFILESALT)
PX3=$(grep -E "ro.vendor.product.device=blueline|ro.vendor.product.name=blueline|ro.product.model=Pixel 3|ro.product.name=blueline|ro.product.device=blueline" $PROPFILESALT)
PX3XL=$(grep -E "ro.vendor.product.device=crosshatch|ro.vendor.product.name=crosshatch|ro.product.model=Pixel 3 XL|ro.product.name=crosshatch|ro.product.device=crosshatch" $PROPFILESALT)
RK304G=$(grep -E "ro.product.vendor.device=phoenix.*" $PROPFILESALT)
RK305G=$(grep -E "ro.product.vendor.device=picasso.*" $PROPFILESALT)
RK30U=$(grep -E "ro.product.vendor.device=cezanne.*" $PROPFILESALT)
RK30i5G=$(grep -E "ro.product.vendor.device=picasso48m.*" $PROPFILESALT)
RK40=$(grep -E "ro.product.vendor.device=alioth.*" $PROPFILESALT)
RN10PRO=$(grep -E "ro.product.vendor.device=sweet.*" $PROPFILESALT)
RN10PROMAX=$(grep -E "ro.product.vendor.device=sweetin.*" $PROPFILESALT)
RN5PRO=$(grep -E "ro.product.vendor.device=whyred.*" $PROPFILESALT)
RN6PRO=$(grep -E "ro.product.vendor.device=tulip.*" $PROPFILESALT)
RN7=$(grep -E "ro.product.vendor.device=lavender.*" $PROPFILESALT)
RN7PRO=$(grep -E "ro.product.vendor.device=violet.*" $PROPFILESALT)
U11P=$(grep "ro.aa.modelid=2Q4D.*" $PROPFILESALT)
V20=$(grep "ro.product.device=elsa" $PROPFILESALT)
V30=$(grep "ro.product.device=joan" $PROPFILESALT)
X5P=$(grep -E "ro.product.name=vince.*|ro.product.device=vince.*" $PROPFILESALT)
X9=$(grep "ro.product.model=X900.*" $PROPFILESALT)
Z11=$(grep "ro.product.model=NX531J" $PROPFILESALT)
Z9=$(grep "ro.product.model=NX508J" $PROPFILESALT)
Z9M=$(grep -E "ro.product.model=NX510J|ro.product.model=NX518J" $PROPFILESALT);;
*) local PROPDEVICE=$(echo "$1" | tr '[:upper:]' '[:lower:]')
for i in $SYSTEM $VENDOR $IPSSP; do
if [ -f $i/build.prop ]; then
for j in "ro.product.device" "ro.build.product" "ro.product.vendor.device" "ro.vendor.product.device"; do
[ "$(sed -n "s/^$j=//p" $i/build.prop 2>/dev/null | head -n 1 | tr '[:upper:]' '[:lower:]')" == "$PROPDEVICE" ] && return 0
done
fi
done
return 1;;
esac
}

MAGISK_CHECKER() {
ZYGISK=false
if [ -d /data/magisk ] && [ -f /data/magisk/util_functions.sh ]; then
MAGISKFIRSTTIME=true; FINDMAGISK=true; MAGISK=true
MAGISKVC="$(GET_FILE_PROP "/data/magisk/util_functions.sh" "MAGISK_VER_CODE")"
elif [ -d $NVBASE/magisk ] && [ -f $NVBASE/magisk/util_functions.sh ]; then
MAGISKFIRSTTIME=false; FINDMAGISK=true; MAGISK=true
MAGISKVC="$(GET_FILE_PROP "$NVBASE/magisk/util_functions.sh" "MAGISK_VER_CODE")"
else
MAGISKFIRSTTIME=false; FINDMAGISK=false; MAGISK=false
fi
if $FINDMAGISK; then if [ $MAGISKVC -lt 23000 ]; then UIP "Found Old Magisk, Please Install Magisk v24+ (23011+)!"; elif [ $MAGISKVC -ge 23010 ]; then ZYGISK=true; fi; fi
if $FINDMAGISK && [ $BOOTMODE != true ] && $DEBUGMODE && $MCMODE; then
MSGDELIMITER
UIP "Found Magisk, Install Everything (M)?" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then MAGISK=true; else MAGISK=false; fi
fi
if $MAGISK; then
mkdir -p $MODPATH $POSTFSDATAD $SERVICED
chmod 755 $MODPATH $POSTFSDATAD $SERVICED
IAMM="(M)"
else
IAMM=""
fi
}

MAGISKMIRROR_CHECKER() {
if [ $FMAGISKMIRROR != true ]; then if $BOOTMODE; then MAGISKMIRROR=$(find `magisk --path` -type d -name "mirror" | head -n 1); else MAGISKMIRROR=""; fi; FMAGISKMIRROR=true; fi
}

HFBMODE() {
if $HFMODE; then if $HFSWAPMODE; then echo -n $HFDURATION > $HFFPATH; else echo -n 1 > $HFFPATH; fi; fi
}

UNMOUNT() {
if [ $BOOTMODE != true ]; then
UIP "UnMounting$Mounts"
for m in $Mounts; do
case $m in
$SYSTEM_MOUNT) if $DABP; then mount -o ro $SYSTEM_MOUNT; else umount $SYSTEM_MOUNT; fi;;
*) umount "$m";;
esac
done
fi
}

END() {
MSGDELIMITER
if $ENDMODE; then
UIP "It's Time To Choose:" "$MSGVU To The Beginning $MSGEFTC" "$MSGVD Exit $MSGEND"
if $KEYFUNCTION; then cd $TMPDIR; ls | grep -v SQLite3 | grep -v AltAddons | xargs rm -rf;
if $FINDAIOPFMDA; then unzip -oq $AIOPFMDAFILE -d $TMPDIR 2>/dev/null; fi &
PRESETS; END; else ENDMODE=false; END; fi
else
UNMOUNT
if $DEBUGMODE; then
UIP "Clear TMPDIR, Copy Logs & Exit"; MSGDELIMITER
[ -d $PLOGS/TWRP ] && mv $PLOGS/TWRP $PLOGS/RECOVERY && rm -rf $PLOGS/TWRP
if [ $BOOTMODE != true ]; then mkdir -p $PLOGS/RECOVERY/$( date +"%Y-%m" ); cp -f /tmp/recovery.log $PLOGS/RECOVERY/$( date +"%Y-%m" )/AIORecovery-$( date +"%d-%H:%M:%S" ).log; fi
if $BOOTMODE; then input tap 1040 140; fi
mkdir -p $PLOGS/MM/$( date +"%Y-%m" )
find $STORAGE/Download/ -type f -name 'magisk_install_log*.log' -exec mv {} $PLOGS/MM/$( date +"%Y-%m" )/AIOMagisk-$( date +"%d-%H:%M:%S" ).log \;
else
UIP "Clear TMPDIR & Exit"; MSGDELIMITER
fi
if $BLINKMODE; then echo -n 0 > $LEDPATH/$LEDCOLOR/blink; fi
rm -rf $TMPDIR $ALTTMPDIR && exit 0
fi
}

ui_print() {
$BOOTMODE && echo "$MSGSD $1" || echo -e "ui_print $MSGSD $1\nui_print" >> /proc/self/fd/$OUTFD
}

UIP() {
case $1 in
-d) MSGDELIMITER; for uip in "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$11" ; do if [ "$uip" ]; then ui_print "$uip"; else break; fi; done;;
*) for uip in "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10"; do if [ "$uip" ]; then ui_print "$uip"; else break; fi; done;;
esac
}

MSGDELIMITER() {
$BOOTMODE && echo "$MSGDELIMITER" || echo -e "ui_print $MSGDELIMITER\nui_print" >> /proc/self/fd/$OUTFD
}

GREP_PROP() {
local REGEX="s/^$1=//p"
shift
local FILES=$@
[ -z "$FILES" ] && FILES="$PROPFILESALT"
sed -n "$REGEX" $FILES 2>/dev/null | head -n 1
}

BUILD_PROP_BACKUP() {
if [ -f $IPSBP ]; then cp -f $IPSBP "$IPSBP-$DMYHMS.bak"; fi
}

UNIVERSALUNZIP() {
cd $TMPDIR/$UPN && $ZIPPACKER -r -0 $TMPDIR/$UPN * >/dev/null
OFPATHZIP="$TMPDIR/$UPN"
mkdir -p $OFPATHZIP
$UNZIP -oq "$ZIPFILE" '$OFPATHZIP.zip' -d "$OFPATHZIP"
$UNZIP -oq "$OFPATHZIP.zip" 'META-INF/com/google/android/update-binary' -d "$OFPATHZIP"
chmod 755 "$OFPATHZIP/META-INF/com/google/android/update-binary"
sh $OFPATHZIP/META-INF/com/google/android/update-binary \
"$IN" "$OUTFD" "$OFPATHZIP.zip"
rm -rf $OFPATHZIP*
if [ $BOOTMODE != true ]; then UIP -d "ReMounting$Mounts"; PARTITION_AND_MOUNTS; fi
}

UCSA() {
UIP -d "$1" "$MSGVU Yes $2" "$MSGVD No $3"; if $KEYFUNCTION; then $4; else $5; fi
}

UCSF() {
MSGUCSF=true
local UCSFNMPC=$1
for UCSFNMC in $(echo $UCSFNMPC | cut -f 1 -d '_'); do
if $MSGUCSF; then
UIP -d "$2"
MSGUCSF=false
else
MSGDELIMITER
fi
UIP "$3 ($UCSFNMC)" "$MSGVU Yes"
MSGUCSFA="$MSGNIS"
case $UCSFNMC in
"$4") MSGUCSFA="$MSGNUS";;
esac
UIP "$MSGVD No $MSGUCSFA"
if $KEYFUNCTION; then
UCSFNM=true
break
else
UCSFNM=false
fi
done
}

LIBWORKAROUNDCHECK() {
LIBWORKAROUNDKIST="
walleye
taimen
crosshatch
blueline
mata
jasmine
star2lte
z2_row
beyond2lte
"
for lwrc in $LIBWORKAROUNDKIST; do if CHECK_DEVICE $lwrc; then Workaround=true; break; else Workaround=false; fi; done
if [ $Workaround != true ]; then IPLIBW; fi
}

GET_FILE_PROP() {
case $1 in
-pm) grep -m1 "^$3=" "$2" | cut -d= -f2 | cut -d ' ' -f1;;
*) grep -m1 "^$2=" "$1" | cut -d= -f2;;
esac
}

GET_PROP() {
for f in $PROPFILES; do
if [ -e "$f" ]; then
PROP="$(GET_FILE_PROP "$f" "$1")"
if [ -n "$PROP" ]; then
break
fi
fi
done
if [ -z "$PROP" ]; then
getprop "$1" | cut -c1-
else
printf "$PROP"
fi
}

MKTOUCHER() {
mkdir -p ${1%/*} 2>/dev/null
[ -z $2 ] && touch $1 || echo $2 > $1
chmod 644 $1
}

REPLACER() {
case $1 in
-f) local REPLACE=$2; for TARGET in $REPLACE; do if find $SYSTEM -name $TARGET >/dev/null; then FIND=$(find $SYSTEM -name $TARGET); for TARGET in $FIND; do MKTOUCHER $MODPATH/$MODID$TARGET/.replace; done; fi; done;;
*) local REPLACE=$1; for TARGET in $REPLACE; do MKTOUCHER $MODPATH/$MODID$TARGET/.replace; done;;
esac
}

REMOVER() {
local REMOVE=$2
case $1 in
-rm) for TARGET in $REMOVE; do if [ -d $TARGET ]; then rm -rf $TARGET; fi; done;;
-mm) for TARGET in $REMOVE; do for MMP in $MODPATH $MODPATHUPD; do if [ -d $MMP/$TARGET ]; then rm -rf $MMP/$TARGET; fi; done; done;;
-e-mm) for TARGET in $REMOVE; do for MMP in $MODPATH $MODPATHUPD; do if [ -d $MMP/$TARGET ]; then local EXCEPT=$3; cd $MODPATH/$TARGET; ls | grep -v $EXCEPT | xargs rm -rf; fi; done; done;;
esac
}

BUCKUPER() {
local RORB=$2
for TARGET in $RORB; do
case $1 in
-r) if [ -f $TARGET.bak ]; then mv -f $TARGET.bak $TARGET; fi;;
-s) if [ -f $TARGET ]; then for SBT in $TARGET; do cp -f $SBT $SBT.bak; done; fi;;
esac
done
}

FINDER() {
case $1 in
-mm) local FIND=$2; for TARGET in $FIND; do if [ -d $MODPATHUPD/$TARGET ] || [ -d $MODPATH/$TARGET ]; then return 0; break; fi; done; return 1;;
*) local FIND=$1; for TARGET in $FIND; do if [ -e $TARGET ]; then return 0; break; fi; done; return 1;;
esac
}

SET_PERM() {
chown $2:$3 $1 || return 1
chmod $4 $1 || return 1
CON=$5
[ -z $CON ] && CON=u:object_r:system_file:s0
chcon $CON $1 || return 1
}

SET_PERM_R() {
UIP "Setting Permissions"
find $1 -type d 2>/dev/null | while read dir; do
SET_PERM $dir $2 $3 $4 $6
done
find $1 -type f -o -type l 2>/dev/null | while read file; do
SET_PERM $file $2 $3 $5 $6
done
}

SET_PERM_RM() {
SET_PERM_R $MODPATH/$MODID 0 0 0755 0644; [ -d $MODPATH/$MODID$MIPSB ] && chmod -R 777 $MODPATH/$MODID$MIPSB; [ -d $MODPATH/$MODID$MIPSXB ] && chmod -R 777 $MODPATH/$MODID$MIPSXB; case $1 in -msgdi) UIP "$MSGDI";; esac
}

UZTPN() {
UPN="$1"
for F in "$1" "$2" "$3" "$4"; do
if [ "$F" ]; then
if [ ! -f $TMPDIR/$F.tar.xz ]; then $UNZIP -oq $ZIPFILE $F.tar.xz -d $TMPDIR 2>/dev/null; fi
$UNTARXZ -xf $TMPDIR/$F.tar.xz -C $TMPDIR
if [ ! -d $TMPDIR/$F ]; then
UIP "Unzip $F Error"
$UNTARXZ -xf $TMPDIR/$F.tar.xz -C $TMPDIR
if [ -d $TMPDIR/$F ]; then UIP "Unzip $F Completed"; fi
fi
rm -f $TMPDIR/$F.tar.xz
chmod -R 777 $TMPDIR/$F
else
break
fi
done
}

MOVERPATH() {
if [ $BOOTMODE != true ] && [ -d $MODPATH/$MODID/system_root/system ]; then
mkdir -p $MODPATH/$MODID/system; cp -rf $MODPATH/$MODID/system_root/system/* $MODPATH/$MODID/system; rm -rf $MODPATH/$MODID/system_root
fi
if [ -d $MODPATH/$MODID/vendor ]; then
mkdir -p $MODPATH/$MODID$MIPSV; cp -rf $MODPATH/$MODID/vendor/* $MODPATH/$MODID$MIPSV; rm -rf $MODPATH/$MODID/vendor
fi
if [ $BOOTMODE != true ] && [ -d $MODPATH/$MODID/system/system ]; then
mkdir -p $MODPATH/$MODID/system; cp -rf $MODPATH/$MODID/system/system/* $MODPATH/$MODID/system; rm -rf $MODPATH/$MODID/system/system
fi
if [ $BOOTMODE != true ] && [ -d $MODPATH/$MODID/system_root/system/system_ext ]; then
mkdir -p $MODPATH/$MODID/system/system_ext; cp -rf $MODPATH/$MODID/system_root/system/system_ext/* $MODPATH/$MODID/system/system_ext; rm -rf $MODPATH/$MODID/system_root
fi
}

APKINSTALLER() {
NAMEINSTALLAPP=$2; NAMEPATHOUT=$3
UIP "Installing $PACKAGENAME"
case $1 in
-d) if $BOOTMODE; then
pm install -r $NAMEPATHOUT >/dev/null
else
cp -f $STORAGE/Applications/$APKINPUT $IPDA/$PACKAGENAME.apk
SET_PERM_R $IPDA/$PACKAGENAME.apk 1000 1000 0771 0644
fi;;
-a) if $MAGISK; then
MODID="$IDAIOIARPFMD"
PATHINSTALLAPP=$MODPATH/$MODID$MIPSA/$NAMEINSTALLAPP
else
PATHINSTALLAPP=$IPSA/$NAMEINSTALLAPP
fi
rm -rf $PATHINSTALLAPP
mkdir -p $TMPDIR/Lib_$NAMEINSTALLAPP
for ARCH in "armeabi" "armeabi-v7a" "arm64-v8a"; do
$UNZIP -oq $ZIPFILE $NAMEPATHOUT/$NAMEINSTALLAPP.apk -d $TMPDIR 2>/dev/null
$UNZIP -oq $TMPDIR/$NAMEPATHOUT/$NAMEINSTALLAPP.apk lib/$ARCH/* -d $TMPDIR/Lib_$NAMEINSTALLAPP 2>/dev/null
case $ARCH in
"armeabi") ARCHOUT="arm";; "armeabi-v7a") ARCHOUT="arm";; "arm64-v8a") ARCHOUT="arm64";;
esac
if [ -d $TMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCH ]; then
mkdir -p $PATHINSTALLAPP/lib/$ARCHOUT
cp -f $TMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCH/* $PATHINSTALLAPP/lib/$ARCHOUT
else
mkdir -p $PATHINSTALLAPP
fi
cp -f $TMPDIR/$NAMEPATHOUT/$NAMEINSTALLAPP.apk $PATHINSTALLAPP
done
rm -rf $TMPDIR/Lib_$NAMEINSTALLAPP
if $MAGISK; then
MMPR -v "AIOIARPFMD" "$VAIOIARPFMD" "AIOIARPFMD - Systemless Apps"
APKPERM "$PATHINSTALLAPP/$NAMEINSTALLAPP.apk" "$MODPATH/$MODID$MIPSEP"; HAPWL "$MODPATH/$MODID$MIPSES"
SET_PERM_RM
else
APKPERM "$PATHINSTALLAPP/$NAMEINSTALLAPP.apk" "$IPSEP"; HAPWL "$IPSES"
SET_PERM_R $IPSA/$NAMEINSTALLAPP 0 0 0755 0644
fi;;
-s) rm -rf $PATHINSTALLAPP
mkdir -p $TMPDIR/Lib_$NAMEINSTALLAPP
for ARCH in "armeabi" "armeabi-v7a" "arm64-v8a"; do
$UNZIP -oq $NAMEPATHOUT/$NAMEINSTALLAPP.apk lib/$ARCH/* -d $TMPDIR/Lib_$NAMEINSTALLAPP 2>/dev/null
case $ARCH in
"armeabi") ARCHOUT="arm";; "armeabi-v7a") ARCHOUT="arm";; "arm64-v8a") ARCHOUT="arm64";;
esac
if [ -d $TMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCH ]; then
mkdir -p $PATHINSTALLAPP/lib/$ARCHOUT
cp -f $TMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCH/* $PATHINSTALLAPP/lib/$ARCHOUT
else
mkdir -p $PATHINSTALLAPP
fi
cp -f $NAMEPATHOUT/$NAMEINSTALLAPP.apk $PATHINSTALLAPP
done
rm -rf $TMPDIR/Lib_$NAMEINSTALLAPP;;
esac
}

APKBUILDER() {
[ -f $STORAGE/framework-res.apk ] && APKFRAME="$STORAGE/framework-res.apk" || APKFRAME="$IPSFW/framework-res.apk"
$AAPT p -f -v -M $1/AndroidManifest.xml \
-I $APKFRAME -S $1/res/ \
-F $1/unsigned.apk >/dev/null
if $APKSIGN; then
if [ -s $1/unsigned.apk ]; then
UIP "Sign $2"
DALVIKVM $1/unsigned.apk $1/signed.apk
$ZIPALIGN -c 4 $1/signed.apk
cp -f $1/signed.apk $2
fi
else
UIP "No Sign $2"
$ZIPALIGN -c 4 $1/unsigned.apk
cp -f $1/unsigned.apk $2
fi
}

DALVIKVM() {
dalvikvm -Djava.io.tmpdir=. -Xnodex2oat -Xnoimage-dex2oat -cp $ZIPSIGNERJAR com.topjohnwu.utils.ZipSigner "$@" 2>/dev/null \
|| dalvikvm -Djava.io.tmpdir=. -Xnoimage-dex2oat -cp $ZIPSIGNERJAR com.topjohnwu.utils.ZipSigner "$@";
}

APKPERM() {
APKINPUT=$1; APKDIROUTPUT=$2
PACKAGENAME=$($AAPT list -a $APKINPUT | awk -v FS='"' '/package=/{print $2}')
mkdir -p $APKDIROUTPUT
PERM=$($AAPT d permissions $APKINPUT | grep "uses-permission:" | \
     sed -r "s|.*='(.*)'|\1|")
APPPERM=$(echo "$PERM" | \
     sed -re "s|  ||g; s|^|        <permission name=\"|; s|$|\"/>|")
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
# <!--
# This XML file declares which signature|privileged permissions should be granted to privileged
# applications on GMS or Google-branded devices.
# It allows additional grants on top of privapp-permissions-platform.xml
# -->
<permissions>
    <privapp-permissions package=\"$PACKAGENAME\">
$APPPERM
    </privapp-permissions>
</permissions>" > $APKDIROUTPUT/privapp-permissions-$PACKAGENAME.xml
chmod 644 $APKDIROUTPUT/privapp-permissions-$PACKAGENAME.xml
}

HAPWL() {
APKDIROUTPUT=$1; mkdir -p $APKDIROUTPUT
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!--
This XML file declares which platform apps that need to access internal APIs.
-->
<config>
  <hidden-api-whitelisted-app package=\"$PACKAGENAME\" />
</config>" > $APKDIROUTPUT/$PACKAGENAME-package-whitelist.xml
chmod 644 $APKDIROUTPUT/$PACKAGENAME-package-whitelist.xml
}

GRNE() {
RAND_PATH=$4
RAND_SUFFIX=$3
RAND_PREFIX=$2
RAND_DIGIT=$1
RAND_RAND="$(cat /proc/sys/kernel/random/uuid|md5sum|cut -c 1-"${RAND_DIGIT}")"
RAND_PATH_EXIST=false
for TARGET in ${RAND_PATH}; do
if [[ -e "${TARGET}/${RAND_PREFIX}${RAND_RAND}${RAND_SUFFIX}" ]]; then
RAND_PATH_EXIST=true
fi
done
if [[ "${RAND_PATH_EXIST}" == true ]]; then
GRNE "${RAND_DIGIT}" "${RAND_PREFIX}" "${RAND_SUFFIX}" "${RAND_PATH}"
else
echo "${RAND_RAND}"
fi
}

MMPR() {
local MMPROP="$MODPATH/$MODID/module.prop"
echo -e "id=$MODID\nname=$2\nversion=$3" > $MMPROP
case $1 in
-v) echo -e "author=$MSGWDI\ndescription=$4" >> $MMPROP;;
-vs) echo -e "author=$MSGWDI\ndescription=$4\nsupport=$5" >> $MMPROP;;
-vc) echo -e "versionCode=$4\nauthor=$5\ndescription=$6" >> $MMPROP;;
-vcs) echo -e "versionCode=$4\nauthor=$5\ndescription=$6\nsupport=$7" >> $MMPROP;;
-vcmm) echo -e "versionCode=$4\nauthor=$5\ndescription=$6\nminMagisk=$7" >> $MMPROP;;
-vcma) echo -e "versionCode=$4\nauthor=$5\ndescription=$6\nminApi=$7" >> $MMPROP;;
-vcmma) echo -e "versionCode=$4\nauthor=$5\ndescription=$6\nminMagisk=$7\napi=$8" >> $MMPROP;;
-vcrapi) echo -e "versionCode=$4\nauthor=$5\ndescription=$6\nriruApi=$7\nriruMinApi=$8" >> $MMPROP;;
-vcsd) echo -e "versionCode=$4\nauthor=$5\ndescription=$6\nsupport=$7\ndonate=$8" >> $MMPROP;;
-vcse) echo -e "versionCode=$4\nauthor=$5\ndescription=$6\nminSdkVersion=$7\nentrypoint=$8" >> $MMPROP;;
-vcsdt) echo -e "versionCode=$4\nauthor=$5\ndescription=$6\nsupport=$7\ndonate=$8\ntemplate=$9" >> $MMPROP;;
esac
}

MGSERVICED() {
echo "#/sbin/sh
while true; do
if [ \$(getprop sys.boot_completed) -eq 1 ]; then
if [ -f $MODPATH/$MODID/disable ] || [ ! -d $MODPATH/$MODID ]; then
$1
if [ ! -d $MODPATH/$MODID ]; then
rm -f $SERVICED/$3.sh
fi
break
elif [ -d $MODPATH/$MODID ]; then
$2
break
fi
fi
done" > $SERVICED/$3.sh
chmod 777 $SERVICED/$3.sh
}

MBCCSERVICE() {
echo -e "while true; do\nif [ \$(getprop sys.boot_completed) -eq 1 ]; then\n$1\nbreak\nfi\ndone" > $MODPATH/$MODID/service.sh
}

OSP_DETECT() {
case $1 in
*.conf) local SPACES=$(sed -n "/^output_session_processing {/,/^}/ {/^ *music {/p}" $1 | sed -r "s/( *).*/\1/")
local EFFECTS=$(sed -n "/^output_session_processing {/,/^}/ {/^$SPACES\music {/,/^$SPACES}/p}" $1 | grep -E "^$SPACES +[A-Za-z]+" | sed -r "s/( *.*) .*/\1/g")
for EFFECT in $EFFECTS; do
local SPACES=$(sed -n "/^effects {/,/^}/ {/^ *$EFFECT {/p}" $1 | sed -r "s/( *).*/\1/")
[ "$EFFECT" != "atmos" ] && sed -i "/^effects {/,/^}/ {/^$SPACES$EFFECT {/,/^$SPACES}/ s/^/#/g}" $1
done;;
*.xml) local EFFECTS=$(sed -n "/^ *<postprocess>$/,/^ *<\/postprocess>$/ {/^ *<stream type=\"music\">$/,/^ *<\/stream>$/ {/<stream type=\"music\">/d; /<\/stream>/d; s/<apply effect=\"//g; s/\"\/>//g; p}}" $1)
for EFFECT in $EFFECTS; do
[ "$EFFECT" != "atmos" ] && sed -ri "s/^( *)<apply effect=\"$EFFECT\"\/>/\1<\!--<apply effect=\"$EFFECT\"\/>-->/" $1
done;;
esac
}

FPATCHER() {
UIP "Patching Needed Files..."
local FINDFPATH=$1; local FPATCCODE=$2
for FPATH in $FINDFPATH; do
UIP "Found $FPATH" "Patching..."
if $MAGISK; then
mkdir -p `dirname $MODPATH/$MODID/$FPATH`
cp -f $FPATH $MODPATH/$MODID/$FPATH
UIP "Files Found And Patched"
fi
done
if $MAGISK; then
for FCODE in $FPATCCODE; do
sed -i $FCODE $MODPATH/$MODID/$FPATH
done
MOVERPATH
SET_PERM_RM
else
for FCODE in $FPATCCODE; do
sed -i $FCODE $FPATH
done
fi
}

MHIDE() {
if [ $ZYGISK != true ]; then
UIP "Using Magisk Hide"
case $1 in
-f) if $BOOTMODE; then magiskhide enable >/dev/null; for mhide in $2; do $mhide add $(echo $mhide | cut -f 1 -d '_') $(echo $mhide | cut -f 2 -d '_'); if [ $? -eq 0 ]; then UIP "$mhide: Hide Done"; else UIP "$mhide: Hide Failed"; fi; done; else echo -e "magiskhide enable; for mhide in $1; do mhide add \$(echo \$mhide | cut -f 1 -d '_') \$(echo \$mhide | cut -f 2 -d '_'); done" >> $MODPATH/$MODID/post-fs-data.sh; fi;;
-l) if $BOOTMODE; then magiskhide enable >/dev/null; else echo "magiskhide enable" >> $MODPATH/$MODID/post-fs-data.sh; fi;;
esac
fi
}

WCANFTP() {
for c in $1; do
case $1 in
-sl) SELINUX_CHECKER; if $SELINUX || [ $BOOTMODE != true ]; then if [ ! -d $MODPATH/$IDHAP ]; then UIP "Note $MSGRI: Change SELinux In Permissive!"; fi; fi;;
-bb) BB_CHECKER; if [ $FBUSYBOX != true ]; then UIP "Note $MSGRI: The Functionality Requires A BusyBox!"; fi;;
-sq) SQLITE_CHECKER; if [ $FSQLITE != true ]; then UIP "Note $MSGRI: The Functionality Requires A SqLite!"; fi;;
-ehap) if [ ! -d $MODPATH/$IDHAP ]; then UIP "Note $MSGRI: The Functionality Requires A Enabling Hidden Api Policy!"; fi;;
-aml) local FILES="$(find $MODPATH/*/system -type f -name "usb_audio_policy_configuration.xml" -o -name "*audio_*policy*.conf" -o -name "*audio_effects*.conf" -o -name "*audio_effects*.xml" 2>/dev/null)"; if [ ! -z "$FILES" ] && [ ! "$(echo $FILES | grep '/aml/')" ]; then UIP "Conflicting Audio Mod Found!" "Note $MSGRI: Install Audio Modification Library (AML)!"; fi;;
esac
done
}

ALBP() {
case $FILE in
*.conf) sed -i "/$1 {/,/}/d" $FILE
sed -i "/$2 {/,/}/d" $FILE
sed -i "s/^effects {/effects {\n  $1 {\n    library $2\n    uuid $5\n  }/g" $FILE
sed -i "s/^libraries {/libraries {\n  $2 {\n    path $3\/$4\n  }/g" $FILE;;
*.xml) sed -i "/$1/d" $FILE
sed -i "/$2/d" $FILE
sed -i "/<libraries>/ a\        <library name=\"$2\" path=\"$4\"\/>" $FILE
sed -i "/<effects>/ a\        <effect name=\"$1\" library=\"$2\" uuid=\"$5\"\/>" $FILE;;
esac
}

PROCESSING_PATCH() {
case $1 in
-pre) CONF=pre_processing; XML=preprocess;;
-post) CONF=output_session_processing; XML=postprocess;;
esac
case $2 in
*.conf) if [ ! "$(sed -n "/^$CONF {/,/^}/p" $2)" ]; then
echo -e "\n$CONF {\n    $3 {\n        $4 {\n        }\n    }\n}" >> $2
elif [ ! "$(sed -n "/^$CONF {/,/^}/ {/$3 {/,/^    }/p}" $2)" ]; then
sed -i "/^$CONF {/,/^}/ s/$CONF {/$CONF {\n    $3 {\n        $4 {\n        }\n    }/" $2
elif [ ! "$(sed -n "/^$CONF {/,/^}/ {/$3 {/,/^    }/ {/$4 {/,/}/p}}" $2)" ]; then
sed -i "/^$CONF {/,/^}/ {/$3 {/,/^    }/ s/$3 {/$3 {\n        $4 {\n        }/}" $2
fi;;
*.xml) if [ ! "$(sed -n "/^ *<$XML>/,/^ *<\/$XML>/p" $2)" ]; then     
sed -i "/<\/audio_effects_conf>/i\    <$XML>\n       <stream type=\"$3\">\n            <apply effect=\"$4\"\/>\n        <\/stream>\n    <\/$XML>" $2
elif [ ! "$(sed -n "/^ *<$XML>/,/^ *<\/$XML>/ {/<stream type=\"$3\">/,/<\/stream>/p}" $2)" ]; then     
sed -i "/^ *<$XML>/,/^ *<\/$XML>/ s/    <$XML>/    <$XML>\n        <stream type=\"$3\">\n            <apply effect=\"$4\"\/>\n        <\/stream>/" $2
elif [ ! "$(sed -n "/^ *<$XML>/,/^ *<\/$XML>/ {/<stream type=\"$3\">/,/<\/stream>/ {/^ *<apply effect=\"$4\"\/>/p}}" $2)" ]; then
sed -i "/^ *<$XML>/,/^ *<\/$XML>/ {/<stream type=\"$3\">/,/<\/stream>/ s/<stream type=\"$3\">/<stream type=\"$3\">\n            <apply effect=\"$4\"\/>/}" $2
fi;;
esac
}

PXMLNLS() {
local Name0=$(echo "$3" | sed -r "s|^.*/.*\[@(.*)=\".*\".*$|\1|")
local Value0=$(echo "$3" | sed -r "s|^.*/.*\[@.*=\"(.*)\".*$|\1|")
[ "$(echo "$4" | grep '=')" ] && Name1=$(echo "$4" | sed "s|=.*||") || local Name1="value"
local Value1=$(echo "$4" | sed "s|.*=||")
case $1 in
"-s"|"-u"|"-i")
local SNP=$(echo "$3" | sed -r "s|(^.*/.*)\[@.*=\".*\".*$|\1|")
local NP=$(dirname "$SNP")
local SN=$(basename "$SNP")
if [ "$5" ]; then
[ "$(echo "$5" | grep '=')" ] && local Name2=$(echo "$5" | sed "s|=.*||") || local Name2="value"
local Value2=$(echo "$5" | sed "s|.*=||")
fi
if [ "$6" ]; then
[ "$(echo "$6" | grep '=')" ] && local Name3=$(echo "$6" | sed "s|=.*||") || local Name3="value"
local Value3=$(echo "$6" | sed "s|.*=||")
fi
if [ "$7" ]; then
[ "$(echo "$7" | grep '=')" ] && local Name4=$(echo "$7" | sed "s|=.*||") || local Name4="value"
local Value4=$(echo "$7" | sed "s|.*=||")
fi;;
esac
case "$1" in
"-d") $XMLSTARLET ed -L -d "$3" "$2";;
"-u") $XMLSTARLET ed -L -u "$3/@$Name1" -v "$Value1" "$2";;
"-s")
if [ "$($XMLSTARLET sel -t -m "$3" -c . "$2")" ]; then
$XMLSTARLET ed -L -u "$3/@$Name1" -v "$Value1" "$2"
else
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" \
-i "$SNP-$MODID" -t attr -n "$Name0" -v "$Value0" \
-i "$SNP-$MODID" -t attr -n "$Name1" -v "$Value1" \
-r "$SNP-$MODID" -v "$SN" "$2"
fi;;
"-i")
if [ "$($XMLSTARLET sel -t -m "$3[@$Name1=\"$Value1\"]" -c . "$2")" ]; then
$XMLSTARLET ed -L -d "$3[@$Name1=\"$Value1\"]" "$2"
fi
if [ -z "$Value3" ]; then
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" \
-i "$SNP-$MODID" -t attr -n "$Name0" -v "$Value0" \
-i "$SNP-$MODID" -t attr -n "$Name1" -v "$Value1" \
-i "$SNP-$MODID" -t attr -n "$Name2" -v "$Value2" \
-r "$SNP-$MODID" -v "$SN" "$2"
elif [ "$Value4" ]; then
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" \
-i "$SNP-$MODID" -t attr -n "$Name0" -v "$Value0" \
-i "$SNP-$MODID" -t attr -n "$Name1" -v "$Value1" \
-i "$SNP-$MODID" -t attr -n "$Name2" -v "$Value2" \
-i "$SNP-$MODID" -t attr -n "$Name3" -v "$Value3" \
-i "$SNP-$MODID" -t attr -n "$Name4" -v "$Value4" \
-r "$SNP-$MODID" -v "$SN" "$2"
elif [ "$Value3" ]; then
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" \
-i "$SNP-$MODID" -t attr -n "$Name0" -v "$Value0" \
-i "$SNP-$MODID" -t attr -n "$Name1" -v "$Value1" \
-i "$SNP-$MODID" -t attr -n "$Name2" -v "$Value2" \
-i "$SNP-$MODID" -t attr -n "$Name3" -v "$Value3" \
-r "$SNP-$MODID" -v "$SN" "$2"
fi;;
esac
}

PATCH_DEEP_BUFFER() {
UIP "Start PATCH_DEEP_BUFFER" "Patching Needed Files..."
case $1 in
-nl) echo -e '\n#PATCH DEEP BUFFER\naudio.deep_buffer.media=false\nvendor.audio.deep_buffer.media=false\nqc.audio.deep_buffer.media=false\nro.qc.audio.deep_buffer.media=false\npersist.vendor.audio.deep_buffer.media=false' >> $MODPATH/$MODID/system.prop
esac
for OACONF in $ACXML; do
UIP "Found $OACONF" "Patching..."
ACONF="$MODPATH/$MODID$(echo $OACONF | sed "s|^/vendor|$MIPSV|g")"
case $1 in
-nl) PXMLNLS -u $ACONF '/configs/property[@name="audio.deep_buffer.media"]' "false"; UIP "Files Found And Patched";;
-aist) PXMLNLS -u $ACONF '/configs/property[@name="audio.offload.video"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="audio.deep_buffer.media"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="audio.offload.disable"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="persist.vendor.audio.sva.conc.enabled"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="persist.vendor.audio.va_concurrency_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.voice.dsd.playback.conc.disabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.voice.playback.conc.disabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.offload.track.enable"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.offload.multiple.enabled"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.av.streaming.offload.enable"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.rec.playback.conc.disabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.voice.record.conc.disabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.voice.voip.conc.disabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.voice.path.for.pcm.voip"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.use.sw.alac.decoder"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.use.sw.ape.decoder"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.use.sw.mpegh.decoder"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.flac.sw.decoder.24bit"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.hw.aac.encoder"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="voice_concurrency"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="compress_voip_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="battery_listener_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="compress_capture_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="compress_in_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="record_play_concurrency"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="concurrent_capture_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="aac_adts_offload_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="alac_offload_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="ape_offload_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="flac_offload_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="pcm_offload_enabled_16"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="pcm_offload_enabled_24"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="qti_flac_decoder"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="vorbis_offload_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="wma_offload_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="audio_zoom_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="audiosphere_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="ext_hw_plugin_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="ext_qdsp_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="ext_spkr_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="ext_spkr_tfa_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="hfp_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="hifi_audio_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="hwdep_cal_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="multi_voice_session"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="maxx_audio_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="usb_offload_sidetone_vol_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="keep_alive_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="kpi_optimize_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="spkr_prot_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="a2dp_offload_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/flag[@name="anc_headset_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/flag[@name="vbat_enabled"]' "false";;
esac
UIP "Files Found And Patched"
done
}
	
PATCH_VOLUMES() {
UIP "Start PATCH_VOLUMES" "Patching Needed Files..."
for OMIX in $MPATHS; do
UIP "Found $OMIX" "Patching..."
MIX="$MODPATH/$MODID$(echo $OMIX | sed "s|^/vendor|$MIPSV|g")"
case $1 in
-nl) PXMLNLS -u $MIX '/mixer/ctl[@name="RX0 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX1 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX2 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX3 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX4 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX5 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX6 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX7 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX8 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX0 Mix Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX1 Mix Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX2 Mix Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX3 Mix Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX4 Mix Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX5 Mix Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX6 Mix Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX7 Mix Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX8 Mix Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX0 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX1 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX2 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX4 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX5 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX6 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX7 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX8 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX0 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX1 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX2 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX4 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX5 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX6 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX7 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX8 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_RX0 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_RX1 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_RX0 Digital Volume"]' "92"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_RX1 Digital Volume"]' "92";;
-aist) if $HIFI; then
PXMLNLS -u $MIX '/mixer/ctl[@name="RX0 Digital Volume"]' "86"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX4 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX5 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX6 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX7 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX8 Digital Volume"]' "90"
PXMLNLS -s $MIX '/mixer/ctl[@name="RX8 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PXMLNLS -s $MIX '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "90"
PXMLNLS -s $MIX '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC0 Volume"]' "88"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC1 Volume"]' "88"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC2 Volume"]' "88"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC3 Volume"]' "88"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC4 Volume"]' "86"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC5 Volume"]' "86"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC6 Volume"]' "86"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC7 Volume"]' "86"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC8 Volume"]' "86"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC0 Volume"]' "88"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC1 Volume"]' "88"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC2 Volume"]' "88"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC3 Volume"]' "88"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC4 Volume"]' "86"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC5 Volume"]' "86"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC6 Volume"]' "86"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC7 Volume"]' "86"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC8 Volume"]' "86"
PXMLNLS -u $MIX '/mixer/ctl[@name="HPHL Volume"]' "18"
PXMLNLS -u $MIX '/mixer/ctl[@name="HPHR Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="HPHL Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="HPHR Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="HPHL Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="HPHR Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="HPHL Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="HPHR Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="HPHL Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="HPHR Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="HPHL Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="HPHR Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="HPHL Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="HPHR Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="top-speaker"]/ctl[@name="HPHL Volume"]' "18"
PXMLNLS -s $MIX '/mixer/path[@name="top-speaker"]/ctl[@name="HPHR Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="bottom-speaker"]/ctl[@name="HPHL Volume"]' "18"
PXMLNLS -s $MIX '/mixer/path[@name="bottom-speaker"]/ctl[@name="HPHR Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="HPHL Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="HPHR Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="HPHL Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="HPHR Volume"]' "18"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX4 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX5 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX6 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX7 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX8 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX4 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX5 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX6 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX7 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX8 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX4 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX5 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX6 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX7 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX8 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX4 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX5 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX6 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX7 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX8 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="LINEOUT1 Volume"]' "16"
PXMLNLS -u $MIX '/mixer/ctl[@name="LINEOUT2 Volume"]' "16"
else
PXMLNLS -u $MIX '/mixer/ctl[@name="RX0 Digital Volume"]' "86"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX4 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX5 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX6 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX7 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX8 Digital Volume"]' "90"
PXMLNLS -s $MIX '/mixer/ctl[@name="RX8 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PXMLNLS -s $MIX '/mixer/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "90"
PXMLNLS -s $MIX '/mixer/ctl[@name="RX_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC0 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC1 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC2 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC3 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC4 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC5 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC6 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC7 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC8 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC0 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC1 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC2 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC3 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC4 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC5 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC6 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC7 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC8 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX4 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX5 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX6 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX7 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX8 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX0 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX1 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX2 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="WSA_RX3 Digital Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="LINEOUT1 Volume"]' "16"
PXMLNLS -u $MIX '/mixer/ctl[@name="LINEOUT2 Volume"]' "16"
fi;;
esac
UIP "Files Found And Patched"
done
}

PATCH_MICROPHONE() {
UIP "Start PATCH_MICROPHONE" "Patching Needed Files..."
for OMIX in $MPATHS; do
UIP "Found $OMIX" "Patching..."
MIX="$MODPATH/$MODID$(echo $OMIX | sed "s|^/vendor|$MIPSV|g")"
PXMLNLS -u $MIX '/mixer/ctl[@name="ADC1 Volume"]' "12"
PXMLNLS -u $MIX '/mixer/ctl[@name="ADC2 Volume"]' "12"
PXMLNLS -u $MIX '/mixer/ctl[@name="ADC3 Volume"]' "12"
PXMLNLS -u $MIX '/mixer/ctl[@name="ADC4 Volume"]' "12"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC0 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC1 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC2 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC3 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC4 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC5 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC6 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC7 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="DEC8 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC0 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC1 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC2 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC3 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC4 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC5 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC6 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC7 Volume"]' "94"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX_DEC8 Volume"]' "94"
PXMLNLS -s $MIX '/mixer/ctl[@name="EC Reference Bit Format"]' "S16_LE"
PXMLNLS -s $MIX '/mixer/ctl[@name="EC Reference SampleRate"]' "48000"
PXMLNLS -u $MIX '/mixer/ctl[@name="adc1"]/ctl[@name="ADC1 Volume"]' "12"
PXMLNLS -u $MIX '/mixer/ctl[@name="adc2"]/ctl[@name="ADC2 Volume"]' "12"
PXMLNLS -u $MIX '/mixer/ctl[@name="adc3"]/ctl[@name="ADC3 Volume"]' "12"
PXMLNLS -u $MIX '/mixer/ctl[@name="asr-mic"]/ctl[@name="ADC1 Volume"]' "12"
PXMLNLS -u $MIX '/mixer/ctl[@name="asr-mic"]/ctl[@name="ADC3 Volume"]' "12"
PXMLNLS -u $MIX '/mixer/speaker-mic/adc1/ctl[@name="IIR1 INP1 MUX"]' "ZERO"
PXMLNLS -u $MIX '/mixer/handset-mic/adc1/ctl[@name="IIR1 INP1 MUX"]' "ZERO"
PXMLNLS -u $MIX '/mixer/secondary-mic/adc3/ctl[@name="IIR1 INP1 MUX"]' "ZERO"
PXMLNLS -u $MIX '/mixer/headset-mic/adc2/ctl[@name="IIR1 INP1 MUX"]' "ZERO"
PXMLNLS -u $MIX '/mixer/dmic-endfire/handset-dmic-endfire/ctl[@name="IIR1 INP1 MUX"]' "ZERO"
PXMLNLS -u $MIX '/mixer/dmic-endfire-liquid/handset-dmic-endfire/ctl[@name="IIR1 INP1 MUX"]' "ZERO"
PXMLNLS -u $MIX '/mixer/dmic-broadside/speaker-dmic-broadside/ctl[@name="IIR1 INP1 MUX"]' "ZERO"
UIP "Files Found And Patched"
done
}

PATCH_IIR() {
UIP "Start PATCH_IIR" "Patching Needed Files..."
for OMIX in $MPATHS; do
UIP "Found $OMIX" "Patching..."
MIX="$MODPATH/$MODID$(echo $OMIX | sed "s|^/vendor|$MIPSV|g")"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band1"][@id="0"]' "238395206"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band1"][@id="1"]' "689443228"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band1"][@id="2"]' "205354587"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band1"][@id="3"]' "689443228"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band1"][@id="4"]' "175314338"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band2"][@id="0"]' "262009200"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band2"][@id="1"]' "568438374"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band2"][@id="2"]' "243939794"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band2"][@id="3"]' "569025299"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band2"][@id="4"]' "238100463"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band3"][@id="0"]' "253440447"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band3"][@id="1"]' "842391711"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band3"][@id="2"]' "209259777"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band3"][@id="3"]' "842391711"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band3"][@id="4"]' "194264768"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band4"][@id="0"]' "268435456"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band4"][@id="1"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band4"][@id="2"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band4"][@id="3"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band4"][@id="4"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band5"][@id="0"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band5"][@id="1"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band5"][@id="2"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band5"][@id="3"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band5"][@id="4"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Enable Band0"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Enable Band1"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Enable Band2"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Enable Band3"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Enable Band4"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Enable Band5"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP0 Volume"]' "82"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP1 Volume"]' "82"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP2 Volume"]' "82"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP3 Volume"]' "82"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP4 Volume"]' "82"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP5 Volume"]' "82"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP1 MUX"]' "headphones"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX1 HPF Switch"]' "On"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX2 HPF Switch"]' "On"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX3 HPF Switch"]' "On"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX1 HPF Switch"]' "On"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX2 HPF Switch"]' "On"
PXMLNLS -u $MIX '/mixer/ctl[@name="TX3 HPF Switch"]' "On"
UIP "Files Found And Patched"
done
}

PATCH_AUDIO_PLATFORM_INFO() {
UIP "Start PATCH_AUDIO_PLATFORM_INFO" "Patching Needed Files..." 
for OAPLI in $APIIEXML; do
case $OAPLI in
*audio_platform_info_intcodec.xml) APTYPE="audio_platform_info_intcodec";;
*audio_platform_info_extcodec.xml) APTYPE="audio_platform_info_extcodec";;
*audio_platform_info.xml) APTYPE="audio_platform_info";;
esac
UIP "Found $OAPLI" "Patching..."
APLI="$MODPATH/$MODID$(echo $OAPLI | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $APLI`
cp -f $MAGISKMIRROR$OAPLI $APLI
sed -i 's/\t/  /g' $APLI
PXMLNLS -s $APLI "/$APTYPE/config_params/param[@key=\"native_audio_mode\"]" "src"
PXMLNLS -s $APLI "/$APTYPE/config_params/param[@key=\"hifi_filter\"]" "true"
PXMLNLS -s $APLI "/$APTYPE/bit_width_configs/device[@name=\"SND_DEVICE_OUT_HEADPHONES\"]" "24"
PXMLNLS -s $APLI "/$APTYPE/bit_width_configs/device[@name=\"SND_DEVICE_OUT_SPEAKER_REVERSE\"]" "24"
PXMLNLS -s $APLI "/$APTYPE/bit_width_configs/device[@name=\"SND_DEVICE_OUT_SPEAKER_PROTECTED\"]" "24"
PXMLNLS -s $APLI "/$APTYPE/bit_width_configs/device[@name=\"SND_DEVICE_OUT_HEADPHONES_44_1\"]" "24"
PXMLNLS -s $APLI "/$APTYPE/bit_width_configs/device[@name=\"SND_DEVICE_OUT_GAME_SPEAKER\"]" "24"
PXMLNLS -s $APLI "/$APTYPE/bit_width_configs/device[@name=\"SND_DEVICE_OUT_GAME_HEADPHONES\"]" "24"
PXMLNLS -s $APLI "/$APTYPE/bit_width_configs/device[@name=\"SND_DEVICE_OUT_BT_A2DP\"]" "24"	 
PXMLNLS -u $APLI "/$APTYPE/app_types/app[@mode=\"default\"]" "bit_width=24"
PXMLNLS -u $APLI "/$APTYPE/app_types/app[@mode=\"default\"]" "max_rate=192000"
if [ ! "$(grep '<app_types>' $APLI)" ]; then
sed -i "s/<\/$APTYPE>/  <app_types> \n    <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"24\" id=\"69936\" max_rate=\"192000\" \/> \n    <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"24\" id=\"69940\" max_rate=\"192000\" \/> \n  <app_types> \n<\/$APTYPE>/" $APLI		  
else
for i in 69936 69940; do
[ "$(XMLSTARLET sel -t -m "/$APTYPE/app_types/app[@uc_type=\"PCM_PLAYBACK\"][@mode=\"default\"][@id=\"$i\"]" -c . $APLI)" ] || sed -i "/<$APTYPE>/,/<\/$APTYPE>/ {/<app_types>/,/<\/app_types>/ s/\(^ *\)\(<\/app_types>\)/\1  <app uc_type=\"PCM_PLAYBACK\" mode=\"default\" bit_width=\"24\" id=\"$i\" max_rate=\"192000\" \/> \n\1\2/}" $APLI			
done
fi
UIP "Files Found And Patched"
done
}

PATCH_COMPANDERS() {
UIP "Start PATCH_COMPANDERS" "Patching Needed Files..."
for OMIX in $MPATHS; do
UIP "Found $OMIX" "Patching..."
MIX="$MODPATH/$MODID$(echo $OMIX | sed "s|^/vendor|$MIPSV|g")"
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="asr-mic"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc1"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc2"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="adc3"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="va-enroll-mic"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP1"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="true-native-mode"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="headphones-generic"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-headphones"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voice-anc-fb-headphones"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="aac-initial"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-on"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc2-on"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphones"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="anc-off-headphone-combo"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="voiceanc-headphone"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="ADSP testfwk"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="bt-a2dp"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="deep-buffer-playback headphones"]/ctl[@name="COMP0 RX2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback"]/ctl[@name="COMP0 RX2 Switch"]' 0	
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP3 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP4 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP5 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP6 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP7 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP8 Switch"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP0 RX1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP0 RX2"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP1"]' 0
PXMLNLS -s $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP2"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="SpkrLeft COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="SpkrRight COMP Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="WSA_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="WSA_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="RX_COMP1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="RX_COMP2 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP0 RX1 Switch"]' 0
PXMLNLS -u $MIX '/mixer/path[@name="low-latency-playback headphones"]/ctl[@name="COMP0 RX2 Switch"]' 0	
PXMLNLS -s $MIX '/mixer/ctl[@name="Compress Playback 16 Volume"]' 0
PXMLNLS -s $MIX '/mixer/ctl[@name="Compress Playback 15 Volume"]' 0
PXMLNLS -s $MIX '/mixer/ctl[@name="Compress Playback 29 Volume"]' 0
PXMLNLS -s $MIX '/mixer/ctl[@name="Compress Playback 30 Volume"]' 0
PXMLNLS -s $MIX '/mixer/ctl[@name="Compress Playback 31 Volume"]' 0
PXMLNLS -s $MIX '/mixer/ctl[@name="Compress Playback 32 Volume"]' 0
UIP "Files Found And Patched"
done
}

PATCH_AUDIO_CODEC() {
UIP "Start PATCH_AUDIO_CODEC"
if FINDER "$ACXML"; then
UIP "Patching Needed Files..."
for OACONF in $ACXML; do
UIP "Found $OACONF" "Patching..."
ACONF="$MODPATH/$MODID$(echo $OACONF | sed "s|^/vendor|$MIPSV|g")"
PXMLNLS -u $ACONF '/configs/property[@name="audio.offload.disable"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="audio.offload.min.duration.secs"]' "30"
PXMLNLS -u $ACONF '/configs/property[@name="persist.vendor.audio.sva.conc.enabled"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="persist.vendor.audio.va_concurrency_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.av.streaming.offload.enable"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.offload.track.enable"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.offload.multiple.enabled"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.rec.playback.conc.disabled"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.voice.conc.fallbackpath"]' ""
PXMLNLS -u $ACONF '/configs/property[@name="vendor.voice.dsd.playback.conc.disabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.voice.path.for.pcm.voip"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.voice.playback.conc.disabled"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.voice.record.conc.disabled"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.voice.voip.conc.disabled"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="audio_extn_formats_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="audio_extn_hdmi_spk_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="use_xml_audio_policy_conf"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="voice_concurrency"]' "false "
PXMLNLS -u $ACONF '/configs/property[@name="afe_proxy_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="compress_voip_enabled"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="fm_power_opt"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="record_play_concurrency"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.use.sw.alac.decoder"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.use.sw.ape.decoder"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.use.sw.mpegh.decoder"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.flac.sw.decoder.24bit"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vendor.audio.hw.aac.encoder"]' "false"
PXMLNLS -u $ACONF '/configs/property[@name="aac_adts_offload_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="alac_offload_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="ape_offload_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="flac_offload_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="pcm_offload_enabled_16"]' "false "
PXMLNLS -u $ACONF '/configs/property[@name="pcm_offload_enabled_24"]' "false "
PXMLNLS -u $ACONF '/configs/property[@name="qti_flac_decoder"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="vorbis_offload_enabled"]' "true"
PXMLNLS -u $ACONF '/configs/property[@name="wma_offload_enabled"]' "true"
UIP "Files Found And Patched"
done
fi
}

PATCH_DEVICE_FEATURES() {
UIP "Start PATCH_DEVICE_FEATURES" "Patching Needed Files..."
for ODEFE in $SDEVFE $VDEVFE; do
UIP "Found $ODEFE" "Patching..."
PDF="$MODPATH/$MODID$(echo $ODEFE | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $PDF`
cp -f $MAGISKMIRROR$ODEFE $PDF
sed -i 's/\t/  /g' $PDF
PXMLNLS -s $PDF '/features/bool[@name="support_a2dp_latency"]' "true"
PXMLNLS -s $PDF '/features/bool[@name="support_samplerate_48000"]' "true"
PXMLNLS -s $PDF '/features/bool[@name="support_samplerate_96000"]' "true"
PXMLNLS -s $PDF '/features/bool[@name="support_samplerate_192000"]' "true"
PXMLNLS -s $PDF '/features/bool[@name="support_low_latency"]' "true"
PXMLNLS -s $PDF '/features/bool[@name="support_mid_latency"]' "false"
PXMLNLS -s $PDF '/features/bool[@name="support_high_latency"]' "false"
PXMLNLS -s $PDF '/features/bool[@name="support_interview_record_param"]' "false"
PXMLNLS -s $PDF '/features/bool[@name="support_voip_record"]' "true"
PXMLNLS -s $PDF '/features/integer[@name="support_inner_record"]' "1"
PXMLNLS -s $PDF '/features/bool[@name="support_hifi"]' "true"
UIP "Files Found And Patched"
done
}

PATCH_DIRAC() {
UIP "Start PATCH_DIRAC" "Patching Needed Files..."
for OFILE in $AECONFXML; do
UIP "Found $OFILE" "Patching..."
FILE="$MODPATH/$MODID$(echo $OFILE | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $FILE`
cp -f $MAGISKMIRROR$OFILE $FILE
OSP_DETECT $FILE
ALBP "dirac_gef" "$MODID" "$DYNLIBPATCH\/lib\/soundfx" "libdiraceffect.so" "3799D6D1-22C5-43C3-B3EC-D664CF8D2F0D"
PROCESSING_PATCH -post "$FILE" "music" "dirac_gef"
UIP "Files Found And Patched"
done
mkdir -p $MODPATH/$MODID$MIPSVED $MODPATH/$MODID$MIPSVLRA $MODPATH/$MODID$MIPSVLS
cp -f $NEWDIRAC/diracvdd.bin $MODPATH/$MODID$MIPSVE
cp -f $NEWDIRAC/interfacedb $MODPATH/$MODID$MIPSVED
cp -f $NEWDIRAC/dirac_resource.dar $MODPATH/$MODID$MIPSVLRA
cp -f $NEWDIRAC/libdirac-capiv2.so $MODPATH/$MODID$MIPSVLRA/dirac.so
cp -f $NEWDIRAC/libdirac-capiv2.so $MODPATH/$MODID$MIPSVLRA
cp -f $NEWDIRAC/libdiraceffect.so $MODPATH/$MODID$MIPSVLS
echo -e "\n# Patch Dirac
persist.dirac.acs.controller=gef
persist.dirac.gef.oppo.syss=true
persist.dirac.config=64
persist.dirac.gef.exs.did=50,50
persist.dirac.gef.ext.did=450,450,450,450
persist.dirac.gef.ins.did=0,0,0
persist.dirac.gef.int.did=0,0,0,0
persist.dirac.gef.ext.appt=0x00011130,0x00011134,0x00011136
persist.dirac.gef.exs.appt=0x00011130,0x00011131
persist.dirac.gef.int.appt=0x00011130,0x00011134,0x00011136
persist.dirac.gef.ins.appt=0x00011130,0x00011131
persist.dirac.gef.exs.mid=268512739
persist.dirac.gef.ext.mid=268512737
persist.dirac.gef.ins.mid=268512738
persist.dirac.gef.int.mid=268512736
persist.dirac.path=/vendor/etc/dirac
ro.dirac.acs.storeSettings=1
persist.dirac.acs.ignore_error=1" >> $MODPATH/$MODID/system.prop
}

PATCH_MIXER() {
UIP "Start PATCH_MIXER" "Patching Needed Files..."
case $1 in
-nl) if [ "$RN5PRO" ] || [ "$MI9" ] || [ "$MI8" ] || [ "$MI8P" ] || [ "$MI9P" ] || [ "$MIA2" ]; then
echo -e "\n# PATCH MIXER\nro.sound.alsa=TAS2557" >> $MODPATH/$MODID/system.prop
fi
for OMIX in $MPATHS; do
UIP "Found $OMIX" "Patching..."
MIX="$MODPATH/$MODID$(echo $OMIX | sed "s|^/vendor|$MIPSV|g")"
if [ "$RN5PRO" ] || [ "$MI9" ] || [ "$MI8" ] || [ "$MI8P" ] || [ "$MI9P" ] || [ "$MIA2" ]; then
PXMLNLS -s $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="SLIM_5_RX Format"]' "S24_3LE"
PXMLNLS -s $MIX '/mixer/ctl[@name="TAS2557 ClassD Edge"]' "7"
PXMLNLS -s $MIX '/mixer/ctl[@name="TAS2557 Volume"]' "30"
fi
PXMLNLS -s $MIX '/mixer/ctl[@name="headphones"]/ctl[@name="PowerCtrl"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="TFA Profile"]' "speaker"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT1 MIX3 DSD HPHL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT2 MIX3 DSD HPHR Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="HiFi Function"]' "On"
PXMLNLS -s $MIX '/mixer/ctl[@name="HiFi Filter"]' "6"
PXMLNLS -u $MIX '/mixer/ctl[@name="HPHL"]' "Switch"
PXMLNLS -u $MIX '/mixer/ctl[@name="HPHR"]' "Switch"
PXMLNLS -s $MIX '/mixer/ctl[@name="RX1 HPF cut off"]' "MIN_3DB_4Hz"
PXMLNLS -s $MIX '/mixer/ctl[@name="RX2 HPF cut off"]' "MIN_3DB_4Hz"
PXMLNLS -s $MIX '/mixer/ctl[@name="RX3 HPF cut off"]' "MIN_3DB_4Hz"
PXMLNLS -s $MIX '/mixer/ctl[@name="TX1 HPF cut off"]' "MIN_3DB_4Hz"
PXMLNLS -s $MIX '/mixer/ctl[@name="TX2 HPF cut off"]' "MIN_3DB_4Hz"
PXMLNLS -s $MIX '/mixer/ctl[@name="TX3 HPF cut off"]' "MIN_3DB_4Hz"
PXMLNLS -s $MIX '/mixer/ctl[@name="Amp DSP Enable"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="BDE AMP Enable"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="Amp Volume Location"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="A2DP_SLIM7_UL_HL Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIM7_RX_DL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HFP_SLIM7_UL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HFP_PRI_AUX_UL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HFP_AUX_UL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HFP_INT_UL_HL Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIM_7_RX SampleRate"]' "KHZ_192"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIMBUS_7_RX SampleRate"]' "KHZ_192"
if $HIFI; then
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="hph-hifi-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="hph-highquality-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="hph-lowpower-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="hph-class-ab-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIM_7_RX Format"]' "S24_3LE"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIMBUS_7_RX Format"]' "S24_3LE"
PXMLNLS -s $MIX '/mixer/ctl[@name="headphones"]/ctl[@name="SLIM_5_RX Format"]' "S24_3LE"
PXMLNLS -u $MIX '/mixer/ctl[@name="EC Reference Bit Format"]' "S24_3LE"
else
if [ $PATCH_MIXER_LITE != true ]; then
PXMLNLS -u $MIX '/mixer/ctl[@name="RX HPH Mode"]' "HD2"
fi
PXMLNLS -u $MIX '/mixer/ctl[@name="RX HPH HD2 Mode"]' "On"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIM_7_RX Format"]' "S24_LE"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIMBUS_7_RX Format"]' "S24_LE"
PXMLNLS -s $MIX '/mixer/ctl[@name="headphones"]/ctl[@name="SLIM_5_RX Format"]' "S24_LE"
PXMLNLS -u $MIX '/mixer/ctl[@name="EC Reference Bit Format"]' "S24_LE"
fi
if $PATCH_MIXER_LITE; then
PXMLNLS -u $MIX '/mixer/ctl[@name="TFA987X_ALGO_STATUS"]' "ENABLE"
PXMLNLS -u $MIX '/mixer/ctl[@name="TFA987X_TX_ENABLE"]' "ENABLE"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIMBUS_7_RX Channels"]' "Two"
else
PXMLNLS -u $MIX '/mixer/ctl[@name="Voice Sidetone Enable"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="Set Custom Stereo OnOff"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="MSM ASphere Set Param"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="HPH Idle Detect"]' "ON"
PXMLNLS -s $MIX '/mixer/ctl[@name="ASM Bit Width"]' "24"
PXMLNLS -s $MIX '/mixer/ctl[@name="HPHL_RDAC Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="HPHR_RDAC Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="AUX_RDAC Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="Adsp Working Mode"]' "full"
PXMLNLS -s $MIX '/mixer/ctl[@name="Adsp Working Mode"]' "full"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT1 SEC MIX HPHL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT2 SEC MIX HPHR Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="RX INT3 SEC MIX LO1 Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="RX INT4 SEC MIX LO2 Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT0 DEM MUX"]' "CLSH_DSM_OUT"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT1 DEM MUX"]' "CLSH_DSM_OUT"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT2 DEM MUX"]' "CLSH_DSM_OUT"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT3 DEM MUX"]' "CLSH_DSM_OUT"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT4 DEM MUX"]' "CLSH_DSM_OUT"
PXMLNLS -u $MIX '/mixer/ctl[@name="HPHL"]' "Switch"
PXMLNLS -u $MIX '/mixer/ctl[@name="HPHR"]' "Switch"
PXMLNLS -s $MIX '/mixer/ctl[@name="TFA987X_ALGO_STATUS"]' "ENABLE"
PXMLNLS -s $MIX '/mixer/ctl[@name="TFA987X_TX_ENABLE"]' "ENABLE"
PXMLNLS -s $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="SLIM_2_RX Format"]' "DSD_DOP"
PXMLNLS -s $MIX '/mixer/ctl[@name="Ext Spk Boost"]' "ENABLE"
PXMLNLS -s $MIX '/mixer/ctl[@name="Boost Option"]' "BOOST_ALWAYS"
PXMLNLS -s $MIX '/mixer/ctl[@name="PowerCtrl"]' "0"
fi
UIP "Files Found And Patched"
done;;
-aist) for OMIX in $MPATHS; do
UIP "Found $OMIX" "Patching..."
MIX="$MODPATH/$MODID$(echo $OMIX | sed "s|^/vendor|$MIPSV|g")"
if $HIFI; then
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="speaker"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="top-speaker"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="top-speaker"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="bottom-speaker"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="bottom-speaker"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="hph-hifi-mode"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="hph-hifi-mode"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="hph-highquality-mode"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="hph-highquality-mode"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="hph-lowpower-mode"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="hph-lowpower-mode"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="hph-class-ab-mode"]/ctl[@name="RX HPH Mode"]' "CLS_AB_HIFI"
PXMLNLS -s $MIX '/mixer/path[@name="hph-class-ab-mode"]/ctl[@name="RX HPH Mode"]' "CLS_AB_HIFI"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headset"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="voice-headset"]/ctl[@name="RX HPH Mode"]' "CLS_H_LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="speaker"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="top-speaker"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="top-speaker"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="bottom-speaker"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="bottom-speaker"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="hph-hifi-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="hph-hifi-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="hph-highquality-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="hph-highquality-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="hph-lowpower-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="hph-lowpower-mode"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headset"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -s $MIX '/mixer/path[@name="voice-headset"]/ctl[@name="RX_HPH_PWR_MODE"]' "LOHIFI"
PXMLNLS -u $MIX '/mixer/ctl[@name="ASM Bit Width"]' "24"
PXMLNLS -s $MIX '/mixer/ctl[@name="ASM Bit Width"]' "24"
else
PXMLNLS -s $MIX '/mixer/ctl[@name="RX_HPH_PWR_MODE"]' "HIRES"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX HPH Mode"]' "HD2"
PXMLNLS -s $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_HPH_PWR_MODE"]' "HIRES"
PXMLNLS -s $MIX '/mixer/ctl[@name="VBoost Ctrl"]' "AlwaysOn"
fi
if [ "$MI9" ] || [ "$MI10" ] || [ "$K20P" ] || [ "$MI8P" ] || [ "$MI8" ] || [ "$MI9P" ] || [ "$POCOF1" ] || [ "$POCOF2P" ]; then
PXMLNLS -s $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="SLIM_5_RX Format"]' "S24_3LE"
PXMLNLS -s $MIX '/mixer/ctl[@name="USB_AUDIO_RX Format"]' "S24_3LE"
PXMLNLS -s $MIX '/mixer/path[@name="headphones"]/ctl[@name="SLIM_6_RX Format"]' "S24_3LE"
PXMLNLS -s $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="SLIM_5_RX SampleRate"]' "KHZ_192"
PXMLNLS -s $MIX '/mixer/ctl[@name="USB_AUDIO_RX SampleRate"]' "KHZ_192"
PXMLNLS -s $MIX '/mixer/path[@name="headphones"]/ctl[@name="SLIM_6_RX SampleRate"]' "KHZ_192"
PXMLNLS -s $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="SLIM_2_RX SampleRate"]' "KHZ_384"
PXMLNLS -u $MIX '/mixer/ctl[@name="SLIM_5_RX Channels"]' "Two"
PXMLNLS -u $MIX '/mixer/ctl[@name="SLIM_6_RX Channels"]' "Two"
PXMLNLS -u $MIX '/mixer/ctl[@name="SLIM_2_RX Channels"]' "Two"
PXMLNLS -u $MIX '/mixer/ctl[@name="QUAT_MI2S_RX Channels"]' "Two"
PXMLNLS -s $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX1 Mix Digital Volume"]' "86"
PXMLNLS -s $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX2 Mix Digital Volume"]' "86"
PXMLNLS -s $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX1 Digital Volume"]' "86"
PXMLNLS -s $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX2 Digital Volume"]' "86"
PXMLNLS -s $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX6 Digital Volume"]' "86"
PXMLNLS -s $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX7 Digital Volume"]' "86"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX1 Digital Volume"]' "86"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX2 Digital Volume"]' "86"
PXMLNLS -s $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX3 Digital Volume"]' "86"
PXMLNLS -s $MIX '/mixer/path[@name="ultrasound-proximity-output"]/ctl[@name="SLIMBUS1_DL_HL Switch"]' "1"
fi
if [ "$RN5PRO" ] || [ "$RN6PRO" ] || [ "$RN7" ]; then
PXMLNLS -s $MIX '/mixer/ctl[@name="TAS2557 ClassD Edge"]' "7"
PXMLNLS -u $MIX '/mixer/ctl[@name="INT0_MI2S_RX Format"]' "UNPACKED"
PXMLNLS -s $MIX '/mixer/ctl[@name="MultiMedia5_RX QOS Vote"]' "Disable"
PXMLNLS -s $MIX '/mixer/ctl[@name="ADC1_INP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="Load acoustic model"]' "1"
PXMLNLS -s $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX1 Digital Volume"]' "96"
PXMLNLS -s $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX2 Digital Volume"]' "96"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="RX1 Digital Volume"]' "80"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-ce"]/ctl[@name="RX2 Digital Volume"]' "80"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX1 Digital Volume"]' "88"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-no-ce"]/ctl[@name="RX2 Digital Volume"]' "88"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="IIR1 INP1 Volume"]' "88"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-karaoke"]/ctl[@name="IIR1 INP2 Volume"]' "88"
fi
PXMLNLS -u $MIX '/mixer/ctl[@name="Voice Sidetone Enable"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="Set Custom Stereo OnOff"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="Set Custom Stereo OnOff"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HiFi Function"]' "On"
PXMLNLS -s $MIX '/mixer/ctl[@name="HiFi Function"]' "On"
PXMLNLS -u $MIX '/mixer/ctl[@name="HiFi Filter"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="HiFi Filter"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="MSM ASphere Set Param"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="EC Reference Channels"]' "Two"
PXMLNLS -u $MIX '/mixer/ctl[@name="EC Reference Bit Format"]' "S24_LE"
PXMLNLS -u $MIX '/mixer/ctl[@name="SpkrLeft BOOST Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="SpkrRight BOOST Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="SpkrLeft VISENSE Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="SpkrRight VISENSE Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="SpkrLeft SWR DAC_Port Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="SpkrRight SWR DAC_Port Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="ANC Function"]' "ON"
PXMLNLS -u $MIX '/mixer/ctl[@name="ANC0 FB MUX"]' "ANC_IN_LO1"
PXMLNLS -u $MIX '/mixer/ctl[@name="ANC1 FB MUX"]' "ANC_IN_LO2"
PXMLNLS -u $MIX '/mixer/ctl[@name="ANC OUT EAR Enable Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="ANC OUT EAR SPKR Enable Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="ANC SPKR PA Enable Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="ANC OUT HPHL Enable Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="ANC OUT HPHR Enable Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HPHL_RDAC Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HPHR_RDAC Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="HPHL_RDAC Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="HPHR_RDAC Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="AUX_RDAC Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="BDE Enable"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="BDE AMP Enable"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="BDE Enable"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="BDE AMP Enable"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="Amp DSP Enable"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="Amp DSP Enable"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="DRE En"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="DRE En"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="SmartPA Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="SmartPA Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="Custom Filter"]' "ON"
PXMLNLS -s $MIX '/mixer/ctl[@name="Custom Filter"]' "ON"
PXMLNLS -u $MIX '/mixer/ctl[@name="Filter Shape"]' "Slow Rolloff"
PXMLNLS -s $MIX '/mixer/ctl[@name="Filter Shape"]' "Slow Rolloff"
PXMLNLS -u $MIX '/mixer/ctl[@name="Virtual Bass Boost"]' "On"
PXMLNLS -s $MIX '/mixer/ctl[@name="Virtual Bass Boost"]' "On"
PXMLNLS -u $MIX '/mixer/ctl[@name="Adsp Working Mode"]' "full"
PXMLNLS -s $MIX '/mixer/ctl[@name="Adsp Working Mode"]' "full"
PXMLNLS -s $MIX '/mixer/ctl[@name="WSA_RX0 EC_HQ Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="WSA_RX1 EC_HQ Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="WSA_RX3 EC_HQ Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="WSA_RX4 EC_HQ Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT1 SEC MIX HPHL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT2 SEC MIX HPHR Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="RX INT3 SEC MIX LO1 Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="RX INT4 SEC MIX LO2 Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT1 MIX3 DSD HPHL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT2 MIX3 DSD HPHR Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT0 DEM MUX"]' "CLSH_DSM_OUT"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT1 DEM MUX"]' "CLSH_DSM_OUT"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT2 DEM MUX"]' "CLSH_DSM_OUT"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT3 DEM MUX"]' "CLSH_DSM_OUT"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX INT4 DEM MUX"]' "CLSH_DSM_OUT"
PXMLNLS -u $MIX '/mixer/ctl[@name="HPH Idle Detect"]' "ON"
PXMLNLS -s $MIX '/mixer/ctl[@name="HPH Idle Detect"]' "ON"
PXMLNLS -u $MIX '/mixer/ctl[@name="HPHL"]' "Switch"
PXMLNLS -u $MIX '/mixer/ctl[@name="HPHR"]' "Switch"
PXMLNLS -s $MIX '/mixer/ctl[@name="A2DP_SLIM7_UL_HL Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="PCM_RX_DL_HL Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="USB_DL_HL Switch"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIM_7_RX Format"]' "S24_LE"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIM_7_RX SampleRate"]' "KHZ_192"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIM_7_RX Channels"]' "Two"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIMBUS_7_RX Format"]' "S24_LE"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIMBUS_7_RX SampleRate"]' "KHZ_192"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIMBUS_7_RX Channels"]' "Two"
PXMLNLS -s $MIX '/mixer/ctl[@name="SLIM7_RX_DL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HFP_SLIM7_UL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HFP_PRI_AUX_UL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HFP_AUX_UL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HFP_INT_UL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="SLIM7_RX ADM Channels"]' "Two"
PXMLNLS -u $MIX '/mixer/ctl[@name="A2DP_SLIM7_UL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="PCM_RX_DL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="USB_DL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="SLIM_7_RX Format"]' "S24_LE"
PXMLNLS -u $MIX '/mixer/ctl[@name="SLIM_7_RX SampleRate"]' "KHZ_192"
PXMLNLS -u $MIX '/mixer/ctl[@name="SLIM_7_RX Channels"]' "Two"
PXMLNLS -u $MIX '/mixer/ctl[@name="SLIMBUS_7_RX Format"]' "S24_LE"
PXMLNLS -u $MIX '/mixer/ctl[@name="SLIMBUS_7_RX SampleRate"]' "KHZ_192"
PXMLNLS -u $MIX '/mixer/ctl[@name="SLIMBUS_7_RX Channels"]' "Two"
PXMLNLS -u $MIX '/mixer/ctl[@name="SLIM7_RX_DL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HFP_SLIM7_UL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HFP_PRI_AUX_UL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HFP_AUX_UL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="HFP_INT_UL_HL Switch"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="SLIM7_RX ADM Channels"]' "Two"
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP3 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP4 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP5 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP6 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP7 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="COMP8 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="WSA_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="RX_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="SpkrLeft COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="SpkrRight COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP3 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP4 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP5 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP6 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP7 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="COMP8 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-and-headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP3 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP4 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP5 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP6 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP7 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="COMP8 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="RX_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker"]/ctl[@name="RX_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP3 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP4 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP5 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP6 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP7 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="COMP8 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="RX_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono"]/ctl[@name="RX_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP3 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP4 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP5 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP6 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP7 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="COMP8 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="RX_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="speaker-mono-2"]/ctl[@name="RX_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP3 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP4 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP5 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP6 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP7 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="COMP8 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="RX_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="handset"]/ctl[@name="RX_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP3 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP4 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP5 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP6 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP7 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP8 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP0 RX1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones"]/ctl[@name="COMP0 RX2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP3 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP4 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP5 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP6 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP7 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="COMP8 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-44.1"]/ctl[@name="RX_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP3 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP4 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP5 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP6 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP7 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="COMP8 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="headphones-dsd"]/ctl[@name="RX_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP3 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP4 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP5 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP6 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP7 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="COMP8 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="anc-headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP3 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP4 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP5 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP6 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP7 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="COMP8 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="voice-headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP3 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP4 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP5 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP6 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP7 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="COMP8 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="SpkrLeft COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="SpkrRight COMP Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="WSA_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="WSA_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="RX_COMP1 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/path[@name="tty-headphones"]/ctl[@name="RX_COMP2 Switch"]' "0"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band1"][@id="0"]' "268833620"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band1"][@id="1"]' "537398060"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band1"][@id="2"]' "267510580"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band1"][@id="3"]' "537398060"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band1"][@id="4"]' "267908744"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band2"][@id="0"]' "266468108"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band2"][@id="1"]' "544862876"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band2"][@id="2"]' "262421829"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band2"][@id="3"]' "544862876"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band2"][@id="4"]' "260454481"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band3"][@id="0"]' "262913321"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band3"][@id="1"]' "559557058"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band3"][@id="2"]' "252311547"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band3"][@id="3"]' "559557058"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band3"][@id="4"]' "246789412"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band4"][@id="0"]' "294517138"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band4"][@id="1"]' "572289454"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band4"][@id="2"]' "210943778"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band4"][@id="3"]' "572289454"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band4"][@id="4"]' "237025461"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band5"][@id="0"]' "329006442"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band5"][@id="1"]' "711929387"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band5"][@id="2"]' "110068469"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band5"][@id="3"]' "711929387"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Band5"][@id="4"]' "170639455"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Enable Band0"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Enable Band1"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Enable Band2"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Enable Band3"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Enable Band4"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 Enable Band5"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP0 Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP1 Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP2 Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP3 Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP4 Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR0 INP5 Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band1"][@id="0"]' "268833620"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band1"][@id="1"]' "537398060"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band1"][@id="2"]' "267510580"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band1"][@id="3"]' "537398060"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band1"][@id="4"]' "267908744"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band2"][@id="0"]' "266468108"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band2"][@id="1"]' "544862876"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band2"][@id="2"]' "262421829"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band2"][@id="3"]' "544862876"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band2"][@id="4"]' "260454481"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band3"][@id="0"]' "262913321"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band3"][@id="1"]' "559557058"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band3"][@id="2"]' "252311547"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band3"][@id="3"]' "559557058"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band3"][@id="4"]' "246789412"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band4"][@id="0"]' "294517138"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band4"][@id="1"]' "572289454"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band4"][@id="2"]' "210943778"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band4"][@id="3"]' "572289454"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band4"][@id="4"]' "237025461"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band5"][@id="0"]' "329006442"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band5"][@id="1"]' "711929387"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band5"][@id="2"]' "110068469"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band5"][@id="3"]' "711929387"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Band5"][@id="4"]' "170639455"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Enable Band0"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Enable Band1"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Enable Band2"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Enable Band3"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Enable Band4"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 Enable Band5"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 INP0 Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 INP1 Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 INP2 Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 INP3 Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 INP4 Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="IIR1 INP5 Volume"]' "90"
PXMLNLS -u $MIX '/mixer/ctl[@name="Cirrus SP Usecase"]' "Game"
PXMLNLS -s $MIX '/mixer/ctl[@name="Cirrus SP Usecase"]' "Game"
PXMLNLS -u $MIX '/mixer/ctl[@name="SRS TruMedia"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="SRS TruMedia HDMI"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="SRS TruMedia I2S"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="SRS TruMedia MI2S"]' "1"
PXMLNLS -s $MIX '/mixer/ctl[@name="SRS TruMedia"]' "1"
PXMLNLS -u $MIX '/mixer/ctl[@name="AUX_HPF Enable"]' "On"
PXMLNLS -s $MIX '/mixer/ctl[@name="AUX_HPF Enable"]' "On"
PXMLNLS -u $MIX '/mixer/ctl[@name="A2DP_HPF Enable"]' "On"
PXMLNLS -s $MIX '/mixer/ctl[@name="A2DP_HPF Enable"]' "On"
PXMLNLS -u $MIX '/mixer/ctl[@name="LDOH Enable"]' "On"
PXMLNLS -s $MIX '/mixer/ctl[@name="LDOH Enable"]' "On"
UIP "Files Found And Patched"
done;;
esac
if $PATCHMC && FINDER "$MCGAX"; then
UIP "Patching Needed Files..."
for MCGAXP in $MCGAX; do
UIP "Found $MCGAXP" "Patching..."
MCGAX="$MODPATH/$MODID$(echo $MCGAXP | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $MCGAX`
cp -f $MAGISKMIRROR$MCGAXP $MCGAX
case $MCGAX in
*media_codecs_google_audio*.xml) sed -i 's/\" >/\">/g;/aac.encoder/,/c>/s/\">/\">\n            <Limit name=\"complexity\" range=\"0-8\"  default=\"8\"\/>/g;/aac.encoder/,/c>/s/\">/\">\n            <Feature name=\"bitrate-modes\" value=\"CQ\"\/>/g;/flac.encoder/,/<\/MediaCodec>/s/default.*/default=\"8\"\/>/g;/flac.encoder/,/<\/MediaCodec>/s/value.*/value=\"CQ\"\/>/g' $MCGAX
sed -i 's/\" >/\">/g;/vorbis.decoder/,/c>/s/\">/\">\n            <Limit name=\"complexity\" range=\"0-8\"  default=\"8\"\/>/g;/vorbis.decoder/,/c>/s/\">/\">\n            <Feature name=\"bitrate-modes\" value=\"CQ\"\/>/g;/flac.decoder/,/<\/MediaCodec>/s/default.*/default=\"8\"\/>/g;/flac.decoder/,/<\/MediaCodec>/s/value.*/value=\"CQ\"\/>/g' $MCGAX
sed -i 's/\" >/\">/g;/aac.decoder/,/c>/s/\">/\">\n            <Limit name=\"complexity\" range=\"0-8\"  default=\"8\"\/>/g;/aac.decoder/,/c>/s/\">/\">\n            <Feature name=\"bitrate-modes\" value=\"CQ\"\/>/g;/flac.encoder/,/<\/MediaCodec>/s/default.*/default=\"8\"\/>/g;/flac.encoder/,/<\/MediaCodec>/s/value.*/value=\"CQ\"\/>/g' $MCGAX;;
*media_codecs_google_c2_audio*.xml) sed -i 's/\" >/\">/g;/aac.encoder/,/c>/s/\">/\">\n            <Limit name=\"complexity\" range=\"0-8\"  default=\"8\"\/>/g;/aac.encoder/,/c>/s/\">/\">\n            <Feature name=\"bitrate-modes\" value=\"CQ\"\/>/g;/flac.encoder/,/<\/MediaCodec>/s/default.*/default=\"8\"\/>/g;/flac.encoder/,/<\/MediaCodec>/s/value.*/value=\"CQ\"\/>/g' $MCGAX
sed -i 's/\" >/\">/g;/vorbis.decoder/,/c>/s/\">/\">\n            <Limit name=\"complexity\" range=\"0-8\"  default=\"8\"\/>/g;/vorbis.decoder/,/c>/s/\">/\">\n            <Feature name=\"bitrate-modes\" value=\"CQ\"\/>/g;/flac.decoder/,/<\/MediaCodec>/s/default.*/default=\"8\"\/>/g;/flac.decoder/,/<\/MediaCodec>/s/value.*/value=\"CQ\"\/>/g' $MCGAX
sed -i 's/\" >/\">/g;/aac.encoder/,/c>/s/\">/\">\n            <Limit name=\"complexity\" range=\"0-8\"  default=\"8\"\/>/g;/aac.encoder/,/c>/s/\">/\">\n            <Feature name=\"bitrate-modes\" value=\"CQ\"\/>/g;/flac.encoder/,/<\/MediaCodec>/s/default.*/default=\"8\"\/>/g;/flac.encoder/,/<\/MediaCodec>/s/value.*/value=\"CQ\"\/>/g' $MCGAX;;
*media_codecs_vendor_audio*.xml) sed -i 's/\" >/\">/g;/aac.encoder/,/c>/s/\">/\">\n            <Limit name=\"complexity\" range=\"0-8\"  default=\"8\"\/>/g;/aac.encoder/,/c>/s/\">/\">\n            <Feature name=\"bitrate-modes\" value=\"CQ\"\/>/g;/flac.encoder/,/<\/MediaCodec>/s/default.*/default=\"8\"\/>/g;/flac.encoder/,/<\/MediaCodec>/s/value.*/value=\"CQ\"\/>/g' $MCGAX
sed -i 's/\" >/\">/g;/vorbis.decoder/,/c>/s/\">/\">\n            <Limit name=\"complexity\" range=\"0-8\"  default=\"8\"\/>/g;/vorbis.decoder/,/c>/s/\">/\">\n            <Feature name=\"bitrate-modes\" value=\"CQ\"\/>/g;/flac.decoder/,/<\/MediaCodec>/s/default.*/default=\"8\"\/>/g;/flac.decoder/,/<\/MediaCodec>/s/value.*/value=\"CQ\"\/>/g' $MCGAX
sed -i 's/\" >/\">/g;/aac.encoder/,/c>/s/\">/\">\n            <Limit name=\"complexity\" range=\"0-8\"  default=\"8\"\/>/g;/aac.encoder/,/c>/s/\">/\">\n            <Feature name=\"bitrate-modes\" value=\"CQ\"\/>/g;/flac.encoder/,/<\/MediaCodec>/s/default.*/default=\"8\"\/>/g;/flac.encoder/,/<\/MediaCodec>/s/value.*/value=\"CQ\"\/>/g' $MCGAX;;
esac
UIP "Files Found And Patched"
done
else
mkdir -p $MODPATH/$MODID$MIPSVE
cp -f $TMPDIR/NLSound/*.xml $MODPATH/$MODID$MIPSVE
fi
}

PATCH_IO_POLICY(){
UIP "Start PATCH_IO_POLICY" "Patching Needed Files..."
for OIOPOLICY in $AIPCONFA; do
UIP "Found $OIOPOLICY" "Patching..."
AIPCONFA="$MODPATH/$MODID$(echo $OIOPOLICY | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $AIPCONFA`
cp -f $MAGISKMIRROR$OIOPOLICY $AIPCONFA
sed -i 's/AUDIO_OUTPUT_FLAG_DIRECT/AUDIO_OUTPUT_FLAG_DIRECT_PCM/g' $AIPCONFA
sed -i 's/AUDIO_OUTPUT_FLAG_DIRECT_PCM_PCM/AUDIO_OUTPUT_FLAG_DIRECT_PCM/g' $AIPCONFA
UIP "Files Found And Patched"
done
}

PATCH_AUDIO_POLICY() {
UIP "Start PATCH_AUDIO_POLICY" "Patching Needed Files..."
for OAUDIOPOLICY in $APCXML; do
UIP "Found $OAUDIOPOLICY" "Patching..."
APCXML="$MODPATH/$MODID$(echo $OAUDIOPOLICY | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $APCXML`
cp -f $MAGISKMIRROR$OAUDIOPOLICY $APCXML
sed -i 's/speaker_drc_enabled="true"/speaker_drc_enabled="false"/g' $APCXML
UIP "Files Found And Patched"
done
}

PATCH_IMPROVE_BLUETOOTH() {
UIP "Start PATCH_IMPROVE_BLUETOOTH"
echo -e "\n# Improve Bluetooth
audio.effect.a2dp.enable=1
vendor.audio.effect.a2dp.enable=1
vendor.bt.pts.pbap=true
ro.bluetooth.emb_wp_mode=false
ro.bluetooth.wipower=false 
ro.vendor.bluetooth.wipower=false
persist.service.btui.use_aptx=1
persist.bt.enableAptXHD=true
persist.bt.a2dp.aptx_disable=false
persist.bt.a2dp.aptx_hd_disable=false
persist.bt.a2dp.aac_disable=false
persist.bt.sbc_hd_enabled=1
persist.vendor.btstack.enable.splita2dp=true
persist.vendor.btstack.connect.peer_earbud=true
persist.vendor.btstack.enable.twsplussho=true
persist.vendor.btstack.enable.swb=true
persist.vendor.btstack.enable.swbpm=true
persist.vendor.btstack.enable.lpa=false
persist.vendor.btstack.avrcp.pos_time=1000
persist.vendor.bt.a2dp.aac_whitelist=false
persist.vendor.bt.a2dp.addr_check_enabled_for_aac=true
persist.vendor.bt.aac_frm_ctl.enabled=true
persist.vendor.bt.aac_vbr_frm_ctl.enabled=true
persist.vendor.qcom.bluetooth.scram.enabled=false
persist.vendor.qcom.bluetooth.aac_frm_ctl.enabled=true
persist.vendor.qcom.bluetooth.enable.splita2dp=true 
persist.vendor.qcom.bluetooth.twsp_state.enabled=false
persist.vendor.qcom.bluetooth.a2dp_mcast_test.enabled=false
persist.vendor.qcom.bluetooth.aptxadaptiver2_1_support=true
persist.vendor.qcom.bluetooth.enable.swb=true
persist.bluetooth.enabledelayreports=true
persist.bluetooth.sbc_hd_higher_bitrate=1
persist.sys.fflag.override.settings_bluetooth_hearing_aid=true" >> $MODPATH/$MODID/system.prop
}

PUSBAPCXML() {
if [ "$($XMLSTARLET sel -t -m "$3" -c . $2)" ]; then
[ "$($XMLSTARLET sel -t -m "$3" -c . $2 | sed -r "s/.*samplingRates=\"([0-9]*)\".*/\1/")" == "48000" ] && return
case $1 in
-l) $XMLSTARLET ed -L -i "$3" -t elem -n "$MODID" $2
local LN=$(sed -n "/<$MODID\/>/=" $2)
for i in $LN; do
sed -i "$i d" $2
sed -i "$i p" $2
sed -ri "${i}s/(^ *)(.*)/\1<!--$MODID\2$MODID-->/" $2
sed -i "$((i+1))s/$/<!--$MODID-->/" $2
done;;
-f) $XMLSTARLET ed -L -u "$3/@samplingRates" -v "48000" $2;;
esac
else
case $1 in
-l) local NP=$(echo "$3" | sed -r "s|(^.*)/.*$|\1|"); local SNP=$(echo "$3" | sed -r "s|(^.*)\[.*$|\1|"); local SN=$(echo "$3" | sed -r "s|^.*/.*/(.*)\[.*$|\1|")
$XMLSTARLET ed -L -s "$NP" -t elem -n "$SN-$MODID" -i "$SNP-$MODID" -t attr -n "name" -v "" -i "$SNP-$MODID" -t attr -n "format" -v "AUDIO_FORMAT_PCM_16_BIT" -i "$SNP-$MODID" -t attr -n "samplingRates" -v "48000" -i "$SNP-$MODID" -t attr -n "channelMasks" -v "AUDIO_CHANNEL_OUT_STEREO" $2
$XMLSTARLET ed -L -r "$SNP-$MODID" -v "$SN" $2;;
-f) $XMLSTARLET ed -L -i "$3" -t elem -n "$MODID" $2
local LN=$(sed -n "/<$MODID\/>/=" $2)
for i in $LN; do
sed -i "$i d" $2
sed -ri "${i}s/$/<!--$MODID-->/" $2
done;;
esac
fi
case $1 in
-f) local LN=$(sed -n "/^ *<!--$MODID-->$/=" $2 | tac)
for i in $LN; do
sed -i "$i d" $2
sed -ri "$((i-1))s/$/<!--$MODID-->/" $2
done;;
esac
}

SP_CHECKER() {
if [ $BOOTMODE != true ] && [ ! -f $IPDSU/0/settings_secure.xml ] && [ ! -f $IPDSU/0/settings_global.xml ] && [ ! -f $IPDSU/0/settings_system.xml ]; then
return 0
else
for f in $1; do
for af in $2; do
if [ -f $f ]; then
if grep $af $f >/dev/null; then
return 0
fi
fi
done
done
fi
return 1
}

MMUPD_LIST() {
#UI: Pills/NavBar/Gboard/Themes/BA/Sounds
MMUPD_CHECKER "$IDPO" "$VIPPO" "IPPOS"
MMUPD_CHECKER "$IDPCO" "$VIPPCO" "IPPCOS"
MMUPD_CHECKER "$IDPHOS" "$VIPPHO" "IPPHOS"
MMUPD_CHECKER "$IDPSHNB" "$VIPPSHNB" "IPPSHNBS"
MMUPD_CHECKER "$IDBGDS" "$VIPBGD" "IPBGDS"
MMUPD_CHECKER "$IDGBNBS" "$VIPGBNBS" "IPGBNBSS"
MMUPD_CHECKER "$IDGBRC" "$VIPGBRC" "IPGBRCS"
MMUPD_CHECKER "$IDGBT" "$VIPGBT" "IPGBTS"
MMUPD_CHECKER -c "$IDGBSTE" "$VIPGBSTE" "$VCIPGBSTE"
MMUPD_CHECKER "$IDSBINNI" "$VIPSBINNI" "IPSBINNIS"
MMUPD_CHECKER "$IDGPPM" "$VIPGPPM" "IPGPPMS"
MMUPD_CHECKER "$IDRUI" "$VIPRUI" "IPRUIS"
MMUPD_CHECKER "$IDBIP" "$VIPBIP" "IPBIPS"
MMUPD_CHECKER "$IDNSP" "$VIPNSP" "IPNSPS"
MMUPD_CHECKER "$IDSBIS" "$VIPSBIS" "IPSBISS"
MMUPD_CHECKER "$IDSBCS" "$VIPSBCS" "IPSBCSS"
MMUPD_CHECKER "$IDSUE" "$VIPSUE" "IPSUES"
MMUPD_CHECKER "$IDSBP" "$VIPSBP" "IPSBPS"
MMUPD_CHECKER "$IDQSCP" "$VIPQSCP" "IPQSCPS"
MMUPD_CHECKER "$IDSUIRSRS" "$VIPSUIRSRS" "IPSUIRSRSS"
MMUPD_CHECKER "$IDQSCIAR" "$VIPQSCIAR" "IPQSCIARS"
MMUPD_CHECKER "$IDEBB" "$VIPEBB" "IPEBBS"
MMUPD_CHECKER "$IDBA" "$VIPBA" "IPBAS"
MMUPD_CHECKER -c "$IDOSEMOJI" "$VIPOSEMOJI" "$VCIPOSEMOJI" "IPIOSEMOJIS"
MMUPD_CHECKER "$IDMUIS" "$VIPMUIS" "IPMUISS"
MMUPD_CHECKER "$IDFDNI" "$VIPFDNI" "IPFDNIS"
#Apps: GFU/GSF/SL/ASUSS/IA
if $FINDAIOPFMDA; then 
MMUPD_CHECKER "$IDGFUL" "$VIPGFUL" "IPGFULS"
MMUPD_CHECKER "$IDGSF" "$VIPGSF" "IPGSFS"
fi
MMUPD_CHECKER "$IDSL" "$VIPSL" "IPSLS"
MMUPD_CHECKER -c "$IDSOPL" "$VIPSOPL" "$VCIPSOPL" "IPSLS"
if $ATEN && $FINDAIOPFMDA; then MMUPD_CHECKER -c "$IDSOUH" "$VIPSOUHQ" "$VCIPSOUHQ" "IPSLS"; fi
if $AELEVEN && $FINDAIOPFMDA; then MMUPD_CHECKER -c "$IDSOUH" "$VIPSOUHR" "$VCIPSOUHR" "IPSLS"; fi
MMUPD_CHECKER "$IDSPL" "$VIPSPL" "IPSLS"
if $ATEN; then MMUPD_CHECKER -c "$IDSSL" "$VIPSSLQ" "$VCIPSSLQ" "IPSLS"; fi
if $AELEVEN; then MMUPD_CHECKER -c "$IDSSL" "$VIPSSLR" "$VCIPSSLR" "IPSLS"; fi
MMUPD_CHECKER -c "$IDSLA" "$VIPSLA" "$VCIPSLA" "IPSLS"
MMUPD_CHECKER -c "$IDASUSS" "$VIPASUSS" "$VCIPASUSS" "IPASUSSS"
#Audio: VFX(P)/NL/AIST/SAQ/IB/ACP/AML
MMUPD_CHECKER -c "$IDVFXL" "$VIPVFXL" "$VCIPVFXL" "IPVFXS"
MMUPD_CHECKER -c "$IDVFX" "$VIPVFX" "$VCIPVFX" "IPVFXS"
MMUPD_CHECKER "$IDVFXP" "$VIPVFXP" "IPVFXPS"
if $FINDAIOPFMDA; then
MMUPD_CHECKER -c "$IDJDSPM" "$VIPJDSPM" "$VCIPJDSPM" "IPJDSMS"
MMUPD_CHECKER -c "$IDDTSHPX" "$VIPDTSHPX" "$VCIPDTSHPX" "IPDTSHPXS"
if [ $MAGISKFIRSTTIME != true ]; then MMUPD_CHECKER -c "$IDAN" "$VIPAN" "$VCIPAN" "IPANS"; fi
fi
MMUPD_CHECKER -c "$IDNLS" "$VIPNLS" "$VCIPNLS" "IPNLSS"
MMUPD_CHECKER -c "$IDAIST" "$VIPAIST" "$VCIPAIST" "IPAISTS"
MMUPD_CHECKER -c "$IDSAQ" "$VIPSAQ" "$VCIPSAQ" "IPSAQS"
MMUPD_CHECKER "$IDIBS" "$VIPIBS" "IPIBS"
MMUPD_CHECKER -c "$IDUSBPP" "$VIPUSBPP" "$VCIPUSBPP" "IPUSBPPS"
MMUPD_CHECKER -c "$IDACP" "$VIPACP" "$VCIPACP" "IPACPS"
MMUPD_CHECKER -c "$IDAML" "$VIPAML" "$VCIPAML" "IPAMLS"
#AdBlock/Hosts
MMUPD_CHECKER -c "$IDDAB" "$VIPDAB" "$VCIPDAB" "IPHFS"
MMUPD_CHECKER "$IDVAAH" "$VIPVAAH" "IPHFS"
MMUPD_CHECKER -c "$IDVLPH" "$VIPVLPH" "$VCIPLPH" "IPHFS"
MMUPD_CHECKER -c "$IDVSH" "$VIPVSH" "$VCIPVSH" "IPHFS"
MMUPD_CHECKER "$IDVOH" "$VIPVOH" "IPHFS"
#Net: GPS/TTL/DNS/WB/USBTF
MMUPD_CHECKER -c "$IDGOGPS" "$VIPGOGPS" "$VCIPGOGPS" "IPGOGPSS"
MMUPD_CHECKER -c "$IDTTLF" "$VIPTTLF" "$VCIPTTLF" "IPTTLFS"
MMUPD_CHECKER -c "$IDNT" "$VIPNT" "$VCIPNT" "IPNTS"
MMUPD_CHECKER -c "$IDWIFIB" "$VIPWIFIB" "$VCIPWIFIB" "IPWIFIBS"
MMUPD_CHECKER "$IDUSBTF" "$VIPUSBTF" "IPUSBTFS"
#Utilities: BB/ZS/SELC/ASTE/CC/Detach
MMUPD_CHECKER -c "$IDBB" "$VIPBB" "$VCIPBB" "IPBBS"
MMUPD_CHECKER -c "$IDZSAAPT" "$VIPZSAAPT" "$VCIPZSAAPT" "IPZSAAPTS"
MMUPD_CHECKER "$IDSELC" "$VIPSELC" "IPSELCS"
MMUPD_CHECKER -c "$IDASTE" "$VIPASTE" "$VCIPASTE" "IPASTES"
MMUPD_CHECKER "$IDCC" "$VIPCC" "IPCCS"
MMUPD_CHECKER -c "$IDDETACH" "$VIPDETACH" "$VCIPDETACH" "IPDETACHS"
MMUPD_CHECKER -c "$IDDETACH3" "$VIPDETACH3" "$VCIPDETACH3" "IPDETACHS"
MMUPD_CHECKER -c "$IDSQL3" "$VIPSQL3" "$VCIPSQL3" "IPSQL3S"
MMUPD_CHECKER -c "$IDMMFRM" "$VIPMMFRM" "$VCIPMMFRM" "IPMMFRMS"
#Other: DFO/STZD/DDVFE/FA/SBU
MMUPD_CHECKER "$IDBDFFSOQSS" "$VIPBDFFSOQSS" "IPBDFFSOQSSS"
MMUPD_CHECKER -c "$IDSTZD" "$VIPSTZD" "$VCIPSTZD" "IPSTZDS"
MMUPD_CHECKER "$IDFPA" "$VIPFPA" "IPFPAS"
MMUPD_CHECKER "$IDFSLFM" "$VIPFSLFM" "IPFSLFMS"
#SafetyNet/MHPC/GPay
MMUPD_CHECKER -c "$IDSNP" "$VIPSNP" "$VCIPSNP" "IPSNPS"
MMUPD_CHECKER -c "$IDSNPA" "$VIPSNPA" "$VCIPSNPA" "IPSNPS"
if [ "$ASDK" -ge 24 ] && [ -d $MODPATH/$IDRIRU ] && [ ! -d $MODPATH/$IDLSPOSEDZ/zygisk ]; then MMUPD_CHECKER -c "$IDSNPRZ" "$VIPSNPR" "$VCIPSNPR" "IPSNPS"; fi
if [ "$ASDK" -ge 24 ] && $ZYGISK && [ ! -d $MODPATH/$IDLSPOSEDR/riru ]; then MMUPD_CHECKER -c "$IDSNPRZ" "$VIPSNPZ" "$VCIPSNPZ" "IPSNPS"; fi
MMUPD_CHECKER "$IDSNET" "$VIPSNET" "IPSNET"
MMUPD_CHECKER "$IDFPMC" "$VIPFPMC" "IPFPMCS"
MMUPD_CHECKER -c "$IDMHPC" "$VIPMHPC" "$VCIPMHPC" "IPMHPCS"
MMUPD_CHECKER -c "$IDGPF" "$VIPGPF" "$VCIPGPF" "IPGPFS"
#Riru/Edx/LS/Posed/Mudules
if [ ! -f $MODPATH/$IDRIRU/legacy ]; then MMUPD_CHECKER -c "$IDRIRU" "$VIPRIRU" "$VCIPRIRU" "IPRIRUS"; fi
MMUPD_CHECKER -c "$IDEDXPOSED" "$VIPEDXPOSED" "$VCIPEDXPOSED" "IPEDXPOSEDS"
if [ -d $MODPATH/$IDRIRU ] && [ ! -f $MODPATH/$IDRIRU/legacy ]; then MMUPD_CHECKER -c "$IDLSPOSEDR" "$VIPLSPOSEDR" "$VCIPLSPOSEDR" "IPLSPOSEDS"; fi
if $ZYGISK; then MMUPD_CHECKER -c "$IDLSPOSEDZ" "$VIPLSPOSEDZ" "$VCIPLSPOSEDZ" "IPLSPOSEDS"; fi
MMUPD_CHECKER -c "$IDRIRUCW" "$VIPRIRUCW" "$VCIPRIRUCW" "IRIRUCWS"
MMUPD_CHECKER -c "$IDRMH" "$VIPRMH" "$VCIPRMH" "IPRMH"
#Tweaks: FGS/BP/LED/UGMSD/USGP/VS
MMUPD_CHECKER "$IDFGS" "$VIPFGS" "IPFGSS"
MMUPD_CHECKER "$IDFEG" "$VIPFEG" "IPFEGS"
MMUPD_CHECKER "$IDHAP" "$VIPHAP" "IPHAPS"
MMUPD_CHECKER "$IDAFUS" "$VIPAFUS" "IPAFUSS"
MMUPD_CHECKER "$IDBPT" "$VIPBPT" "IPBPTS"
MMUPD_CHECKER -c "$IDKL" "$VIPKL" "$VCIPKL" "IPKLS"
MMUPD_CHECKER "$IDFMSAAS" "$VIPFMSAAS" "IPFMSAASS"
MMUPD_CHECKER "$IDFDHWO" "$VIPFDHWO" "IPFDHWOS"
MMUPD_CHECKER "$IDFDEVADB" "$VIPFDEVADB" "IPFDEVADBS"
MMUPD_CHECKER "$IDSOOOFUIRC" "$VIPSOOOFUIRC" "IPSOOOFUIRCS"
MMUPD_CHECKER "$IDFDM" "$VIPFDM" "IPFDMS"
MMUPD_CHECKER "$IDFDPP" "$VIPFDPP" "IPFDPPS"
MMUPD_CHECKER "$IDFI" "$VIPFI" "IPFIS"
MMUPD_CHECKER "$IDCLEDLO" "$VIPCLEDLO" "IPCLEDLOS"
MMUPD_CHECKER "$IDLEDLA" "$VIPLEDLA" "IPLEDLAS"
MMUPD_CHECKER -c "$IDUGMSD" "$VIPUGMSD" "$VCIPUGMSD" "IPUGMSDS"
MMUPD_CHECKER "$IDUSGP" "$VIPUSGP" "IPUSGPS"
MMUPD_CHECKER "$IDAS" "$VIPAS" "IPASS"
MMUPD_CHECKER "$IDGPUR" "$VIPGPUR" "IPGPURS"
MMUPD_CHECKER "$IDVS" "$VIPVS" "IPVSS"
UIP "Other Updates Not Found"
}

MMUPD_CHECKER() {
TMODVERSION=false; TMODCVERSION=false
case "$1" in
-c) local MMUPDID="$2"; local MMUPDV="$3"; local MMUPDVC="$4"; if [ -d $MODPATH/$MMUPDID ]; then local MODVERSION="$(GET_FILE_PROP "$MODPATH/$MMUPDID/module.prop" "version")"; local MODCVERSION="$(GET_FILE_PROP "$MODPATH/$MMUPDID/module.prop" "versionCode")"; if [ "$MODVERSION" != "$MMUPDV" ]; then TMODVERSION=true; fi; if [ "$MODCVERSION" != "$MMUPDVC" ]; then TMODCVERSION=true; fi; fi;;
*) local MMUPDID="$1"; local MMUPDV="$2"; if [ -d $MODPATH/$MMUPDID ]; then local MODVERSION="$(GET_FILE_PROP "$MODPATH/$MMUPDID/module.prop" "version")"; if [ "$MODVERSION" != "$MMUPDV" ]; then TMODVERSION=true; fi; fi;;
esac
if $TMODVERSION || $TMODCVERSION; then
MSGDELIMITER
case "$1" in
-c) UIP "Found Update For $MMUPDID" "Version Installed: $MODVERSION $MODCVERSION" "New Version: $MMUPDV $MMUPDVC, Update?" "$MSGVU Yes" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then $5; fi;;
*) UIP "Found Update For $MMUPDID" "Version Installed: $MODVERSION" "New Version: $MMUPDV, Update?" "$MSGVU Yes" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then $3; fi;;
esac
fi
}

} #

{ #KeyCheck

KEYTEST() {
UIP -d "Press Vol: Up Or Down"
if ($TIMEOUT 5 $KGETEVENT -lc 1 2>&1 | $KGREP VOLUME | $KGREP " DOWN" > $EVENTS); then HFBMODE && sed -i "s/KMETHOD=false/KMETHOD=N/g" $PATCHMODEFILE && return 0; else return 1; fi
}

CHOOSENEW() {
while true; do
$KGETEVENT -lc 1 2>&1 | $KGREP VOLUME | $KGREP " DOWN" > $EVENTS
if (`cat $EVENTS 2>/dev/null | $KGREP VOLUME >/dev/null`); then
break
fi
done
if (`cat $EVENTS 2>/dev/null | $KGREP VOLUMEUP >/dev/null`); then
HFBMODE && return 0
else
HFBMODE && return 1
fi
}

CHOOSEOLD() {
while true; do
if $TKEYCHECK; then $FKEYCHECK; fi; $FKEYCHECK
local SEL=$?
if [ "$1" == "UP" ]; then
HFBMODE && UP=$SEL && sed -i "s/ButtonIDUP=#UP/ButtonIDUP=$SEL/g" $PATCHMODEFILE
break
elif [ "$1" == "DOWN" ]; then
HFBMODE && DOWN=$SEL && if [ "$UP" -ne "$SEL" ]; then sed -i "s/ButtonIDDOWN=#DOWN/ButtonIDDOWN=$SEL/g" $PATCHMODEFILE; fi
break
elif [ $SEL -eq $UP ]; then
HFBMODE && return 0
elif [ $SEL -eq $DOWN ]; then
HFBMODE && return 1
fi
done
}

ALTCHOOSEOLD() {
while true; do
if $TKEYCHECK; then $FKEYCHECK; fi; $FKEYCHECK
local SEL=$?
if [ $SEL -eq $BUTTONIDUP ]; then
HFBMODE && return 0
elif [ $SEL -eq $BUTTONIDDOWN ]; then
HFBMODE && return 1
fi
done
}

KEYCHOOSEOLDBIND() {
UIP -d "Vol Key Programming Method" "Press Vol Up"
$KEYFUNCTION "UP"
UIP "Press Vol Down"
$KEYFUNCTION "DOWN"
if [ $UP = $DOWN ]; then
UIP "Two Identical Keys Are Tied! Try Again!" "Activated TKEY For CHOOSEOLD"
TKEYCHECK=true
UIP -d "Vol Key Programming Method" "Press Vol Up"
$KEYFUNCTION "UP"
UIP "Press Vol Down"
$KEYFUNCTION "DOWN"
if [ $UP = $DOWN ]; then
UIP "Two Identical Keys Are Tied! Try Again!" "Or Vol Key Not Detected!"
ENDMODE=false; END
else
sed -i "s/TKEY=false/TKEY=true/g" $PATCHMODEFILE
fi
fi
sed -i "s/KMETHOD=false/KMETHOD=O/g" $PATCHMODEFILE
}

KEYCHECK() {
if [ -f /sbin/getevent ] && [ -f /sbin/grep ]; then KGETEVENT="/sbin/getevent"; KGREP="/sbin/grep"; elif [ -f $IPSB/getevent ] && [ -f $IPSB/grep ]; then KGETEVENT="$IPSB/getevent"; KGREP="$IPSB/grep"; else KGETEVENT="getevent"; KGREP="grep"; fi
if $KOLD && [ $AKOLD != true ] && [ $KNEW != true ]; then
KEYFUNCTION=CHOOSEOLD; KEYCHOOSEOLDBIND
elif $KNEW && [ $AKOLD != true ] && [ $KOLD != true ]; then
KEYFUNCTION=CHOOSENEW
elif $AKOLD && [ $KNEW != true ] && [ $KOLD != true ]; then
KEYFUNCTION=ALTCHOOSEOLD
elif KEYTEST; then
KEYFUNCTION=CHOOSENEW
else
KEYFUNCTION=CHOOSEOLD; KEYCHOOSEOLDBIND
fi
}

} #

{ #All Otval

{ #UI: Pills/NavBar/Gboard/Themes/BA/Sounds

IPPO() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/pills ]; then
UIP -d "$MSGFI Pills, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Restore Stock Gestures Overlay..."
BUCKUPER -r "$IPPSO/NavigationBarModeGesturalWideBack/NavigationBarModeGesturalOverlayWideBack.apk $IPPSO/NavigationBarModeGesturalNarrowBack/NavigationBarModeGesturalOverlayNarrowBack.apk $IPPSO/NavigationBarModeGestural/NavigationBarModeGesturalOverlay.apk $IPPSO/NavigationBarModeGesturalExtraWideBack/NavigationBarModeGesturalOverlayExtraWideBack.apk"
rm -f $IPPSO/Pills.apk $AIOPFMDPH/pills
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Pills $VIPPO?" "$MSGEFTC" "$MSGNUS" "IPPOS"
fi
fi
}

IPPOS() {
PILLHIDE=false
UIP -d "Choose Variant Pills:" "$MSGVU Full Hide/Immersive" "$MSGVD More Other Variants"
if $KEYFUNCTION; then
PILLSHIDE=true; PFSGVFPX=true; POFSGC=true; IMMERSIVE="0dip"; FRAME="0dip"; PILLSWIDTHSIZE="0dip"; PILLSFATSIZE="0dip"
else
FRAME="48dip"
UIP -d "Transparent Variant:" "$MSGVU Transparent" "$MSGVD Not Transparent"
if $KEYFUNCTION; then
IMMERSIVE="0dip"
else
IMMERSIVE="16dip"
fi
UIP -d "Choose Width Size:" "$MSGVU 4dip/8dip (Dot)" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
POFSGCDOT=true; PHOC=true; PILLSFATSIZE="4dip"; PILLSWIDTHSIZE="8dip"
else
POFSGCDOT=false
UIP -d "$MSGVU 0dip/0dip (Hide)" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
POFSGC=true; PHOC=true; PILLSFATSIZE="0dip"; PILLSWIDTHSIZE="0dip"
else
PHOC=false
for PILLSWIDTHSIZE in "60dip" "120dip" "180dip" "240dip" "300dip"; do
UIP -d "$MSGVU $PILLSWIDTHSIZE"
MSGPOFSGA="$MSGNIS"
case $PILLSWIDTHSIZE in
"300dip") MSGPOFSGA="$MSGNUS";;
esac
UIP "$MSGVD No $MSGPOFSGA"
if $KEYFUNCTION; then
POFSGC=true
break
else
POFSGC=false
fi
done
fi
fi
if $POFSGC && [ $POFSGCDOT != true ] || [ $PHOC != true ]; then
if $POFSGC && [ $PHOC != true ]; then
MSGPOFSG=true
for PILLSFATSIZE in "1dip" "2dip" "3dip" "4dip"; do
if $MSGPOFSG; then
UIP -d "Choose Fat Size:"
MSGPOFSG=false
else
MSGDELIMITER
fi
UIP "$MSGVU $PILLSFATSIZE"
MSGPOFSGA="$MSGNIS"
case $PILLSFATSIZE in
"4.0dp") MSGPOFSGA="$MSGNUS";;
esac
UIP "$MSGVD No $MSGPOFSGA"
if $KEYFUNCTION; then
PFSGVFPX=true
break
else
PFSGVFPX=false
fi
done
fi
fi
fi
if $POFSGC && $PFSGVFPX; then
UIP "Installing Pills $IAMM"
UZTPN "Pills"
MODID="$IDPO"
if $MAGISK; then
REMOVER -mm "PillsOverlay HideNavBar HideGesBar HidePillsOverlay $MODID"
REPLACER -f "NavigationBarModeGesturalWideBack NavigationBarModeGesturalNarrowBack NavigationBarModeGesturalExtraWideBack NavigationBarModeGestural"
mkdir -p $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/$MODID/NavigationBarModeGesturalOverlayWideBack-$IMMERSIVE-$FRAME-32dip.apk $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/$MODID/NavigationBarModeGesturalOverlayNarrowBack-$IMMERSIVE-$FRAME-18dip.apk $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/$MODID/NavigationBarModeGesturalOverlayExtraWideBack-$IMMERSIVE-$FRAME-40dip.apk $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/$MODID/NavigationBarModeGesturalOverlay-$IMMERSIVE-$FRAME-24dip.apk $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/$MODID/Pills-$PILLSFATSIZE-$PILLSWIDTHSIZE.apk $MODPATH/$MODID$MIPPSO
if $PILLSHIDE; then
MMPR -v "Pills" "$VIPPO" "Pills $MSGFMM - Full Hide/Immersive"
else
MMPR -v "Pills" "$VIPPO" "Pills $MSGFMM - Size $PILLSFATSIZE/$PILLSWIDTHSIZE"
fi
SET_PERM_RM
else
BUCKUPER -s "$IPPSO/NavigationBarModeGesturalWideBack/NavigationBarModeGesturalOverlayWideBack.apk $IPPSO/NavigationBarModeGesturalNarrowBack/NavigationBarModeGesturalOverlayNarrowBack.apk $IPPSO/NavigationBarModeGestural/NavigationBarModeGesturalOverlay.apk $IPPSO/NavigationBarModeGesturalExtraWideBack/NavigationBarModeGesturalOverlayExtraWideBack.apk"
cp -f $TMPDIR/$MODID/NavigationBarModeGesturalOverlayWideBack-$IMMERSIVE-$FRAME-32dip.apk $IPPSO/NavigationBarModeGesturalWideBack/NavigationBarModeGesturalOverlayWideBack.apk
cp -f $TMPDIR/$MODID/NavigationBarModeGesturalOverlayNarrowBack-$IMMERSIVE-$FRAME-18dip.apk $IPPSO/NavigationBarModeGesturalNarrowBack/NavigationBarModeGesturalOverlayNarrowBack.apk
cp -f $TMPDIR/$MODID/NavigationBarModeGesturalOverlayExtraWideBack-$IMMERSIVE-$FRAME-40dip.apk $IPPSO/NavigationBarModeGesturalExtraWideBack/NavigationBarModeGesturalOverlayExtraWideBack.apk
cp -f $TMPDIR/$MODID/NavigationBarModeGesturalOverlay-$IMMERSIVE-$FRAME-24dip.apk $IPPSO/NavigationBarModeGestural/NavigationBarModeGesturalOverlay.apk
cp -f $TMPDIR/$MODID/Pills-$PILLSFATSIZE-$PILLSWIDTHSIZE.apk $IPPSO/Pills.apk
touch $AIOPFMDPH/pills
fi
UIP "$MSGDI"
fi
}

IPPCO() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/pillscolors ]; then
UIP -d "$MSGFI Pills Colors, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -f $IPPSO/PillsColors.apk $AIOPFMDPH/pillscolors
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Pills Colors $VIPPCO?" "$MSGEFTC" "$MSGNUS" "IPPCOS"
fi
fi
}

IPPCOS() {
UIP -d "Choose Variant:" "$MSGVU Choose One Color" "$MSGVD Choose Two Color Separately"
if $KEYFUNCTION; then COLORVARIANT=" "; IPPCOAS; PILLSLIGHTCOLORS=$PILLSCOLORS; PILLSDARKCOLORS=$PILLSCOLORS; else COLORVARIANT=" Light: "; IPPCOAS; if $PCOFSGC; then PILLSLIGHTCOLORS=$PILLSCOLORS; COLORVARIANT=" Dark: "; IPPCOAS; PILLSDARKCOLORS=$PILLSCOLORS; fi; fi
if $PCOFSGC; then
UIP "Installing Pills Colors $IAMM"
UZTPN "PillsColors"
if $MAGISK; then
MODID="$IDPCO"; REMOVER -mm "$MODID PillsColorsOverlay"
mkdir -p $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/$MODID/PillsColors-$PILLSLIGHTCOLORS-$PILLSDARKCOLORS.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Pills Colors" "$VIPPCO" "Pills Colors $MSGFMM - Colors Light: $PILLSLIGHTCOLORS & Dark: $PILLSDARKCOLORS"; SET_PERM_RM
else
cp -f $TMPDIR/PillsColors/PillsColors-$PILLSLIGHTCOLORS-$PILLSDARKCOLORS.apk $IPPSO/PillsColors.apk
touch $AIOPFMDPH/pillscolors
fi
UIP "$MSGDI"
fi
}

IPPCOAS() {
for PILLSCOLORS in "ff1a73e8" "ff5e97f6" "ffb31818" "ffff4151" "ff1ed760" "ff47ae84" "ffffa842" "ffff8055" "ffa86bd5"; do
case $PILLSCOLORS in
"ff1a73e8") NAMEPILLSCOLORS="Blue";;
"ff5e97f6") NAMEPILLSCOLORS="Light Blue";;
"ffb31818") NAMEPILLSCOLORS="Red";;
"ffff4151") NAMEPILLSCOLORS="Light Red";;
"ff1ed760") NAMEPILLSCOLORS="Green";;
"ff47ae84") NAMEPILLSCOLORS="Light Green";;
"ffffa842") NAMEPILLSCOLORS="Yellow";;
"ffff8055") NAMEPILLSCOLORS="Orange";;
"ffa86bd5") NAMEPILLSCOLORS="Violet";;
esac
UIP -d "$MSGVU$COLORVARIANT$NAMEPILLSCOLORS ($PILLSCOLORS)"
MSGPCOFSGA="$MSGNIS"
case $PILLSCOLORS in
"ffa86bd5") MSGPCOFSGA="$MSGNUS";;
esac
UIP "$MSGVD No $MSGPCOFSGA"
if $KEYFUNCTION; then
PCOFSGC=true
break
else
PCOFSGC=false
fi
done
}

IPPHO() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/pillsheight ]; then
UIP -d "$MSGFI Pills Height, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -f $IPPSO/PillsHeight.apk $AIOPFMDPH/pillsheight
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Pills Height $VIPPHO?" "$MSGEFTC" "$MSGNUS" "IPPHOS"
fi
fi
}

IPPHOS() {
UCSF "0dip 1dip 2dip 3dip 4dip 5dip 6dip 7dip 8dip 9dip 10dip" "Choose Pills Height:" "Height" "10dip"
if $UCSFNM; then
UIP "Installing Pills Height $IAMM"
UZTPN "PillsHeight"
if $MAGISK; then
MODID="$IDPHOS"; REMOVER -mm "$MODID PillsHeightOverlay"
mkdir -p $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/$MODID/PillsHeight-$UCSFNMC.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Pills Height" "$VIPPHO" "Pills Height $MSGFMM - Height $UCSFNMC"; SET_PERM_RM
else
cp -f $TMPDIR/PillsHeight/PillsHeight-$UCSFNMC.apk $IPPSO/PillsHeight.apk
touch $AIOPFMDPH/pillsheight
fi
UIP "$MSGDI"
fi
}

IPPSHNB() {
UCSA "Install Show/Hide Navigation Bar $VIPPSHNB?" "" "$MSGNUS" "IPPSHNBS"
}

IPPSHNBS() {
UIP -d "Choose Variant:" "$MSGVU Show" "$MSGVD Hide"
if $KEYFUNCTION; then ISHNBPVN="0"; ISHNBPV="Show"; else ISHNBPVN="1"; ISHNBPV="Hide"; fi
if $MAGISK; then
UIP "Installing Show/Hide Navigation Bar $IAMM"
MODID="$IDPSHNB"; REMOVER -mm "$MODID HideNavigationBar ShowNavigationBar"
mkdir -p $MODPATH/$MODID
echo "qemu.hw.mainkeys=$ISHNBPVN" > $MODPATH/$MODID/system.prop
MMPR -v "$ISHNBPV Navigation Bar" "$VIPPSHNB" "$ISHNBPV Navigation Bar"; SET_PERM_RM
else
BUILD_PROP_BACKUP
export newprop=$(echo qemu.hw.mainkeys=$ISHNBPVN | cut -d '=' -f1)
sed -i "/qemu.hw.mainkeys=0/d" $IPSBP; sed -i "/qemu.hw.mainkeys=1/d" $IPSBP
echo -e "# Show/Hide Navigation Bar\nqemu.hw.mainkeys=$ISHNBPVN" >> $IPSBP
fi
UIP "$MSGDI"
}

IPBGD() {
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 29 ] && SP_CHECKER "$IPDSU/0/settings_secure.xml" "back_gesture_inset_scale_left back_gesture_inset_scale_right"; then
UCSA "Install Back Gesture Disabler $VIPBGD?" "" "$MSGNUS" "IPBGDS"
fi
}

IPBGDS() {
UIP -d "Disable Left Gesture?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then BGISL=0; else BGISL=1; fi
UIP -d "Disable Right Gesture?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then BGISR=0; else BGISR=1; fi
UIP "Installing Back Gesture Disabler $IAMM"
MODID="$IDBGDS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MGSERVICED "$SPSECURE back_gesture_inset_scale_left 1; $SPSECURE back_gesture_inset_scale_right 1" "$SPSECURE back_gesture_inset_scale_left $BGISL; $SPSECURE back_gesture_inset_scale_right $BGISR" "BGDS"
if $BOOTMODE; then UIP "Back Gesture Disabler Activated Right Now"; $SPSECURE back_gesture_inset_scale_left $BGISL; $SPSECURE back_gesture_inset_scale_right $BGISR; fi
MMPR -v "Back Gesture Disabler" "$VIPBGD" "Back Gesture Disabler $MSGFMM"; SET_PERM_RM -msgdi
}

IPGBNBS() {
if [ "$ASDK" -ge 29 ]; then
UCSA "Install GBoard NavBar Space $VIPGBNBS?" "$MSGEFTC" "$MSGNUS" "IPGBNBSS"
fi
}

IPGBNBSS() {
UCSF "$(seq 0 5 40)" "Choose NavBar Space Size:" "NavBar Space" "40"
if $UCSFNM; then
UIP "Installing GBoard NavBar Space $IAMM"
if $MAGISK; then
MODID="$IDGBNBS"; REMOVER -mm "NavBar_Space gboardnavbar $MODID"
mkdir -p $MODPATH/$MODID
echo "ro.com.google.ime.kb_pad_port_b=$UCSFNMC" > $MODPATH/$MODID/system.prop
MMPR -v "Gboard NavBar Spacing" "$VIPGBNBS" "Gboard NavBar Spacing - Set On $UCSFNMC"; SET_PERM_RM
else
BUILD_PROP_BACKUP
echo -e "# Gboard NavBar Spacing\nro.com.google.ime.kb_pad_port_b=$UCSFNMC" >> $IPSBP
fi
UIP "$MSGDI"
fi
}

IPGBRC() {
if [ "$ASDK" -ge 29 ]; then
UCSA "Install GBoard Rounded Corners $VIPGBRC?" "$MSGEFTC" "$MSGNUS" "IPGBRCS"
fi
}

IPGBRCS() {
UCSF "$(seq 0 5 50)" "Choose Rounded Size:" "Rounded Size" "50"
if $UCSFNM; then
UIP "Installing GBoard Rounded Corners $IAMM"
if $MAGISK; then
MODID="$IDGBRC"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
echo "ro.com.google.ime.corner_key_r=$UCSFNMC" > $MODPATH/$MODID/system.prop
MMPR -v "GBoard Rounded Corners" "$VIPGBRC" "GBoard Rounded Corners $MSGFMM - Set On $UCSFNMC"; SET_PERM_RM
else
BUILD_PROP_BACKUP
echo -e "# GBoard NavBar Space Remover\nro.com.google.ime.corner_key_r=$UCSFNMC" >> $IPSBP
fi
UIP "$MSGDI"
fi
}

IPGBT() {
UCSA "Install GBoard Themes $VIPGBT?" "" "$MSGNUS" "IPGBTS"
}

IPGBTS() {
UIP "Installing GBoard Themes $IAMM"
UZTPN "GBoardThemes"
mkdir -p $TMPDIR/GBoardThemes/Compile $TMPDIR/GBoardThemes/gboard_theme
for f in "1A73E8" "B31818" "1ED760" "FFA842" "FF8055" "A86BD5" "FF4151" "5E97F6" "47AE84"; do
for s  in MD2B MD2D MD2W; do
case $s in
"MD2B") g="md2b";;
"MD2D") g="md2d";;
"MD2W") g="md2w";;
esac
case $f in
"1A73E8") n="reznya";;
"B31818") n="zelat";;
"1ED760") n="hertin";;
"FFA842") n="zlup";;
"FF8055") n="caton";;
"A86BD5") n="gish";;
"FF4151") n="odib";;
"5E97F6") n="genha";;
"47AE84") n="fulih";;
esac
cp -rf  $TMPDIR/GBoardThemes/$s/* $TMPDIR/GBoardThemes/Compile
sed -i "s/#ACCENTA/#$f/g" $TMPDIR/GBoardThemes/Compile/style_sheet_md2.css
sed -i "s/#ACCENP/#$f\E0/g" $TMPDIR/GBoardThemes/Compile/style_sheet_md2.css
sed -i "s/#ACCENT/#$f\FF/g" $TMPDIR/GBoardThemes/Compile/style_sheet_md2.css
sed -i "s/#ACCENT/#$f\FF/g" $TMPDIR/GBoardThemes/Compile/style_sheet_md2_border.css
sed -i "s/#ID/$g$n/g" $TMPDIR/GBoardThemes/Compile/metadata.json
sed -i "s/#NAME/$g$n/g" $TMPDIR/GBoardThemes/Compile/metadata.json
cd $TMPDIR/GBoardThemes/Compile
$ZIPPACKER -r -0 $TMPDIR/GBoardThemes/Compile * >/dev/null
mv $TMPDIR/GBoardThemes/Compile.zip $TMPDIR/GBoardThemes/gboard_theme/$s-$f.zip
done
done
if $MAGISK; then
MODID="$IDGBT"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPSE
cp -rf $TMPDIR/GBoardThemes/gboard_theme $MODPATH/$MODID$MIPSE
echo -e "ro.com.google.ime.theme_file=MD2B-1A73E8.zip\nro.com.google.ime.themes_dir=$MIPSE/gboard_theme" > $MODPATH/$MODID/system.prop
MMPR -v "GBoard Themes" "$VIPGBT" "GBoard Themes $MSGFMM"; SET_PERM_RM
else
BUILD_PROP_BACKUP
echo -e "\n# GBoard Themes\nro.com.google.ime.theme_file=MD2B-1A73E8.zip\nro.com.google.ime.themes_dir=$MIPSE/gboard_theme" >> $IPSBP
cp -rf $TMPDIR/GBoardThemes/gboard_theme $IPSE
SET_PERM_R $IPSE/gboard_theme 0 0 0755 0644
fi
UIP "$MSGDI"
}

IPGBSTE() {
GBSTEXML="$IPDD/com.google.android.inputmethod.latin/shared_prefs/flag_value.xml"
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/gboardsilkthemeenabler ] && [ -f $GBSTEXML ]; then
UIP -d "$MSGFI GBoard Silk Theme Enabler, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
sed -i -e 's/"silk_on_all_pixel" value="true"/"silk_on_all_pixel" value="false"/g' $GBSTEXML
sed -i -e 's/"pill_shaped_key" value="true"/"pill_shaped_key" value="false"/g' $GBSTEXML
sed -i -e 's/"silk_theme" value="true"/"silk_theme" value="false"/g' $GBSTEXML
sed -i -e 's/"use_silk_theme_by_default" value="true"/"use_silk_theme_by_default" value="false"/g' $GBSTEXML
sed -i -e 's/"enable_keyboard_redesign" value="true"/"enable_keyboard_redesign" value="false"/g' $GBSTEXML
sed -i -e 's/"enable_keyboard_redesign_theme" value="true"/"enable_keyboard_redesign_theme" value="false"/g' $GBSTEXML
sed -i -e 's/"use_keyboard_redesign_by_default" value="true"/"use_keyboard_redesign_by_default" value="false"/g' $GBSTEXML
sed -i -e 's/"use_keyboard_redesign_on_existing_theme_on_all_users" value="true"/"use_keyboard_redesign_on_existing_theme_on_all_users" value="false"/g' $GBSTEXML
sed -i -e 's/"use_keyboard_redesign_on_existing_theme" value="true"/"use_keyboard_redesign_on_existing_theme" value="false"/g' $GBSTEXML
rm -f $AIOPFMDPH/gboardsilkthemeenabler
UIP "$MSGDRM"
fi
else
UCSA "Install GBoard Silk Theme Enabler $VIPGBSTE?" "" "$MSGNUS" "IPGBSTES"
fi
}

IPGBSTES() {
UIP "Installing GBoard Silk Theme Enabler $IAMM"
if $MAGISK; then
MODID="$IDGBSTE"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MMPR -vc "Gboard Silk Theme Enabler" "$VIPGBSTE" "$VCIPGBSTE" "zakaryan2004, nitanmarcel" "Enabled Gboard Silk Theme"
MGSERVICED "sed -i -e 's/\"silk_on_all_pixel\" value=\"true\"/\"silk_on_all_pixel\" value=\"false\"/g' $GBSTEXML; sed -i -e 's/\"pill_shaped_key\" value=\"true\"/\"pill_shaped_key\" value=\"false\"/g' $GBSTEXML; sed -i -e 's/\"silk_theme\" value=\"true\"/\"silk_theme\" value=\"false\"/g' $GBSTEXML; sed -i -e 's/\"use_silk_theme_by_default\" value=\"true\"/\"use_silk_theme_by_default\" value=\"false\"/g' $GBSTEXML; sed -i -e 's/\"enable_keyboard_redesign\" value=\"true\"/\"enable_keyboard_redesign\" value=\"false\"/g' $GBSTEXML; sed -i -e 's/\"enable_keyboard_redesign_theme\" value=\"true\"/\"enable_keyboard_redesign_theme\" value=\"false\"/g' $GBSTEXML; sed -i -e 's/\"use_keyboard_redesign_by_default\" value=\"true\"/\"use_keyboard_redesign_by_default\" value=\"false\"/g' $GBSTEXML; sed -i -e 's/\"use_keyboard_redesign_on_existing_theme_on_all_users\" value=\"true\"/\"use_keyboard_redesign_on_existing_theme_on_all_users\" value=\"false\"/g' $GBSTEXML; sed -i -e 's/\"use_keyboard_redesign_on_existing_theme\" value=\"true\"/\"use_keyboard_redesign_on_existing_theme\" value=\"false\"/g' $GBSTEXML; am force-stop com.google.android.inputmethod.latin; am start -a android.intent.action.MAIN -n com.google.android.inputmethod.latin/com.google.android.apps.inputmethod.latin.firstrun.LatinFirstRunActivity" "sed -i -e 's/\"silk_on_all_pixel\" value=\"false\"/\"silk_on_all_pixel\" value=\"true\"/g' $GBSTEXML; sed -i -e 's/\"pill_shaped_key\" value=\"false\"/\"pill_shaped_key\" value=\"true\"/g' $GBSTEXML; sed -i -e 's/\"silk_theme\" value=\"false\"/\"silk_theme\" value=\"true\"/g' $GBSTEXML; sed -i -e 's/\"use_silk_theme_by_default\" value=\"false\"/\"use_silk_theme_by_default\" value=\"true\"/g' $GBSTEXML; sed -i -e 's/\"enable_keyboard_redesign\" value=\"false\"/\"enable_keyboard_redesign\" value=\"true\"/g' $GBSTEXML; sed -i -e 's/\"enable_keyboard_redesign_theme\" value=\"false\"/\"enable_keyboard_redesign_theme\" value=\"true\"/g' $GBSTEXML; sed -i -e 's/\"use_keyboard_redesign_by_default\" value=\"false\"/\"use_keyboard_redesign_by_default\" value=\"true\"/g' $GBSTEXML; sed -i -e 's/\"use_keyboard_redesign_on_existing_theme_on_all_users\" value=\"false\"/\"use_keyboard_redesign_on_existing_theme_on_all_users\" value=\"true\"/g' $GBSTEXML; sed -i -e 's/\"use_keyboard_redesign_on_existing_theme\" value=\"false\"/\"use_keyboard_redesign_on_existing_theme\" value=\"true\"/g' $GBSTEXML; am force-stop com.google.android.inputmethod.latin; am start -a android.intent.action.MAIN -n com.google.android.inputmethod.latin/com.google.android.apps.inputmethod.latin.firstrun.LatinFirstRunActivity" "GSTE"
SET_PERM_RM
else
touch $AIOPFMDPH/gboardsilkthemeenabler
fi
if [ -f $GBSTEXML ]; then
sed -i -e 's/"silk_on_all_pixel" value="false"/"silk_on_all_pixel" value="true"/g' $GBSTEXML
sed -i -e 's/"pill_shaped_key" value="false"/"pill_shaped_key" value="true"/g' $GBSTEXML
sed -i -e 's/"silk_theme" value="false"/"silk_theme" value="true"/g' $GBSTEXML
sed -i -e 's/"use_silk_theme_by_default" value="false"/"use_silk_theme_by_default" value="true"/g' $GBSTEXML
sed -i -e 's/"enable_keyboard_redesign" value="false"/"enable_keyboard_redesign" value="true"/g' $GBSTEXML
sed -i -e 's/"enable_keyboard_redesign_theme" value="false"/"enable_keyboard_redesign_theme" value="true"/g' $GBSTEXML
sed -i -e 's/"use_keyboard_redesign_by_default" value="false"/"use_keyboard_redesign_by_default" value="true"/g' $GBSTEXML
sed -i -e 's/"use_keyboard_redesign_on_existing_theme_on_all_users" value="false"/"use_keyboard_redesign_on_existing_theme_on_all_users" value="true"/g' $GBSTEXML
sed -i -e 's/"use_keyboard_redesign_on_existing_theme" value="false"/"use_keyboard_redesign_on_existing_theme" value="true"/g' $GBSTEXML
fi
if $BOOTMODE; then
am force-stop com.google.android.inputmethod.latin >/dev/null
am start -a android.intent.action.MAIN -n com.google.android.inputmethod.latin/com.google.android.apps.inputmethod.latin.firstrun.LatinFirstRunActivity >/dev/null
fi
UIP "$MSGDI"
}

IPSBINNI() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/statusbarincreasenumbernotificationicons ]; then
UIP -d "$MSGFI Status Bar Increase Number Icons, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -f $IPPSO/SUIStatusBarIncreaseNumberNotificationIcons.apk $AIOPFMDPH/cutoutincreasenumbernotificationicons
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Status Bar Increase Number Icons $VIPSBINNI?" "$MSGEFTC" "$MSGNUS" "IPSBINNIS"
fi
fi
}

IPSBINNIS() {
UCSF "$(seq 4 1 10)" "Choose Variant Number Of Icons:" "Number Of Icons" "10"
VAACINN=$UCSFNMC
if $UCSFNM; then
UCSF "0dip 2dip 4dip 6dip" "Choose Dot Size" "Size" "6dip"
VAACINND=$UCSFNMC
fi
if $UCSFNM; then
UIP "Installing Status Bar Increase Number Icons $IAMM"
UZTPN "SBINNI"
if $MAGISK; then
MODID="$IDSBINNI"; REMOVER -mm "$MODID CINNOverlayMod CINNI"
mkdir -p $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/SBINNI/StatusBarIncreaseNumberNotificationIcons-$VAACINN-$VAACINND.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Status Bar Increase Number Notification Icons" "$VIPSBINNI" "Status Bar Increase Number Notification Icons $MSGFMM Set On - $VAACINN, Dot Size Set On - $VAACINND"; SET_PERM_RM
else
cp -f $TMPDIR/SBINNI/StatusBarIncreaseNumberNotificationIcons-$VAACINN-$VAACINND.apk $IPPSO/StatusBarIncreaseNumberNotificationIcons.apk
touch $AIOPFMDPH/statusbarincreasenumbernotificationicons
fi
UIP "$MSGDI"
fi
}

IPGPPM() {
if $MAGISK && $ATEN && [ $MIUI != true ] && SP_CHECKER "$IPDSU/0/settings_secure.xml" "global_actions_panel_debug_enabled global_actions_panel_available"; then UCSA "Activate GPay Power Menu $VIPGPPM?" "" "$MSGNUS" "IPGPPMS"; fi
}

IPGPPMS() {
UIP "Installing GPay Power Menu $IAMM"
MODID="$IDGPPM"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MGSERVICED "$SPSECURE global_actions_panel_debug_enabled 0; $SPSECURE global_actions_panel_available 0" "$SPSECURE global_actions_panel_debug_enabled 1; $SPSECURE global_actions_panel_available 1" "GPPM"
if $BOOTMODE; then UIP "GPay Power Menu Activated Right Now"; $SPSECURE global_actions_panel_debug_enabled 1; $SPSECURE global_actions_panel_available 1; fi
MMPR -v "GPay Power Menu" "$VIPGPPM" "Enable Google Pay Quick Wallet Access In The Power Menu"; SET_PERM_RM -msgdi
}

IPRUI() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/roundedui ]; then
UIP -d "$MSGFI RoundedUI, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -f $IPPSO/RoundedUI*.apk $IPPSO/RoundedSL*.apk $AIOPFMDPH/roundedui
UIP "$MSGDRM"
fi
else
if [ "$ASDK" -ge 29 ]; then
UCSA "Install RoundedUI $VIPRUI?" "$MSGEFTC" "$MSGNUS" "IPRUIS"
fi
fi
}

IPRUIS() {
UCSF "0dip 5dip 10dip 15dip 20dip 25dip 33dip" "Choose Rounded Size:" "Rounded Size" "33dip"
if $UCSFNM; then
UIP "Installing RoundedUI $IAMM"
UZTPN "RoundedUI"
if $MAGISK; then
MODID="$IDRUI"; REMOVER -mm "$MODID UIROUNDED"
mkdir -p $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/$MODID/Rounded*-$UCSFNMC.apk $MODPATH/$MODID$MIPPSO
MMPR -v "RoundedUI" "$VIPRUI" "RoundedUI $MSGFMM Set On - $UCSFNMC"; SET_PERM_RM
else
cp -f $TMPDIR/RoundedUI/Rounded*-$UCSFNMC.apk $IPPSO; touch $AIOPFMDPH/roundedui
fi
UIP "$MSGDI"
fi
}

IPBIP() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/burninprotection ]; then
UIP -d "$MSGFI Burn In Protection, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -f $IPPSO/AndroidBurnInProtection*.apk $IPPSO/SUIBurnInProtection*.apk
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Burn In Protection $VIPBIP?" "$MSGEFTC" "$MSGNUS" "IPBIPS"
fi
fi
}

IPBIPS() {
UCSF "20 40 60" "Choose Shift Interval:" "Interval" "60"
SHIFTINTERVAL=$UCSFNMC
if $UCSFNM; then
UCSF "4dip 6dip" "Choose Horizontal Shift:" "Shift" "6dip"
HORIZONTALSWIFT=$UCSFNMC
fi
if $UCSFNM; then
UCSF "4dip 6dip" "Choose Vertical Shift:" "Shift" "6dip"
VERTICALSWIFT=$UCSFNMC
fi
if $UCSFNM; then
UCSF "20dip 40dip 60dip" "Choose AOD Horizontal Shift:" "Shift" "60dip"
AODHORIZONTALSWIFT=$UCSFNMC
fi
if $UCSFNM; then
UCSF "20dip 40dip 60dip" "Choose AOD Vertical Shift:" "Shift" "60dip"
AODVERTICALSWIFT=$UCSFNMC
fi
if $UCSFNM; then
UIP "Installing Burn In Protection $IAMM"
UZTPN "BIP"
if $MAGISK; then
MODID="$IDBIP"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/BIP/*BurnInProtection*-$SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT*.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Burn In Protection" "$VIPBIP" "Burn In Protection - $SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT $MSGFMM"; SET_PERM_RM
else
cp -f $TMPDIR/BIP/*BurnInProtection*-$SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT*.apk $IPPSO
touch $AIOPFMDPH/burninprotection
fi
UIP "$MSGDI"
fi
}

IPNSP() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/notificationsidepaddings ]; then
UIP -d "$MSGFI Notification Side Paddings, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -f $IPPSO/NotificationSidePaddings*.apk $AIOPFMDPH/notificationsidepaddings
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Notification Side Paddings $VIPNSP?" "$MSGEFTC" "$MSGNUS" "IPNSPS"
fi
fi
}

IPNSPS() {
UCSF "0dip 5dip 10dip 15dip 20dip 25dip 30dip" "Side For Notification:" "Paddings Size" "30dip"
NSPCOS=$UCSFNMC
if $UCSFNM; then
UCSF "0dip 5dip 10dip 15dip 20dip 25dip 30dip" "Side For First QS Notification:" "Paddings Size" "30dip"
NSPCOSA=$UCSFNMC
fi
if $UCSFNM; then
UIP "Installing Notification Side Paddings $IAMM"
UZTPN "NSP"
if $MAGISK; then
MODID="$IDNSP"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/NSP/NotificationSidePaddings-$NSPCOS-$NSPCOSA.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Notification Side Paddings" "$VIPNSP" "Notification Side Paddings Set On - $NSPCOS-$NSPCOSA, $MSGFMM"; SET_PERM_RM
else
cp -f $TMPDIR/NSP/NotificationSidePaddings-$NSPCOS-$NSPCOSA.apk $IPPSO; touch $AIOPFMDPH/notificationsidepaddings
fi
UIP "$MSGDI"
fi
}

IPSBIS() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/statusbariconspace ]; then
UIP -d "$MSGFI Status Bar Icon Space, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -f $IPPSO/*StatusBarIconSpace*.apk $AIOPFMDPH/statusbariconspace
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Status Bar Icon Space $VIPSBIS?" "$MSGEFTC" "$MSGNUS" "IPSBISS"
fi
fi
}

IPSBISS() {
UCSF "14dip 15dip 16dip 17dip 18dip 19dip 20dip" "Choose Space:" "Left Icon" "20dip"
if $UCSFNM; then
ASBIS=$UCSFNMC
UCSF "-4dip -3dip -2dip -1dip 0dip 1dip 2dip 3dip 4dip" "Choose Space:" "Right Icon" "4dip"
SUISBIS=$UCSFNMC
if $UCSFNM; then
UCSF "0dip 1dip 2dip 3dip 4dip" "Choose Space:" "Battery Icon" "4dip"
BSUISBIS=$UCSFNMC
fi
fi
if $UCSFNM; then
UIP "Installing Status Bar Icon Space $IAMM"
UZTPN "SBIS"
if $MAGISK; then
MODID="$IDSBIS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/SBIS/AndroidStatusBarIconSpace-$ASBIS.apk $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/SBIS/SUIStatusBarIconSpace-$SUISBIS-$BSUISBIS.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Status Bar Icon Space" "$VIPSBIS" "Status Bar Icon Space Set On - $ASBIS/$SUISBIS/$BSUISBIS, $MSGFMM"; SET_PERM_RM
else
cp -f $TMPDIR/SBIS/AndroidStatusBarIconSpace-$ASBIS.apk $IPPSO
cp -f $TMPDIR/SBIS/SUIStatusBarIconSpace-$SUISBIS-$BSUISBIS.apk $IPPSO
touch $AIOPFMDPH/statusbariconspace
fi
UIP "$MSGDI"
fi
}

IPSBCS() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/statusbarclocksize ]; then
UIP -d "$MSGFI Status Bar Clock Size, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -f $IPPSO/StatusBarClockSize*.apk $AIOPFMDPH/statusbarclocksize
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Status Bar Clock Size $VIPSBCS?" "$MSGEFTC" "$MSGNUS" "IPSBCSS"
fi
fi
}

IPSBCSS() {
UCSF "10sp 12sp 14sp 16sp 18sp 20sp" "Choose Size:" "Clock Size" "20sp"
if $UCSFNM; then
UIP "Installing Status Bar Clock Size $IAMM"
UZTPN "SBCS"
if $MAGISK; then
MODID="$IDSBCS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/SBCS/StatusBarClockSize-$UCSFNMC.apk $MODPATH/$MODID$MIPPSO
MMPR -v "Status Bar Clock Size" "$VIPSBCS" "Status Bar Clock Size Set On - $UCSFNMC, $MSGFMM"; SET_PERM_RM
else
cp -f $TMPDIR/SBCS/StatusBarClockSize-$UCSFNMC.apk $IPPSO
touch $AIOPFMDPH/statusbarclocksize
fi
UIP "$MSGDI"
fi
}

IPSUE() {
if $MAGISK && [ $MIUI != true ] && SP_CHECKER "$IPDSU/0/settings_global.xml" "guest_user_enabled"; then UCSA "Install Single User Enabler $VIPSUE?" "" "$MSGNUS" "IPSUES"; fi
}

IPSUES() {
UIP "Installing Single User Enabler $IAMM"
MODID="$IDSUE"; REMOVER -mm "$MODID SingleUserMod"
mkdir -p $MODPATH/$MODID
MGSERVICED "$SPGLOBAL guest_user_enabled 1" "$SPGLOBAL guest_user_enabled 0" "SUM"
echo -e "fw.max_users=1\nfw.show_multiuserui=0" > $MODPATH/$MODID/system.prop
MMPR -v "Single User Enabler" "$VIPSUE" "Disable MultiUsers $MSGFMM"; SET_PERM_RM -msgdi
}

IPSBP() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/statusbarpadding ]; then
UIP -d "$MSGFI Status Bar Padding, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -f $IPPSO/StatusBarPadding.apk $AIOPFMDPH/statusbarpadding
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Status Bar Padding $VIPSBP?" "$MSGEFTC" "$MSGNUS" "IPSBPS"
fi
fi
}

IPSBPS() {
UIP -d "Choose Variant:" "$MSGVU Choose One Start/End" "$MSGVD Choose Start/End Separately"
if $KEYFUNCTION; then
UCSF "0dip 5dip 10dip 15dip 20dip 25dip 30dip 35dip 40dip 45dip 50dip" "Choose Padding Start/End:" "Padding" "50dip"
SCSBPCO=$UCSFNMC; SCSBPCT=$UCSFNMC
else
UCSF "0dip 5dip 10dip 15dip 20dip 25dip 30dip 35dip 40dip 45dip 50dip" "Choose Padding Start:" "Padding" "50dip"
SCSBPCO=$UCSFNMC
if $UCSFNM; then
UCSF "0dip 5dip 10dip 15dip 20dip 25dip 30dip 35dip 40dip 45dip 50dip" "Choose Padding End:" "Padding" "50dip"
SCSBPCT=$UCSFNMC
fi
fi
if $UCSFNM; then
UIP "Installing Status Bar Padding $IAMM" 
UZTPN "SBP"
if $MAGISK; then
MODID="$IDSBP"; REMOVER -mm "$MODID SUIContentPadding"
mkdir -p $MODPATH/$MODID$MIPPSO
MMPR -v "Status Bar Padding" "$VIPSBP" "Status Bar Padding $MSGFMM - Set On: Start - $SCSBPCO & End - $SCSBPCT"; SET_PERM_RM
cp -f $TMPDIR/SBP/StatusBarPadding-$SCSBPCO-$SCSBPCT.apk $MODPATH/$MODID$MIPPSO
else
cp -f $TMPDIR/SBP/StatusBarPadding-$SCSBPCO-$SCSBPCT.apk $IPPSO/StatusBarPadding.apk
touch $AIOPFMDPH/statusbarpadding
fi
UIP "$MSGDI"
fi
}

IPQSCP() {
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 29 ] && SP_CHECKER "$IPDSU/0/settings_secure.xml" "sysui_rounded_content_padding"; then
UCSA "Install QS Content Padding $VIPQSCP?" "$MSGEFTC" "$MSGNUS" "IPQSCPS"
fi
}

IPQSCPS() {
UCSF "$(seq 0 5 40)" "Choose Padding Size:" "Padding Size" "40"
if $UCSFNM; then
UIP "Installing QS Content Padding $IAMM" 
if $BOOTMODE; then
UIP "QS Content Padding Activated Right Now"
$SPSECURE sysui_rounded_content_padding $UCSFNMC
fi
MODID="$IDQSCP"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MBCCSERVICE "$SPSECURE sysui_rounded_content_padding $UCSFNMC"
MMPR -v "QS Content Padding" "$VIPQSCP" "QS Content Padding $MSGFMM - Set On $UCSFNMC"; SET_PERM_RM -msgdi
fi
}

IPSUIRSRS() {
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 29 ] && SP_CHECKER "$IPDSU/0/settings_secure.xml" "sysui_rounded_size"; then
UCSA "Install SUI Rounded Size $VIPSUIRSRS?" "$MSGEFTC" "$MSGNUS" "IPSUIRSRSS"
fi
}

IPSUIRSRSS() {
UCSF "0 10 20 33 40 50 60 70 80 90 100" "Choose Rounded Size:" "Rounded Size" "100"
if $UCSFNM; then
UIP "Installing SUI Rounded Size $IAMM" 
if $BOOTMODE; then
UIP "SUI Rounded Size Activated Right Now"
$SPSECURE sysui_rounded_size $UCSFNMC
fi
MODID="$IDSUIRSRS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MBCCSERVICE "$SPSECURE sysui_rounded_size $UCSFNMC"
MMPR -v "SUI Rounded Size" "$VIPSUIRSRS" "SUI Rounded Size $MSGFMM - Set On $UCSFNMC"; SET_PERM_RM -msgdi
fi
}

IPQSCIAR() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/qscounticonandrows ]; then
UIP -d "$MSGFI QS Count Icon And Rows, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -f $IPPSO/QSCountIconAndRows*.apk $AIOPFMDPH/qscounticonandrows
UIP "$MSGDRM"
fi
else
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then UCSA "Install QS Count Icon And Rows $VIPQSCIAR?" "$MSGEFTC" "$MSGNUS" "IPQSCIARS"; fi
fi
}

IPQSCIARS() {
UCSF "$(seq 4 1 10)" "Minimized QS:" "Count" "10"; SUIQSC=$UCSFNMC
UCSF "$(seq 4 1 10)" "Expand Portrait QS:" "Count" "10"; SUIQSCP=$UCSFNMC
UCSF "$(seq 4 1 10)" "Expand Landscape QS:" "Count" "10"; SUIQSCL=$UCSFNMC
UCSF "$(seq 1 1 3)" "QS Rows Portrait:" "Count" "3"; SUIQSRP=$UCSFNMC
UCSF "$(seq 1 1 3)" "QS Rows Landscape:" "Count" "3"; SUIQSRL=$UCSFNMC
if $UCSFNM; then
UIP "Installing QS Count Icon And Rows $IAMM"
UZTPN "QSCIAR"
if $MAGISK; then
MODID="$IDQSCIAR"; REMOVER -mm "$MODID QSCIAR"
mkdir -p $MODPATH/$MODID$MIPPSO
cp -f $TMPDIR/QSCIAR/QSCountIconAndRows-$SUIQSC-$SUIQSCP-$SUIQSCL-$SUIQSRP-$SUIQSRL.apk $MODPATH/$MODID$MIPPSO
MMPR -v "SUI QS Count Icon And Rows" "$VIPQSCIAR" "QS Count Icon And Rows $MSGFMM"; SET_PERM_RM
else
cp -f $TMPDIR/QSCIAR/QSCountIconAndRows-$SUIQSC-$SUIQSCP-$SUIQSCL-$SUIQSRP-$SUIQSRL.apk $IPPSO
touch $AIOPFMDPH/qscounticonandrows
fi
UIP "$MSGDI"
fi
}

IPEBB() {
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 30 ]; then
UCSA "Install Background Blur $VIPEBB?" "$MSGEFTC" "$MSGNUS" "IPEBBS"
fi
}

IPEBBS() {
UIP "Background Blur $IAMM"
MODID="$IDEBB"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
echo "resetprop ro.surface_flinger.supports_background_blur 1 && killall surfaceflinger" > $MODPATH/$MODID/service.sh
MMPR -v "Background Blur" "$VIPEBB" "Enable Background Blur $MSGFMM"; SET_PERM_RM -msgdi
}

IPBA() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/bootanimation ] && [ -f $IPPM/bootanimation.zip.bak ]; then
UIP -d "$MSGFI Boot Animation, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
BUCKUPER -r "$IPPM/bootanimation.zip $IPPM/bootanimation-dark.zip"
rm -f $AIOPFMDPH/bootanimation
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ]; then
UCSA "Install Boot Animation $VIPBA?" "" "$MSGNUS" "IPBAS"
fi
fi
}

IPBAS() {
BATC=false
UIP -d "Choose Boot Animation:" "$MSGVU Google Pixel" "$MSGVD $MSGNIS"
if $KEYFUNCTION; then
UIP -d "Choose Color Variant:" "$MSGVU Black" "$MSGVD White"
if $KEYFUNCTION; then BADIR=GPBAB; else BADIR=GPBAW; fi; BATC=true
else
UIP -d "Choose Boot Animation:" "$MSGVU TenX" "$MSGVD $MSGNIS"
if $KEYFUNCTION; then
UIP -d "Choose Color Variant:" "$MSGVU Black" "$MSGVD White"
if $KEYFUNCTION; then BADIR=TENXB; else BADIR=TENXW; fi; BATC=true
else
UIP -d "Choose Boot Animation:" "$MSGVU PixelPlusUI" "$MSGVD $MSGNIS"
if $KEYFUNCTION; then
UIP -d "Choose Color Variant:" "$MSGVU Black" "$MSGVD White"
if $KEYFUNCTION; then BADIR=PPUIB; else BADIR=PPUIW; fi; BATC=true
else
UIP -d "Choose Boot Animation:" "$MSGVU Radiant" "$MSGVD $MSGNIS"
if $KEYFUNCTION; then
BATC=true; BADIR=RADIANT
else
UIP -d "Choose Boot Animation:" "$MSGVU OnePlus" "$MSGVD $MSGNIS"
if $KEYFUNCTION; then
BATC=true; BADIR=OPBM
else
UIP -d "Choose Boot Animation:" "$MSGVU Spark" "$MSGVD $MSGNUS"
if $KEYFUNCTION; then
BATC=true; BADIR=SPARK
fi
fi
fi
fi
fi
fi
if $BATC; then
UIP -d "Choose FPS:" "$MSGVU 60" "$MSGVD 30"; if $KEYFUNCTION; then BAFPS="60"; else BAFPS="30"; fi
UIP "Installing Boot Animation $IAMM"
UZTPN "BA"
sed -i "s/#FPS/$BAFPS/g" $TMPDIR/BA/$BADIR/desc.txt
cd $TMPDIR/BA/$BADIR
$ZIPPACKER -r -0 $TMPDIR/BA/$BADIR * >/dev/null
mv -f $TMPDIR/BA/$BADIR.zip $TMPDIR/BA/bootanimation.zip
if $MAGISK; then
MODID="$IDBA"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPPM
cp -f $TMPDIR/BA/bootanimation.zip $MODPATH/$MODID$MIPPM
if [ -f $IPPM/bootanimation-dark.zip ]; then cp -f $TMPDIR/BA/bootanimation.zip $MODPATH/$MODID$MIPPM/bootanimation-dark.zip; fi
MMPR -v "Boot Animation" "$VIPBA" "Boot Animation $MSGFMM"; SET_PERM_RM
else
BUCKUPER -s "$IPPM/bootanimation.zip $IPPM/bootanimation-dark.zip"
cp -f $TMPDIR/BA/bootanimation.zip $IPPM; touch $AIOPFMDPH/bootanimation
if [ -f $IPPM/bootanimation-dark.zip ]; then cp -f $TMPDIR/BA/bootanimation.zip $IPPM/bootanimation-dark.zip; fi
fi
UIP "$MSGDI"
fi
}

IPIOSEMOJI() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/iosemoji ] && [ -f $IPSF/NotoColorEmoji.ttf.bak ]; then
UIP -d "$MSGFI IOS Emoji, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
BUCKUPER -r "$IPSF/NotoColorEmoji.ttf $IPSF/SamsungColorEmoji.ttf"
rm -f $AIOPFMDPH/iosemoji
UIP "$MSGDRM"
fi
else
UCSA "Install IOS Emoji Of IOS 14.6 $VIPOSEMOJI?" "" "$MSGNUS" "IPIOSEMOJIS"
fi
}

IPIOSEMOJIS() {
UIP "Installing IOS Emoji $IAMM"
UZTPN "iOSEmoji"
if $MAGISK; then
MODID="$IDOSEMOJI"; REMOVER -mm "emoji-replacer-809887617 android11emoji EmojiReplacer $MODID"
mkdir -p $MODPATH/$MODID$MIPSF;
cp -f $TMPDIR/iOSEmoji/NotoColorEmoji.ttf $MODPATH/$MODID$MIPSF; cp -f $TMPDIR/iOSEmoji/NotoColorEmoji.ttf $MODPATH/$MODID$MIPSF/SamsungColorEmoji.ttf
MMPR -vc "iOS14.6 Emoji for FB & Messenger" "$VIPOSEMOJI" "$VCIPOSEMOJI" "jsq1" "Replaces default Messenger, FB and default Android Emoji with iOS14.6 Emoji"
SET_PERM_RM
else
BUCKUPER -s "$IPSF/NotoColorEmoji.ttf $IPSF/SamsungColorEmoji.ttf"
cp -f $TMPDIR/iOSEmoji/NotoColorEmoji.ttf $IPSF; cp -f $TMPDIR/iOSEmoji/NotoColorEmoji.ttf $IPSF/SamsungColorEmoji.ttf; touch $AIOPFMDPH/iosemoji
fi
UIP "$MSGDI"
}

IPMUIS() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/mediauisounds ]; then
UIP -d "$MSGFI Media UI Sounds, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
IPMUISSA
rm -f $AIOPFMDPH/MediaUISounds
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ]; then
UCSA "Install Media UI Sounds $VIPMUIS?" "" "$MSGNUS" "IPMUISS"
fi
fi
}

IPMUISS() {
UCSF "Masik OnePlus Pixel Samsung Oppo Spark" "Choose Media Variant:" "Media From" "Spark"
if $UCSFNM; then
UIP "Installing Media UI Sounds $IAMM"
UZTPN "MediaUISounds"
case $UCSFNMC in
"Masik") UIP -d "Use Masik Alt Lock Unlock Sound?" "$MSGVU Yes" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then mv -f $TMPDIR/MediaUISounds/MasikAlt/* $TMPDIR/MediaUISounds/Masik; fi;;
esac
if $MAGISK; then
MODID="$IDMUIS"; REMOVER -mm "$MODID MediaUiSounds"
mkdir -p $MODPATH/$MODID$MIPPMU
cp -f $TMPDIR/$MODID/$UCSFNMC/* $MODPATH/$MODID$MIPPMU
MMPR -v "Media UI Sounds" "$VIPMUIS" "Media UI Sounds Media From $UCSFNMC $MSGFMM"; SET_PERM_RM
else
IPMUISSA
cp -f $TMPDIR/MediaUISounds/$UCSFNMC/* $IPPMU
touch $AIOPFMDPH/mediauisounds
fi
UIP "$MSGDI"
fi
}

IPMUISSA() {
BUCKUPER -s "
$IPPMU/audio_end.ogg
$IPPMU/audio_initiate.ogg
$IPPMU/camera_click.ogg
$IPPMU/camera_focus.ogg
$IPPMU/ChargingStarted.ogg
$IPPMU/Dock.ogg
$IPPMU/Effect_Tick.ogg
$IPPMU/InCallNotification.ogg
$IPPMU/KeypressDelete.ogg
$IPPMU/KeypressInvalid.ogg
$IPPMU/KeypressReturn.ogg
$IPPMU/KeypressSpacebar.ogg
$IPPMU/KeypressStandard.ogg
$IPPMU/Lock.ogg
$IPPMU/LowBattery.ogg
$IPPMU/NFCFailure.ogg
$IPPMU/NFCInitiated.ogg
$IPPMU/NFCSuccess.ogg
$IPPMU/NFCTransferComplete.ogg
$IPPMU/NFCTransferInitiated.ogg
$IPPMU/Trusted.ogg
$IPPMU/Undock.ogg
$IPPMU/Unlock.ogg
$IPPMU/VideoRecord.ogg
$IPPMU/VideoStop.ogg
$IPPMU/WirelessChargingStarted.ogg
"
}

IPFDNI() {
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 29 ] && $LEGACYMODE; then
UCSA "Install Force Disable Notification Icons $VIPFDNI?" "" "$MSGNUS" "IPFDNIS"
fi
}

IPFDNIS() {
UIP "Installing Force Disable Notification Icons $IAMM" 
MODID="$IDFDNI"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MBCCSERVICE "cmd statusbar send-disable-flag notification-icons"
MMPR -v "Force Disable Notification Icons" "$VIPFDNI" "Force Disable Notification Icons $MSGFMM"; SET_PERM_RM -msgdi
}

} #

{ #Apps: GFU/GSF/SL/ASUSS/IA

IPGFUL() {
if [ $BOOTMODE != true ] && [ -d $IPSA/FaceLock ]; then
UIP -d "$MSGFI FaceUnlock, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -rf $IPSA/FaceLock
UIP "$MSGDRM"
fi
else
if $ANOUGAT || $AOREO || $APIE; then
if $FINDGAPPS && [ $MIUI != true ] && $FINDAIOPFMDA; then
UCSA "Install Google FaceUnlock $VIPGFUL?" "" "No $MSGNUS" "IPGFULS"
fi
fi
fi
}

IPGFULS() {
UIP "Installing Google FaceUnlock $IAMM"
UZTPN "FaceLock"
if $MAGISK; then
MODID="$IDGFUL"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPSA/$MODID/lib/$arch
cp -f $TMPDIR/$MODID/$ASDK/$MODID/$MODID.apk $MODPATH/$MODID$MIPSA/$MODID
cp -rf $TMPDIR/$MODID/$ASDK/$MODID/lib/$arch $MODPATH/$MODID$MIPSA/$MODID/lib
MMPR -v "$MODID" "$VIPGFUL" "FaceUnLock As Magisk Module $MSGFMM"; SET_PERM_RM
else
mkdir -p $IPSA/FaceLock/lib/$arch
cp -f $TMPDIR/FaceLock/$ASDK/FaceLock/FaceLock.apk $IPSA/FaceLock
cp -rf $TMPDIR/FaceLock/$ASDK/FaceLock/lib/$arch $IPSA/FaceLock/lib
SET_PERM_R $IPSA/FaceLock 0 0 0755 0644
fi
UIP "$MSGDI"
}

IPGSF() {
if [ $BOOTMODE != true ] && [ -d $IPSPA/GSF ]; then
UIP -d "$MSGFI GSF, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -rf $IPSAD/*66-GCam* $IPSPA/GSF
UIP "$MSGDRM"
fi
else
if $AOREO || $APIE || $ATEN; then
if [ $FINDGAPPS != true ] && $FINDAIOPFMDA; then
UCSA "Install GCam No GApps $VIPGSF?" "" "$MSGNUS" "IPGSFS"
fi
fi
fi
}

IPGSFS() {
UIP "Installing GCam No GApps $IAMM"
UZTPN "GCNGAP"
if $MAGISK; then
MODID="$IDGSF"; REMOVER -mm "$MODID"
mkdir $MODPATH/$MODID$MIPSPA $MODPATH/$MODID$MIPSAD
cp -f $TMPDIR/GCNGAP/$ASDK/66-GCam-$ASDK-NoGApps.sh $MODPATH/$MODID$MIPSAD
cp -rf $TMPDIR/GCNGAP/$ASDK/$MODID $MODPATH/$MODID$MIPSPA
MMPR -v "$MODID" "$VIPGSF" "GSF Patch For SDK $ASDK $MSGFMM"; SET_PERM_RM
else
cp -f $TMPDIR/GCNGAP/$ASDK/66-GCam-$ASDK-NoGApps.sh $IPSAD
cp -rf $TMPDIR/GCNGAP/$ASDK/GSF $IPSPA
SET_PERM_R $IPSPA/GSF 0 0 0755 0644
fi
UIP "$MSGDI"
}

IPSL() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/systemlesslauncher ]; then
UIP -d "$MSGFI Systemless Launcher, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
REMOVER -rm "$IPSPO/QuickStepRecentsProvider $IPSO/QuickStepRecentsProvider $IPVO/QuickStepRecentsProvider $IPSA/NexusLauncherRelease $IPSA/OPLauncherReleases $IPSA/OneUIHome $IPSA/Lawnchair $IPSA/ShadyQuickStep $IPSEP/privapp-permissions-pixel-launcher.xml $IPSEP/privapp-permissions-op-launcher.xml $IPSEP/privapp-permissions-com.sec.android.app.launcher.xml $IPSEP/privapp-permissions-lawnchair.xml $IPSEP/privapp-permissions-shady-launcher.xml $IPSE/pixel-launcher-hiddenapi-package-whitelist.xml $IPSE/op-launcher-hiddenapi-package-whitelist.xml $IPSE/com.sec.android.app.launcher-hiddenapi-package-whitelist.xml $IPSE/lawnchair-hiddenapi-package-whitelist.xml" 
rm -f $AIOPFMDPH/systemlesslauncher
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Systemless Launcher?" "$MSGEFTC" "$MSGNUS" "IPSLS"
fi
fi
}

IPSLS() {
LAWNCHAIR=false
UZTPN "QSRP" &
SYSTEMLESSLAUNCHERS=false
if $ATEN; then
UIP -d "Сhoose Launcher" "Lawnchair $VIPASLQ - $VIPSL" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
LAWNCHAIR=true; OAPI=Q
fi
elif $AELEVEN; then
UIP -d "Lawnchair $VIPASLR Or $VIPASLS?" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
LAWNCHAIR=true
UIP -d "Сhoose Launcher" "$MSGVU Lawnchair $VIPASLR - $VIPSL" "$MSGVD Lawnchair $VIPASLS - $VIPSL"
if $KEYFUNCTION; then OAPI=R; else OAPI=S; fi
fi
elif $ATWELVE; then
UIP -d "Install Lawnchair $VIPASLS?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
LAWNCHAIR=true; OAPI=S
fi
fi
if $LAWNCHAIR; then
UIP "Installing Lawnchair $IAMM"
SYSTEMLESSLAUNCHERS=true
MODID="$IDSL"
UZTPN "Systemless_Lawnchair-$OAPI"
cp -rf $TMPDIR/Systemless_Lawnchair-$OAPI $TMPDIR/$MODID
APKPERM "$TMPDIR/$MODID$MIPSA/Lawnchair/Lawnchair.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"
mkdir -p $TMPDIR/$MODID$MIPPSO; cp -f $TMPDIR/QSRP/QuickStepRecentsProvider-$PACKAGENAME.apk $TMPDIR/$MODID$MIPPSO/QuickStepRecentsProvider.apk
if $MAGISK; then
IPSLSA
cp -rf $TMPDIR/$MODID $MODPATH
MMPR -v "Systemless Lawnchair" "$VIPSL" "Systemlessly Install Lawnchair On Your Device With Android 10-12 Recents UI Support"
fi
fi
if [ $SYSTEMLESSLAUNCHERS != true ]; then
SYSTEMLESSLAUNCHERS=false
MSGDELIMITER
UIP "OPLauncher $VAIPSOPL - $VIPSOPL" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
UIP "Installing OPLauncher $IAMM"
SYSTEMLESSLAUNCHERS=true
MODID="$IDSOPL"
UZTPN "$MODID"
APKPERM "$TMPDIR/$MODID$MIPSA/OPLauncherReleases/OPLauncherReleases.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"
mkdir -p $TMPDIR/$MODID$MIPPSO; cp -f $TMPDIR/QSRP/QuickStepRecentsProvider-$PACKAGENAME.apk $TMPDIR/$MODID$MIPPSO/QuickStepRecentsProvider.apk
if $MAGISK; then
IPSLSA
cp -rf $TMPDIR/$MODID $MODPATH
MMPR -vc "Customized OnePlus Launcher" "$VIPSOPL" "$VCIPSOPL" "MrSluffy & GodLeaveMe" "Systemlessly install OnePlus Launcher Port with Extended Features in your Android Devices. Android 10/11"
echo -e "# Put sepolicy statements here\n# Example: allow { audioserver mediaserver } audioserver_tmpfs file { read write open }\nallow priv_app theme_prop file { read open map getattr }" > $MODPATH/$MODID/sepolicy.rule
fi
fi
fi
if [ $SYSTEMLESSLAUNCHERS != true ] && $FINDAIOPFMDA; then
SYSTEMLESSLAUNCHERS=false
MSGDELIMITER
if $ATEN; then
UIP "OneUIHome $VAIPSOUHQ - $VIPSOUHQ" "$MSGVU Yes" "$MSGVD No $MSGNIS"
elif $AELEVEN; then
UIP "OneUIHome $VAIPSOUHR - $VIPSOUHR" "$MSGVU Yes" "$MSGVD No $MSGNIS"
fi
if $KEYFUNCTION; then
UIP "Installing OneUIHome $IAMM"
SYSTEMLESSLAUNCHERS=true
MODID="$IDSOUH"
UZTPN "Systemless_OneUIHome-$ACNV"
cp -rf $TMPDIR/Systemless_OneUIHome-$ACNV $TMPDIR/$MODID
APKPERM "$TMPDIR/$MODID$MIPSA/OneUIHome/OneUIHome.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"
mkdir -p $TMPDIR/$MODID$MIPPSO; cp -f $TMPDIR/QSRP/QuickStepRecentsProvider-$PACKAGENAME.apk $TMPDIR/$MODID$MIPPSO/QuickStepRecentsProvider.apk
if $MAGISK; then
IPSLSA
cp -rf $TMPDIR/$MODID $MODPATH
if $ATEN; then
MMPR -vc "Systemless One UI Home" "$VIPSOUH" "$VCIPSOUH" "SKULSHADY" "Systemlessly install Samsung's One UI Home on your device with Android 10 recents UI support. Thanks to paphonb for the launcher port. Please uninstall any other launcher except the default launcher of your rom and any other launcher related mod to avoid any issues."
elif $AELEVEN; then
MMPR -vc "Systemless One UI Home" "$VIPSOUH" "$VCIPSOUH" "Ayra Hikari" "Systemlessly install Samsung's One UI Home on your device with Android 10-11 recents UI support."
fi
fi
fi
fi
if [ $SYSTEMLESSLAUNCHERS != true ]; then
SYSTEMLESSLAUNCHERS=false
MSGDELIMITER
if $ATEN; then
UIP "PixelLauncher $VIPSPL - $VIPASPLQ" "$MSGVU Yes" "$MSGVD No $MSGNIS"
elif $AELEVEN; then
UIP "PixelLauncher $VIPSPL - $VIPASPLR" "$MSGVU Yes" "$MSGVD No $MSGNIS"
fi
if $KEYFUNCTION; then
UIP "Installing PixelLauncher $IAMM"
SYSTEMLESSLAUNCHERS=true
MODID="$IDSPL"
UZTPN "Systemless_PixelLauncher-$ACNV"
cp -rf $TMPDIR/Systemless_PixelLauncher-$ACNV $TMPDIR/$MODID
APKPERM "$TMPDIR/$MODID$MIPSA/NexusLauncherRelease/NexusLauncherRelease.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"
mkdir -p $TMPDIR/$MODID$MIPPSO; cp -f $TMPDIR/QSRP/QuickStepRecentsProvider-$PACKAGENAME.apk $TMPDIR/$MODID$MIPPSO/QuickStepRecentsProvider.apk
if $MAGISK; then
IPSLSA
cp -rf $TMPDIR/$MODID $MODPATH
MMPR -v "Systemless Pixel Launcher" "$VIPSPL" "Systemlessly install Pixel Launcher with Extended Features in your Android Devices."
fi
fi
fi
if [ $SYSTEMLESSLAUNCHERS != true ]; then
if $ATEN || $AELEVEN; then
SYSTEMLESSLAUNCHERS=false
MSGDELIMITER
if $ATEN; then
UIP "ShadyLauncher $VIPSSLQ" "$MSGVU Yes" "$MSGVD No $MSGNIS"
elif $AELEVEN; then
UIP "ShadyLauncher $VIPSSLR" "$MSGVU Yes" "$MSGVD No $MSGNIS"
fi
if $KEYFUNCTION; then
UIP "Installing ShadyLauncher $IAMM"
SYSTEMLESSLAUNCHERS=true
MODID="$IDSSL"
UZTPN "Systemless_ShadyLauncher-$ACNV"
cp -rf $TMPDIR/Systemless_ShadyLauncher-$ACNV $TMPDIR/$MODID
APKPERM "$TMPDIR/$MODID$MIPSA/ShadyQuickStep/ShadyQuickStep.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"
mkdir -p $TMPDIR/$MODID$MIPPSO; cp -f $TMPDIR/QSRP/QuickStepRecentsProvider-$PACKAGENAME.apk $TMPDIR/$MODID$MIPPSO/QuickStepRecentsProvider.apk
if $MAGISK; then
IPSLSA
cp -rf $TMPDIR/$MODID $MODPATH
if $ATEN; then
MMPR -vc "Systemless Shady Launcher" "$VIPSSLQ" "$VCIPSSLQ" "SKULSHADY" "Systemlessly install Shady Launcher on your device with Android 10 recents UI support. Launcher created by SKULSHADY."
elif $AELEVEN; then
MMPR -vc "Systemless Shady Launcher" "$VIPSSLR" "$VCIPSSLR" "SKULSHADY" "Systemlessly install Shady Launcher on your device with Android 11 recents UI support. Launcher created by SKULSHADY."
fi
fi
fi
fi
fi
if [ $SYSTEMLESSLAUNCHERS != true ]; then
SYSTEMLESSLAUNCHERS=false
MSGDELIMITER
if $ATEN; then
UIP "AsusLauncher $VIPSLAQ - $VIPSLA" "$MSGVU Yes" "$MSGVD No $MSGNUS"
elif $AELEVEN; then
UIP "AsusLauncher $VIPSLAR - $VIPSLA" "$MSGVU Yes" "$MSGVD No $MSGNUS"
fi
if $KEYFUNCTION; then
UIP "Installing AsusLauncher $IAMM"
SYSTEMLESSLAUNCHERS=true
MODID="$IDSLA"
UZTPN "Systemless_AsusLauncher-$ACNV"
cp -rf $TMPDIR/Systemless_AsusLauncher-$ACNV $TMPDIR/$MODID
APKPERM "$TMPDIR/$MODID$MIPSA/AsusLauncher/AsusLauncherReleases.apk" "$TMPDIR/$MODID$MIPSEP"; HAPWL "$TMPDIR/$MODID$MIPSES"
mkdir -p $TMPDIR/$MODID$MIPPSO; cp -f $TMPDIR/QSRP/QuickStepRecentsProvider-$PACKAGENAME.apk $TMPDIR/$MODID$MIPPSO/QuickStepRecentsProvider.apk
if $MAGISK; then
IPSLSA
cp -rf $TMPDIR/$MODID $MODPATH
MMPR -vc "Systemless ASUS Launcher" "$VIPSLA" "$VCIPSLA" "MrSluffy" "Systemlessly install ASUS Launcher in your Android Devices."
fi
fi
fi
if $SYSTEMLESSLAUNCHERS; then
if $MAGISK; then
echo "ro.boot.vendor.overlay.static=false" > $MODPATH/$MODID/system.prop
REPLACER -f "$LAUNCHERLIST"
MOVERPATH
SET_PERM_RM -msgdi
else
cp -rf $TMPDIR/$MODID/system/* $SYSTEM
touch $AIOPFMDPH/systemlesslauncher
BUILD_PROP_BACKUP
echo -e "#Systemless Launcher\nro.boot.vendor.overlay.static=false" >> $IPSBP
UIP "$MSGDI"
fi
fi
}

IPSLSA() {
if $MAGISK; then REMOVER -mm "OneUIHome $IDSLA $IDSL Systemless_Lawnchair_Plus $IDSOPL $IDSOUH $IDSPL Systemless_PixelLauncherX $IDSSL quickstepswitcher quickswitch_terminal"; fi
}

IPASUSS() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/asusscreenshot ]; then
UIP -d "$MSGFI ASUS Screenshot, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -rf $IPSA/StitchImageService $IPSPA/CustomQSLonghsot $IPSPA/StitchImage $IPSEP/privapp-permissions-com.asus.stitchimage.service.xml $IPSEP/privapp-permissions-com.asus.stitchimage.xml $IPSEP/privapp-permissions-com.customqs.lonshot.xml $IPSES/com.asus.stitchimage.service-hiddenapi-package-whitelist.xml $IPSES/com.asus.stitchimage-hiddenapi-package-whitelist.xml $IPSEDP/default-asus-permissions.xml
UIP "$MSGDRM"
fi
else
if $ATEN || $AELEVEN; then
if [ $MIUI != true ]; then
UCSA "Install ASUS Screenshot $VIPASUSS?" "" "$MSGNUS" "IPASUSSS"
fi
fi
fi
}

IPASUSSS() {
UIP "Installing ASUS Screenshot $IAMM"
UZTPN "ASUSScreenshot-$ACNV"
if $MAGISK; then
MODID="$IDASUSS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
cp -rf $TMPDIR/ASUSScreenshot-$ACNV/* $MODPATH/$MODID
MMPR -vc "ASUS Long screenshot port $ACNV" "$VIPASUSS" "$VCIPASUSS" "luis" "Asus screenshot port (based on PixelExperience Implementation)"
SET_PERM_RM
else
cp -rf $TMPDIR/ASUSScreenshot-$ACNV/system/* $SYSTEM
touch $AIOPFMDPH/asusscreenshot
fi
UIP "$MSGDI"
}

IPAPP() {
if [ -d $STORAGE/Applications ] && find $STORAGE/Applications -type f -name "*.apk" >/dev/null; then
UCSA "Install App In $STORAGE/Applications?" "" "$MSGNUS" "IPAPPS"
fi
}

IPAPPS() {
UIP -d "Choose Path Variant:" "$MSGVU Install Every App In Data" "$MSGVD Install Every App In System $MSGRI"
if $KEYFUNCTION; then IAPPASD=true; else IAPPASD=false; fi
UIP -d "Choose Install Variant:" "$MSGVU Install Every App With Confirm" "$MSGVD Install Every App Without Confirm"
if $KEYFUNCTION; then IEAW=true; else IEAW=false; fi
dirname=$STORAGE/Applications; IFS=$'\n'
for i in $(find $dirname -depth -name '* *'); do mv $i $(dirname $i)/$(basename $i| tr ' ' '_'); done
for APKINPUT in $(ls $STORAGE/Applications); do
if [ -f $STORAGE/Applications/$APKINPUT ]; then
if $IEAW; then
UIP -d "Found $APKINPUT" "$MSGVU Install?" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
IPAPPSA
fi
else
IPAPPSA
fi
fi
done
}

IPAPPSA() {
PACKAGENAME="$($AAPT list -a "$STORAGE/Applications/$APKINPUT" | awk -v FS='"' '/package=/{print $2}')"
if $IAPPASD; then
APKINSTALLER -d "$STORAGE/Applications/$APKINPUT" "$PACKAGENAME"
else
mkdir -p $TMPDIR/$PACKAGENAME; cp -f "$STORAGE/Applications/$APKINPUT" "$TMPDIR/$PACKAGENAME/$PACKAGENAME.apk"
APKINSTALLER -a "$PACKAGENAME" "$PACKAGENAME"; rm -rf $TMPDIR/$PACKAGENAME
if [ $MAGISK != true ]; then echo "$PACKAGENAME" >> $AIOPFMDPH/AIL.txt; fi
fi
UIP "$MSGDI"
}

} #

{ #Audio: VFX(P)/NL/AIST/ACP/AML

IPVFX() {
if [ $BOOTMODE != true ] && [ -f $IPVLS/libv4a_fx_ics.so ]; then
UIP -d "$MSGFI ViperFX, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -rf $IPSPA/ViPER4AndroidFX-Legacy $IPSPA/ViPER4AndroidFX $IPSEP/privapp-permissions-com.pittvandewitt.viperfx.xml $IPVLS/libv4a_fx_ics.so $IPVL/libstdc++.so
UIP "$MSGDRM"
fi
else
if FINDER "$AECONFXML"; then
UCSA "Install ViperFX $VIPVFXL Or $VIPVFX" "" "$MSGNUS" "IPVFXS"
fi
fi
}

IPVFXS() {
UZTPN "V4AFX"
mkdir -p $TMPDIR/V4AFX/ViPERN$MIPSVE $TMPDIR/V4AFX/ViPERN$MIPSVE $TMPDIR/V4AFX/ViPERN$MIPSPA $TMPDIR/V4AFX/ViPERN$MIPSEP
UIP -d "Choose Version:" "$MSGVU ViperFX $VIPVFXL" "$MSGVD ViperFX $VIPVFX"
if $KEYFUNCTION; then
VIPERCHOOSEVERSION=true; NPVFX="$IDVFXL"
else
VIPERCHOOSEVERSION=false; NPVFX="$IDVFX"
fi
UIP "Installing ViperFX $IAMM"
mv -f $TMPDIR/V4AFX/ViPERN $TMPDIR/$NPVFX
mv -f $TMPDIR/V4AFX/$NPVFX $TMPDIR/$NPVFX$MIPSPA
APKPERM "$TMPDIR/$NPVFX$MIPSPA/$NPVFX/$NPVFX.apk" "$TMPDIR/$NPVFX$MIPSEP"
if $MAGISK; then
REMOVER -mm "ViPER4AndroidFX ViPER4AndroidFX-Legacy"
if $BOOTMODE; then
UIP -d "Choose Apk Install Variant:" "$MSGVU Install As Data App" "$MSGVD Install As System App"
if $KEYFUNCTION; then
pm install -r $TMPDIR/$NPVFX$MIPSPA/$NPVFX/$NPVFX.apk >/dev/null
rm -rf $TMPDIR/$NPVFX$MIPSPA
fi
fi
MODID="$NPVFX"
if $VIPERCHOOSEVERSION; then
cp -rf $TMPDIR/$NPVFX $MODPATH
MMPR -vcs "ViPER4AndroidFX Legacy" "v4.4" "$VCIPVFXL" "ViPER520, ZhuHang, Ahrion, Zackptg5" "ViPER4Android FX is an audio enhancing software to provide everyone with a better audio experience (You can choose between Material 2.5, 2.5.0.5, and 2.3.4.0 during install)" "https://forum.xda-developers.com/apps/magisk/module-viper4android-fx-2-5-0-5-t3577058"
echo -e "tunnel.decode=false\nlpa.use-stagefright=false\nlpa.releaselock=false\nlpa.decode=false" > $MODPATH/$NPVFX/system.prop
else
cp -rf $TMPDIR/$NPVFX $MODPATH
MMPR -vcsd "ViPER4AndroidFX" "$VIPVFX" "$VCIPVFX" "pittvandewitt, MrWhite214" "ViPER4Android FX is an audio enhancing software to provide everyone with a better audio experience" "http://t.me/ViPER4AndroidFX" "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=53H9TP89FLWUU"
echo "#!$IPSB/sh
# Kill audioserver PID if it exists already
SERVERPID=\$(pidof audioserver)
[ \"\$SERVERPID\" ] && kill \$SERVERPID" > $MODPATH/$NPVFX/post-fs-data.sh
echo "allow audioserver audioserver_tmpfs file { read write execute }
allow audioserver system_file file { execmod }
allow mediaserver mediaserver_tmpfs file { read write execute }
allow mediaserver system_file file { execmod }
allow audioserver unlabeled file { read write execute open getattr }
allow hal_audio_default hal_audio_default process { execmem }
allow hal_audio_default hal_audio_default_tmpfs file { execute }
allow hal_audio_default audio_data_file dir { search }
allow app app_data_file file { execute_no_trans }
allow mtk_hal_audio mtk_hal_audio_tmpfs file { execute }" > $MODPATH/$NPVFX/sepolicy.rule
fi
LIBWORKAROUNDCHECK
REPLACER -f "AudioFX MusicFX"
MOVERPATH
AEP=$MODPATH/$MODID
else
mv -f $TMPDIR/$NPVFX$MIPSV $TMPDIR/$NPVFX; cp -rf $TMPDIR/$NPVFX/vendor/* $VENDOR; cp -rf $TMPDIR/$NPVFX/system/* $SYSTEM
SET_PERM_R $IPSPA/$NPVFX 0 0 0755 0644
BUILD_PROP_BACKUP
echo -e "tunnel.decode=false\nlpa.use-stagefright=false\nlpa.releaselock=false\nlpa.decode=false" >> $IPSBP
fi
UIP "Patching Needed Files..."
for AE in $AECONFXML; do
UIP "Found $AE" "Patching..."
if $MAGISK; then
mkdir -p `dirname $AEP$AE`
cp -f $AE $AEP$AE
fi
FILE="$(echo $AEP$AE | sed "s|^/vendor|$MIPSV|g")"
OSP_DETECT $FILE
ALBP "v4a_standard_fx" "$MODID" "$DYNLIBPATCH\/lib\/soundfx" "libv4a_fx_ics.so" "41d3c987-e6cf-11e3-a88a-11aba5d5c51b"
UIP "Files Found And Patched"
done
if $MAGISK; then
MOVERPATH
SET_PERM_RM
fi
UIP "$MSGDI"
WCANFTP -sl -ehap
}

IPVFXP() {
UCSA "Install Presets $VIPVFXP For ViperFX v2.7.1.6?" "" "$MSGNUS" "IPVFXPS"
}

IPVFXPS() {
UIP "Installing Presets ViperFX $IAMM"
UZTPN "V4AFXPresets"
mkdir -p $STORAGE/Android/data/com.pittvandewitt.viperfx/files
cp -rf $TMPDIR/V4AFXPresets/* $STORAGE/Android/data/com.pittvandewitt.viperfx/files
if $MAGISK; then
MODID="$IDVFXP"
mkdir -p $MODPATH/$MODID
echo "rm -rf $STORAGE/Android/data/com.pittvandewitt.viperfx" > $MODPATH/$MODID/uninstall.sh
MMPR -v "V4AFX Presets" "$VIPVFXP" "V4AFX Presets For ViperFX v2.7.1.6 $MSGFMM"; SET_PERM_RM
fi
UIP "$MSGDI"
}

IPJDSM() {
if $MAGISK && $FINDAIOPFMDA; then
UCSA "Install James DSP Manager $VIPJDSPM?" "" "$MSGNUS" "IPJDSMS"
fi
}

IPJDSMS() {
UIP "Installing James DSP Manager $IAMM"
UZTPN "JamesDSPManager"
MODID="$IDJDSPM"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPSE $MODPATH/$MODID$MIPSVLS
cp -rf $TMPDIR/JamesDSPManager/JamesDSP $STORAGE
NAMEINSTALLAPP="JamesDSPManager"
PATHINSTALLAPP=$MODPATH/$MODID$MIPSPA/$NAMEINSTALLAPP
NAMEPATHOUT=$TMPDIR/JamesDSPManager
mkdir -p $MODPATH/$MODID$MIPSPA/$NAMEINSTALLAPP/lib
APKINSTALLER -s "$NAMEINSTALLAPP" "$NAMEPATHOUT"; APKPERM "$MODPATH/$MODID$MIPSPA/$NAMEINSTALLAPP/$NAMEINSTALLAPP.apk" "$MODPATH/$MODID$MIPSEP"
cp -f $MODPATH/$MODID$MIPSPA/$NAMEINSTALLAPP/lib/arm/libjamesdsp.so $MODPATH/$MODID$MIPSVLS
if FINDER "$AECONFXML"; then
UIP "Patching Needed Files..."
for OFILE in $AECONFXML; do
UIP "Found $OFILE" "Patching..."
FILE="$MODPATH/$MODID$(echo $OFILE | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $FILE`
cp -f $MAGISKMIRROR$OFILE $FILE
OSP_DETECT $FILE
ALBP "jamesdsp" "jdsp" "$DYNLIBPATCH\/lib\/soundfx" "libjamesdsp.so" "f27317f4-c984-4de6-9a90-545759495bf2"
UIP "Files Found And Patched"
done
fi
MOVERPATH
MMPR -vcs "JamesDSP Manager" "$VIPJDSPM" "$VCIPJDSPM" "JamesDSPManager is a reformed audio engine based of AOSP and OmniROM DSPManager source code with enhanced features" "https://forum.xda-developers.com/android/apps-games/app-reformed-dsp-manager-t3607970"
LIBWORKAROUNDCHECK
SET_PERM_RM -msgdi
WCANFTP -sl -ehap
}

IPDTSHPX() {
if $MAGISK && $FINDAIOPFMDA && [ "$ASDK" -ge 28 ]; then
UCSA "Install DTS HPX $VIPDTSHPX?" "" "$MSGNUS" "IPDTSHPXS"
fi
}

IPDTSHPXS() {
UZTPN "DTS_HPX"
MODID="$IDDTSHPX"; REMOVER -mm "$MODID"
UIP -d "New Or Old Version?" "$MSGVU New" "$MSGVD Old $MSGRI"
if $KEYFUNCTION; then
mv -f $TMPDIR/$MODID/New $TMPDIR/$MODID$MIPSPA
else
mv -f $TMPDIR/$MODID/Old $TMPDIR/$MODID$MIPSPA
fi
rm -rf $TMPDIR/$MODID/New $TMPDIR/$MODID/Old
cp -rf $TMPDIR/$MODID $MODPATH
MMPR -vc "DTS Headphone:X [AA addon]" "$VIPDTSHPX" "$VCIPDTSHPX" "UltraM8, Michi, JohnFawkes, lazerl0rd" "DTS Headphone:X is an incredible technology that simulates the 3D environment of the audio’s original mixing stage. And that means your movies, music and games sound exactly the way the artist intended."
echo "create mqs_service vendor_file app_data_file vendor_config_file vendor_data_file dts_data_file dtsconfigurator_exec dtsconfigurator dtsconfigurator_tmpfs dtseagleservice_exec dtseagleservice dtseagleservice_tmpfs dtseagleservice_service self oem_prop oem_device hal_allocator_client hal_audio_client hal_bluetooth hal_bluetooth_client opdiagnose_service 
allow priv_app property_socket sock_file { write }
allow init vendor_file file { relabelfrom }
allow hal_audio_default sysfs_net dir { read }
allow hal_audio_default unlabeled dir { search write add_name }
allow hal_audio_default unlabeled file { write create open getattr }
allow hal_audio_default vendor_data_file file { read write open getattr ioctl }
allow hal_audio_default vendor_data_file dir { read write open getattr ioctl }
allow hal_audio_default app_data_file file { ioctl read write open getattr }
allow hal_audio_default vendor_configs_file file { ioctl read write open getattr lock }
allow priv_app vendor_data_file file { ioctl read write open getattr }
allow priv_app vendor_config_file file { ioctl read write open getattr } 
allow priv_app dts_data_file dir { ioctl read write open getattr }
allow priv_app dts_data_file file { read write open getattr }
allow audioserver vendor_data_file dir { ioctl read write getattr lock add_name remove_name search open }
allow audioserver vendor_data_file file { ioctl read write create getattr setattr lock append unlink rename open }
allow audioserver vendor_data_file file { read getattr open }
allow audioserver vendor_data_file dir { write add_name }
allow audioserver vendor_data_file file { write create setattr open }
allow priv_app asec_apk_file file { ioctl read getattr lock open }
allow priv_app asec_apk_file dir { ioctl read getattr lock search open }
allow priv_app shell_data_file file { ioctl read getattr lock open }
allow priv_app shell_data_file dir { ioctl read getattr lock search open }
allow priv_app app_data_file file { read write getattr }
allow priv_app media_rw_data_file dir { ioctl read write create getattr setattr lock rename add_name remove_name reparent search rmdir open }
allow priv_app media_rw_data_file file { ioctl read write create getattr setattr lock append unlink rename open }
allow priv_app mnt_media_rw_file dir search 
allow priv_app servicemanager service_manager list 
allow priv_app audioserver_service service_manager find 
allow priv_app cameraserver_service service_manager find 
allow priv_app drmserver_service service_manager find 
allow priv_app mediaserver_service service_manager find 
allow priv_app mediaextractor_service service_manager find 
allow priv_app mediacodec_service service_manager find 
allow priv_app mediametrics_service service_manager find 
allow priv_app mediadrmserver_service service_manager find 
allow priv_app mediaserver_service service_manager find 
allow priv_app nfc_service service_manager find 
allow priv_app radio_service service_manager find 
allow priv_app surfaceflinger_service service_manager find 
allow priv_app app_api_service service_manager find 
allow priv_app vr_manager_service service_manager find 
allow priv_app priv_app process ptrace 
allow priv_app sysfs_hwrandom dir search 
allow priv_app sysfs_hwrandom file { ioctl read getattr lock open }
allow priv_app preloads_media_file dir { ioctl read getattr lock search open }
allow priv_app preloads_media_file file { ioctl read getattr lock open }
allow priv_app preloads_data_file dir search 
allow priv_app vendor_app_file dir { read getattr search open }
allow priv_app vendor_app_file file { read getattr execute open }
allow priv_app vendor_app_file lnk_file { read getattr open }
allow priv_app vendor_data_file dir { ioctl read getattr lock search open }
allow priv_app vendor_data_file file { ioctl read getattr lock open write }
allow priv_app priv_app udp_socket { create connect }
allow priv_app priv_app tcp_socket { read write create getattr connect getopt setopt }
allow priv_app port tcp_socket name_connect 
allow priv_app netd unix_stream_socket connectto 
allow priv_app fwmarkd_socket sock_file write 
allow priv_app dnsproxyd_socket sock_file write 
allow priv_app vendor_data_file dir search 
allow priv_app vendor_data_file file read 
allow priv_app system_data_file file { read write getattr open }
allow mediacodec vendor_data_file dir { ioctl read write getattr lock add_name remove_name search open }
allow mediacodec vendor_data_file file { ioctl read write create getattr setattr lock append unlink rename open }
allow netd priv_app fd use
allow netd priv_app tcp_socket { read write getopt setopt }
allow init dtsconfigurator_exec file { read getattr execute open }
allow init dtsconfigurator process transition 
allow dtsconfigurator dtsconfigurator_exec file { read getattr execute entrypoint open }
allow init dtsconfigurator process { siginh rlimitinh }
allow dtsconfigurator dtsconfigurator_tmpfs file { read write getattr }
allow dtsconfigurator tmpfs dir { getattr search }
allow dtsconfigurator audio_device dir { ioctl read getattr lock search open }
allow dtsconfigurator audio_device chr_file { ioctl read write getattr lock append open }
allow init dtseagleservice_exec file { read getattr execute open }
allow init dtseagleservice process transition 
allow dtseagleservice dtseagleservice_exec file { read getattr execute entrypoint open }
allow init dtseagleservice process { siginh rlimitinh }
allow dtseagleservice dtseagleservice_tmpfs file { read write getattr }
allow dtseagleservice tmpfs dir { getattr search }
allow dtseagleservice priv_app binder { call transfer }
allow priv_app dtseagleservice binder transfer 
allow dtseagleservice priv_app fd use 
allow dtseagleservice priv_app binder { call transfer }
allow priv_app dtseagleservice binder transfer 
allow dtseagleservice priv_app fd use 
allow dtseagleservice dtseagleservice_service service_manager add 
allow dtseagleservice audio_device dir { ioctl read getattr lock search open }
allow dtseagleservice audio_device chr_file { ioctl read write getattr lock append open }
allow dtsconfigurator audio_device chr_file { append getattr ioctl lock map open read write }
allow dtsconfigurator audio_device dir { getattr ioctl lock open read search }
allow dtsconfigurator dtsconfigurator dir { getattr ioctl lock open read search }
allow dtsconfigurator dtsconfigurator fd use
allow dtsconfigurator dtsconfigurator fifo_file { append getattr ioctl lock map open read write }
allow dtsconfigurator dtsconfigurator file { append getattr ioctl lock map open read write }
allow dtsconfigurator dtsconfigurator lnk_file { getattr ioctl lock map open read }
allow dtsconfigurator dtsconfigurator process { fork getattr getcap getpgid getsched getsession setcap setpgid setrlimit setsched sigchld sigkill signal signull sigstop }
allow dtsconfigurator dtsconfigurator unix_dgram_socket { append bind connect create getattr getopt ioctl lock read sendto setattr setopt shutdown write }
allow dtsconfigurator dtsconfigurator unix_stream_socket { accept append bind connect connectto create getattr getopt ioctl listen lock read setattr setopt shutdown write }
allow dtsconfigurator dtsconfigurator_exec file { entrypoint execute getattr map open read }
allow dtsconfigurator dtsconfigurator_tmpfs file { getattr map read write }
allow dtsconfigurator hwbinder_device chr_file { append getattr ioctl lock map open read write }
allow dtsconfigurator mnt_vendor_file lnk_file { getattr ioctl lock map open read }
allow dtsconfigurator netutils_wrapper process { rlimitinh siginh transition }
allow dtsconfigurator netutils_wrapper_exec file { execute getattr map open read }
allow dtsconfigurator sysfs_esoc dir { getattr ioctl lock open read search }
allow dtsconfigurator sysfs_esoc file { getattr ioctl lock map open read }
allow dtsconfigurator sysfs_esoc lnk_file { getattr ioctl lock map open read }
allow dtsconfigurator sysfs_socinfo dir { getattr ioctl lock open read search }
allow dtsconfigurator sysfs_socinfo file { getattr ioctl lock map open read }
allow dtsconfigurator sysfs_socinfo lnk_file { getattr ioctl lock map open read }
allow dtsconfigurator sysfs_ssr dir { getattr ioctl lock open read search }
allow dtsconfigurator sysfs_ssr file { getattr ioctl lock map open read }
allow dtsconfigurator sysfs_ssr lnk_file { getattr ioctl lock map open read }
allow dtsconfigurator sysfs_thermal dir { getattr ioctl lock open read search }
allow dtsconfigurator sysfs_thermal file { getattr ioctl lock map open read }
allow dtsconfigurator sysfs_thermal lnk_file { getattr ioctl lock map open read }
allow dtsconfigurator tmpfs dir { getattr search }
allow dtsconfigurator vendor_file_type dir { getattr ioctl lock open read search }
allow dtsconfigurator vendor_file_type file { execute getattr map open read }
allow dtsconfigurator vendor_file_type lnk_file { getattr read }
allow dtseagleservice audio_device chr_file { append getattr ioctl lock map open read write }
allow dtseagleservice audio_device dir { getattr ioctl lock open read search }
allow dtseagleservice dtseagleservice dir { getattr ioctl lock open read search }
allow dtseagleservice dtseagleservice fd use
allow dtseagleservice dtseagleservice fifo_file { append getattr ioctl lock map open read write }
allow dtseagleservice dtseagleservice file { append getattr ioctl lock map open read write }
allow dtseagleservice dtseagleservice lnk_file { getattr ioctl lock map open read }
allow dtseagleservice dtseagleservice process { fork getattr getcap getpgid getsched getsession setcap setpgid setrlimit setsched sigchld sigkill signal signull sigstop }
allow dtseagleservice dtseagleservice unix_dgram_socket { append bind connect create getattr getopt ioctl lock read sendto setattr setopt shutdown write }
allow dtseagleservice dtseagleservice unix_stream_socket { accept append bind connect connectto create getattr getopt ioctl listen lock read setattr setopt shutdown write }
allow dtseagleservice dtseagleservice_exec file { entrypoint execute getattr map open read }
allow dtseagleservice dtseagleservice_service service_manager add
allow dtseagleservice dtseagleservice_tmpfs file { getattr map read write }
allow dtseagleservice hwbinder_device chr_file { append getattr ioctl lock map open read write }
allow dtseagleservice mnt_vendor_file lnk_file { getattr ioctl lock map open read }
allow dtseagleservice netutils_wrapper process { rlimitinh siginh transition }
allow dtseagleservice netutils_wrapper_exec file { execute getattr map open read }
allow dtseagleservice platform_app binder { call transfer }
allow dtseagleservice platform_app fd use
allow dtseagleservice sysfs_esoc dir { getattr ioctl lock open read search }
allow dtseagleservice sysfs_esoc file { getattr ioctl lock map open read }
allow dtseagleservice sysfs_esoc lnk_file { getattr ioctl lock map open read }
allow dtseagleservice sysfs_socinfo dir { getattr ioctl lock open read search }
allow dtseagleservice sysfs_socinfo file { getattr ioctl lock map open read }
allow dtseagleservice sysfs_socinfo lnk_file { getattr ioctl lock map open read }
allow dtseagleservice sysfs_ssr dir { getattr ioctl lock open read search }
allow dtseagleservice sysfs_ssr file { getattr ioctl lock map open read }
allow dtseagleservice sysfs_ssr lnk_file { getattr ioctl lock map open read }
allow dtseagleservice sysfs_thermal dir { getattr ioctl lock open read search }
allow dtseagleservice sysfs_thermal file { getattr ioctl lock map open read }
allow dtseagleservice sysfs_thermal lnk_file { getattr ioctl lock map open read }
allow dtseagleservice system_app binder { call transfer }
allow dtseagleservice system_app fd use
allow dtseagleservice tmpfs dir { getattr search }
allow dtseagleservice vendor_file_type dir { getattr ioctl lock open read search }
allow dtseagleservice vendor_file_type file { execute getattr map open read }
allow dtseagleservice vendor_file_type lnk_file { getattr read }
allow mediaserver vendor_data_file dir { ioctl read write getattr lock add_name remove_name search open }
allow mediaserver vendor_data_file file { ioctl read write create getattr setattr lock append unlink rename open }
allow priv_app dtseagleservice binder { call transfer }
allow dtseagleservice priv_app binder transfer 
allow priv_app dtseagleservice fd use 
allow priv_app vendor_data_file dir { ioctl read getattr lock search open }
allow priv_app vendor_data_file file { ioctl read getattr lock open }
allow priv_app vendor_data_file lnk_file { ioctl read getattr lock open }
allow priv_app dtseagleservice binder { call transfer }
allow dtseagleservice priv_app binder transfer 
allow priv_app dtseagleservice fd use 
allow priv_app default_android_service service_manager find 
allow priv_app hal_memtrack_hwservice hwservice_manager find 
allow hal_audio_default diag_device chr_file { read write }
allow audioserver serialno_prop file { read open getattr }
allow audioserver oem_prop file { read open getattr }
allow init oem_device chr_file { read open }
allow qti_init_shell default_prop property_service set 
allow priv_app ffs_prop property_service set 
allow priv_app device dir { read open }
allow mediaextractor oem_prop file { read open getattr }
allow priv_app init unix_stream_socket connectto 
allow hal_perf_default sysfs file write 
allow init pdx_bufferhub_client_endpoint_socket_type unix_stream_socket { create bind }
allow bufferhubd pdx_bufferhub_client_endpoint_socket_type unix_stream_socket { read write getattr setattr lock append listen accept getopt setopt shutdown }
allow bufferhubd self process setsockcreate 
allow bufferhubd pdx_bufferhub_client_channel_socket_type unix_stream_socket { ioctl read write create getattr setattr lock append bind connect listen accept getopt setopt shutdown }
allow bufferhubd pdx_performance_client_endpoint_dir_type dir { ioctl read getattr lock search open }
allow bufferhubd pdx_performance_client_endpoint_socket_type sock_file { ioctl read write getattr lock append open }
allow bufferhubd pdx_performance_client_endpoint_socket_type unix_stream_socket { read write shutdown connectto }
allow bufferhubd pdx_performance_client_channel_socket_type unix_stream_socket { read write getattr setattr lock append getopt setopt shutdown }
allow bufferhubd pdx_performance_client_server_type fd use 
allow pdx_performance_client_server_type bufferhubd fd use 
allow bufferhubd gpu_device chr_file { ioctl read write getattr lock append open }
allow bufferhubd ion_device chr_file { ioctl read getattr lock open }
allow bufferhubd mediacodec fd use 
allow hal_allocator_client hal_allocator_server binder { call transfer}
allow hal_allocator_server hal_allocator_client binder transfer 
allow hal_allocator_client hal_allocator_server fd use allow hal_allocator_server hidl_allocator_hwservice hwservice_manager { add find }
allow hal_allocator_server hidl_base_hwservice hwservice_manager add 
allow hal_allocator_client hidl_allocator_hwservice hwservice_manager find 
allow hal_allocator_client hidl_memory_hwservice hwservice_manager find 
allow hal_audio_client hal_audio_server binder { call transfer }
allow hal_audio_server hal_audio_client binder transfer allow hal_audio_client hal_audio_server fd use 
allow hal_audio_server hal_audio_client binder { call transfer }
allow hal_audio_client hal_audio_server binder transfer allow hal_audio_server hal_audio_client fd use 
allow hal_audio_server hal_audio_hwservice hwservice_manager { add find }
allow hal_audio_server hidl_base_hwservice hwservice_manager add 
allow hal_audio_client hal_audio_hwservice hwservice_manager find 
allow hal_audio ion_device chr_file { ioctl read getattr lock open }
allow hal_audio proc dir { ioctl read getattr lock search open }
allow hal_audio proc file { ioctl read getattr lock open }
allow hal_audio proc lnk_file { ioctl read getattr lock open }
allow hal_audio audio_device dir { ioctl read getattr lock search open }
allow hal_audio audio_device chr_file { ioctl read write getattr lock append open }
allow hal_audio shell fd use 
allow hal_audio shell fifo_file write allow hal_audio dumpstate fd use 
allow hal_audio dumpstate fifo_file write 
allow hal_bluetooth_client hal_bluetooth_server binder { call transfer }
allow hal_bluetooth_server hal_bluetooth_client binder transfer 
allow hal_bluetooth_client hal_bluetooth_server fd use 
allow hal_bluetooth_server hal_bluetooth_client binder { call transfer }
allow hal_bluetooth_client hal_bluetooth_server binder transfer 
allow hal_bluetooth_server hal_bluetooth_client fd use 
allow hal_bluetooth_server hal_bluetooth_hwservice hwservice_manager { add find }
allow hal_bluetooth_server hidl_base_hwservice hwservice_manager add 
allow hal_bluetooth_client hal_bluetooth_hwservice hwservice_manager find 
allow hal_bluetooth sysfs_wake_lock file { ioctl read write getattr lock append open }
allow hal_bluetooth self capability2 block_suspend 
allow hal_bluetooth self capability net_admin 
allow hal_bluetooth bluetooth_efs_file dir { ioctl read getattr lock search open }
allow hal_bluetooth bluetooth_efs_file file { ioctl read getattr lock open }
allow hal_bluetooth bluetooth_efs_file lnk_file { ioctl read getattr lock open }
allow hal_bluetooth uhid_device chr_file { ioctl read write getattr lock append open }
allow hal_bluetooth hci_attach_dev chr_file { ioctl read write getattr lock append open }
allow hal_bluetooth sysfs_type dir { ioctl read getattr lock search open }
allow hal_bluetooth sysfs_type file { ioctl read getattr lock open }
allow hal_bluetooth sysfs_type lnk_file { ioctl read getattr lock open }
allow hal_bluetooth sysfs_bluetooth_writable file { ioctl read write getattr lock append open }
allow hal_bluetooth self capability2 wake_alarm 
allow hal_bluetooth property_socket sock_file write 
allow hal_bluetooth init unix_stream_socket connectto 
allow hal_bluetooth bluetooth_prop property_service set 
allow hal_bluetooth bluetooth_prop file { ioctl read getattr lock open }
allow hal_bluetooth proc_bluetooth_writable file { ioctl read write getattr lock append open }
allow hal_bluetooth self capability sys_nice 
allow priv_app vendor_data_file dir { search read write } 
allow priv_app su binder call 
allow audioserver su binder call 
allow hal_audio_default vendor_data_file dir search 
allow priv_app vendor_data_file file { read write open getattr create }
allow system_server audioserver file write 
allow system_server qti_debugfs dir search 
allow hal_audio_default vendor_data_file dir add_name 
allow priv_app system_prop property_service set 
allow hal_audio_default vendor_data_file file { create read write open unlink setattr }
allow hal_drm_default oem_prop file getattr 
allow hal_perf_default kernel dir search 
allow priv_app opdiagnose_service service_manager find 
allow priv_app proc_modules file { read }
allow priv_app proc_interrupts file { read }
allow audioserver device chr_file * 
allow priv_app unlabeled file * 
allow hal_iop_default priv_app dir * 
allow hal_iop_default priv_app dir * 
allow priv_app proc_modules file * 
allow priv_app proc_interrupts file * 
allow mediacodec oem_prop file * 
allow hal_iop_default priv_app lnk_file * 
allow hal_iop_default priv_app lnk_file getattr 
allow { audioserver mediaserver } vendor_data_file dir { read execute open search getattr }
allow hal_audio_default sysfs_net dir { read }
allow hal_audio_default vendor_configs_file file { ioctl read write open getattr }
allow audioserver logd_socket sock_file { write }
allow priv_app vendor_file file { getattr }
allow priv_app property_socket sock_file { open read write }
allow audioserver logd unix_stream_socket { connectto }
allow mediaprovider radio_service service_manager { find }
allow priv_app bg_boot_complete_prop file { read write }
allow priv_app bg_daemon_prop file { read write }
allow priv_app bluetooth_prop file { read write }
allow priv_app bootloader_boot_reason_prop file { read }
allow priv_app proc_modules file { read write }
allow priv_app mqs_service service_manager { find }
allow priv_app bluetooth_prop file { read }
allow hal_audio_default vendor_file file { open read write }
allow hal_audio_default unlabeled file { read }" > $MODPATH/$MODID/sepolicy.rule
echo "ro.dts.licensepath=$MIPSVE/dts/
ro.vendor.dts.licensepath=$MIPSVE/dts/
ro.dts.cfgpath=$MIPSVE/dts/
ro.vendor.dts.cfgpath=$MIPSVE/dts/
ro.product.model=ASUS_X00QD
ro.product.vendor.model=ASUS_X00QD
ro.build.product=ASUS_X00QD
ro.build.asus.sku=WW
persist.sys.dts.settings=1
ro.audio.monitorRotation=true
ro.asus.audio.dualSPK=true
ro.asus.aw.settingentry=1
ro.asus.dts.headphone.default_enable=true
ro.asus.audiowizard.outdoor=1
audio.wizard.video=1
ro.asus.audio.realStereo=true" > $MODPATH/$MODID/system.prop
echo "### DTS script by UltraM8, Michi, lazerl0rd
chown 0.0 /data/vendor/audio/dts
chmod 0777 /data/vendor/audio/dts $IPDM/aw $IPDM/dts
chmod 777 $IPDM/dts/playbackstatus.info

(
sleep 10
pm grant com.asus.maxxaudio android.permission.WRITE_EXTERNAL_STORAGE
pm grant com.asus.maxxaudio android.permission.READ_EXTERNAL_STORAGE
)&" > $MODPATH/$MODID/post-fs-data.sh
LIBWORKAROUNDCHECK
SET_PERM_RM -msgdi
WCANFTP -sl -ehap
}

IPAN() {
if $MAGISK && [ $MAGISKFIRSTTIME != true ] && $FINDAIOPFMDA; then
UCSA "Install Ainur Narsil $VIPAN?" "" "$MSGNUS" "IPANS"
fi
}

IPANS() {
UZTPN "AinurNarsil"; UNIVERSALUNZIP
}

IPNLS() {
if $MAGISK && $SNAPSOC; then
UCSA "Install NLSound $VIPNLS?" "$MSGEEFTC" "$MSGNUS" "IPNLSS"
fi
}

IPNLSS() {
UIP "Installing NLSound $IAMM"
if $HIFI; then UIP "Device With Support Hi-Fi"; else UIP "Device Without Support Hi-Fi"; fi
NEWDIRAC=$TMPDIR/NLSound/newdirac
STEP1=false; STEP2=false; STEP3=false; STEP4=false; STEP5=false; STEP6=false; STEP7=false; STEP8=false; STEP9=false; STEP10=false; STEP11=false; STEP12=false; STEP13=false; STEP14=false; PATCH_MIXER_LITE=false; PATCHMC=false
if FINDER "$ACXML"; then
UIP -d "Disable Deep Buffer?" "This Option Disable Deep Buffer In Your Device" "If You Want More Low Frequencies Skip This Option" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP1=true; fi
fi
if [ $HIFI != true ] && FINDER "$MPATHS"; then
UIP -d "Improve Volume Levels?" "CONFIRMING THIS OPTION MAY HARM YOUR DEVICE!" "NLSound Team Is Not Responsible For Your Devices!" "Choose At Your Own Risk!" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP2=true; fi
UIP -d "Improve Microphone Levels?" "This Option Improving Microphone Volume Levels In Your Device" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP3=true; fi
fi
if FINDER "$MPATHS"; then
UIP -d "Patching IIR?" "IIR Directly Affects The Final Sound Quality" "And It Is Recommended To Try The Version" "With And Without It, Choosing The One That You Like The Most" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP4=true; fi
fi
if FINDER "$APIIEXML"; then
UIP -d "Patching Audio Platform Files?" "Confirming This Option Will Allow The" "Module To Force 24-Bit Audio" "For Your Favorite Songs, As Well As Improve" "The Sound Quality During Video Recording" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP5=true; fi
fi
if FINDER "$MPATHS"; then
UIP -d "Disable Companders?" "Companding - Method For Reducing The Effects" "Of Channels With A Limited Dynamic Range" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP6=true; fi
fi
if FINDER "$ACXML"; then
UIP -d "Configurating Interal Audio Codec?" "This Option Configuring Your Device's Internal Audio Codec" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP7=true; fi
fi
if [ -d $IPSEDF ] || [ -d $IPVEDF ]; then
UIP -d "Patch device_features Files?" "Added More Stuff" "Enable HD Record In Camcorder" "Increase VoIP Recor Quality" "$MSGVU Yes" "$MSGVD No$MSGNIS"
if $KEYFUNCTION; then STEP8=true; fi
fi
UIP -d "Added New Dirac?" "ViperFX CONFLICT!" "This Option Added New Dirac In Your ROM" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP9=true; fi
UIP -d "Install Tweaks In Prop File?" "This Option Will Change The Sound Quality The Most" "May Cause Problems" "$MSGVU Yes" "$MSGVD No $MSGRI $MSGNIS"
if $KEYFUNCTION; then STEP10=true; fi
if FINDER "$MPATHS"; then
UIP -d "Install Patches In mixer_paths Files?" "A Large Set Of Universal Settings For Many Devices" "If You Encounter Problems After Installation" "Try Skipping This Option First" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
STEP11=true
UIP -d "What Option To Patch?" "$MSGVU Patch Light mixer_paths $MSGRI" "$MSGVD Patch Full mixer_paths"
if $KEYFUNCTION; then PATCH_MIXER_LITE=true; fi
fi
UIP -d "Patch Or Replace media_codecs?" "$MSGVU Patch" "$MSGVD Replace $MSGRI"
if $KEYFUNCTION; then PATCHMC=true; fi
fi
UIP -d "Improve Bluetooth?" "This Option Will Improve The Audio Quality" "In Bluetooth, As Well As Fix The Problem" "Of Disappearing The AAC Codec Switch" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP12=true; fi
if FINDER "$AIPCONFA"; then
UIP -d "Switch Audio Output From DIRECT To DIRECT_PCM?" "This Option Will Switch DIRECT To DIRECT_PCM," "Which Will Improve The Sound Detail" "$MSGVU Yes $MSGRI" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP13=true; fi
fi
if FINDER "$APCXML"; then
UIP -d "Limit The Dynamic Range Of The Soundtrack?" "The Difference Between The Loudest" "And The Quietest Sounds" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP14=true; fi
fi
MAGISKMIRROR_CHECKER
UZTPN "NLSound"
MODID="$IDNLS"; REMOVER -mm "$MODID $IDAIST"
mkdir -p $MODPATH/$MODID
MMPR -vcs "NLSound" "$VIPNLS" "$VCIPNLS" "NLSound Team" "This module globally improves audio quality when recording video/audio and listening to audio on your device." "support=https://t.me/nlsound_support"
echo "#!$MIPSB/sh
MOUNT=/data; MODDIR=\${0%/*}
FILE1=\$(find /sys/module -name high_perf_mode)
FILE2=\$(find /sys/module -name cpe_debug_mode)
FILE3=\$(find /sys/module -name impedance_detect_en)
echo 1 > \$FILE1; echo 1 > \$FILE2; echo 1 > \$FILE3" > $MODPATH/$MODID/post-fs-data.sh
echo "allow audioserver audioserver_tmpfs file { read write execute }
allow audioserver system_file file { execmod }
allow mediaserver mediaserver_tmpfs file { read write execute }
allow mediaserver system_file file { execmod }
allow audioserver unlabeled file { read write execute open getattr }
allow hal_audio_default hal_audio_default process { execmem }
allow hal_audio_default hal_audio_default_tmpfs file { execute }
allow hal_audio_default audio_data_file dir { search }" > $MODPATH/$MODID/sepolicy.rule
REPLACER -f "AudioFX MusicFX"
if $STEP2 || $STEP3 || $STEP4 || $STEP6 || $STEP11; then
UIP "Patching Needed Files..."
for OMIX in $MPATHS; do
UIP "Found $OMIX" "Patching..."
MIX="$MODPATH/$MODID$(echo $OMIX | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $MIX`
cp -f $MAGISKMIRROR$OMIX $MIX
sed -i 's/\t/  /g' $MIX
UIP "Files Found And Patched"
done
fi
if $STEP1 || $STEP7; then
UIP "Patching Needed Files..."
for OACONF in $ACXML; do
UIP "Found $OACONF" "Patching..."
ACONF="$MODPATH/$MODID$(echo $OACONF | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $ACONF`
cp -f $MAGISKMIRROR$OACONF $ACONF
sed -i 's/\t/  /g' $ACONF
UIP "Files Found And Patched"
done
fi
if $STEP1; then PATCH_DEEP_BUFFER -nl; fi
if $STEP2; then PATCH_VOLUMES -nl; fi
if $STEP3; then PATCH_MICROPHONE; fi
if $STEP4; then PATCH_IIR; fi
if $STEP5; then PATCH_AUDIO_PLATFORM_INFO; fi
if $STEP6; then PATCH_COMPANDERS; fi
if $STEP7; then PATCH_AUDIO_CODEC; fi
if $STEP8; then PATCH_DEVICE_FEATURES; fi
if $STEP9; then PATCH_DIRAC; fi
if $STEP10; then
UIP "Start GENERAL_TWEAKS"
echo "persist.vendor.audio.spv4.enable=true
persist.vendor.audio.avs.afe_api_version=9
ro.mediacodec.min_sample_rate=7350
ro.mediacodec.max_sample_rate=2822400
vendor.audio.flac.sw.decoder.24bit=true
vendor.audio.aac.sw.decoder.24bit=true
vendor.audio.use.sw.alac.decoder=true
vendor.audio.flac.sw.encoder.24bit=true
vendor.audio.aac.sw.encoder.24bit=true
vendor.audio.use.sw.ape.decoder=true
vendor.audio.vorbis.complexity.default=8
vendor.audio.vorbis.quality=100
vendor.audio.aac.complexity.default=8
vendor.audio.aac.quality=100
vendor.audio.tunnel.encode=true
tunnel.audio.encode=true
qc.tunnel.audio.encode=true
audio.decoder_override_check=true
mpq.audio.decode=true
audio.nat.codec.enabled=1
use.non-omx.mp3.decoder=false
use.non-omx.aac.decoder=false
use.non-omx.flac.decoder=false
media.stagefright.enable-player=true
media.stagefright.enable-http=true
media.stagefright.enable-aac=true
media.stagefright.enable-qcp=true
media.stagefright.enable-fma2dp=true
media.stagefright.enable-scan=true
media.stagefright.audio.sink=128
media.stagefright.thumbnail.prefer_hw_codecs=true
mmp.enable.3g2=true
media.aac_51_output_enabled=true
mm.enable.smoothstreaming=true
vendor.audio.parser.ip.buffer.size=262144
vendor.mm.enable.qcom_parser=63963135
persist.mm.enable.prefetch=true
av.offload.enable=true
vendor.av.offload.enable=true
qc.av.offload.enable=true
audio.offload.buffer.size.kb=32
vendor.audio.offload.buffer.size.kb=32
lpa.decode=false
lpa30.decode=false
lpa.use-stagefright=false
lpa.releaselock=false
af.thread.throttle=0
af.fast.track.multiplier=2
ro.af.client_heap_size_kbyte=7168
vendor.audio_hal.in_period_size=144
vendor.audio_hal.period_multiplier=3 
vendor.audio.hal.output.suspend.supported=true
audio.playback.mch.downsample=false
ro.vendor.audio.playbackScene=true
vendor.audio.playback.dsp.pathdelay=0
vendor.audio.playback.mch.downsample=false
persist.vendor.audio.playback.mch.downsample=false
vendor.audio.feature.external_dsp.enable=true
vendor.audio.feature.external_speaker.enable=true
vendor.audio.feature.external_speaker_tfa.enable=true
vendor.audio.feature.ext_hw_plugin=true
vendor.audio.feature.ras.enable=true
vendor.audio.feature.afe_proxy.enable=true
vendor.audio.feature.src_trkn.enable=true
vendor.audio.feature.spkr_prot.enable=true
vendor.audio.feature.kpi_optimize.enable=true
vendor.audio.feature.power_mode.enable=true 
vendor.audio.feature.compress_meta_data.enable=false
vendor.audio.feature.compr_cap.enable=false
vendor.audio.feature.ssrec.enable=true
vendor.audio.feature.dynamic_ecns.enable=true
vendor.audio.feature.concurrent_capture.enable=true
vendor.audio.feature.devicestate_listener.enable=false
vendor.audio.feature.thermal_listener.enable=false
vendor.audio.feature.hifi_audio.enable=true
ro.hardware.hifi.support=true
ro.audio.hifi=true
ro.vendor.audio.hifi=true
persist.audio.hifi=true
persist.audio.hifi.volume=72
persist.audio.hifi.int_codec=true
persist.vendor.audio.hifi=true
persist.vendor.audio.hifi.int_codec=true
effect.reverb.pcm=1
vendor.audio.safx.pbe.enabled=true
vendor.audio.soundfx.usb=false
vendor.audio.keep_alive.disabled=false
vendor.audio.pp.asphere.enabled=true
ro.vendor.audio.3d.audio.support=true
ro.vendor.audio.sfx.speaker=false
ro.vendor.audio.sfx.earadj=false
ro.vendor.audio.sfx.audiovisual=false
ro.vendor.audio.sfx.independentequalizer=false
ro.vendor.audio.surround.support=true
ro.vendor.audio.scenario.support=true
ro.vendor.audio.vocal.support=true
ro.vendor.audio.voice.change.support=true
ro.vendor.audio.voice.change.youme.support=true
persist.vendor.audio.ambisonic.capture=true
persist.vendor.audio.ambisonic.auto.profile=true
persist.vendor.audio.misound.disable=true
vendor.audio.hdr.record.enable=true
vendor.audio.3daudio.record.enable=true
ro.vendor.audio.sdk.ssr=false
ro.vendor.audio.recording.hd=true
ro.ril.enable.amr.wideband=1
persist.audio.lowlatency.rec=true
ro.vendor.audio.game.mode=true
ro.vendor.audio.game.vibrate=true
ro.audio.soundtrigger.lowpower=false
vendor.power.pasr.enabled=true
vendor.audio.matrix.limiter.enable=0
vendor.audio.enable.mirrorlink=false
vendor.audio.capture.enforce_legacy_copp_sr=true
vendor.audio.spkr_prot.tx.sampling_rate=48000
vendor.audio.snd_card.open.retries=50
vendor.audio.volume.headset.gain.depcal=true
vendor.audio.tfa9874.dsp.enabled=true
ro.vendor.audio.multiroute=true
ro.vendor.audio.enhance.support=true
ro.vendor.audio.gain.support=true
persist.vendor.audio.ha_proxy.enabled=true
persist.vendor.audio.ll_playback_bargein=true
persist.vendor.audio.bcl.enabled=false
persist.vendor.audio.hw.binder.size_kbyte=1024
persist.vendor.audio.format.24bit=true
persist.vendor.audio.delta.refresh=true" >> $MODPATH/$MODID/system.prop
fi
if $STEP11; then PATCH_MIXER -nl; fi
if $STEP12; then PATCH_IMPROVE_BLUETOOTH; fi
if $STEP13; then PATCH_IO_POLICY; fi
if $STEP14; then PATCH_AUDIO_POLICY; fi
MOVERPATH
SET_PERM_RM -msgdi
}

IPAIST() {
if $MAGISK && $SNAPSOC; then
UCSA "Install AIST $VIPAIST?" "$MSGEEFTC" "$MSGNUS" "IPAISTS"
fi
}

IPAISTS() {
UIP "Installing AIST $IAMM"
if $HIFI; then UIP "Device With Support Hi-Fi"; else UIP "Device Without Support Hi-Fi"; fi
STEP1=false; STEP2=false; PATCHMC=false
if FINDER "$MPATHS"; then
UIP -d "Improve Volume Levels?" "Volume Boost For Those Who Lack" "The Volume Of Speakers And Microphones!" "Be Careful When Listening" "To Music At Maximum Volume!" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP1=true; fi
fi
UIP -d "Install Harman Kardon Preset's Feature?" "This Tweak Enable Harman Kardon Preset's" "Doesn't Work On All Firmwares" "Cause Sound Driver Crash On Some Firmware" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then STEP2=true; fi
UIP -d "Patch Or Replace media_codecs?" "$MSGVU Patch" "$MSGVD Replace $MSGRI"
if $KEYFUNCTION; then PATCHMC=true; fi
MAGISKMIRROR_CHECKER
MODID="$IDAIST"; REMOVER -mm "$MODID $IDNLS"
mkdir -p $MODPATH/$MODID$MIPSB $MODPATH/$MODID$MIPSVLS $MODPATH/$MODID$MIPSVLS64 $MODPATH/$MODID$MIPSVE
touch $MODPATH/$MODID$MIPSVLS/libvolumelistener.so $MODPATH/$MODID$MIPSVLS/libaudiopreprocessing.so $MODPATH/$MODID$MIPSVLS64/libvolumelistener.so $MODPATH/$MODID$MIPSVLS64/libaudiopreprocessing.so
cp -f $TINYMIX $MODPATH/$MODID$MIPSB/tinymix
UZTPN "NLSound" "AIST"
cp -f $TMPDIR/AIST/* $MODPATH/$MODID$MIPSVE
MMPR -vcs "AIST for devices based on Qualcomm" "$VIPAIST" "$VCIPAIST" "Oleg_Skalskiy" "This module Improving Audio Quality On Android." "https://t.me/AIST_SUPPORT"
echo "# GENERAL PARAMETERS BY AIST
media.stagefright.audio.sink=384
af.fast.track.multiplier=1
audio.hal.period.size=192
vendor.audio.hal.period.size=192
vendor.audio_hal.period_size=192
vendor.audio_hal.in_period_size=192
audio.offload.buffer.size.kb=384
vendor.audio.offload.buffer.size.kb=384
audio.offload.disable=false
vendor.audio.offload.disable=false
audio.offload.min.duration.secs=30
vendor.audio.offload.min.duration.secs=30
media.stagefright.enable-player=true
media.stagefright.enable-http=true
media.stagefright.enable-aac=true
media.stagefright.enable-qcp=true
media.stagefright.enable-fma2dp=true
media.stagefright.enable-scan=true
media.stagefright.thumbnail.prefer_hw_codecs=true
mmp.enable.3g2=true
media.aac_51_output_enabled=true
mm.enable.smoothstreaming=true
vendor.mm.enable.qcom_parser=16777215
persist.mm.enable.prefetch=true
debug.stagefright.ccodec=4
aaudio.mmap_policy=1
aaudio.mmap_exclusive_policy=2
ro.audio.recording.hd=true
persist.vendor.audio.spv4.enable=true
vendor.audio.offload.multiaac.enable=true
persist.vendor.audio.hac.enable=true
mpq.audio.decode=true
lpa.decode=false
lpa.use-stagefright=false
lpa.releaselock=false
audio.decoder_override_check=true
use.non-omx.mp3.decoder=false
use.non-omx.aac.decoder=false
audio.hw.aac.encoder=true
qcom.hw.aac.encoder=true
audio.hw.aac.decoder=true
qcom.hw.aac.decoder=true
persist.audio.format.24bit=true
vendor.audio.flac.sw.decoder.24bit=true
persist.vendor.audio.format.24bit=true
ro.vendor.qti.va_aosp.support=1
ro.vendor.audio.spk.clean=true
vendor.audio.spkcal.copy.inhal=true
ro.vendor.audio.multiroute=true
ro.vendor.audio.surround.support=true
ro.vendor.audio.voice.change.support=true
ro.vendor.audio.voice.change.youme.support=true
ro.vendor.audio.spk.stereo=true
ro.vendor.audio.vocal.support=true
ro.audio.sfx.harmankardon=true
ro.vendor.audio.sfx.harmankardon=true
ro.vendor.audio.gain.support=true
ro.vendor.audio.karaok.support=true
ro.vendor.camera.karaok.support=true
ro.vendor.audio.zoom.support=true
ro.vendor.audio.zoom.type=2
persist.vendor.audio.delta.refresh=true
ro.vendor.audio.ns.support=true
ro.vendor.audio.enhance.support=true
ro.vendor.audio.sfx.earadj=true
use.voice.path.for.pcm.voip=true
vendor.audio.hal.output.suspend.supported=false
debug.media.vpp.enable=true
vendor.media.vpp.debug.value.use=true
media.vpp.debug.value.use=true
ro.audio.monitorRotation=true
persist.vendor.audio_hal.dsp_bit_width_enforce_mode=24
persist.audio_hal.dsp_bit_width_enforce_mode=24
vendor.audio_hal.dsp_bit_width_enforce_mode=24
audio_hal.dsp_bit_width_enforce_mode=24
ro.vendor.audio_hal.dsp_bit_width_enforce_mode=24
ro.audio_hal.dsp_bit_width_enforce_mode=24
qcom.vendor.audio_hal.dsp_bit_width_enforce_mode=24
qcom.audio_hal.dsp_bit_width_enforce_mode=24
audio.offload.gapless.enabled=true
vendor.audio.offload.gapless.enabled=true
ro.vendor.audio.camera.loopback.support=true
persist.vendor.ssr.restart_level=ALL_ENABLE
persist.vendor.ssr.enable_ramdumps=0
audio.safemedia.bypass=true
vendor.audio.safemedia.bypass=true
persist.vendor.audio.safemedia.bypass=true
persist.audio.safemedia.bypass=true
audio.pp.asphere.enabled=true
vendor.audio.pp.asphere.enabled=true
persist.dev.pm.dyn_samplingrate=1
persist.audio.lowlatency.rec=true
persist.audio.hp=true
ro.vendor.audio.afe.record=true
ro.vendor.audio.aiasst.support=true
sys.haptic.dynamiceffect=true
sys.haptic.dynamiceffect.richtap=true
sys.haptic.ignoreWhenCamera=true
audio.safx.pbe.enabled=false
vendor.audio.safx.pbe.enabled=false
audio.playback.mch.downsample=false
audio.nat.codec.enabled=1
effect.reverb.pcm=1
persist.audio.handset.mic=digital
vendor.audio.playback.mch.downsample=false
persist.vendor.audio.playback.mch.downsample=false
vendor.audio.matrix.limiter.enable=0
audio.matrix.limiter.enable=0
vendor.audio.game4D.switch=1
persist.vendor.audio.ambisonic.auto.profile=true
persist.vendor.audio.ambisonic.capture=false
persist.vendor.audio.apptype.multirec.enabled=false
vendor.audio.tunnel.encode=false
tunnel.audio.encode = false
audio.tunnel.encode=false
ro.vendor.audio.tunnel.encode=false
qc.audio.tunnel.encode=false
persist.vendor.audio.tunnel.encode=false
persist.audio.tunnel.encode=false
vendor.tunnel.audio.encode=false
tunnel.audio.encode=false
qc.tunnel.audio.encode=false
ro.tunnel.audio.encode=false
persist.vendor.tunnel.audio.encode=false
persist.tunnel.audio.encode=false
persist.mm.enable.prefetch=true
persist.speaker.prot.enable=false
persist.audio.speaker.prot.enable=false
persist.vendor.audio.speaker.prot.enable=false
speaker.prot.enable=false
audio.speaker.prot.enable=false
vendor.audio.speaker.prot.enable=false
ro.speaker.prot.enable=false
ro.audio.speaker.prot.enable=false
ro.vendor.audio.speaker.prot.enable=false
qcom.speaker.prot.enable=false
qcom.audio.speaker.prot.enable=false
qcom.vendor.audio.speaker.prot.enable=false
ro.qc.sdk.audio.fluencetype=fluence
ro.vendor.audio.sdk.fluencetype=fluence
persist.vendor.audio.fluence.voicerec=false
persist.audio.fluence.voicerec=false
ro.hdmi.enable=true
persist.vendor.audio.ras.enabled=false
debug.sf.enable_hwc_vds=1
debug.sf.latch_unsignaled=1
debug.hwc.winupdate=1
audio.offload.pcm.16bit.enable=true
audio.offload.pcm.24bit.enable=true
audio.offload.pcm.32bit.enable=true
vendor.audio.offload.pcm.16bit.enable=true
vendor.audio.offload.pcm.24bit.enable=true
vendor.audio.offload.pcm.32bit.enable=true
hpx_send_params=1
audio.hwacceffects.needed=true
vendor.audio.hwacceffects.needed=true
ro.config.hw_music_lp=true
ro.config.music_lp_vol=true
audio.high.resolution.enable=true
vendor.audio.high.resolution.enable=true
ro.audio.soundfx.usb=true
ro.vendor.audio.soundfx.usb=true
ro.vendor.audio.dump.mixer=true
persist.sys.mitalk.enable=true
ro.vendor.audio.soundtrigger.adjconf=true
ro.vendor.audio.soundtrigger.lowpower=false
ro.vendor.audio.soundtrigger.training.level=50
ro.vendor.audio.soundtrigger.xanzn.gmm.level=50
ro.vendor.audio.soundtrigger.xanzn.gmm.user.level=30
ro.vendor.audio.soundtrigger.xanzn.cnn.level=70
ro.vendor.audio.soundtrigger.xanzn.vop.level=10
ro.vendor.audio.soundtrigger.xatx.gmm.level=30
ro.vendor.audio.soundtrigger.xatx.gmm.user.level=40
ro.vendor.audio.soundtrigger.xatx.cnn.level=45
ro.vendor.audio.soundtrigger.xatx.vop.level=0
ro.vendor.audio.soundtrigger.appdefine.gmm.level=55
ro.vendor.audio.soundtrigger.appdefine.gmm.user.level=65
ro.vendor.audio.soundtrigger.appdefine.cnn.level=45
ro.vendor.audio.soundtrigger.appdefine.vop.level=10
ro.vendor.audio.soundtrigger.snr=16
ro.vendor.audio.sfx.independentequalizer=false
ro.vendor.audio.ring.filter=true
persist.vendor.audio.ring.filter.mask=0
ro.vendor.audio.sfx.scenario=true
ro.vendor.audio.scenario.support=true

# HiFi/DS2 PARAMETERS BY AIST TEAM
audio.hifi=true
vendor.audio.hifi=true
ro.audio.hifi=true
ro.vendor.audio.hifi=true
qcom.audio.hifi=true
qcom.vendor.audio.hifi=true
qc.audio.hifi=true
qc.vendor.audio.hifi=true
ro.audio.hifi.volume=90
ro.vendor.audio.hifi.volume=90
audio.hifi.volume=90
vendor.audio.hifi.volume=90
persist.audio.hifi.volume=90
persist.vendor.audio.hifi.volume=90
qcom.audio.hifi.volume=90
qcom.vendor.audio.hifi.volume=90
qc.audio.hifi.volume=90
qc.vendor.audio.hifi.volume=90
persist.audio.hifi.int_codec=true
persist.vendor.audio.hifi.int_codec=true
audio.feature.hifi_audio.enable=true
vendor.audio.feature.hifi_audio.enable=true
audio.feature.ds2_audio.enable=true
vendor.audio.feature.ds2_audio.enable=true
ro.hardware.hifi.support=true
ro.hardware.ds2.support=true
audio.dolby.ds2.enabled=true
vendor.audio.dolby.ds2.enabled=true
vendor.audio.dolby.ds2.hardbypass=false
audio.dolby.ds2.enabled=true
audio.dolby.ds2.hardbypass=false
ro.config.hifi_enhance_support=1
persist.audio.hifi_adv_support=1
persist.audio.hifi_dac=ON
persist.vendor.audio.hifi_adv_support=1
persist.vendor.audio.hifi_dac=ON
persist.lge.hifiquaddac=true
use.dts_eagle=true
vendor.audio.use.dts_eagle=true
DTS_EAGLE_PLATFORM_SUPPORT=true
DTS_NEW_PARAM_READY=1
vendor.dolby.mi.metadata.log=true
vendor.dolby.dap.param.tee=true
vendor.audio.gef.enable.traces=true
vendor.audio.gef.debug.flags=true

# BT PARAMETERS BY AIST TEAM
persist.service.btui.use_aptx=1
persist.bt.enableAptXHD=true
persist.bt.a2dp.aptx_disable=false
persist.bt.a2dp.aptx_hd_disable=false
persist.bluetooth.a2dp_offload.disabled=false
persist.vendor.qcom.bluetooth.a2dp_offload_cap=sbc-aptx-aptxtws-aptxhd-aac-ldac-aptxadaptiver2-lhdc-lc3
persist.vendor.bt.a2dp_offload_cap=sbc-aptx-aptxtws-aptxhd-aptxadaptiver2-aac-ldac-lhdc-lc3
persist.bluetooth.a2dp_offload.cap=sbc-aac-aptx-aptxhd-ldac-lhdc-lc3
persist.vendor.btstack.a2dp_offload_cap=sbc-aptx-aptxtws-aptxhd-aptxadaptiver2-aac-ldac-lhdc-lc3
persist.vendor.bt.soc.scram_freqs=192
persist.vendor.qcom.bluetooth.scram.enabled=true
persist.bt.a2dp.aac_disable=false
audio.effect.a2dp.enable=1
vendor.audio.effect.a2dp.enable=1
vendor.btstack.absolute_volume=true
persist.vendor.btstack.absolute_volume=true
persist.vendor.btsatck.absvolfeature=true
persist.vendor.bt.a2dp.addr_check_enabled_for_aac=true
persist.bluetooth.avrcpversion=avrcp16
persist.bluetooth.mapversion=map14
ro.bluetooth.hdaudio.supported=true
ro.bluetooth.hd_audio.supported=true
persist.vendor.bt.a2dp.hd_audio=true
persist.vendor.bt.a2dp.hdaudio=true
persist.vendor.btstack.enable.hdaudio=true
persist.vendor.btstack.enable.hd_audio=true
persist.bluetooth.hdaudio.enable=true
persist.bluetooth.hd_audio.enable=true
persist.vendor.bt.hd_audio.enabled=true
persist.vendor.bt.hdaudio.enabled=true
ro.bluetooth.gabeldorsche.supported=true
persist.vendor.btstack.enable.gabeldorsche=true
persist.bluetooth.gabeldorsche.enable=true
persist.vendor.bt.a2dp.gabeldorsche=true
persist.vendor.bt.gabeldorsche.enabled=true
bt.max.hfpclient.connections=5
persist.vendor.qcom.bluetooth.aptxadaptiver2_1_support=true
persist.sys.fflag.override.settings_bluetooth_hearing_aid=true
persist.bluetooth.enablenewavrcp=true
persist.bluetooth.disableabsvol=false
persist.vendor.bt.a2dp.hal.implementation=true
persist.vendor.btstack.enable.lpa=false
persist.vendor.btstack.enable.splita2dp=true
persist.vendor.bluetooth.modem_nv_support=true
persist.vendor.bt.a2dp.encoderformat=true
ro.bluetooth.remote.autoconnect=true
ro.bluetooth.request.master=true
persist.vendor.bt.aac_frm_ctl.enabled=true
persist.vendor.bt.aac_vbr_frm_ctl.enabled=true
persist.vendor.qcom.bluetooth.aac_frm_ctl.enabled=true
persist.vendor.qcom.bluetooth.aac_vbr_ctl.enabled=true

# AHAL PARAMETERS BY AIST TEAM
audio.offload.video=true
audio.deep_buffer.media=true
vendor.audio.deep_buffer.media=true
qc.audio.deep_buffer.media=true
ro.qc.audio.deep_buffer.media=true
persist.vendor.audio.deep_buffer.media=true
persist.audio.deep_buffer.media=true
persist.vendor.audio.sva.conc.enabled=false
persist.vendor.audio.va_concurrency_enabled=false
vendor.audio.av.streaming.offload.enable=true
audio.offload.track.enable=true
vendor.audio.offload.track.enable=true
vendor.voice.dsd.playback.conc.disabled=true
vendor.voice.playback.conc.disabled=true
vendor.audio.rec.playback.conc.disabled=true
vendor.voice.record.conc.disabled=true
vendor.voice.voip.conc.disabled=true
vendor.voice.path.for.pcm.voip=true
vendor.audio.use.sw.alac.decoder=true
vendor.audio.use.sw.ape.decoder=true
vendor.audio.use.sw.mpegh.decoder=true
vendor.audio.flac.sw.decoder.24bit=true
vendor.audio.hw.aac.encoder=true
vendor.audio.feature.audiozoom.enable=false
vendor.audio.feature.compr_cap.enable=false
vendor.audio.feature.compress_in.enable=false
vendor.audio.feature.compr_voip.enable=false
vendor.audio.feature.concurrent_capture.enable=false
vendor.audio.feature.record_play_concurency.enable=false
vendor.audio.feature.ext_hw_plugin.enable=false
vendor.audio.feature.external_dsp.enable=false
vendor.audio.feature.external_speaker.enable=false
vendor.audio.feature.external_speaker_tfa.enable=false
vendor.audio.feature.hwdep_cal.enable=true
vendor.audio.feature.hfp.enable=true
vendor.audio.feature.multi_voice_session.enable=true
vendor.audio.feature.keep_alive.enable=true
vendor.audio.feature.kpi_optimize.enable=true
vendor.audio.feature.maxx_audio.enable=true
vendor.audio.feature.spkr_prot.enable=false
vendor.audio.feature.usb_offload_sidetone_volume.enable=true
vendor.audio.feature.audiosphere.enable=true
vendor.audio.feature.asphere.enable=true
vendor.audio.feature.power_mode.enable=true
vendor.audio.feature.dynamic_ecns.enable=true

# MMT PARAMETERS BY AIST TEAM
vendor.hab.vendor.verified=false
vendor.hab.system.verified=false
vendor.hab.oem.verified=false
drm.service.enabled=false
ro.control_privapp_permissions=disable

# LATECY PARAMETERS BY AIST TEAM
audio.a2dp.codec.latency=1
audio.aac.codec.latency=1
audio.flac.codec.latency=1
vendor.audio.a2dp.codec.latency=1
vendor.audio.aac.codec.latency=1
vendor.audio.flac.codec.latency=1
persist.vendor.audio.a2dp.codec.latency=1
persist.vendor.audio.aac.codec.latency=1
persist.vendor.audio.flac.codec.latency=1
audio.latency_compress_offload_speaker=1
audio.latency_compress_offload_headset=1
audio.latency_compress_offload_headphones=1
audio.latency_compress_offload_usb=1
audio.latency_compress_offload_a2dp=1
audio.latency_deep_buffer_speaker=1
audio.latency_deep_buffer_headset=1
audio.latency_deep_buffer_headphones=1
audio.latency_deep_buffer_usb=1
audio.latency_deep_buffer_a2dp=1
vendor.audio.latency_compress_offload_speaker=1
vendor.audio.latency_compress_offload_headset=1
vendor.audio.latency_compress_offload_headphones=1
vendor.audio.latency_compress_offload_usb=1
vendor.audio.latency_compress_offload_a2dp=1
vendor.audio.latency_deep_buffer_speaker=1
vendor.audio.latency_deep_buffer_headset=1
vendor.audio.latency_deep_buffer_headphones=1
vendor.audio.latency_deep_buffer_usb=1
vendor.audio.latency_deep_buffer_a2dp=1
persist.vendor.audio.latency_compress_offload_speaker=1
persist.vendor.audio.latency_compress_offload_headset=1
persist.vendor.audio.latency_compress_offload_headphones=1
persist.vendor.audio.latency_compress_offload_usb=1
persist.vendor.audio.latency_compress_offload_a2dp=1
persist.vendor.audio.latency_deep_buffer_speaker=1
persist.vendor.audio.latency_deep_buffer_headset=1
persist.vendor.audio.latency_deep_buffer_headphones=1
persist.vendor.audio.latency_deep_buffer_usb=1
persist.vendor.audio.latency_deep_buffer_a2dp=1
audio.latency_direct_pcm_speaker=1
audio.latency_direct_pcm_headset=1
audio.latency_direct_pcm_headphones=1
audio.latency_direct_pcm_usb=1
audio.latency_direct_pcm_a2dp=1
vendor.audio.latency_direct_pcm_speaker=1
vendor.audio.latency_direct_pcm_headset=1
vendor.audio.latency_direct_pcm_headphones=1
vendor.audio.latency_direct_pcm_usb=1
vendor.audio.latency_direct_pcm_a2dp=1
persist.vendor.audio.latency_direct_pcm_speaker=1
persist.vendor.audio.latency_direct_pcm_headset=1
persist.vendor.audio.latency_direct_pcm_headphones=1
persist.vendor.audio.latency_direct_pcm_usb=1
persist.vendor.audio.latency_direct_pcm_a2dp=1
audio.latency_direct_speaker=1
audio.latency_direct_headset=1
audio.latency_direct_headphones=1
audio.latency_direct_usb=1
audio.latency_direct_a2dp=1
vendor.audio.latency_direct_speaker=1
vendor.audio.latency_direct_headset=1
vendor.audio.latency_direct_headphones=1
vendor.audio.latency_direct_usb=1
vendor.audio.latency_direct_a2dp=1
persist.vendor.audio.latency_direct_speaker=1
persist.vendor.audio.latency_direct_headset=1
persist.vendor.audio.latency_direct_headphones=1
persist.vendor.audio.latency_direct_usb=1
persist.vendor.audio.latency_direct_a2dp=1" > $MODPATH/$MODID/system.prop
echo "allow audioserver audioserver_tmpfs file { read write execute }
allow audioserver system_file file { execmod }
allow mediaserver mediaserver_tmpfs file { read write execute }
allow mediaserver system_file file { execmod }
allow audioserver unlabeled file { read write execute open getattr }
allow hal_audio_default hal_audio_default process { execmem }
allow hal_audio_default hal_audio_default_tmpfs file { execute }
allow hal_audio_default audio_data_file dir { search }
allow app app_data_file file { execute_no_trans }" > $MODPATH/$MODID/sepolicy.rule
REPLACER -f "AudioFX MusicFX"
echo " #!$MIPSB/sh
SERVERPID=$(pidof audioserver)
[ \"\$SERVERPID\" ] && kill \$SERVERPID

sleep 1
[ -d $MIPSB/tinymix ] && alias tinymix=\"$MIPSB/tinymix\"
tinymix 'HiFi Filter' 1

(
sleep 1
tinymix 'HiFi Filter' 1
)&
sleep 1" > $MODPATH/$MODID/post-fs-data.sh
echo "#!$MIPSB/sh
(
sleep 1
killall -q audioserver
killall -q mediaserver
)&

sleep 1
[ -d $MIPSB/tinymix ] && alias tinymix=\"$MIPSB/tinymix\"
tinymix 'HiFi Filter' 1

(
sleep 1
tinymix 'HiFi Filter' 1
)&
sleep 1" > $MODPATH/$MODID/service.sh

if FINDER "$MPATHS"; then
UIP "Patching Needed Files..."
for OMIX in $MPATHS; do
UIP "Found $OMIX" "Patching..."
MIX="$MODPATH/$MODID$(echo $OMIX | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $MIX`
cp -f $MAGISKMIRROR$OMIX $MIX
sed -i 's/\t/  /g' $MIX
UIP "Files Found And Patched"
done
fi

if FINDER "$ACXML"; then
UIP "Patching Needed Files..."
for OACONF in $ACXML; do
UIP "Found $OACONF" "Patching..."
ACONF="$MODPATH/$MODID$(echo $OACONF | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $ACONF`
cp -f $MAGISKMIRROR$OACONF $ACONF
sed -i 's/\t/  /g' $ACONF
UIP "Files Found And Patched"
done
fi

if $STEP1; then PATCH_VOLUMES -aist; fi
if $STEP2; then
UIP "Start HARMANKARDON"
echo -e "\n#Harman Kardon Tweaks
ro.vendor.audio.sfx.scenario=true
ro.vendor.audio.scenario.support=true" >> $MODPATH/$MODID/system.prop
fi
if FINDER "$MPATHS"; then PATCH_MIXER -aist; fi
if FINDER "$APIIEXML"; then PATCH_AUDIO_PLATFORM_INFO; fi
if FINDER "$ACXML"; then PATCH_DEEP_BUFFER -aist; fi
if FINDER "$APCONFXML"; then
UIP "Patching Needed Files..."
for OAPCXM in $APCONFXML; do
case $OAPCXM in
*.xml) UIP "Found $OAPCXM" "Patching..."
APCXM="$MODPATH/$MODID$(echo $OAPCXM | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $APCXM`
cp -f $MAGISKMIRROR$OAPCXM $APCXM
sed -i 's/\t/  /g' $APCXM
sed -i '/speaker_drc_enabled=/d;s/^END$/speaker_drc_enabled="false"\nEND/g' $APCXM
UIP "Files Found And Patched";;
esac
done
fi

MOVERPATH
SET_PERM_RM -msgdi
}

IPSAQ() {
if $MAGISK && FINDER "$AIPCONF"; then
UCSA "Install System Audio Quality $VIPSAQ?" "" "$MSGNUS" "IPSAQS"
fi
}

IPSAQS() {
UIP "Installing System Audio Quality $IAMM"
MODID="$IDSAQ"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MMPR -vc "System audio quality 2" "$VIPSAQ" "$VCIPSAQ" "Ichigo Kywrosaki" "This module improves the sound quality of system sounds"
UIP "Patching Needed Files..."
for OFILE in $AIPCONF; do
UIP "Found $OFILE" "Patching..."
FILE="$MODPATH/$MODID$(echo $OFILE | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $FILE`
cp -f $MAGISKMIRROR$OFILE $FILE
sed -i '/default {/p;/default {/,/}/d;' $FILE
sed -i "s/^  default {/  default {\n    flags AUDIO_OUTPUT_FLAG_PRIMARY\n    formats AUDIO_FORMAT_PCM_16_BIT\n    sampling_rates 48000\n    bit_width 16\n    app_type 69936\n  }/" $FILE
UIP "Files Found And Patched"
done
SET_PERM_RM -msgdi
}

IPLIBW() {
UCSA "Use Lib Workaround (If You're Having Issues)?" "" "$MSGRI" "IPLIBWS"
}

IPLIBWS() {
UIP "Applying Lib Workaround"
if [ -f $IPSL/libstdc++.so ] && [ ! -f $IPVL/libstdc++.so ]; then
mkdir -p $MODPATH/$MODID$MIPSVL
cp -f $IPSL/libstdc++.so $MODPATH/$MODID$MIPSVL
elif [ ! -f $IPSL/libstdc++.so ] && [ -f $IPVL/libstdc++.so ]; then
mkdir -p $MODPATH/$MODID$MIPSL
cp -f $IPVL/libstdc++.so $MODPATH/$MODID$MIPSL
fi
}

IPIB() {
if FINDER "$MPXML"; then
UCSA "Install Increase Bitrate $VIPIBS?" "" "$MSGNUS" "IPIBS"
fi
}

IPIBS() {
UIP "Installing Increase Bitrate $IAMM"
if $MAGISK; then
MODID="$IDIBS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MMPR -v "Increase Bitrate" "$VIPIBS" "Increase Bitrate (320kbps) $MSGFMM"
fi
FPATCHER "$MPXML" "s/192000/320000/g"
UIP "$MSGDI"
}

IPUSBPP() {
if $LEGACYMODE && $MAGISK; then
if FINDER "$USBAPCXML" || FINDER "$APCONF"; then
UCSA "Install USB Policy Patcher $VIPUSBPP?" "" "$MSGNUS" "IPUSBPPS"
fi
fi
}

IPUSBPPS() {
UIP "Installing USB Policy Patcher $IAMM"
MAGISKMIRROR_CHECKER
MODID="$IDUSBPP"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MMPR -vcmm "USB Policy Patcher" "$VIPUSBPP" "$VCIPUSBPP" "zackptg5" "Patches USB audio policy so it'll work with apps like V4A" "1530"
echo "audio.deep_buffer.media=false" > $MODPATH/$MODID/system.prop
if FINDER "$USBAPCXML"; then
UIP "Patching Needed Files..."
for OFILE in $USBAPCXML; do
UIP "Found $OFILE" "Patching..."
FILE="$MODPATH/$MODID$(echo $OFILE | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $FILE`
cp -f $MAGISKMIRROR$OFILE $FILE
grep -iE " name=\"usb[ _]+.* output\"" $FILE | sed -r "s/.*ame=\"([A-Za-z_ ]*)\".*/\1/" | while read i; do
PUSBAPCXML -f $FILE "/module/mixPorts/mixPort[@name=\"$i\"]/profile[@name=\"\"]"
done
grep -iE "tagName=\"usb[ _]+.* out\"" $FILE | sed -r "s/.*ame=\"([A-Za-z_ ]*)\".*/\1/" | while read i; do
PUSBAPCXML -f $FILE "/module/devicePorts/devicePort[@tagName=\"$i\"]/profile[@name=\"\"]"
done
UIP "Files Found And Patched"
done
elif FINDER "$APCONF"; then
UIP "Patching Needed Files..."
for OFILE in $APCONF; do
UIP "Found $OFILE" "Patching..."
FILE="$MODPATH/$MODID$(echo $OFILE | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $FILE`
cp -f $MAGISKMIRROR$OFILE $FILE
SPACES=$(sed -n "/^ *usb {/p" $FILE | sed -r "s/^( *).*/\1/")
sed -i "/^$SPACES\usb {/,/^$SPACES}/ {/sampling_rates/p; s/\(^ *\)\(sampling_rates .*$\)/\1<!--$MODID\2$MODID-->/g;}" $FILE
sed -i "/^$SPACES\usb {/,/^$SPACES}/ s/\(^ *\)sampling_rates .*/\1sampling_rates 48000<!--$MODID-->/g" $FILE
UIP "Files Found And Patched"
done
fi
if FINDER "$USBAPCXML"; then
UIP "Patching Needed Files..."
for FILE in $USBAPCXML; do
UIP "Found $FILE" "Patching..."
grep -iE " name=\"usb[ _]+.* output\"" $FILE | sed -r "s/.*ame=\"([A-Za-z_ ]*)\".*/\1/" | while read i; do
PUSBAPCXML -l $FILE "/module/mixPorts/mixPort[@name=\"$i\"]/profile[@name=\"\"]"
done
grep -iE "tagName=\"usb[ _]+.* out\"" $FILE | sed -r "s/.*ame=\"([A-Za-z_ ]*)\".*/\1/" | while read i; do
PUSBAPCXML -l $FILE "/module/devicePorts/devicePort[@tagName=\"$i\"]/profile[@name=\"\"]"
done
UIP "Files Found And Patched"
done
elif FINDER "$APCONF"; then
UIP "Patching Needed Files..."
for FILE in $APCONF; do
UIP "Found $FILE" "Patching..."
SPACES=$(sed -n "/^ *usb {/p" $FILE | sed -r "s/^( *).*/\1/")
sed -i "/^$SPACES\usb {/,/^$SPACES}/ s/\(^ *\)sampling_rates .*/\1sampling_rates 48000/g" $FILE
UIP "Files Found And Patched"
done
fi
SET_PERM_RM -msgdi
}

IPACP() {
if $MAGISK; then
if FINDER "$APCONFXML" || FINDER "$USBAPCXML" || FINDER "$APCONF"; then
UCSA "Install Audio Compatibility Patch $VIPACP?" "" "$MSGNUS" "IPACPS"
fi
fi
}

IPACPS() {
UIP "Installing Audio Compatibility Patch $IAMM"
ACPNOTIF=false; ACPUSB=false; ACPPATCH=false
MODID="$IDACP"; REMOVER -mm "$MODID nhr upp"
mkdir -p "$MODPATH/$MODID"
MMPR -vcs "Audio Compatibility Patch" "$VIPACP" "$VCIPACP" "zackptg5, ahrion, John Fawkes" "Fixes music and streaming apps (Spotify, Pandora, etc) that aren't processing audio effects for various equalizer applications through the modification of audio policy USB Policy Patching and Notification_helper remover" "https://forum.xda-developers.com/apps/magisk/module-universal-deepbuffer-remover-t3577067"
if FINDER "$APCONFXML"; then
UIP -d "Patch Audio Policy?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
ACPPATCH=true
UIP "Patching Needed Files..."
for OFILE in $APCONFXML; do
UIP "Found $OFILE" "Patching..."
FILE="$MODPATH/$MODID$(echo $OFILE | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $FILE`
cp -f $MAGISKMIRROR$OFILE $FILE
case $FILE in
*.xml) sed -ri "/<mixPort name=\"(deep_buffer)|(low_latency)\"/,/<\/mixPort> *$/ s|flags=\"[^\"]*|flags=\"AUDIO_OUTPUT_FLAG_NONE|" $FILE
sed -i "/<mixPort name=\"raw\"/,/<\/mixPort> *$/ s|flags=\"[^\"]*|flags=\"AUDIO_OUTPUT_FLAG_FAST|" $FILE
sed -i "/<mixPort name=\"primary-out\"/,/<\/mixPort> *$/ s/|AUDIO_OUTPUT_FLAG_DEEP_BUFFER//g" $FILE;;
*.conf) sed -ri "/^ *(deep_buffer)|(low_latency) \{/,/}/ s|flags .*|flags AUDIO_OUTPUT_FLAG_NONE|" $FILE
sed -i "/^ *raw {/,/}/ s|flags .*|flags AUDIO_OUTPUT_FLAG_PRIMARY|" $FILE
sed -i "/^ *primary {/,/}/ s/|AUDIO_OUTPUT_FLAG_DEEP_BUFFER//g" $FILE;;
esac
UIP "Files Found And Patched"
done
fi
fi
UIP -d "Remove notification_helper?" "$MSGVU Remove notification_helper Effect" "$MSGVD Remove Volume Listener Library"
if $KEYFUNCTION; then
ACPNOTIF=true
UIP "Patching Needed Files..."
for OFILE in $AECONFXML; do
UIP "Found $OFILE" "Patching..."
FILE="$MODPATH/$MODID$(echo $OFILE | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $FILE`
cp -f $MAGISKMIRROR$OFILE $FILE
OSP_DETECT $FILE
UIP "Files Found And Patched"
done
else
mkdir -p $MODPATH/$MODID$MIPSVLS $MODPATH/$MODID$MIPSVLS64
touch $MODPATH/$MODID$MIPSVLS/libvolumelistener.so $MODPATH/$MODID$MIPSVLS64/libvolumelistener.so
fi
UIP -d "Patch USB Policy For USB Dacs?" "$MSGVU Yes" "$MSGVD No"
if $KEYFUNCTION; then
ACPUSB=true
if FINDER "$USBAPCXML"; then
UIP "Patching Needed Files..."
for OFILE in $USBAPCXML; do
UIP "Found $OFILE" "Patching..."
FILE="$MODPATH/$MODID$(echo $OFILE | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $FILE`
cp -f $MAGISKMIRROR$OFILE $FILE
grep -iE " name=\"usb[ _]+.* output\"" $FILE | sed -r "s/.*ame=\"([A-Za-z_ ]*)\".*/\1/" | while read i; do
PUSBAPCXML -l $FILE "/module/mixPorts/mixPort[@name=\"$i\"]/profile[@name=\"\"]"
done
grep -iE "tagName=\"usb[ _]+.* out\"" $FILE | sed -r "s/.*ame=\"([A-Za-z_ ]*)\".*/\1/" | while read i; do
PUSBAPCXML -l $FILE "/module/devicePorts/devicePort[@tagName=\"$i\"]/profile[@name=\"\"]"
done
UIP "Files Found And Patched"
done
elif FINDER "$APCONF"; then
UIP "Patching Needed Files..."
for OFILE in $APCONF; do
UIP "Found $OFILE" "Patching..."
FILE="$MODPATH/$MODID$(echo $OFILE | sed "s|^/vendor|$MIPSV|g")"
mkdir -p `dirname $FILE`
cp -f $MAGISKMIRROR$OFILE $FILE
SPACES=$(sed -n "/^ *usb {/p" $FILE | sed -r "s/^( *).*/\1/")
sed -i "/^$SPACES\usb {/,/^$SPACES}/ s/\(^ *\)sampling_rates .*/\1sampling_rates 48000/g" $FILE
UIP "Files Found And Patched"
done
fi
fi
LIBWORKAROUNDCHECK
cp -f $XMLSTARLET $MODPATH/$MODID
echo "#!$MIPSB/sh
MODPATH=\${0%/*}
XMLSTARLET=\$MODPATH/$XMLSTARLET

PUSBAPCXMLA() {
if [ \"\$(\$XMLSTARLET sel -t -m \"\$2\" -c . \$1)\" ]; then
[ \"\$(\$XMLSTARLET sel -t -m \"\$2\" -c . \$1 | sed -r \"s/.*samplingRates=\\\"([0-9]*)\\\".*/\1/\")\" == \"48000\" ] && return
\$XMLSTARLET ed -L -u \"\$2/@samplingRates\" -v \"48000\" \$1
else
local NP=\$(echo \"\$2\" | sed -r \"s|(^.*)/.*\$|\1|\")
local SNP=\$(echo \"\$2\" | sed -r \"s|(^.*)\[.*\$|\1|\")
local SN=\$(echo \"\$2\" | sed -r \"s|^.*/.*/(.*)\[.*\$|\1|\")
\$XMLSTARLET ed -L -s \"\$NP\" -t elem -n \"\$SN-\$MODPATH\" -i \"\$SNP-\$MODPATH\" -t attr -n \"name\" -v \"\" -i \"\$SNP-\$MODPATH\" -t attr -n \"format\" -v \"AUDIO_FORMAT_PCM_16_BIT\" -i \"\$SNP-\$MODPATH\" -t attr -n \"samplingRates\" -v \"48000\" -i \"\$SNP-\$MODPATH\" -t attr -n \"channelMasks\" -v \"AUDIO_CHANNEL_OUT_STEREO\" \$1
\$XMLSTARLET ed -L -r \"\$SNP-\$MODPATH\" -v \"\$SN\" \$1
fi
}

OSP_DETECT() {
case \$1 in
*.conf) local SPACES=\$(sed -n \"/^output_session_processing {/,/^}/ {/^ *music {/p}\" \$1 | sed -r \"s/( *).*/\1/\")
local EFFECTS=\$(sed -n \"/^output_session_processing {/,/^}/ {/^\$SPACES\music {/,/^\$SPACES}/p}\" \$1 | grep -E \"^\$SPACES +[A-Za-z]+\" | sed -r \"s/( *.*) .*/\1/g\")
for EFFECT in \$EFFECTS; do
local SPACES=\$(sed -n \"/^effects {/,/^}/ {/^ *\$EFFECT {/p}\" \$1 | sed -r \"s/( *).*/\1/\")
[ \"\$EFFECT\" != \"atmos\" ] && sed -i \"/^effects {/,/^}/ {/^\$SPACES\$EFFECT {/,/^\$SPACES}/ s/^/#/g}\" \$1
done;;
*.xml) local EFFECTS=\$(sed -n \"/^ *<postprocess>\$/,/^ *<\/postprocess>\$/ {/^ *<stream type=\\\"music\\\">\$/,/^ *<\/stream>\$/ {/<stream type=\\\"music\\\">/d; /<\/stream>/d; s/<apply effect=\\\"//g; s/\\\"\/>//g; p}}\" \$1)
for EFFECT in \$EFFECTS; do
[ \"\$EFFECT\" != \"atmos\" ] && sed -ri \"s/^( *)<apply effect=\\\"\$EFFECT\\\"\/>/\1<\!--<apply effect=\\\"\$EFFECT\\\"\/>-->/\" \$1
done;;
esac
}

if $ACPUSB && [ ! -z \"\$(find \$MODPATH/system -type f -name 'usb_audio_policy_configuration.xml')\" ]; then USBFILE=true; else USBFILE=false; fi
FILES=\$(find \$MODPATH/system -type f)

for FILE in \$FILES; do
case \$FILE in
*audio_effects*) $ACPNOTIF && OSP_DETECT \"notification\" \$FILE;;
*usb_audio_policy_configuration.xml) grep -iE \" name=\\\"usb[ _]+.* output\\\"\" \$FILE | sed -r \"s/.*ame=\\\"([A-Za-z_ ]*)\\\".*/\1/\" | while read i; do
PUSBAPCXMLA \$FILE \"/module/mixPorts/mixPort[@name=\\\"\$i\\\"]/profile[@name=\\\"\\\"]\"
done
grep -iE \"tagName=\\\"usb[ _]+.* out\\\"\" \$FILE | sed -r \"s/.*ame=\\\"([A-Za-z_ ]*)\\\".*/\1/\" | while read i; do
PUSBAPCXMLA \$FILE \"/module/devicePorts/devicePort[@tagName=\\\"\$i\\\"]/profile[@name=\\\"\\\"]\"
done;;
*audio_*policy*.xml) $ACPPATCH || continue
sed -ri \"/<mixPort name=\\\"(deep_buffer)|(low_latency)\\\"/,/<\/mixPort> *\$/ s|flags=\\\"[^\\\"]*|flags=\\\"AUDIO_OUTPUT_FLAG_NONE|\" \$FILE
sed -i \"/<mixPort name=\\\"raw\\\"/,/<\/mixPort> *\$/ s|flags=\\\"[^\\\"]*|flags=\\\"AUDIO_OUTPUT_FLAG_FAST|\" \$FILE
sed -i \"/<mixPort name=\\\"primary-out\\\"/,/<\/mixPort> *\$/ s/|AUDIO_OUTPUT_FLAG_DEEP_BUFFER//g\" \$FILE;;
*audio_*policy*.conf) if $ACPPATCH; then
sed -ri \"/^ *(deep_buffer)|(low_latency) \{/,/}/ s|flags .*|flags AUDIO_OUTPUT_FLAG_NONE|\" \$FILE
sed -i \"/^ *raw {/,/}/ s|flags .*|flags AUDIO_OUTPUT_FLAG_PRIMARY|\" \$FILE
sed -i \"/^ *primary {/,/}/ s/|AUDIO_OUTPUT_FLAG_DEEP_BUFFER//g\" \$FILE
fi
if $ACPUSB && ! \$USBFILE; then
SPACES=\$(sed -n \"/^ *usb {/p\" \$FILE | sed -r \"s/^( *).*/\1/\")
sed -i \"/^\$SPACES\usb {/,/^\$SPACES}/ s/\(^ *\)sampling_rates .*/\1sampling_rates 48000/g\" \$FILE
fi;;
esac
done" > $MODPATH/$MODID/service.sh
SET_PERM_RM -msgdi; WCANFTP -aml
}

IPAML() {
if $MAGISK; then
UCSA "Install Audio Modification Library $VIPAML?" "" "$MSGNUS" "IPAMLS"
fi
}

IPAMLS() {
UIP "Installing Audio Modification Library $IAMM"
MODID="$IDAML"; REMOVER -e-mm "$MODID" "system"
mkdir -p "$MODPATH/$MODID/.scripts"
MMPR -vcs "Audio Modification Library" "$VIPAML" "$VCIPAML" "zackptg5, ahrion" "AudModLib is a framework that allows the seamless integration of multiple audio mods in Magisk." "https://forum.xda-developers.com/apps/magisk/module-audio-modification-library-t3579612"
$ECHO "#!$MIPSB/sh
if [ -s $NVBASE/$MODID/modlist ]; then
while read mod; do
[ -d \"$MODPATH/\$mod\" ] || continue
for file in \$(find $NVBASE/$MODID/\$mod -type f 2>/dev/null | sed \"s|$NVBASE/$MODID/||\"); do
[ -f \"$MODPATH/\$file\" ] || cp -af $NVBASE/$MODID/\$file $MODPATH/\$file
done
done < $NVBASE/$MODID/modlist
fi
rm -rf $NVBASE/$MODID
[ -f \"$MODPATH/acdb/post-fs-data.sh.bak\" ] && mv -f $MODPATH/acdb/post-fs-data.sh.bak $MODPATH/acdb/post-fs-data.sh" > $MODPATH/$MODID/uninstall.sh
echo "[ -d \"/sbin/.magisk\" ] && MAGISKTMP=\"/sbin/.magisk\" || MAGISKTMP=\"\$(find /dev -mindepth 2 -maxdepth 2 -type d -name \".magisk\")\"
API=$ASDK

# Functions
set_perm() {
chown \$2:\$3 \$1 || return 1
chmod \$4 \$1 || return 1
CON=\$5
[ -z \$CON ] && CON=u:object_r:system_file:s0
chcon \$CON \$1 || return 1
}
set_perm_recursive() {
find \$1 -type d 2>/dev/null | while read dir; do
set_perm \$dir \$2 \$3 \$4 \$6
done
find \$1 -type f -o -type l 2>/dev/null | while read file; do
set_perm \$file \$2 \$3 \$5 \$6
done
}
cp_mv() {
mkdir -p \"\$(dirname \"\$3\")\"
cp -af \"\$2\" \"\$3\"
[ \"\$1\" == \"-m\" ] && rm -f \$2 || true
}
osp_detect() {
local spaces effects type=\"\$1\"
local files=\$(find $MODPATH/$MODID/system -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\")
for file in \$files; do
for osp in \$type; do
case \$file in
*.conf) spaces=\$(sed -n \"/^output_session_processing {/,/^}/ {/^ *\$osp {/p}\" \$file | sed -r \"s/( *).*/\1/\")
effects=\$(sed -n \"/^output_session_processing {/,/^}/ {/^\$spaces\\\$osp {/,/^\$spaces}/p}\" \$file | grep -E \"^\$spaces +[A-Za-z]+\" | sed -r \"s/( *.*) .*/\1/g\")
for effect in \${effects}; do
spaces=\$(sed -n \"/^effects {/,/^}/ {/^ *\$effect {/p}\" \$file | sed -r \"s/( *).*/\1/\")
[ \"\$effect\" != \"atmos\" -a \"\$effect\" != \"dtsaudio\" ] && sed -i \"/^effects {/,/^}/ {/^\$spaces\$effect {/,/^\$spaces}/d}\" \$file
done
;;
*.xml) effects=\$(sed -n \"/^ *<postprocess>\$/,/^ *<\/postprocess>\$/ {/^ *<stream type=\\\"\$osp\\\">\$/,/^ *<\/stream>\$/ {/<stream type=\\\"\$osp\\\">/d; /<\/stream>/d; s/<apply effect=\\\"//g; s/\\\"\/>//g; s/ *//g; p}}\" \$file)
for effect in \${effects}; do
[ \"\$effect\" != \"atmos\" -a \"\$effect\" != \"dtsaudio\" ] && sed -i \"/^\( *\)<apply effect=\\\"\$effect\\\"\/>/d\" \$file
done
;;
esac
done
done
return 0
}

# Debug
exec 2>$MODPATH/$MODID/debug-pfsd.log
set -x

# Restore and reset
. $MODPATH/$MODID/uninstall.sh
rm -rf $NVBASE/$MODID $MODPATH/$MODID/system $MODPATH/$MODID/errors.txt $MODPATH/$MODID/system.prop
[ -f \"$MODPATH/acdb/post-fs-data.sh\" ] && mv -f $MODPATH/acdb/post-fs-data.sh $MODPATH/acdb/post-fs-data.sh.bak
mkdir $NVBASE/$MODID
# Don't follow symlinks
files=\"\$(find \$MAGISKTMP/mirror/system_root/system \$MAGISKTMP/mirror/system \$MAGISKTMP/mirror/vendor -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\" -o -name \"*audio_*policy*.conf\" -o -name \"*audio_*policy*.xml\" -o -name \"*mixer_paths*.xml\" -o -name \"*mixer_gains*.xml\" -o -name \"*audio_device*.xml\" -o -name \"*sapa_feature*.xml\" -o -name \"*audio_platform_info*.xml\" -o -name \"*audio_configs*.xml\" -o -name \"*audio_device*.xml\")\"
for file in \$files; do
name=\$(echo \"\$file\" | sed -e \"s|\$MAGISKTMP/mirror||\" -e \"s|/system_root/|/|\" -e \"s|/system/|/|\")
cp_mv -c \$file $MODPATH/$MODID/system\$name
modfiles=\"/system\$name \$modfiles\"
done
osp_detect \"music\"

# Detect/move audio mod files
for mod in \$(find $MODPATH/* -maxdepth 0 -type d ! -name aml); do
modname=\"\$(basename \$mod)\"
[ -f \"\$mod/disable\" ] && continue
# Move files
files=\"\$(find \$mod/system -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\" -o -name \"*audio_*policy*.conf\" -o -name \"*audio_*policy*.xml\" -o -name \"*mixer_paths*.xml\" -o -name \"*mixer_gains*.xml\" -o -name \"*audio_device*.xml\" -o -name \"*sapa_feature*.xml\" -o -name \"*audio_platform_info*.xml\" -o -name \"*audio_configs*.xml\" -o -name \"*audio_device*.xml\" 2>/dev/null)\"
[ \"\$files\" ] && echo \"\$modname\" >> $NVBASE/$MODID/modlist || continue
for file in \$files; do
cp_mv -m \$file $NVBASE/$MODID/\$modname/\$(echo \"\$file\" | sed \"s|\$mod/||\")
done
# Chcon fix for Android Q+
[ \$API -ge 29 ] && chcon -R u:object_r:vendor_file:s0 \$mod$MIPSV/lib*/soundfx 2>/dev/null
done

# Remove unneeded files from aml
for file in \$modfiles; do
[ \"\$(find $NVBASE/$MODID -type f -path \"*\$file\")\" ] || rm -f $MODPATH/$MODID\$file
done

# Set perms and such
set_perm_recursive $MODPATH/$MODID/system 0 0 0755 0644
if [ -d $MODPATH/$MODID$MIPSV ]; then
set_perm_recursive $MODPATH/$MODID$MIPSV 0 0 0755 0644 u:object_r:vendor_file:s0
[ -d $MODPATH/$MODID$MIPSVE ] && set_perm_recursive $MODPATH/$MODID$MIPSVE 0 0 0755 0644 u:object_r:vendor_configs_file:s0
fi
exit 0" > $MODPATH/$MODID/post-fs-data.sh
$ECHO "# Variables
[ \"\$(magisk --path 2>/dev/null)\" ] && MAGISKTMP=\"\$(magisk --path 2>/dev/null)/.magisk\" || MAGISKTMP=\"/sbin/.magisk\"
API=$ASDK
[ \$API -ge 26 ] && libdir=\"/vendor\" || libdir=\"/system\"

# Functions
cp_mv() {
mkdir -p \"\$(dirname \"\$3\")\"
cp -af \"\$2\" \"\$3\"
[ \"\$1\" == \"-m\" ] && rm -f \$2 || true
}
osp_detect() {
local spaces effects type=\"\$1\"
local files=\$(find $MODPATH/$MODID/system -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\")
for file in \$files; do
for osp in \$type; do
case \$file in
*.conf) spaces=\$(sed -n \"/^output_session_processing {/,/^}/ {/^ *\$osp {/p}\" \$file | sed -r \"s/( *).*/\1/\")
effects=\$(sed -n \"/^output_session_processing {/,/^}/ {/^\$spaces\\\$osp {/,/^\$spaces}/p}\" \$file | grep -E \"^\$spaces +[A-Za-z]+\" | sed -r \"s/( *.*) .*/\1/g\")
for effect in \${effects}; do
spaces=\$(sed -n \"/^effects {/,/^}/ {/^ *\$effect {/p}\" \$file | sed -r \"s/( *).*/\1/\")
[ \"\$effect\" != \"atmos\" -a \"\$effect\" != \"dtsaudio\" ] && sed -i \"/^effects {/,/^}/ {/^\$spaces\$effect {/,/^\$spaces}/d}\" \$file
done
;;
*.xml) effects=\$(sed -n \"/^ *<postprocess>\$/,/^ *<\/postprocess>\$/ {/^ *<stream type=\\\"\$osp\\\">\$/,/^ *<\/stream>\$/ {/<stream type=\\\"\$osp\\\">/d; /<\/stream>/d; s/<apply effect=\\\"//g; s/\\\"\/>//g; s/ *//g; p}}\" \$file)
for effect in \${effects}; do
[ \"\$effect\" != \"atmos\" -a \"\$effect\" != \"dtsaudio\" ] && sed -i \"/^\( *\)<apply effect=\\\"\$effect\\\"\/>/d\" \$file
done
;;
esac
done
done
return 0
}
patch_cfgs() {
local first=true files=\"\" file lib=false effect=false outsp=false proxy=false replace=false libname libpath effname uid libname_sw uid_sw libname_hw uid_hw libpathsw libpathhw conf xml
local opt=\`getopt :fleoqpr \"\$@\"\`
eval set -- \"\$opt\"
while true; do
case \"\$1\" in
-f) files=\"placeholder\"; shift;;
-l) lib=true; first=false; shift;;
-e) effect=true; first=false; shift;;
-o) outsp=true; conf=output_session_processing; xml=postprocess; first=false; shift;;
-q) outsp=true; conf=pre_processing; xml=preprocess; first=false; shift;;
-p) proxy=true; effect=false; outsp=false; first=false; shift;;
-r) replace=true; shift;;
--) shift; break;;
*) return 1;;
esac
done
[ -z \"\$files\" ] && files=\$(find $MODPATH/$MODID/system -type f -name \"*audio_effects*.conf\" -o -name \"*audio_effects*.xml\") || { files=\"\$1\"; shift; }
\$first && { lib=true; effect=true; }
if \$proxy; then
effname=\$1; uid=\${2:?}; shift 2
libname_sw=\$1; uid_sw=\${2:?}; shift 2
\$lib && { libpathsw=\$1; shift; }
libname_hw=\$1; uid_hw=\${2:?}; shift 2
\$lib && { libpathhw=\${1:?}; shift; }
else
\$outsp && { type=\${1:?}; shift; }
{ \$effect || \$outsp; } && { effname=\${1:?}; shift; }
\$effect && { uid=\${1:?}; shift; }
{ \$lib || \$effect; } && { libname=\${1:?}; shift; }
\$lib && { libpath=\${1:?}; shift; }
fi
for file in \$files; do
case \"\$file\" in
*.conf)
if \$proxy; then
if \$replace && [ \"\$(sed -n \"/^effects {/,/^}/ {/^  \$effname {/,/^  }/p}\" \$file)\" ]; then
spaces=\$(sed -n \"/^effects {/,/^}/ {/^ *\$effname {/p}\" \$file | sed -r \"s/( *).*/\1/\")
sed -i \"/^effects {/,/^}/ {/^\$spaces\$effname {/,/^\$spaces}/d}\" \$file
fi
[ ! \"\$(sed -n \"/^effects {/,/^}/ {/^  \$effname {/,/^  }/p}\" \$file)\" ] && sed -i \"s/^effects {/effects {\n  \$effname {\n    library proxy\n    uuid \$uid\n\n    libsw {\n      library \$libname_sw\n      uuid \$uid_sw\n    }\n\n    libhw {\n      library \$libname_hw\n      uuid \$uid_hw\n    }\n  }/g\" \$file
if \$lib; then
patch_cfgs -fl \"\$file\" \"proxy\" \"\$libdir/lib/soundfx/libeffectproxy.so\"
if \$replace; then
patch_cfgs -frl \"\$file\" \"\$libname_sw\" \"\$libpathsw\"
patch_cfgs -frl \"\$file\" \"\$libname_hw\" \"\$libpathhw\"
else
patch_cfgs -fl \"\$file\" \"\$libname_sw\" \"\$libpathsw\"
patch_cfgs -fl \"\$file\" \"\$libname_hw\" \"\$libpathhw\"
fi
fi
else
if \$lib; then
if \$replace && [ \"\$(sed -n \"/^libraries {/,/^}/ {/^ *\$libname {/,/}/p}\" \$file)\" ]; then
spaces=\$(sed -n \"/^libraries {/,/^}/ {/^ *\$libname {/p}\" \$file | sed -r \"s/( *).*/\1/\")
sed -i \"/^libraries {/,/^}/ {/^\$spaces\$libname {/,/^\$spaces}/d}\" \$file
fi
[ ! \"\$(sed -n \"/^libraries {/,/^}/ {/^ *\$libname {/,/}/p}\" \$file)\" ] && sed -i \"s|^libraries {|libraries {\n  \$libname {\n    path \$libpath\n  }|\" \$file
fi
if \$effect; then
if \$replace && [ \"\$(sed -n \"/^effects {/,/^}/ {/^ *\$effname {/,/}/p}\" \$file)\" ]; then
spaces=\$(sed -n \"/^effects {/,/^}/ {/^ *\$effname {/p}\" \$file | sed -r \"s/( *).*/\1/\")
sed -i \"/^effects {/,/^}/ {/^\$spaces\$effname {/,/^\$spaces}/d}\" \$file
fi
[ ! \"\$(sed -n \"/^effects {/,/^}/ {/^ *\$effname {/,/}/p}\" \$file)\" ] && sed -i \"s|^effects {|effects {\n  \$effname {\n    library \$libname\n    uuid \$uid\n  }|\" \$file
fi
if \$outsp && [ \"\$API\" -ge 26 ]; then
local OIFS=\$IFS; local IFS=','
for i in \$type; do
if [ ! \"\$(sed -n \"/^\$conf {/,/^}/p\" \$file)\" ]; then
echo -e \"\n\$conf {\n    \$i {\n        \$effname {\n        }\n    }\n}\" >> \$file
elif [ ! \"\$(sed -n \"/^\$conf {/,/^}/ {/\$i {/,/^    }/p}\" \$file)\" ]; then
sed -i \"/^\$conf {/,/^}/ s/\$conf {/\$conf {\n    \$i {\n        \$effname {\n        }\n    }/\" \$file
elif [ ! \"\$(sed -n \"/^\$conf {/,/^}/ {/\$i {/,/^    }/ {/\$effname {/,/}/p}}\" \$file)\" ]; then
sed -i \"/^\$conf {/,/^}/ {/\$i {/,/^    }/ s/\$i {/\$i {\n        \$effname {\n        }/}\" \$file
fi
done
local IFS=\$OIFS
fi
fi
;;
*.xml)
if \$proxy; then
if \$replace && [ \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\"\$effname\".*>/,/^ *<\/effectProxy>/p}\" \$file)\" -o \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*\/>/p}\" \$file)\" ]; then
sed -i \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\"\$effname\".*>/,/^ *<\/effectProxy>/d}\" \$file
sed -i \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*\/>/d}\" \$file
fi
[ ! \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\"\$effname\".*>/,/^ *<\/effectProxy>/p}\" \$file)\" -a ! \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*>/,/^ *\/>/p}\" \$file)\" ] && sed -i -e \"/<effects>/ a\        <effectProxy name=\"\$effname\" library=\"proxy\" uuid=\"\$uid\">\n            <libsw library=\"\$libname_sw\" uuid=\"\$uid_sw\"\/>\n            <libhw library=\"\$libname_hw\" uuid=\"\$uid_hw\"\/>\n        <\/effectProxy>\" \$file
if \$lib; then
patch_cfgs -fl \"\$file\" \"proxy\" \"\$libdir/lib/soundfx/libeffectproxy.so\"
if \$replace; then
patch_cfgs -frl \"\$file\" \"\$libname_sw\" \"\$libpathsw\"
patch_cfgs -frl \"\$file\" \"\$libname_hw\" \"\$libpathhw\"
else
patch_cfgs -fl \"\$file\" \"\$libname_sw\" \"\$libpathsw\"
patch_cfgs -fl \"\$file\" \"\$libname_hw\" \"\$libpathhw\"
fi
fi
else
if \$lib; then
if \$replace && [ \"\$(sed -n \"/<libraries>/,/<\/libraries>/ {/^ *<library name=\"\$libname\" path=\"\$(basename \$libpath)\"\/>/p}\" \$file)\" ]; then
sed -i \"/<libraries>/,/<\/libraries>/ {/^ *<library name=\"\$libname\" path=\"\$(basename \$libpath)\"\/>/d}\" \$file
fi
[ ! \"\$(sed -n \"/<libraries>/,/<\/libraries>/ {/^ *<library name=\"\$libname\" path=\"\$(basename \$libpath)\"\/>/p}\" \$file)\" ] && sed -i \"/<libraries>/ a\        <library name=\"\$libname\" path=\"\$(basename \$libpath)\"\/>\" \$file
fi
if \$effect; then
if \$replace && [ \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*\/>/p}\" \$file)\" -o \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\"\$effname\".*>/,/^ *<\/effectProxy>/p}\" \$file)\" ]; then
sed -i \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*\/>/d}\" \$file
sed -i \"/<effects>/,/<\/effects>/ {/^ *<effectProxy name=\"\$effname\".*>/,/^ *<\/effectProxy>/d}\" \$file
fi
[ ! \"\$(sed -n \"/<effects>/,/<\/effects>/ {/^ *<effect name=\"\$effname\".*\/>/p}\" \$file)\" ] && sed -i \"/<effects>/ a\        <effect name=\"\$effname\" library=\"\$(basename \$libname)\" uuid=\"\$uid\"\/>\" \$file
fi
if \$outsp && [ \"\$API\" -ge 26 ]; then
local OIFS=\$IFS; local IFS=','
for i in \$type; do
if [ ! \"\$(sed -n \"/^ *<\$xml>/,/^ *<\/\$xml>/p\" \$file)\" ]; then
sed -i \"/<\/audio_effects_conf>/i\    <\$xml>\n       <stream type=\"\$type\">\n            <apply effect=\"\$effname\"\/>\n        <\/stream>\n    <\/\$xml>\" \$file
elif [ ! \"\$(sed -n \"/^ *<\$xml>/,/^ *<\/\$xml>/ {/<stream type=\"\$type\">/,/<\/stream>/p}\" \$file)\" ]; then
sed -i \"/^ *<\$xml>/,/^ *<\/\$xml>/ s/    <\$xml>/    <\$xml>\n        <stream type=\"\$type\">\n            <apply effect=\"\$effname\"\/>\n        <\/stream>/\" \$file
elif [ ! \"\$(sed -n \"/^ *<\$xml>/,/^ *<\/\$xml>/ {/<stream type=\"\$type\">/,/<\/stream>/ {/^ *<apply effect=\"\$effname\"\/>/p}}\" \$file)\" ]; then
sed -i \"/^ *<\$xml>/,/^ *<\/\$xml>/ {/<stream type=\"\$type\">/,/<\/stream>/ s/<stream type=\"\$type\">/<stream type=\"\$type\">\n            <apply effect=\"\$effname\"\/>/}\" \$file
fi
done
local IFS=\$OIFS
fi
fi
;;
esac
done
return 0
}
legacy_script() {
local RUNONCE=false COUNT=1 LIBDIR=\$libdir/lib/soundfx MOD=\$mod
(. \$mod/.aml.sh) || echo \"Error in \$modname aml.sh script\" >> $MODPATH/$MODID/errors.txt
for file in \$files; do
local NAME=\$(echo \"\$file\" | sed \"s|\$mod|system|\")
\$RUNONCE || { case \$file in
*audio_effects*) (. \$mod/.aml.sh) || [ \"\$(grep -x \"\$modname\" $MODPATH/$MODID/errors.txt)\" ] || echo \"Error in \$modname aml.sh script\" >> $MODPATH/$MODID/errors.txt; COUNT=\$((\$COUNT + 1));;
esac; }
done
}

(
# Debug
exec 2>$MODPATH/$MODID/debug.log
set -x

# Detect/install audio mods
for mod in \$(find $MODPATH/* -maxdepth 0 -type d ! -name aml); do
modname=\"\$(basename \$mod)\"
[ -f \"\$mod/disable\" ] && continue
[ -f \"\$mod/aml.sh\" ] && cp -f \$mod/aml.sh \$mod/.aml.sh
# .aml.sh file should take precedence
if [ -f \"\$mod/.aml.sh\" ]; then
grep -qx \"\$modname\" $NVBASE/$MODID/modlist || echo \"\$modname\" >> $NVBASE/$MODID/modlist
if grep -qE '$MODPATH/$MODID/\\$NAME|RUNONCE=|COUNT=' \$mod/.aml.sh; then
legacy_script
else
(. \$mod/.aml.sh) || echo \"Error in \$modname aml.sh script\" >> $MODPATH/$MODID/errors.txt
fi
else
# Favor vendor libs over system ones, no aml builtins are 64bit only - use 32bit lib dir
libs=\"\$(find \$mod$MIPSV/lib/soundfx \$mod$MIPSLS -type f -name \"libam3daudioenhancement.so\" -o -name \"libarkamys.so\" -o -name \"libatmos.so\" -o -name \"libbassboostMz.so\" -o -name \"libdirac.so\" -o -name \"libdirac.so\" -o -name \"libdseffect.so\" -o -name \"libdtsaudio.so\" -o -name \"libhwdap.so\" -o -name \"libhwdax.so\" -o -name \"libicepower.so\" -o -name \"libjamesdsp.so\" -o -name \"libmaxxeffect-cembedded.so\" -o -name \"libsonysweffect.so\" -o -name \"libswdap.so\" -o -name \"libswdap_ds1se.so\" -o -name \"libswdax.so\" -o -name \"libswvlldp.so\" -o -name \"libv4a_fx.so\" -o -name \"libv4a_fx_ics.so\" -o -name \"libv4a_xhifi_ics.so\" 2>/dev/null)\"
for lib in \$libs; do
for audmod in $MODPATH/$MODID/.scripts/\$(basename \$lib)~*; do
uuid=\$(basename \$audmod | sed -r \"s/.*~(.*).sh/\1/\")
hexuuid=\"\$(echo \$uuid | sed -r -e \"s/^(..)(..)(..)(..)-(..)(..)-(..)(..)-/\4\3\2\1\6\5\8\7-/\" -e \"s/-(..)(..)-(............)\$/\2\1\3/\")\"
xxd -p \$lib | tr -d '\n' | grep -q \"\$hexuuid\" || continue
\$(grep -xq \"\$modname\" $NVBASE/$MODID/modlist 2>/dev/null) || echo \"\$modname\" >> $NVBASE/$MODID/modlist
libfile=\"\$(echo \$lib | sed -e \"s|\$mod||\" -e \"s|$MIPSV|/vendor|\")\"
. \$audmod
done
done
fi
done

# Reload patched files - original mounted files are seemingly deleted and replaced by sed
for i in \$(find $MODPATH/$MODID/system -type f); do
j=\"\$(echo \$i | sed \"s|$MODPATH/$MODID||\")\"
umount \$j
mount -o bind \$i \$j
done
[ \$API -ge 24 ] && killall audioserver 2>/dev/null || killall mediaserver 2>/dev/null
exit 0
)&" > $MODPATH/$MODID/service.sh
echo "#libam3daudioenhancement.so~6723dd80-f0b7-11e0-98a2-0002a5d5c51b
patch_cfgs am3daudioenhancement 6723dd80-f0b7-11e0-98a2-0002a5d5c51b am3daudioenhancement \$libfile
#libv4a_fx.so~41d3c987-e6cf-11e3-a88a-11aba5d5c51b
patch_cfgs v4a_standard_fx 41d3c987-e6cf-11e3-a88a-11aba5d5c51b v4a_fx \$libfile
#libv4a_fx_ics.so~41d3c987-e6cf-11e3-a88a-11aba5d5c51b
patch_cfgs v4a_standard_fx 41d3c987-e6cf-11e3-a88a-11aba5d5c51b v4a_fx \$libfile
#libv4a_xhifi_ics.so~d92c3a90-3e26-11e2-a25f-0800200c9a66
patch_cfgs v4a_standard_xhifi d92c3a90-3e26-11e2-a25f-0800200c9a66 v4a_xhifi \$libfile
#libhwdax.so~9d4921da-8225-4f29-aefa-6e6f69726861
patch_cfgs -pl dax 9d4921da-8225-4f29-aefa-6e6f69726861 dax_sw 6ab06da4-c516-4611-8166-6168726e6f69 \$(dirname \$libfile)/libswdax.so dax_hw a0c30891-8246-4aef-b8ad-696f6e726861 \$libfile
#libswdax.so~9d4921da-8225-4f29-aefa-6e6f69726861
patch_cfgs dax 9d4921da-8225-4f29-aefa-6e6f69726861 dax \$libfile
#libswdap.so~9d4921da-8225-4f29-aefa-39537a04bcaa
patch_cfgs dap 9d4921da-8225-4f29-aefa-39537a04bcaa dap \$libfile
#libhwdap.so~a0c30891-8246-4aef-b8ad-d53e26da0253
patch_cfgs -pl dap 9d4921da-8225-4f29-aefa-6e6f69726861 dap_sw 6ab06da4-c516-4611-8166-452799218539 \$(dirname \$libfile)/libswdap.so dap_hw a0c30891-8246-4aef-b8ad-d53e26da0253 \$libfile
#libdseffect.so~9d4921da-8225-4f29-aefa-39537a04bcaa
patch_cfgs dsplus 9d4921da-8225-4f29-aefa-39537a04bcaa ds \$libfile
#libswvlldp.so~3783c334-d3a0-4d13-874f-0032e5fb80e2
patch_cfgs vlldp 3783c334-d3a0-4d13-874f-0032e5fb80e2 vlldp \$libfile
patch_cfgs -ole music atmos 9d4921da-8225-4f29-aefa-aacb40a73593 atmos \$(dirname \$libfile)/libatmos.so
#libicepower.so~f1c02420-777f-11e3-981f-0800200c9a66
patch_cfgs -l icepower \$libfile
patch_cfgs -e icepower_algo f1c02420-777f-11e3-981f-0800200c9a66 icepower
patch_cfgs -e icepower_eq 50dbef80-4ad4-11e3-8f96-0800200c9a66 icepower
patch_cfgs -e icepower_test e5456320-5391-11e3-8f96-0800200c9a66 icepower
patch_cfgs -e icepower_load bf51a790-512b-11e3-8f96-0800200c9a66 icepower
patch_cfgs -e icepower_null 63509430-52aa-11e3-8f96-0800200c9a66 icepower
#libarkamys.so~17852d50-161e-11e2-892e-0800200c9a66
patch_cfgs -ole music Arkamysfx 17852d50-161e-11e2-892e-0800200c9a66 arkamys \$libfile
#libdirac.so~4c6383e0-ff7d-11e0-b6d8-0002a5d5c51b
patch_cfgs dirac 4c6383e0-ff7d-11e0-b6d8-0002a5d5c51b dirac \$libfile
patch_cfgs -e dirac_controller b437f4de-da28-449b-9673-667f8b9643fe dirac
patch_cfgs -e dirac_music b437f4de-da28-449b-9673-667f8b964304 dirac
#libdirac.so~e069d9e0-8329-11df-9168-0002a5d5c51b
patch_cfgs -ole music dirac e069d9e0-8329-11df-9168-0002a5d5c51b dirac \$libfile
#libjamesdsp.so~f27317f4-c984-4de6-9a90-545759495bf2
patch_cfgs jamesdsp f27317f4-c984-4de6-9a90-545759495bf2 jdsp \$libfile
#libmaxxeffect-cembedded.so~ae12da60-99ac-11df-b456-0002a5d5c51b
patch_cfgs -ole music maxxaudio3 ae12da60-99ac-11df-b456-0002a5d5c51b maxxaudio3 \$libfile
#libbassboostMz.so~850b6319-bf66-4f93-bec0-dc6964367786
patch_cfgs bassboostMz 850b6319-bf66-4f93-bec0-dc6964367786 bassboostMz \$libfile
patch_cfgs virtualizerMz 0e9779c9-4e8f-494d-b2b1-b4ad4e37c54c virtualizerMz \$(dirname \$libfile)/libvirtualizerMz.so
patch_cfgs livemusicMz 0bbc89fe-52dc-4c40-8211-cae4da538b50 livemusicMz \$(dirname \$libfile)/liblivemusicMz.so
patch_cfgs equalizerMz 9626da93-9c71-4bb2-8e23-9fc707fb9703 equalizerMz \$(dirname \$libfile)/ibequalizerMz.so
#libsonysweffect.so~50786e95-da76-4557-976b-7981bdf6feb9
patch_cfgs -qle mic,camcorder ZNR b8a031e0-6bbf-11e5-b9ef-0002a5d5c51b znrwrapper \$(dirname \$libfile)/libznrwrapper.so
patch_cfgs -pl sonyeffect af8da7e0-2ca1-11e3-b71d-0002a5d5c51b sonyeffect_sw 50786e95-da76-4557-976b-7981bdf6feb9 \$libfile sonyeffect_hw f9ed8ae0-1b9c-11e4-8900-0002a5d5c51b \$(dirname \$libfile)/libsonypostprocbundle.so
#libatmos.so~74697567-7261-6564-6864-65726f206678
patch_cfgs dolbyatmos 74697567-7261-6564-6864-65726f206678 dolbyatmos \$libfile
osp_detect \"alarm notification ring\"
#libswdap_ds1se.so~74697567-7261-6564-6864-65726f206678
patch_cfgs dolbyatmos 74697567-7261-6564-6864-65726f206678 dolbyatmos \$libfile
osp_detect \"alarm notification ring\"
#libdtsaudio.so~146edfc0-7ed2-11e4-80eb-0002a5d5c51b
patch_cfgs -ole music dtsaudio 146edfc0-7ed2-11e4-80eb-0002a5d5c51b dtsaudio \$libfile
#end" > $MODPATH/$MODID/AudioModificationLibrary.sh
sed -i -e 's/\\/\\\\/g' -e 's/\ /\\ /g' $MODPATH/$MODID/AudioModificationLibrary.sh
while read AMLLINE; do
case $AMLLINE in
\#*) if [ "$AMLUUID" ]; then echo " " >> $MODPATH/$MODID/.scripts/$AMLUUID.sh; fi; AMLUUID=$(echo "$AMLLINE" | sed "s/#//");;
*) echo "$AMLLINE" >> $MODPATH/$MODID/.scripts/$AMLUUID.sh;;
esac
done < $MODPATH/$MODID/AudioModificationLibrary.sh
rm -f $MODPATH/$MODID/AudioModificationLibrary.sh
for i in $MODPATH/$MODID/.scripts/*; do
AMLLIBS="$AMLLIBS-name \"$(basename $i | sed "s/~.*//")\" "
done
AMLLIBS="$(echo $AMLLIBS | sed "s/\" /\" -o /g")"
sed -i -e "s|<libs>|$AMLLIBS|" $MODPATH/$MODID/service.sh
cp -f $MODPATH/$MODID/uninstall.sh $SERVICED/aml.sh; chmod 0755 $SERVICED/aml.sh
sed -i "3a[ -d \"$MODPATH/$MODID\" ] && exit 0" $SERVICED/aml.sh
echo 'rm -f $0' >> $SERVICED/aml.sh
SET_PERM_RM -msgdi
}

} #

{ #Removal: RSL/RSO/RSTA/RWFSB

RPASSF() {
if [ $BOOTMODE != true ] && [ -d $IPDS ]; then
UCSA "Reset Screen Lock?" "" "$MSGNUS" "RPASSFS"
fi
}

RPASSFS() {
UIP "Remove Password Files"
rm -f $IPDS/gatekeeper*.key $IPDS/locksettings* $IPDS/password.key $IPDS/gesture.key
UIP "$MSGDRM"
}

RSWIFTO() {
if [ $BOOTMODE != true ] && [ -d $MODPATH/swift_installer ]; then
UCSA "Remove All Swift Installer Overlays?" "" "$MSGNUS" "RSWIFTOS"
fi
}

RSWIFTOS() {
MODID="swift_installer"
UIP "Swift Installer Overlays Remover"
[ -d "$STORAGE/.swift" ] && UIP "Removing Temporary Overlays Folder"; rm -rf $STORAGE/.swift
UIP "Removing Overlays From $IPSA"
for overlay in $(ls $IPSA | grep .swiftinstaller.overlay); do
rm -rf $IPSA/$overlay
done
UIP "Removing Overlays From $MODPATH/$MODID$MIPSA"
for overlay in $(ls $MODPATH/$MODID$MIPSA | grep .swiftinstaller.overlay); do
rm -rf $MODPATH/$MODID$MIPSA/$overlay
done
UIP "Clear Cache In $IPDRESC"
rm -rf $IPDRESC/*swiftinstaller.overlay*
UIP "Removing Overlays Saved State"
rm -rf $IPDS/overlays.xml
UIP "$MSGDRM"
}

GTRRRM() {
UCSA "Go To Remove/Replace/Restore Mode?" "$MSGEFTC" "$MSGNUS" "GTRRRMS"
}

GTRRRMS() {
DWSGTRRRM=false; RWSGTRRRM=false; RMTSAV=false; CAILIST=false
if [ -f $AIOPFMDPH/Replace.txt ] && [ $BOOTMODE != true ]; then
UIP -d "Found Replace apk, Restote?" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
REPLACELIST=$(cat $AIOPFMDPH/Replace.txt)
UIP -d "Choose Variant:" "$MSGVU Restore Every App With Confirm" "$MSGVD Restore Every App Without Confirm"
if $KEYFUNCTION; then
RWSGTRRRM=true
fi
for FINDTRASH in $REPLACELIST; do
for NAMEPATHDELLTRASH in "$IPSA" "$IPSPA" "$IPSSPA" "$IPSSPPA" "$IPSSEA" "$IPSSEPA"; do
if [ -d $NAMEPATHDELLTRASH/$FINDTRASH ]; then
if $RWSGTRRRM; then
UCSA "Found ($FINDTRASH)" "Restore?" "Next $MSGNUS" "GTRRRMSAAA"
else
UIP "Found ($FINDTRASH)"
GTRRRMSAAA
fi
fi
done
done
fi
fi
if $BOOTMODE; then
RMTSAV=true
else
UIP -d "Choose Variant:" "$MSGVU Replace All Find Apps" "$MSGVD Remove All Find Apps"
if $KEYFUNCTION; then
RMTSAV=true
fi
fi
if $RMTSAV; then
UIP -d "Choose Variant:" "$MSGVU Replace Every App Found With Confirm" "$MSGVD Replace Every App Found Without Confirm"
else
UIP -d "Choose Variant:" "$MSGVU Remove Every App Found With Confirm" "$MSGVD Remove Every App Found Without Confirm"
fi
if $KEYFUNCTION; then
RMLISTCHOICECONFIRMATION=true
else
RMLISTCHOICECONFIRMATION=false
DWSGTRRRM=true
fi
if [ -f $STORAGE/APPRMLIST.sh ]; then
UIP -d "Choose Variant:" "$MSGVU Use APPRMLIST.sh & Patch List" "$MSGVD Use Only APPRMLIST.sh"
if $KEYFUNCTION; then
RMLISTCHOICEVARIANT=true
else
RMLISTCHOICEVARIANT=false
fi
RMLIST=$(cat $STORAGE/APPRMLIST.sh)
REMOVETRASHNAME="$RMLIST"
UIP "Search App, Please Wait..."
GTRRRMSA
UIP "Other App Not Found"
sleep 3
DWSGTRRRM=false
fi
if $RMLISTCHOICEVARIANT; then
if [ -f $AIOPFMDPH/AIL.txt ]; then
UIP -d "Found $AIOPFMDPH/AIL.txt" "$MSGVU Use AIL.txt List" "$MSGVD No, Next List $MSGNUS"
if $KEYFUNCTION; then
CAILIST=true
AILIST=$(cat $AIOPFMDPH/AIL.txt)
REMOVETRASHNAME="$AILIST"
UIP "Search App, Please Wait..."
GTRRRMSA
UIP "Other App Not Found"
sleep 3
fi
fi
UIP -d "Choose Variant:" "$MSGVU Use Stock List" "$MSGVD No, Next List $MSGNUS"
if $KEYFUNCTION; then
UIP "Search App, Please Wait..."
if [ $MIUI != true ] || $RMLISTCHOICECONFIRMATION; then
REMOVETRASHNAME="$STOCKLISTNOMIUI"
GTRRRMSA
fi
REMOVETRASHNAME="$STOCKLIST"
GTRRRMSA
UIP "Other App Not Found"
sleep 3
fi
UIP -d "Choose Variant:" "$MSGVU Use Experimental List" "$MSGVD No, Next List $MSGNUS"
if $KEYFUNCTION; then
RMLISTCHOICECONFIRMATION=true
REMOVETRASHNAME="$EXPERIMENTALLIST"
UIP "Search App, Please Wait..."
GTRRRMSA
UIP "Other App Not Found"
sleep 3
fi
if [ $MIUI != true ]; then
UIP -d "Choose Variant:" "$MSGVU Use Launchers List" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
RMLISTCHOICECONFIRMATION=true
REMOVETRASHNAME="$LAUNCHERLIST"
UIP "Search App, Please Wait..."
GTRRRMSA
UIP "Other App Not Found"
sleep 3
fi
fi
fi
}

GTRRRMSA() {
for FINDTRASH in $REMOVETRASHNAME; do
for NAMEPATHDELLTRASH in "$IPSA" "$IPSPA" "$IPSSPA" "$IPSSPPA" "$IPSSEA" "$IPSSEPA" "$IPVA" "$IPVPA"; do
if [ -d $NAMEPATHDELLTRASH/$FINDTRASH ] && [ ! -f $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.replace ]; then
if $DWSGTRRRM; then
UIP "Found ($FINDTRASH)"
GTRRRMSAA
else
if $RMTSAV; then
UCSA "Found ($FINDTRASH)" "Replace" "Next Search $MSGNUS" "GTRRRMSAA"
else
UCSA "Found ($FINDTRASH)" "Remove" "Next Search $MSGNUS" "GTRRRMSAA"
fi
fi
break
UIP "Other Search App, Please Wait..."
fi
done
done
}

GTRRRMSAA() {
if $RMTSAV; then
if $MAGISK; then
MODID="RTSA"; REPLACER "$NAMEPATHDELLTRASH/$FINDTRASH"; MOVERPATH
MMPR -v "Replace Trash System App" "$VAIOPFMD" "Replace Trash System App $MSGFMM"
UIP "$MSGDRP"
else
mv $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.apk $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.replace
echo "$FINDTRASH" >> $AIOPFMDPH/Replace.txt
UIP "$MSGDRP"
fi
else
rm -rf $NAMEPATHDELLTRASH/$FINDTRASH; UIP "$MSGDRM"
if $CAILIST; then sed -i "/$FINDTRASH/d" $AIOPFMDPH/AIL.txt; if [ ! -s $AIOPFMDPH/AIL.txt ]; then rm -f $AIOPFMDPH/AIL.txt; fi; fi
fi
}

GTRRRMSAAA() {
sed -i "/$FINDTRASH/d" $AIOPFMDPH/Replace.txt
mv $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.replace $NAMEPATHDELLTRASH/$FINDTRASH/$FINDTRASH.apk
if [ ! -s $AIOPFMDPH/Replace.txt ]; then rm -f $AIOPFMDPH/Replace.txt; fi
UIP "$MSGDRS"
}

GTRMFL() {
if [ $BOOTMODE != true ] && [ -f $STORAGE/FILERMLIST.sh ]; then
UCSA "Found FILERMLIST.sh Remove All Files?" "" "$MSGNUS" "GTRMFLS"
fi
}

GTRMFLS() {
FILERMLIST=$(cat $STORAGE/FILERMLIST.sh)
for f in $FILERMLIST; do
if [ -e $SYSTEM/$f ]; then
UIP "Found $SYSTEM/$f"
rm -rf $SYSTEM/$f
elif [ -e $VENDOR/$f ]; then
UIP "Found $VENDOR/$f"
rm -rf $VENDOR/$f
fi
done
}

RWFS() {
if [ $BOOTMODE != true ]; then
if [ -f $IPDSU/0/wallpaper ] || [ -f $IPDSU/0/wallpaper_orig ]; then
UCSA "Remove Wallpaper (Fix Softloop)?" "" "$MSGNUS" "RWFSS"
fi
fi
}

RWFSS() {
UIP "Remove Wallpaper"
rm -f $IPDSU/0/wallpaper*
UIP "$MSGDRM"
}

RRTPXML() {
if [ $BOOTMODE != true ] && [ -f $IPDMDE/0/apexdata/com.android.permission/runtime-permissions.xml ]; then
UCSA "Remove runtime-permissions.xml (If UI Softloop)?" "" "$MSGNUS" "RRTPXMLS"
fi
}

RRTPXMLS() {
UIP "Removing runtime-permissions.xml"
rm -f $IPDMDE/0/apexdata/com.android.permission/runtime-permissions.xml
UIP "$MSGDRM"
}

RAPEXA() {
if [ $BOOTMODE != true ] && [ -d /data/apex/active ]; then
UCSA "Remove Apex Active (If Logoloop)?" "" "$MSGNUS" "RAPEXAS"
fi
}

RAPEXAS() {
UIP "Removing Apex Active"
rm -rf /data/apex/active
UIP "$MSGDRM"
}

} #

{ #Test/Coming Soon

APKSignOC() {
APKSIGN=false
if $BOOTMODE; then
UIP -d "Cum Here?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
APKSIGN=true; UIP "Why Do You Cum Here?"
else
UIP "Man..."
fi
fi
}

RoundedUIC() {
UCSA "Rounded UI Compile" "" "$MSGNUS" "RoundedUICS"
}

RoundedUICS() {
for ROUNDEDSIZE in "0dip" "5dip" "10dip" "15dip" "20dip" "25dip" "33dip"; do

ORSLL3="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLLaucher3"; ORSLLQ="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLLawnchairQ"; ORSLLR="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLLawnchairR"; ORSLOP="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLOneplus"; ORSLOUI="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLOneui"; ORSLP="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLPixel"; ORSLA="$STORAGE/AIOCOMPILE/RoundedUI/RoundedSLAsus"
ORUIONE="$STORAGE/AIOCOMPILE/RoundedUI/RoundedUIAndroid"; ORUITWO="$STORAGE/AIOCOMPILE/RoundedUI/RoundedUISUI"
mkdir -p $ORSLL3/res/values $ORSLLQ/res/values $ORSLLR/res/values $ORSLOP/res/values $ORSLOUI/res/values $ORSLP/res/values $ORSLA/res/values $ORUIONE/res/values $ORUITWO/res/values $ORUITWO/res/drawable

ROUNDEDUISTRING="<dimen name=\"cardview_default_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"config_bottomDialogCornerRadius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"config_pipEnableRoundCorner\">$ROUNDEDSIZE</dimen>
	<dimen name=\"control_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"pip_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"progress_bar_corner_material\">$ROUNDEDSIZE</dimen>
	<dimen name=\"rounded_corner_radius_bottom\">$ROUNDEDSIZE</dimen>
	<dimen name=\"rounded_corner_radius_top\">$ROUNDEDSIZE</dimen>
	<dimen name=\"subtitle_shadow_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"task_card_menu_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"tooltip_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"abc_control_corner_material\">$ROUNDEDSIZE</dimen>
    <dimen name=\"abc_dialog_corner_radius_material\">$ROUNDEDSIZE</dimen>
    <dimen name=\"borderless_button_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"cardview_default_elevation\">$ROUNDEDSIZE</dimen>
    <dimen name=\"chooser_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"compat_control_corner_material\">$ROUNDEDSIZE</dimen>
    <dimen name=\"config_buttonCornerRadius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"config_dialogCornerRadius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"control_corner_material\">$ROUNDEDSIZE</dimen>
    <dimen name=\"corner_size\">$ROUNDEDSIZE</dimen>
    <dimen name=\"default_dialog_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"default_magnifier_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"dialog_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"fingerprint_dialog_corner_size\">$ROUNDEDSIZE</dimen>
    <dimen name=\"halo_inner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"lb_action_button_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"lb_rounded_rect_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"logout_button_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"mtrl_badge_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"mtrl_btn_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"mtrl_card_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"notification_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"notification_corner_radius_small\">$ROUNDEDSIZE</dimen>
    <dimen name=\"notification_custom_view_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"notification_group_overflow_bg_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"notification_item_bg_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"notification_shadow_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"panel_content_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"qs_control_brightness_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"qs_control_corner_general_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"qs_control_customizer_others_bg_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"qs_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"rect_button_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"rounded_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"screenshot_action_container_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"searchbar_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"seek_bar_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"subtitle_corner_radius\">$ROUNDEDSIZE</dimen>"

ROUNDEDLSTRING="	<dimen name=\"bg_round_rect_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"oneplus_contorl_layout_margin_bottom1\">$ROUNDEDSIZE</dimen>
	<dimen name=\"oneplus_contorl_radius_r0\">$ROUNDEDSIZE</dimen>
	<dimen name=\"oneplus_contorl_radius_r32\">$ROUNDEDSIZE</dimen>
	<dimen name=\"op_control_menu_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"op_control_radius_r0\">$ROUNDEDSIZE</dimen>
	<dimen name=\"op_control_radius_r32\">$ROUNDEDSIZE</dimen>
	<dimen name=\"popup_container_with_arrow_round_rect_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"task_corner_radius\">$ROUNDEDSIZE</dimen>
	<dimen name=\"task_corner_radius_oneui\">$ROUNDEDSIZE</dimen>
    <dimen name=\"all_apps_scrim_view_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"arrow_toast_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"clear_all_button_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"oneplus_contorl_radius_r12\">$ROUNDEDSIZE</dimen>
    <dimen name=\"oneplus_contorl_radius_r16\">$ROUNDEDSIZE</dimen>
    <dimen name=\"oneplus_contorl_radius_r2\">$ROUNDEDSIZE</dimen>
    <dimen name=\"oneplus_contorl_radius_r4\">$ROUNDEDSIZE</dimen>
    <dimen name=\"oneplus_contorl_radius_r8\">$ROUNDEDSIZE</dimen>
    <dimen name=\"op_control_radius_r12\">$ROUNDEDSIZE</dimen>
    <dimen name=\"op_control_radius_r16\">$ROUNDEDSIZE</dimen>
    <dimen name=\"op_control_radius_r2\">$ROUNDEDSIZE</dimen>
    <dimen name=\"op_control_radius_r4\">$ROUNDEDSIZE</dimen>
    <dimen name=\"op_control_radius_r8\">$ROUNDEDSIZE</dimen>
    <dimen name=\"popup_arrow_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"recents_grid_task_view_focused_frame_rounded_corners_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"recents_grid_task_view_rounded_corners_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"recents_onboarding_toast_arrow_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"recents_task_view_shadow_rounded_corners_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"sesl_menu_popup_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"task_corner_radius_17819\">$ROUNDEDSIZE</dimen>
    <dimen name=\"task_corner_radius_small\">$ROUNDEDSIZE</dimen>
    <dimen name=\"tooltip_body_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"wallpaper_picker_list_item_rect_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"wallpaper_picker_preview_bg_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"widget_preview_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_17819\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_18857\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_18865\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_19801\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_19801_fhd\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_19811\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_19811_fhd\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_19821\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_19855\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_19855_fhd\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_19863\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_8998\">$ROUNDEDSIZE</dimen>
    <dimen name=\"window_corner_radius_fhd\">$ROUNDEDSIZE</dimen>
    <dimen name=\"workspace_bg_round_rect_radius\">$ROUNDEDSIZE</dimen>"

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
$ROUNDEDUISTRING
$ROUNDEDLSTRING
</resources>" > $STORAGE/AIOCOMPILE/RoundedUI/dimens.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.roundedui\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Android Rounded - $ROUNDEDSIZE\"/>
</manifest>" > $ORUIONE/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
$ROUNDEDUISTRING
</resources>" | tee $ORUIONE/res/values/dimens.xml $ORUITWO/res/values/dimens.xml > /dev/null

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.roundedui\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"SUI Rounded - $ROUNDEDSIZE\"/>
</manifest>" > $ORUITWO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<bool name=\"config_pipEnableRoundCorner\">true</bool>
</resources>" > $ORUITWO/res/values/bools.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/colorPrimary\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"?android:attr/dialogCornerRadius\" android:bottomRightRadius=\"0dp\" android:topRightRadius=\"0dp\" />
</shape>" > $ORUITWO/res/drawable/rounded_bg.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/colorPrimaryDark\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"0dp\" android:bottomRightRadius=\"0dp\" android:topRightRadius=\"0dp\" />
</shape>" > $ORUITWO/res/drawable/rounded_bg_bottom.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/panelColorBackground\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"0dp\" android:bottomRightRadius=\"?android:attr/dialogCornerRadius\" android:topRightRadius=\"0dp\" />
</shape>" > $ORUITWO/res/drawable/rounded_bg_bottom_background.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/colorBackgroundFloating\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"?android:attr/dialogCornerRadius\" android:bottomRightRadius=\"?android:attr/dialogCornerRadius\" android:topRightRadius=\"?android:attr/dialogCornerRadius\" />
</shape>" > $ORUITWO/res/drawable/rounded_bg_full.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\">
	<solid android:color=\"?android:attr/colorPrimaryDark\" />
	<corners android:bottomLeftRadius=\"?android:attr/dialogCornerRadius\" android:topLeftRadius=\"0dp\" android:bottomRightRadius=\"?android:attr/dialogCornerRadius\" android:topRightRadius=\"0dp\" />
</shape>" > $ORUITWO/res/drawable/rounded_full_bg_bottom.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<ripple xmlns:android=\"http://schemas.android.com/apk/res/android\"
		android:color=\"?android:attr/colorControlHighlight\">
	<item android:id=\"@android:id/mask\">
		<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">
			<solid android:color=\"#FFFFFFFF\"/>
			<corners android:radius=\"?android:attr/dialogCornerRadius\"/>
		</shape>
	</item>
	<item android:id=\"@android:id/background\">
		<shape android:shape=\"rectangle\">
			<solid android:color=\"?android:attr/colorBackgroundFloating\"/>
			<corners android:radius=\"?android:attr/dialogCornerRadius\"/>
		</shape>
	</item>
</ripple>" > $ORUITWO/res/drawable/rounded_ripple.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<shape
  xmlns:android=\"http://schemas.android.com/apk/res/android\">
	<solid android:color=\"?android:colorPrimaryDark\" />
	<corners android:radius=\"$ROUNDEDSIZE\" />
</shape>" > $ORUITWO/res/drawable/brightness_mirror_background.xml

APKBUILDER "$ORUIONE" "$ORUIONE-$ROUNDEDSIZE.apk"
APKBUILDER "$ORUITWO" "$ORUITWO-$ROUNDEDSIZE.apk"

for LAUNCHERPNAME in "com.android.launcher3" "ch.deletescape.lawnchair.ci" "app.lawnchair" "net.oneplus.launcher" "com.sec.android.app.launcher" "com.google.android.apps.nexuslauncher" "com.asus.launcher"; do
case $LAUNCHERPNAME in
"com.android.launcher3") LAUNCHERPATH="$ORSLL3"; LAUNCHERNAME="Launcher3";;
"ch.deletescape.lawnchair.ci") LAUNCHERPATH="$ORSLLQ"; LAUNCHERNAME="Lawnchair Q";;
"app.lawnchair") LAUNCHERPATH="$ORSLLR"; LAUNCHERNAME="Lawnchair R/S";;
"net.oneplus.launcher") LAUNCHERPATH="$ORSLOP"; LAUNCHERNAME="OnePlus Launcher";;
"com.sec.android.app.launcher") LAUNCHERPATH="$ORSLOUI"; LAUNCHERNAME="OneUI Launcher";;
"com.google.android.apps.nexuslauncher") LAUNCHERPATH="$ORSLP"; LAUNCHERNAME="Pixel Launcher";;
"com.asus.launcher") LAUNCHERPATH="$ORSLA"; LAUNCHERNAME="Asus Launcher";;
esac
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"$LAUNCHERPNAME.roundedui\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"$LAUNCHERPNAME\"/>
	<application android:hasCode=\"false\" android:label=\"$LAUNCHERNAME Rounded - $ROUNDEDSIZE\"/>
</manifest>" > $LAUNCHERPATH/AndroidManifest.xml

echo -e "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n$ROUNDEDUISTRING\n$ROUNDEDLSTRING\n</resources>" | tee $ORSLL3/res/values/dimens.xml $ORSLLQ/res/values/dimens.xml $ORSLLR/res/values/dimens.xml $ORSLOP/res/values/dimens.xml $ORSLOUI/res/values/dimens.xml $ORSLP/res/values/dimens.xml $ORSLA/res/values/dimens.xml > /dev/null
done
APKBUILDER "$ORSLL3" "$ORSLL3-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLLQ" "$ORSLLQ-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLLR" "$ORSLLR-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLOP" "$ORSLOP-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLOUI" "$ORSLOUI-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLP" "$ORSLP-$ROUNDEDSIZE.apk"
APKBUILDER "$ORSLA" "$ORSLA-$ROUNDEDSIZE.apk"
done
rm -f $STORAGE/AIOCOMPILE/RoundedUI/dimens.xml
}

PillsOverlayC() {
UCSA "Pills Overlay Compile" "" "$MSGNUS" "PillsOverlayCS"
}

PillsOverlayCS() {

for PILLSFATSIZE in "0dip" "1dip" "2dip" "3dip" "4dip"; do
for PILLSWIDTHSIZE in "0dip" "60dip" "120dip" "180dip" "240dip" "300dip" "8dip"; do
OPTO="$STORAGE/AIOCOMPILE/Pills/Pills"
mkdir -p $OPTO/res/values $OPNTO/res/values
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.pills\">
	<overlay android:category=\"com.android.internal.navigation_bar_mode\" android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Pills - $PILLSFATSIZE/$PILLSWIDTHSIZE\"/>
</manifest>" > $OPTO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"navigation_handle_radius\">$PILLSFATSIZE</dimen>
	<dimen name=\"navigation_home_handle_width\">$PILLSWIDTHSIZE</dimen>
</resources>" > $OPTO/res/values/dimens.xml

APKBUILDER "$OPTO" "$OPTO-$PILLSFATSIZE-$PILLSWIDTHSIZE.apk"
done
done

for HIDE in "0dip" "16dip"; do
for FRAME in "0dip" "48dip"; do
NBMGO="$STORAGE/AIOCOMPILE/Pills/NavigationBarModeGesturalOverlay"
NBMGOEWB="$STORAGE/AIOCOMPILE/Pills/NavigationBarModeGesturalOverlayExtraWideBack"
NBMGONB="$STORAGE/AIOCOMPILE/Pills/NavigationBarModeGesturalOverlayNarrowBack"
NBMGOWB="$STORAGE/AIOCOMPILE/Pills/NavigationBarModeGesturalOverlayWideBack"
mkdir -p $NBMGO/res/values $NBMGOEWB/res/values $NBMGONB/res/values $NBMGOWB/res/values

for PNNBMGO in "com.android.internal.systemui.navbar.gestural" "com.android.internal.systemui.navbar.gestural_extra_wide_back" "com.android.internal.systemui.navbar.gestural_narrow_back" "com.android.internal.systemui.navbar.gestural_wide_back"; do
case $PNNBMGO in
"com.android.internal.systemui.navbar.gestural") NAME=$NBMGO;;
"com.android.internal.systemui.navbar.gestural_extra_wide_back") NAME=$NBMGOEWB;;
"com.android.internal.systemui.navbar.gestural_narrow_back") NAME=$NBMGONB;;
"com.android.internal.systemui.navbar.gestural_wide_back") NAME=$NBMGOWB;;
esac
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"$PNNBMGO\">
	<overlay android:category=\"com.android.internal.navigation_bar_mode\" android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Gestural Navigation Bar\"/>
</manifest>" > $NAME/AndroidManifest.xml
done

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<integer name=\"config_navBarInteractionMode\">2</integer>
	<integer name=\"config_navBarOpacityMode\">2</integer>
</resources>" | tee $NBMGO/res/values/integers.xml $NBMGOEWB/res/values/integers.xml $NBMGONB/res/values/integers.xml $NBMGOWB/res/values/integers.xml > /dev/null

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<bool name=\"config_allowSeamlessRotationDespiteNavBarMoving\">true</bool>
	<bool name=\"config_navBarAlwaysShowOnSideEdgeGesture\">true</bool>
	<bool name=\"config_navBarCanMove\">false</bool>
	<bool name=\"config_navBarNeedsScrim\">false</bool>
	<bool name=\"config_navBarTapThrough\">true</bool>
</resources>" | tee $NBMGO/res/values/bools.xml $NBMGOEWB/res/values/bools.xml $NBMGONB/res/values/bools.xml $NBMGOWB/res/values/bools.xml > /dev/null

for CBGI in "18dip" "24dip" "32dip" "40dip"; do
case $CBGI in
"18dip") OP=$NBMGONB;;
"24dip") OP=$NBMGO;;
"32dip") OP=$NBMGOWB;;
"40dip") OP=$NBMGOEWB;;
esac
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
    <dimen name=\"config_backGestureInset\">$CBGI</dimen>
    <dimen name=\"navigation_bar_frame_height\">$FRAME</dimen>
    <dimen name=\"navigation_bar_gesture_height\">18dip</dimen>
    <dimen name=\"navigation_bar_height\">$HIDE</dimen>
    <dimen name=\"navigation_bar_height_landscape\">$HIDE</dimen>
    <dimen name=\"navigation_bar_width\">$HIDE</dimen>
</resources>" > $OP/res/values/dimens.xml
APKBUILDER "$OP" "$OP-$HIDE-$FRAME-$CBGI.apk"
done
done
done

for PILLSLIGHTCOLORS in "ff1a73e8" "ffb31818" "ff1ed760" "ffffa842" "ffff8055" "ffa86bd5" "ffff4151" "ff5e97f6" "ff47ae84"; do
for PILLSDARKCOLORS in "ff1a73e8" "ffb31818" "ff1ed760" "ffffa842" "ffff8055" "ffa86bd5" "ffff4151" "ff5e97f6" "ff47ae84"; do
OPCO="$STORAGE/AIOCOMPILE/Pills/PillsColors"
mkdir -p $OPCO/res/values
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.internal.systemui.pill.colors.mod\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Pill Colors - $PILLSLIGHTCOLORS-$PILLSDARKCOLORS\"/>
</manifest>" > $OPCO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<color name=\"navigation_bar_home_handle_light_color\">#$PILLSLIGHTCOLORS</color>
	<color name=\"navigation_bar_home_handle_dark_color\">#$PILLSDARKCOLORS</color>
</resources>" > $OPCO/res/values/colors.xml

APKBUILDER "$OPCO" "$OPCO-$PILLSLIGHTCOLORS-$PILLSDARKCOLORS.apk"
done
done

for PILLSHEIGHTSIZE in "0dip" "1dip" "2dip" "3dip" "4dip" "5dip" "6dip" "7dip" "8dip" "9dip" "10dip"; do
OPHO="$STORAGE/AIOCOMPILE/Pills/PillsHeight"
mkdir -p $OPHO/res/values
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.pills.height\">
	<overlay android:category=\"com.android.internal.margin.navigation_bar_mode\" android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Pills Height - $PILLSHEIGHTSIZE\"/>
</manifest>" > $OPHO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"navigation_handle_bottom\">$PILLSHEIGHTSIZE</dimen>
</resources>" > $OPHO/res/values/dimens.xml

APKBUILDER "$OPHO" "$OPHO-$PILLSHEIGHTSIZE.apk"
done
}

SBINNIC() {
UCSA "Status Bar Increase Number Notification Icons Compile" "" "$MSGNUS" "SBINNICS"
}

SBINNICS() {
ASBINNI="$STORAGE/AIOCOMPILE/SBINNI/AndroidStatusBarIncreaseNumberNotificationIcons"; SUISBINNI="$STORAGE/AIOCOMPILE/SBINNI/StatusBarIncreaseNumberNotificationIcons"
mkdir -p $ASBINNI/res/values $SUISBINNI/res/values

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.status.bar.increase.number.notification.icons\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Status Bar Increase Number Notification Icons\"/>
</manifest>" > $SUISBINNI/AndroidManifest.xml

for f in 4 5 6 7 8 9 10; do
for d in 0dip 2dip 4dip 6dip; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"overflow_dot_radius\">$d</dimen>
</resources>" > $SUISBINNI/res/values/dimens.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<integer name=\"config_maxVisibleNotificationIconsWhenDark\">$f</integer>
	<integer name=\"config_maxVisibleNotificationIcons\">$f</integer>
	<integer name=\"config_maxVisibleStatusIcons\">$f</integer>
</resources>" > $SUISBINNI/res/values/integers.xml

APKBUILDER "$SUISBINNI" "$SUISBINNI-$f-$d.apk"
done
done
}

SHNB() {
UCSA "Show Hide Navigation Bar Compile" "" "$MSGNUS" "SHNBS"
}

SHNBS() {
ONBHS="$STORAGE/AIOCOMPILE/ShowHideNavigationBar/NavigationBar"
mkdir -p $ONBHS/res/values

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.show.hide.navigation.bar\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Show Hide Navigation Bar\"/>
</manifest>" > $ONBHS/AndroidManifest.xml

for SHNBSS in "false" "true"; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<bool name=\"config_showNavigationBar\">$SHNBSS</bool>
</resources>" > $ONBHS/res/values/bools.xml
APKBUILDER "$ONBHS" "$ONBHS-$SHNBSS.apk"
done
}

QuickStepC() {
UCSA "Compile QuickStep?" "" "$MSGNUS" "QuickStepCS"
}

QuickStepCS() {
for QSRP in "com.android.launcher3" "ch.deletescape.lawnchair.ci" "net.oneplus.launcher" "com.sec.android.app.launcher" "com.google.android.apps.nexuslauncher" "com.asus.launcher" "app.lawnchair"; do
OSL="$STORAGE/AIOCOMPILE/QuickStepRecentsProvider/QuickStepRecentsProvider"
mkdir -p $OSL/res/values
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>
<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.quickstep.recents.overlay\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"QuickStep Recents Provider\"/>
</manifest>" > $OSL/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<bool name=\"config_swipe_up_gesture_setting_available\">true</bool>
	<bool name=\"config_custom_swipe_up_gesture_setting_available\">true</bool>
</resources>" > $OSL/res/values/bools.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<string name=\"config_recentsComponentName\">$QSRP/com.android.quickstep.RecentsActivity</string>
</resources>" > $OSL/res/values/strings.xml

APKBUILDER "$OSL" "$OSL-$QSRP.apk"
done
}

BIPC() {
UCSA "Compile BurnInProtection?" "" "$MSGNUS" "BIPCS"
}

BIPCS() {
BIPAO="$STORAGE/AIOCOMPILE/BurnInProtection/AndroidBurnInProtection"
BIPAAO="$STORAGE/AIOCOMPILE/BurnInProtection/AndroidBurnInProtectionAlt"
BIPSUIO="$STORAGE/AIOCOMPILE/BurnInProtection/SUIBurnInProtection"
mkdir -p $BIPAO/res/values $BIPAAO/res/values $BIPSUIO/res/values
for SHIFTINTERVAL in 20 40 60; do
for HORIZONTALSWIFT in 4dip 6dip; do
for VERTICALSWIFT in 4dip 6dip; do
for AODHORIZONTALSWIFT in 20dip 40dip 60dip; do
for AODVERTICALSWIFT in 20dip 40dip 60dip; do

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>
<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.burn.in.protection\">
	<overlay android:category=\"com.android.internal.display_cutout_emulation\" android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Android Burn In Protection\"/>
</manifest>" > $BIPAO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>
<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.burn.in.protection\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"SystemUI Burn In Protection\"/>
</manifest>" > $BIPSUIO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<bool name=\"config_statusBarBurnInProtection\">true</bool>
	<bool name=\"config_enableBurnInProtection\">true</bool>
</resources>" | tee $BIPAO/res/values/bools.xml $BIPAAO/res/values/bools.xml $BIPSUIO/res/values/bools.xml > /dev/null

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<integer name=\"config_burnInProtectionMaxVerticalOffset\">0</integer>
	<integer name=\"config_burnInProtectionMinHorizontalOffset\">0</integer>
	<integer name=\"config_burnInProtectionMinVerticalOffset\">0</integer>
	<integer name=\"config_shift_interval\">$SHIFTINTERVAL</integer>
	<integer name=\"config_burnInProtectionMaxHorizontalOffset\">0</integer>
	<integer name=\"config_burnInProtectionMaxRadius\">-1</integer>
</resources>" | tee $BIPAO/res/values/integers.xml $BIPAAO/res/values/integers.xml $BIPSUIO/res/values/integers.xml > /dev/null

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"horizontal_max_swift\">$HORIZONTALSWIFT</dimen>
	<dimen name=\"vertical_max_swift\">$VERTICALSWIFT</dimen>
	<dimen name=\"udfps_burn_in_offset_x\">$HORIZONTALSWIFT</dimen>
    <dimen name=\"udfps_burn_in_offset_y\">$VERTICALSWIFT</dimen>
	<dimen name=\"burn_in_prevention_offset_x\">$AODHORIZONTALSWIFT</dimen>
	<dimen name=\"burn_in_prevention_offset_y\">$AODVERTICALSWIFT</dimen>
	<dimen name=\"burn_in_prevention_offset_y_large_clock\">$AODVERTICALSWIFT</dimen>
	<dimen name=\"default_burn_in_prevention_offset\">$AODVERTICALSWIFT</dimen>
</resources>" | tee $BIPAO/res/values/dimens.xml $BIPSUIO/res/values/dimens.xml > /dev/null

for VACINN in "40dip" "50dip" "60dip" "70dip"; do
case $VACINN in
"40dip") NACINN="a";;
"50dip") NACINN="b";;
"60dip") NACINN="c";;
"70dip") NACINN="d";;
esac
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.burn.in.protection.$NACINN\">
	<overlay android:category=\"com.android.internal.display_cutout_emulation\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Android Burn In Protection $VACINN\"/>
</manifest>" > $BIPAAO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"status_bar_height_landscape\">$VACINN</dimen>
	<dimen name=\"horizontal_max_swift\">$HORIZONTALSWIFT</dimen>
	<dimen name=\"vertical_max_swift\">$VERTICALSWIFT</dimen>
	<dimen name=\"udfps_burn_in_offset_x\">$HORIZONTALSWIFT</dimen>
    <dimen name=\"udfps_burn_in_offset_y\">$VERTICALSWIFT</dimen>
	<dimen name=\"burn_in_prevention_offset_x\">$AODHORIZONTALSWIFT</dimen>
	<dimen name=\"burn_in_prevention_offset_y\">$AODVERTICALSWIFT</dimen>
	<dimen name=\"burn_in_prevention_offset_y_large_clock\">$AODVERTICALSWIFT</dimen>
	<dimen name=\"default_burn_in_prevention_offset\">$AODVERTICALSWIFT</dimen>
</resources>" > $BIPAAO/res/values/dimens.xml
APKBUILDER "$BIPAAO" "$BIPAAO-$SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT-$VACINN.apk"
done
APKBUILDER "$BIPAO" "$BIPAO-$SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT.apk"
APKBUILDER "$BIPSUIO" "$BIPSUIO-$SHIFTINTERVAL-$HORIZONTALSWIFT-$VERTICALSWIFT-$AODHORIZONTALSWIFT-$AODVERTICALSWIFT.apk"
done
done
done
done
done
}

FaceUnlockServiceC() {
UCSA "Compile FaceUnlockService?" "" "$MSGNUS" "FaceUnlockServiceCS"
}

FaceUnlockServiceCS() {
OFULS="$STORAGE/AIOCOMPILE/FaceUnlockService/FaceUnlockService"
mkdir -p $OFULS/res/values
for FULS in "org.pixelexperience.faceunlock" "com.crdroid.faceunlock" "com.aospextended.faceunlock"; do
for SFULS in "5" "-1"; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"$FULS.auto_generated_rro_vendor__\">
	<overlay android:isStatic=\"true\" android:priority=\"0\" android:targetPackage=\"$FULS\"/>
	<application android:hasCode=\"false\" android:label=\"IR FaceUnlock Service\"/>
</manifest>" > $OFULS/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<integer name=\"override_front_cam_id\">$SFULS</integer>
</resources>" > $OFULS/res/values/integers.xml
case $SFULS in
"5") SFULS="On";;
"-1") SFULS="Off";;
esac
APKBUILDER "$OFULS" "$OFULS-$FULS-$SFULS.apk"
done
done
}

NSPC() {
UCSA "Notification Side Paddings Compile" "" "$MSGNUS" "NSPCS"
}

NSPCS() {
NSPCO="$STORAGE/AIOCOMPILE/NotificationSidePaddings/NotificationSidePaddings"
mkdir -p $NSPCO/res/values
for NSPCOSA in 0dip 5dip 10dip 15dip 20dip 25dip 30dip; do
for NSPCOS in 0dip 5dip 10dip 15dip 20dip 25dip 30dip; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.notification.side.paddings\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Notification Side Paddings\"/>
</manifest>" > $NSPCO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"notification_side_paddings\">$NSPCOS</dimen>
	<dimen name=\"qs_header_image_side_margin\">$NSPCOS</dimen>
	<dimen name=\"qs_notification_padding\">$NSPCOSA</dimen>
</resources>" > $NSPCO/res/values/dimens.xml
APKBUILDER "$NSPCO" "$NSPCO-$NSPCOS-$NSPCOSA.apk"
done
done
}

SBPC() {
UCSA "Status Bar Padding" "" "$MSGNUS" "SBPCS"
}

SBPCS() {
SBPCSO="$STORAGE/AIOCOMPILE/StatusBarPadding/StatusBarPadding"
mkdir -p $SBPCSO/res/values

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.status.bar.padding\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Status Bar Padding\"/>
</manifest>" > $SBPCSO/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.roundedui\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Android Rounded - $ROUNDEDSIZE\"/>
</manifest>" > $ORUIONE/AndroidManifest.xml

for SCSBPCO in 0dip 5dip 10dip 15dip 20dip 25dip 30dip 35dip 40dip 45dip 50dip; do
for SCSBPCT in 0dip 5dip 10dip 15dip 20dip 25dip 30dip 35dip 40dip 45dip 50dip; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"status_bar_padding_start\">$SCSBPCO</dimen>
	<dimen name=\"status_bar_padding_end\">$SCSBPCT</dimen>
</resources>" > $SBPCSO/res/values/dimens.xml
APKBUILDER "$SBPCSO" "$SBPCSO-$SCSBPCO-$SCSBPCT.apk"
done
done
}

CSBIS() {
UCSA "Status Bar Icon Space" "" "$MSGNUS" "CSBISS"
}

CSBISS() {
ASBISDS="$STORAGE/AIOCOMPILE/StatusBarIconSpace/AndroidStatusBarIconSpace" SUISBISDS="$STORAGE/AIOCOMPILE/StatusBarIconSpace/SUIStatusBarIconSpace"
mkdir -p $ASBISDS/res/values $SUISBISDS/res/values

for f in 14dip 15dip 16dip 17dip 18dip 19dip 20dip; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.status.bar.icon.space\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"android\"/>
	<application android:hasCode=\"false\" android:label=\"Android Status Bar Icon Space - $f\"/>
</manifest>" > $ASBISDS/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"status_bar_icon_size\">$f</dimen>
</resources>" > $ASBISDS/res/values/dimens.xml
APKBUILDER "$ASBISDS" "$ASBISDS-$f.apk"
done

for f in -4dip -3dip -2dip -1dip 0dip 1dip 2dip 3dip 4dip; do
for r in 0dip 1dip 2dip 3dip 4dip; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.status.bar.icon.space\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"SUI Status Bar Icon Space - $f\"/>
</manifest>" > $SUISBISDS/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"status_bar_left_clock_end_padding\">2dip</dimen>
	<dimen name=\"signal_cluster_battery_padding\">$r</dimen>
	<dimen name=\"status_bar_clock_starting_padding\">2dip</dimen>
	<dimen name=\"status_bar_system_icon_spacing\">$f</dimen>
</resources>" > $SUISBISDS/res/values/dimens.xml

APKBUILDER "$SUISBISDS" "$SUISBISDS-$f-$r.apk"
done
done
}

COSBCS() {
UCSA "Status Bar Clock Size" "" "$MSGNUS" "COSBCSS"
}

COSBCSS() {
PCOSBCSS="$STORAGE/AIOCOMPILE/StatusBarClockSize/StatusBarClockSize"
mkdir -p $PCOSBCSS/res/values

for f in 10sp 12sp 14sp 16sp 18sp 20sp; do
echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.status.bar.clock.size\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"Status Bar Clock Size - $f\"/>
</manifest>" > $PCOSBCSS/AndroidManifest.xml

echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<dimen name=\"status_bar_clock_size\">$f</dimen>
</resources>" > $PCOSBCSS/res/values/dimens.xml

APKBUILDER "$PCOSBCSS" "$PCOSBCSS-$f.apk"
done
}

QSCIARC() {
UCSA "QS Count Icon And Rows" "" "$MSGNUS" "QSCIARCS"
}

QSCIARCS() {
QSCIAR="$STORAGE/AIOCOMPILE/QSCountIconAndRows/QSCountIconAndRows"
mkdir -p $QSCIAR/res/values

echo "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.systemui.qs.count.icon.and.rows\">
	<overlay android:isStatic=\"true\" android:priority=\"999\" android:targetPackage=\"com.android.systemui\"/>
	<application android:hasCode=\"false\" android:label=\"QS Count Icon And Rows\"/>
</manifest>" > $QSCIAR/AndroidManifest.xml

for SUIQSC in $(seq 4 1 10); do
for SUIQSCP in $(seq 4 1 10); do
for SUIQSCL in $(seq 4 1 10); do
for SUIQSRP in $(seq 1 1 3); do
for SUIQSRL in $(seq 1 1 3); do
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<resources>
	<integer name=\"quick_qs_panel_max_columns\">$SUIQSC</integer>
	<integer name=\"config_qs_columns_portrait\">$SUIQSCP</integer>
	<integer name=\"config_qs_columns_landscape\">$SUIQSCL</integer>
	<integer name=\"config_qs_rows_portrait\">$SUIQSRP</integer>
	<integer name=\"config_qs_rows_landscape\">$SUIQSRL</integer>
</resources>" > $QSCIAR/res/values/integers.xml

APKBUILDER "$QSCIAR" "$QSCIAR-$SUIQSC-$SUIQSCP-$SUIQSCL-$SUIQSRP-$SUIQSRL.apk"
done
done
done
done
done
}

} #

{ #AdBlock/Hosts

IPHF() {
if [ $BOOTMODE != true ] && [ -f $IPSE/hosts.bak ]; then
UIP -d "$MSGFI Hosts Files, Restore?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Restore Hosts Files"
BUCKUPER -r "$IPSE/hosts"
UIP "$MSGDRS"
fi
else
UCSA "AdBlock/Hosts" "$MSGEFTC" "$MSGNUS" "IPHFS"
fi
}

IPHFS() {
UZTPN "Hosts"
UIP -d "Сhoose Hosts File" "$MSGVU Empty Hosts $VIPDAB" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
UIP "Installing Hosts Files $IAMM"
if $MAGISK; then
IPHFSA
MODID="$IDDAB"
mkdir -p $MODPATH/$MODID$MIPSE
MMPR -vc "Disable Ad Blocker" "$VIPDAB" "$VCIPDAB" "DriffeX" "Restores stock hosts file for disable Ad Block"
echo -e "127.0.0.1 localhost\n::1 ip6-localhost" > $MODPATH/$MODID$MIPSE/hosts
SET_PERM_RM
else
BUCKUPER -s "$IPSE/hosts"
echo -e "127.0.0.1 localhost/n::1 ip6-localhost" > $IPSE/hosts
fi
UIP "$MSGDI"
else
UIP -d "$MSGVU AdAway Hosts (12000+) $VIPVAAH" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
UIP "Installing Hosts Files $IAMM"
HOSTSFILE="AdAway-hosts"
if $MAGISK; then
IPHFSA
MODID="$IDVAAH"
mkdir -p $MODPATH/$MODID$MIPSE
cp -f $TMPDIR/Hosts/$HOSTSFILE $MODPATH/$MODID$MIPSE/hosts
MMPR -vs "AdAway Hosts" "$VIPVAAH" "AdAway" "Hosts From AdAway $MSGFMM" "https://github.com/AdAway/adaway.github.io/issues"; SET_PERM_RM
else
IPHFSAA
fi
UIP "$MSGDI"
else
UIP -d "$MSGVU LP Hosts (67000+) $VIPVLPH" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
UIP "Installing Hosts Files $IAMM"
HOSTSFILE="LP-hosts"
if $MAGISK; then
IPHFSA
MODID="$IDVLPH"
mkdir -p $MODPATH/$MODID$MIPSE
cp -f $TMPDIR/Hosts/$HOSTSFILE $MODPATH/$MODID$MIPSE/hosts
MMPR -vcs "LuckyPatcher Hosts" "$VIPVLPH" "$VCIPLPH" "chelpa" "Hosts From Lucky Patcher $MSGFMM" "https://4pda.ru/forum/index.php?showuser=1594228"; SET_PERM_RM
else
IPHFSAA
fi
UIP "$MSGDI"
else
UIP -d "$MSGVU Systemless Hosts (90000+) $VIPVSH" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
UIP "Installing Hosts Files $IAMM"
HOSTSFILE="Systemless-hosts"
if $MAGISK; then
IPHFSA
MODID="$IDVSH"
mkdir -p $MODPATH/$MODID$MIPSE
cp -f $TMPDIR/Hosts/$HOSTSFILE $MODPATH/$MODID$MIPSE/hosts
MMPR -vc "Systemless Hosts - Unified" "$VIPVSH" "$VCIPVSH" "gloeyisk" "Consolidating and extending hosts files from several well-curated sources"
SET_PERM_RM
else
IPHFSAA
fi
UIP "$MSGDI"
else
UIP -d "$MSGVU Other Hosts Сompilation (190000+) $VIPVOH" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Installing Hosts Files $IAMM"
HOSTSFILE="Other-hosts"
if $MAGISK; then
IPHFSA
MODID="$IDVOH"
mkdir -p $MODPATH/$MODID$MIPSE
cp -f $TMPDIR/$MODID/$HOSTSFILE $MODPATH/$MODID$MIPSE/$MODID
MMPR -v "$MODID" "$VIPVOH" "$MODID Files $MSGFMM"; SET_PERM_RM
else
IPHFSAA
fi
fi
fi
fi
fi
fi
}

IPHFSA() {
REMOVER -mm "AdAwayHosts hosts Hosts LuckyPatcherHosts SystemlessHostsUnified disableadblock systemless-hosts"
}

IPHFSAA() {
BUCKUPER -s "$IPSE/hosts"
cp -f $TMPDIR/Hosts/$HOSTSFILE $IPSE/hosts
UIP "$MSGDI"
}

} #

{ #Net: GPS/TTL/DNS/WB/USBTF

IPGOGPS() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/optmizedgpsconf ]; then
UIP -d "$MSGFI Global Optimized GPS, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
BUCKUPER -r "$IPSE/gps.conf $IPVE/gps.conf"
rm -f $AIOPFMDPH/optmizedgpsconf
UIP "$MSGDRM"
fi
else
if $SNAPSOC; then
UCSA "Install Global Optimized GPS $VIPGOGPS?" "" "$MSGNUS" "IPGOGPSS"
fi
fi
}

IPGOGPSS() {
UIP "Installing Global Optimized GPS $IAMM"
mkdir -p $TMPDIR/GOGPS
if [[ "$(getprop gsm.operator.iso-country)" == *"cn"* ]]; then
NTP_SERVER="NTP_SERVER_1 = ntp.neusoft.edu.cn
NTP_SERVER_2 = ntp.neu6.edu.cn
NTP_SERVER_3 = ntp.synet.edu.cn"
else
NTP_SERVER="NTP_SERVER_1 = 0.rhel.pool.ntp.org
NTP_SERVER_2 = 1.rhel.pool.ntp.org
NTP_SERVER_3 = 2.rhel.pool.ntp.org
NTP_SERVER_4 = 3.rhel.pool.ntp.org"
fi
echo "##################################################
# GPS almanac settings
##################################################
# Whether to use the predefined XTRA servers
# below (XTRA_SERVER_), or to query them from the
# modem.
#
# Values: 0 - use predefined, 1 - query modem
XTRA_SERVER_QUERY = 0

# The predefined XTRA servers to be used if modem
# querying (XTRA_SERVER_QUERY) is off.
#
# Values: URL
XTRA_SERVER_1 = https://xtrapath1.izatcloud.net/xtra3grc.bin
XTRA_SERVER_2 = https://xtrapath2.izatcloud.net/xtra3grc.bin
XTRA_SERVER_3 = https://xtrapath3.izatcloud.net/xtra3grc.bin
XTRA_SERVER_4 = https://ssl.gpsonextra.net/xtra3grc.bin
XTRA_SERVER_5 = https://ssl.izatcloud.net/xtra3grc.bin

# Whether or not to test for XTRA support.
#
# Values: 0 - don't test, 1 - test
XTRA_TEST_ENABLED = 1

# The version of the XTRA data used. XTRA v3
# supports digital signing and is advised.
#
# Values: 0 - disable XTRA, 1 - automatic check,
#         2 - XTRA v2, 3 - XTRA v3
XTRA_VERSION_CHECK = 3

# Path to the CA certificates used to validate
# the XTRA data.
#
# Values: path
XTRA_CA_PATH = $MIPSE/security/cacerts

##################################################
# Error estimatation
##################################################
# Whether or not to use error estimation.
#
# Values: 0 - don't use, 1 - use
ERR_ESTIMATE = 0

##################################################
# NTP server
##################################################
# The NTP servers used for time synchronisation.
#
# Values: URL
NTP_SERVER = rhel.pool.ntp.org
$NTP_SERVER

##################################################
# Debugging
##################################################
# The Android logging level of the GPS service. If
# commented out, then Android's default logging
# level will be used.
#
# Values: 0 - none, 1 - error, 2 - warning, 3 - info
#         4 - debug, 5 - verbose
DEBUG_LEVEL = 1

##################################################
# Intermediate position reporting
##################################################
# Whether or not to report intermediate positions.
#
# Values: 0 - don't report, 1 - report
INTERMEDIATE_POS = 1

# Accuracy threshold for intermediate positions.
# Set to 0 to pass all positions.
#
# Values: unknown
ACCURACY_THRES = 1

##################################################
# 
##################################################
# Functionalities to switch off when GPS is disabled.
# Default is to lock nothing for backward
# compatibility.
#
# Bitmask: 0x1 - lock MO GPS, 0x2 - lock NI GPS
GPS_LOCK = 0

# Provider for NMEA.
#
# Values: 0 - application, 1 - modem
NMEA_PROVIDER = 1

# Whether the device supports being a SGLTE
# target.
#
# Values: 0 - not supported, 1 - supported
SGLTE_TARGET = 1

##################################################
# GPS supplement settings
##################################################
# The version of SUPL to be used.
#
# Values: bitmask
SUPL_VER = 0x30000

# Whether to report the reference SUPL location as
# the current position.
#
# Values: 0 - don't report, 1 - report
REPORT_POSITION_USE_SUPL_REFLOC = 1

# Whether to use SUPL in an emergency situations
# (eg. calling emergency services).
#
# Values: 0 - disable, 1 - enable
SUPL_ES = 1

# The PDN to ve used for emergency SUPL.
#
# Values: 0 - emergency PDN, 1 - regular SUPL PDN
USE_EMERGENCY_PDN_FOR_EMERGENCY_SUPL = 1

# Carrier-set GPS mode for SUPL.
# If commented, will be taken from config.xml.
#
# Bitmask: 0x2 - MSA, 0x2 - MSB
SUPL_MODE = 0x2

# The SUPL server used.
#
# Values: URL, IP
SUPL_HOST = supl.google.com

# The port to connect to the SUPL server.
#
# Values: port
SUPL_PORT = 7275

##################################################
# GPS capabilities
##################################################
# GPS features which are supported.
#
# Bitmask: 0x01 - scheduling, 0x02 - MSB,
#          0x04 - MSA, 0x10 - on-demand time,
#          0x20 - geofencing
CAPABILITIES = 0x37

# Whether to use WiFi positioning.
#
# Values: 0 - disable, 1 - enable
ENABLE_WIPER = 1

##################################################
# C2K server settings
##################################################
# The C2K PDE server used.
#
# Values: URL, IP
C2K_HOST = 

# The port to connect to the C2K PDE server.
#
# Values: port
C2K_PORT = 

##################################################
# A-GPS settings
##################################################
# Slots writable to install A-GPS infomation to.
#
# Values: bitmask
AGPS_CERT_WRITABLE_MASK = 0

# Whether to use A-GPS configuration injection.
#
# Values: 0 - disable, 1 - enable
AGPS_CONFIG_INJECT = 1

##################################################
# LTE positioning profile
##################################################
# LTE positioning mode.
#
# Values: 0 - RRLP, 1 - LPP_User_Plane,
#         2 - LPP_Control_Plane,
#         3 - LPP_Control_Plane and LPP_User_Plane
LPP_PROFILE = 3

##################################################
# A-GLONASS protocol
##################################################
# The A-GLONASS positioning protocol used.
#
# Bitmask: 0x1 - RRC CPlane, 0x2 - RRLP UPlane,
#          0x4 - LLP Uplane
A_GLONASS_POS_PROTOCOL_SELECT = 0x4

##################################################
# LPPe settings
##################################################
# The LPPe control plane method.
#
# Bitmask: 0x1 - DBH, 0x2 - WLAN AP measurements,
#          0x4 - SRN AP measurement,
#          0x8 - Sensor barometer measurement
LPPE_CP_TECHNOLOGY = 0x10

# The LPPe user plane method.
#
# Bitmask: 0x1 - DBH, 0x2 - WLAN AP measurements,
#          0x4 - SRN AP measurement,
#          0x8 - Sensor barometer measurement
LPPE_UP_TECHNOLOGY = 0x10

##################################################
# AP settings
##################################################
# The AP coarse timestamp uncertainty until the
# GNSS receiver is able to acquire better timing
# information.
#
# Values: unknown
AP_TIMESTAMP_UNCERTAINTY = 10

# The quality of the APPS processor clock. Used to
# calculate AP timestamp uncertainty.
#
# Values: PPM
AP_CLOCK_PPM = 100

##################################################
# QDR engine availability
##################################################
# Whether to use the QDR configuration.
# Recommended for automobile use cases. If used,
# the DR_AP_Service needs to be enabled.
#
# Values: 0 - disable, 1 - enable
EXTERNAL_DR_ENABLED = 0

##################################################
# Pulse settings
##################################################
# Whether to use the Linux PPS driver to make use
# of events generated by DR_SYNC pulse.
#
# Values: 0 - disable, 1 - enable
DR_SYNC_ENABLED = 0

# The path to the Linux PPS device.
#
# Values: path
PPS_DEVICENAME = /dev/pps0

# The path time threshold to validate any missing
# PPS pulses.
#
# Values: ms
MISSING_PULSE_TIME_DELTA = 900

# Whether to use time uncertainty propagation
# logic in the case of missing PPS pulse.
#
# Values: 0 - don't use, 1 - use
PROPAGATION_TIME_UNCERTAINTY = 1" > $TMPDIR/GOGPS/gps.conf
if $MAGISK; then
MODID="$IDGOGPS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPSVE $MODPATH/$MODID$MIPSE
cp -f $TMPDIR/GOGPS/gps.conf $MODPATH/$MODID$MIPSVE
cp -f $TMPDIR/GOGPS/gps.conf $MODPATH/$MODID$MIPSE
MMPR -vc "Global Optimized GPS File Replacer" "$VIPGOGPS" "$VCIPGOGPS" "ianhughes74 and lazerl0rd" "This module replaces the default GPS copnfiguration file with one set for faster locking and more accurate"
SET_PERM_RM
else
BUCKUPER -s "$IPSE/gps.conf $IPVE/gps.conf"
cp -f $TMPDIR/GOGPS/gps.conf $IPSE; cp -f $TMPDIR/GOGPS/gps.conf $IPVE; touch $AIOPFMDPH/optmizedgpsconf
fi
UIP "$MSGDI"
}

IPTTLF() {
if $MAGISK; then
UCSA "Install TTL Fix $VIPTTLF?" "" "$MSGNUS" "IPTTLFS"
fi
}

IPTTLFS() {
UIP "Installing Time To Live Fix $IAMM"
UZTPN "NFQTTL"
MODID="$IDTTLF"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MMPR -vc "Nfqttl" "$VIPTTLF" "$VCIPTTLF" "Cyborg-one" "Nfqttl is a module fix heder field ttl. github: https://github.com/cyborg-one/nfqttl"
echo "#!/sbin/sh
MODDIR=\${0%/*}
iptables -t mangle -I FORWARD -j DROP
ip6tables -t mangle -I FORWARD -j DROP
sleep 30
iptables -t mangle -D FORWARD -j DROP
ip6tables -t mangle -D FORWARD -j DROP
count=0
while true
do
if ps | grep \$MODDIR/nfqttl | grep -v grep | grep -q \$MODDIR/nfqttl
then
break
fi
if [ \"\$count\" -ge 8 ]
then
exit 1
fi
count=\$((\$count+1))
\$MODDIR/nfqttl -d -t64 -s4
sleep 5
done
iptables -t mangle -N nfqttli
iptables -t mangle -A nfqttli -m mark --mark 0x10000001 -j RETURN
iptables -t mangle -A nfqttli -m mark --mark 0x10000002 -j RETURN
iptables -t mangle -A nfqttli -j NFQUEUE --queue-num 0x1000
iptables -t mangle -N nfqttlo
iptables -t mangle -A nfqttlo -m mark --mark 0x10000001 -j RETURN
iptables -t mangle -A nfqttlo -m mark --mark 0x10000003 -j RETURN
iptables -t mangle -A nfqttlo -j NFQUEUE --queue-num 0x1000
iptables -t mangle -I PREROUTING -j nfqttli
iptables -t mangle -I POSTROUTING -j nfqttlo
ip6tables -t mangle -N nfqttli
ip6tables -t mangle -A nfqttli -m mark --mark 0x10000001 -j RETURN
ip6tables -t mangle -A nfqttli -m mark --mark 0x10000002 -j RETURN
ip6tables -t mangle -A nfqttli -j NFQUEUE --queue-num 0x1000
ip6tables -t mangle -N nfqttlo
ip6tables -t mangle -A nfqttlo -m mark --mark 0x10000001 -j RETURN
ip6tables -t mangle -A nfqttlo -m mark --mark 0x10000003 -j RETURN
ip6tables -t mangle -A nfqttlo -j NFQUEUE --queue-num 0x1000
ip6tables -t mangle -I PREROUTING -j nfqttli
ip6tables -t mangle -I POSTROUTING -j nfqttlo
exit 0" > $MODPATH/$MODID/service.sh
cp -f $TMPDIR/NFQTTL/nfqttl-$arch $MODPATH/$MODID/nfqttl
SET_PERM_RM
chmod 777 $MODPATH/$MODID/nfqttl
if $BOOTMODE; then
pkill -9 nfqttl
if $MODPATH/$MODID/nfqttl -d -s4 ; then
UIP "Run nfqttl Success!"
else
UIP "Run nfqttl Fail!"
fi
iptables -t mangle -D PREROUTING -j nfqttli
iptables -t mangle -D POSTROUTING -j nfqttlo
iptables -t mangle -F nfqttli
iptables -t mangle -X nfqttli
iptables -t mangle -F nfqttlo
iptables -t mangle -X nfqttlo
ip6tables -t mangle -D PREROUTING -j nfqttli
ip6tables -t mangle -D POSTROUTING -j nfqttlo
ip6tables -t mangle -F nfqttli
ip6tables -t mangle -X nfqttli
ip6tables -t mangle -F nfqttlo
ip6tables -t mangle -X nfqttlo
if iptables -t mangle -N nfqttli &&\
iptables -t mangle -A nfqttli -m mark --mark 0x10000001 -j RETURN &&\
iptables -t mangle -A nfqttli -m mark --mark 0x10000002 -j RETURN &&\
iptables -t mangle -A nfqttli -j NFQUEUE --queue-num 0x1000 &&\
iptables -t mangle -A PREROUTING -j nfqttli &&\
iptables -t mangle -N nfqttlo &&\
iptables -t mangle -A nfqttlo -m mark --mark 0x10000001 -j RETURN &&\
iptables -t mangle -A nfqttlo -m mark --mark 0x10000003 -j RETURN &&\
iptables -t mangle -A nfqttlo -j NFQUEUE --queue-num 0x1000 &&\
iptables -t mangle -I POSTROUTING -j nfqttlo &&\
ip6tables -t mangle -N nfqttli &&\
ip6tables -t mangle -A nfqttli -m mark --mark 0x10000001 -j RETURN &&\
ip6tables -t mangle -A nfqttli -m mark --mark 0x10000002 -j RETURN &&\
ip6tables -t mangle -A nfqttli -j NFQUEUE --queue-num 0x1000 &&\
ip6tables -t mangle -A PREROUTING -j nfqttli &&\
ip6tables -t mangle -N nfqttlo &&\
ip6tables -t mangle -A nfqttlo -m mark --mark 0x10000001 -j RETURN &&\
ip6tables -t mangle -A nfqttlo -m mark --mark 0x10000003 -j RETURN &&\
ip6tables -t mangle -A nfqttlo -j NFQUEUE --queue-num 0x1000 &&\
ip6tables -t mangle -I POSTROUTING -j nfqttlo ; then
UIP "Set Rule IpTables Success!"
else
UIP "Set Rule IpTables Fail!"
fi
else
UIP "$MSGDI"
fi
}

IPNT() {
UCSA "Install Network Tweak $VIPNT?" "" "$MSGNUS" "IPNTS"
}

IPNTS() {
NTOGoogle="8.8.8.8"; NTTGoogle="8.8.4.4"; NTOCloudFlare="1.1.1.1"; NTTCloudFlare="1.0.0.1"
UIP -d "Choose DNS Method:" "$MSGVU Google & CloudFlare DNS" "$MSGVD Google || CloudFlare DNS"
if $KEYFUNCTION; then
ONetworkTweak="$NTOGoogle"; TNetworkTweak="$NTOCloudFlare"
DNSSETPROP="setprop 2001:4860:4860::8.8.8.8
setprop 2606:4700:4700::1.1.1.1"
else
UIP -d "Choose DNS Method:" "$MSGVU Google DNS" "$MSGVD CloudFlare DNS"
if $KEYFUNCTION; then
ONetworkTweak="$NTOGoogle"; TNetworkTweak="$NTTGoogle"
DNSSETPROP="setprop 2001:4860:4860::8888
setprop 2001:4860:4860::8844"
else
ONetworkTweak="$NTOCloudFlare"; TNetworkTweak="$NTTCloudFlare"
DNSSETPROP="setprop 2606:4700:4700::1111
setprop 2606:4700:4700::1001"
fi
fi
UIP "Installing Network Tweak $IAMM"
if $MAGISK; then
MODID="$IDNT"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID/$MIPSEID
echo "#!$MIPSB/sh
MODDIR=\${0%/*}

# Set CF DNS servers address
setprop net.rmnet0.dns1 $ONetworkTweak
setprop net.rmnet0.dns2 $TNetworkTweak
setprop net.rmnet1.dns1 $ONetworkTweak
setprop net.rmnet1.dns2 $TNetworkTweak
setprop net.dns1 $ONetworkTweak
setprop net.dns2 $TNetworkTweak
setprop net.gprs.dns1 $ONetworkTweak
setprop net.gprs.dns2 $TNetworkTweak
setprop net.wcdma.dns1 $ONetworkTweak
setprop net.wcdma.dns2 $TNetworkTweak
setprop net.hspa.dns1 $ONetworkTweak
setprop net.hspa.dns2 $TNetworkTweak
setprop net.hsdpa.dns1 $ONetworkTweak
setprop net.hsdpa.dns2 $TNetworkTweak
setprop net.lte.dns1 $ONetworkTweak
setprop net.lte.dns2 $TNetworkTweak
setprop net.ltea.dns1 $ONetworkTweak
setprop net.ltea.dns2 $TNetworkTweak
setprop net.ppp0.dns1 $ONetworkTweak
setprop net.ppp0.dns2 $TNetworkTweak
setprop net.pdpbr1.dns1 $ONetworkTweak
setprop net.pdpbr1.dns2 $TNetworkTweak
setprop net.wlan0.dns1 $ONetworkTweak
setprop net.wlan0.dns2 $TNetworkTweak
setprop net.eth0.dns1 $ONetworkTweak
setprop net.eth0.dns2 $TNetworkTweak

$DNSSETPROP

# Edit the resolv conf file if it exist
if [ -a $MIPSE/resolv.conf ]; then
mkdir -p \$MODDIR$MIPSE
printf \"nameserver $ONetworkTweak\nnameserver $TNetworkTweak\" >> \$MODDIR$MIPSE/resolv.conf
chmod 644 \$MODDIR$MIPSE/resolv.conf
fi" > $MODPATH/$MODID/post-fs-data.sh
MBCCSERVICE "iptables -t nat -A OUTPUT -p tcp --dport 53 -j DNAT --to-destination $ONetworkTweak:53; iptables -t nat -A OUTPUT -p udp --dport 53 -j DNAT --to-destination $TNetworkTweak:53; iptables -t nat -I OUTPUT -p tcp --dport 53 -j DNAT --to-destination $ONetworkTweak:53; iptables -t nat -I OUTPUT -p udp --dport 53 -j DNAT --to-destination $TNetworkTweak:53"
MMPR -vc "Network Tweak" "$VIPNT" "$VCIPNT" "IMMIX" "Various Network Tweaks which will help to get better internet connectivity and low ping."
echo "#!$MIPSB/sh
echo \"0\" > /proc/sys/net/ipv4/tcp_timestamps
echo \"1\" > /proc/sys/net/ipv4/tcp_tw_reuse
echo \"1\" > /proc/sys/net/ipv4/tcp_sack
echo \"1\" > /proc/sys/net/ipv4/tcp_tw_recycle
echo \"1\" > /proc/sys/net/ipv4/tcp_window_scaling
echo \"5\" > /proc/sys/net/ipv4/tcp_keepalive_probes
echo \"30\" > /proc/sys/net/ipv4/tcp_keepalive_intvl
echo \"30\" > /proc/sys/net/ipv4/tcp_fin_timeout
echo \"404480\" > /proc/sys/net/core/wmem_max
echo \"404480\" > /proc/sys/net/core/rmem_max
echo \"256960\" > /proc/sys/net/core/rmem_default
echo \"256960\" > /proc/sys/net/core/wmem_default
echo \"4096,16384,404480\" > /proc/sys/net/ipv4/tcp_wmem
echo \"4096,87380,404480\" > /proc/sys/net/ipv4/tcp_rmem" > $MODPATH/$MODID/$MIPSEID/netspeed
PINT=$MODPATH/$MODID/system.prop; SET_PERM_RM
else
BUILD_PROP_BACKUP; PINT=$IPSBP
fi
echo "# Internet Tweaks
net.tcp.buffersize.default=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.wifi=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.lte=524288,1048576,2097152,524288,1048576,2097152
net.tcp.buffersize.umts=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.evdo=4096,87380,563200,4096,16384,262144
net.tcp.buffersize.evdo_b=6144,262144,1048576,6144,262144,1048576
net.tcp.buffersize.gprs=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.edge=4096,87380,256960,4096,16384,256960
net.tcp.buffersize.hsdpa=6144,87380,1048576,6144,87380,1048576
net.tcp.buffersize.hspa=6144,87380,524288,6144,16384,262144
net.tcp.buffersize.hspap=4096,87380,1220608,4096,16384,393216
net.tcp.buffersize.hsupa=4096,87380,704512,4096,16384,262144
ro.ril.hsxpa=2
ro.ril.hspa=2
ro.ril.lte=2
ro.ril.ltea=2
ro.ril.hep=0
ro.ril.def.agps.mode=2
ro.ril.enable.3g.prefix=1
ro.ril.enable.4g.prefix=1
ro.ril.htcmaskw1.bitmask=4294967295
ro.ril.htcmaskw1=14449
ro.ril.enable.dtm=1
ro.ril.hspaclass=15
ro.ril.lteclass=15
ro.ril.gprsclass=15
ro.ril.hsupa.category=10
ro.ril.hsdpa.category=30
ro.ril.lte.category=10
ro.ril.ltea.category=30
ro.ril.enable.a51=1
ro.ril.enable.a52=1
ro.ril.enable.a53=1
ro.ril.enable.a54=1
ro.ril.enable.a55=1

# Wireless + TCP Speed & Security Tweaks
net.core.wmem_max=1048576
net.core.rmem_max=1048576
net.core.rmem_default=262144
net.core.wmem_default=262144
net.core.optmem_max=20480
net.unix.max_dgram_qlen=50
net.ipv4.tcp_ecn=0
net.ipv4.route.flush=1
net.ipv4.tcp_rfc1337=1
net.ipv4.ip_no_pmtu_disc=0
net.ipv4.tcp_sack=1
net.ipv4.tcp_fack=1
net.ipv4.tcp_window_scaling=1
net.ipv4.tcp_timestamps=1
net.ipv4.tcp_rmem=4096 39000 187000
net.ipv4.tcp_wmem=4096 39000 187000
net.ipv4.tcp_mem=187000 187000 187000
net.ipv4.tcp_no_metrics_save=1
net.ipv4.tcp_moderate_rcvbuf=1
net.ipv6.tcp_ecn=0
net.ipv6.route.flush=1
net.ipv6.tcp_rfc1337=1
net.ipv6.ip_no_pmtu_disc=0
net.ipv6.tcp_sack=1
net.ipv6.tcp_fack=1
net.ipv6.tcp_window_scaling=1
net.ipv6.tcp_timestamps=1
net.ipv6.tcp_rmem=4096 39000 187000
net.ipv6.tcp_wmem=4096 39000 187000
net.ipv6.tcp_mem=187000 187000 187000
net.ipv6.tcp_no_metrics_save=1
net.ipv6.tcp_moderate_rcvbuf=1
net.tethering.noprovisioning=true

# DNS Tweaks
net.rmnet0.dns1=$ONetworkTweak
net.rmnet0.dns2=$TNetworkTweak
net.rmnet1.dns1=$ONetworkTweak
net.rmnet1.dns2=$TNetworkTweak
net.dns1=$ONetworkTweak
net.dns2=$TNetworkTweak
net.gprs.dns1=$ONetworkTweak
net.gprs.dns2=$TNetworkTweak
net.wcdma.dns1=$ONetworkTweak
net.wcdma.dns2=$TNetworkTweak
net.hspa.dns1=$ONetworkTweak
net.hspa.dns2=$TNetworkTweak
net.hsdpa.dns1=$ONetworkTweak
net.hsdpa.dns2=$TNetworkTweak
net.lte.dns1=$ONetworkTweak
net.lte.dns2=$TNetworkTweak
net.ltea.dns1=$ONetworkTweak
net.ltea.dns2=$TNetworkTweak
net.ppp0.dns1=$ONetworkTweak
net.ppp0.dns2=$TNetworkTweak
net.pdpbr1.dns1=$ONetworkTweak
net.pdpbr1.dns2=$TNetworkTweak
net.wlan0.dns1=$ONetworkTweak
net.wlan0.dns2=$TNetworkTweak
net.eth0.dns1=$ONetworkTweak
net.eth0.dns2=$TNetworkTweak

# Signal Tweaks
persist.cust.tel.eons=1 
ro.config.hw_fast_dormancy=1
ro.config.combined_signal=true
telephony.lteOnCdmaDevice=1
ro.telephony.default_network=33,33

# Better call voice quality
ro.ril.enable.amr.wideband=1

# Bluetooth Bitrate
persist.bt.enableAptXHD=true
persist.service.btui.use_aptx=1
persist.vendor.bt.a2dp_offload_cap=sbc-aptx-aptxtws-aptxhd-aptxadaptive-aac-ldac
persist.bluetooth.a2dp_offload.cap=sbc-aptx-aptxtws-aptxhd-aptxadaptive-aac-ldac
persist.vendor.btstack.a2dp_offload_cap=sbc-aptx-aptxtws-aptxhd-aptxadaptive-aac-ldac
persist.vendor.qcom.bluetooth.a2dp_offload_cap=sbc-aptx-aptxtws-aptxhd-aptxadaptive-aac-ldac
persist.bluetooth.disableabsvol=true
persist.vendor.btstack.enable.splita2dp=true
persist.vendor.btstack.aac_frm_ctl.enabled=true
persist.vendor.btstack.enable.twsplus=true
persist.vendor.btstack.connect.peer_earbud=true
persist.vendor.btstack.enable.twsplussho=true
ro.bluetooth.emb_wp_mode=false
ro.bluetooth.wipower=false
ro.bluetooth.remote.autoconnect=true
ro.bluetooth.request.master=true
ro.vendor.bluetooth.wipower=false
persist.vendor.qcom.bluetooth.aac_frm_ctl.enabled=true
persist.vendor.qcom.bluetooth.twsp_state.enabled=false
persist.vendor.qcom.bluetooth.enable.splita2dp=true

# SMS APN Retry
ro.gsm.2nd_data_retry_config=max/_retries=3, 2000, 2000, 2000

# Support For IPV4 and IPV6
persist.telephony.support.ipv6=1
persist.telephony.support.ipv4=1" >> $PINT
UIP "$MSGDI"
}

IPWIFIB() {
if $SNAPSOC && [ $ASDK -ge 27 ] && $LEGACYMODE && FINDER "$WCNSQCCFGI"; then
UCSA "Install Wifi Bonding For Qualcomm $VIPWIFIB?" "" "$MSGNUS" "IPWIFIBS"
fi
}

IPWIFIBS() {
UIP "Installing Wifi Bonding For Qualcomm $IAMM"
if $MAGISK; then
MODID="$IDWIFIB"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPSVE /data/vendor/wifi
MMPR -vc "Wifi Bonding (Qcom)" "$VIPWIFIB" "$VCIPWIFIB" "simonsmh" "Doubles your wi-fi bandwith by modifying WCNSS_qcom_cfg.ini."
XTWIFICONF="$MODPATH/$MODID$MIPSVE/xtwifi.conf"
else
XTWIFICONF="$IPSVE/xtwifi.conf"
fi
UIP -d "Off WiFI Log?" "$MSGVU Yes" "$MSGVD No"
if $KEYFUNCTION; then
FPATCHER "$WCNSQCCFGI" "/gEnablefwlog=/d;/gEnablePacketLog=/d;/gChannelBondingMode24GHz=/d;/gChannelBondingMode5GHz=/d;/gForce1x1Exception=/d;s/^END$/gEnablefwlog=0\ngEnablePacketLog=0\ngChannelBondingMode24GHz=1\ngChannelBondingMode5GHz=1\ngForce1x1Exception=0\nEND/g"
echo "#GTP AP Project client core config file
#GENERAL DESCRIPTION
#This is used by client core
#Qualcomm Atheros Confidential and Proprietary.
#Copyright (c) 2017 Qualcomm Technologies, Inc.
#All Rights Reserved.

##############################################################################
# non-IOT devices configuration items                                        #
# For non-IOT devices, configure below configuration items                   #
# according to the app note: 80-NK218-1 and remove the configuration items   #
# in section of \"IOT devices configuration items\".                           #
##############################################################################

# ASN URI v2 to be used by some GTP AP modules that
# need to run with ASN URI v2 protocol.
XT_SERVER_ROOT_URL = https://gtp1.izatcloud.net:443/uds/v2

# ASN URI v3 to be used by GTP AP modules that
# can support ASN URI v3 protocol.
XT_SERVER_ROOT_URL_V3 = https://gtp1.izatcloud.net:443/uds/v3

# size, in bytes, of the cache on device
SIZE_BYTE_TOTAL_CACHE = 5000000

##############################################################################
# IOT devices configuration items                                            #
# For IOT devices, configure below configuration items                       #
# according to the app note and remove the configuration items in section of #
# \"non-IOT devices configuration items\".                                     #
##############################################################################

# ASN URI v3 to be used by GTP AP modules that
# can support ASN URI v3 protocol.
# XT_SERVER_ROOT_URL_V3 = https://gtpma1.izatcloud.net:443/uds/v3

# 3: Wi-Fi APDB injection via Izat SDK. GTP server is not accessed
#    for any GTP requests, instead notification is sent to Izat SDK.
#    WiFi crowdsourcing module is disabled.
# 4: Wi-Fi APDB injection via Izat SDK. GTP server is not accessed
#    for any GTP requests, instead notification is sent to Izat SDK.
#    WiFi crowdsourcing module is active, also accessed via Izat SDK.
# GTP_AP_MODE = 4

# 1: MP cell features relies on GTP AP for either download or upload
# 0: MP cell features does not rely on GTP AP
# GTP_AP_NEEDED_BY_MP_CELL = 1

##############################################################################
# Configuration items applicable to all devices                              #
##############################################################################

# Log verbosity control for most of the GTP WiFi system, including native and
# Java componenets
# OFF = 0, ERROR = 1, WARNING = 2, INFO = 3, DEBUG = 4, VERBOSE = 5, ALL = 100
DEBUG_GLOBAL_LOG_LEVEL = 0

# this is used at the server side to distinguish uploads from different maker/model
# default \"Qualcomm\"
OEM_ID_IN_REQUEST_TO_SERVER = \"Qualcomm\"

# this is used at the server side to distinguish uploads from different maker/model
# default \"UNKNOWN\"
MODEL_ID_IN_REQUEST_TO_SERVER = \"UNKNOWN\"

##############################################################################
# Qualcomm Network Location Provider config                                  #
##############################################################################

# Accuracy Threshold for NLP position. Position exceeds thsi threshold will be filtered out.
# Default is 25000 meters.
LARGE_ACCURACY_THRESHOLD_TO_FILTER_NLP_POSITION = 25000" > $XTWIFICONF
echo "LOG_PATH_FLAG = 0
MAX_LOG_FILE_SIZE = 0
MAX_ARCHIVES = 0
MAX_PKTLOG_ARCHIVES = 0
LOG_STORAGE_PATH = /data/vendor/wlan_logs/
AVAILABLE_MEMORY_THRESHOLD = 0
MAX_LOG_BUFFER = 0
MAX_PKTLOG_BUFFER = 0
HOST_LOG_FILE = /data/vendor/wlan_logs/buffered_cnsshost_log.txt
FIRMWARE_LOG_FILE = /data/vendor/wlan_logs/buffered_cnssfw_log.txt
ENABLE_FLUSH_LOG = 0
REAL_TIME_WRITE = 0" > /data/vendor/wifi/cnss_diag.conf
else
FPATCHER "$WCNSQCCFGI" "/gChannelBondingMode24GHz=/d;/gChannelBondingMode5GHz=/d;/gForce1x1Exception=/d;s/^END$/gChannelBondingMode24GHz=1\ngChannelBondingMode5GHz=1\ngForce1x1Exception=0\nEND/g"
fi
UIP "$MSGDI"
}

IPUSBTF() {
if [ $MIUI != true ] && CHECK_DEVICE dipper && [ -d $IPDSNS ]; then
UCSA "Install USB Tethering Fix $VIPUSBTF?" "" "$MSGNUS" "IPUSBTFS"
fi
}

IPUSBTFS() {
UIP "Installing USB Tethering Fix $IAMM"
if $MAGISK; then
MODID="$IDUSBTF"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MMPR -v "USB Tethering Fix" "$VIPUSBTF" "USB Tethering Fix If Crash SUI, Reboot, Etc"
MBCCSERVICE "rm -rf $IPDSNS/*; chmod 400 $IPDSNS"
fi
rm -rf $IPDSNS/*; chmod 400 $IPDSNS
UIP "$MSGDI"
}

} #

{ #Utilities: BB/ZSigner/SELC/ASTE/CC

IPBB() {
if [ $BOOTMODE != true ] && [ -f $SYSTEM/$BUSYBOX/busybox ]; then
UIP -d "$MSGFI Brutal BusyBox In $BUSYBOX, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Remove Symlinking BB Applets"
for applet in $($SYSTEM/$BUSYBOX/busybox --list); do
rm -f $SYSTEM/$BUSYBOX/$applet
done
UIP "Remove BB"
rm -f $SYSTEM/$BUSYBOX/busybox $AIOPFMDPH/busyboxbrutal
UIP "$MSGUD"
fi
else
UCSA "Install Brutal Busybox $VIPBB?" "" "$MSGNUS" "IPBBS"
fi
}

IPBBS() {
UIP "Installing Brutal BusyBox $IAMM"
if $MAGISK; then
MODID="$IDBB"; REMOVER "$MODID busybox-ndk"
mkdir -p $MODPATH/$MODID$IPPSXBM
MMPR -vc "Brutal Busybox" "$VIPBB" "$VCIPBB" "FeraVolt" "Brutal busybox with almost all available applets. Compiled with NDK clang + LTO + Ofast + llvm polly. Has all Android NDK patches. ARMv7/ARMv8, x86/x86-64."
FIPBB=$MODPATH/$MODID$IPPSXBM
if [ -d $IPSB ] && [ ! -d $IPSXB ]; then echo -e "#!$MIPSB/sh\nfor sd in $MIPSB/*; do\nrm -f $MODPATH/$MODID/\${sd};\ndone;" > $MODPATH/$MODID/post-fs-data.sh; fi
SET_PERM_RM
else
FIPBB=$IPPSXB
touch $AIOPFMDPH/busyboxbrutal
fi
cp -f $BB/busybox-$arch $FIPBB/busybox
UIP "Setting BB Permissions"
chmod 777 $FIPBB/busybox
UIP "Symlinking BB Applets"
$FIPBB/busybox --install -s $FIPBB
UIP "$MSGDI"
}

IPZSAAPT() {
if [ $BOOTMODE != true ] && [ -f $IPSB/zipsigner-3.0-dexed.jar ] && [ -f $IPSB/aapt ] && [ -f $IPSB/zip ] && [ -f $IPSB/zipalign ] && [ -f $IPSB/zipsigner ]; then
UIP -d "$MSGFI ZipSigner & aapt, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Remove ZipSigner & aapt"
rm -f $IPSB/zipsigner-3.0-dexed.jar $IPSB/aapt $IPSB/zip $IPSB/zipalign $IPSB/zipsigner $AIOPFMDPH/addons
UIP "$MSGUD"
fi
else
UCSA "Install ZipSigner & aapt $VIPZSAAPT?" "" "$MSGNUS" "IPZSAAPTS"
fi
}

IPZSAAPTS() {
UIP "Installing ZipSigner & aapt $IAMM"
if $MAGISK; then
MODID="$IDZSAAPT"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPSB
cp -f $ZIPSIGNER $MODPATH/$MODID$MIPSB; cp -f $ZIPSIGNERJAR $MODPATH/$MODID$MIPSB; cp -f $ZIPPACKER $MODPATH/$MODID$MIPSB; cp -f $ZIPALIGN $MODPATH/$MODID$MIPSB; cp -f $AADDONS/aapt-$arch $MODPATH/$MODID$MIPSB/aapt
MMPR -vcsdt "ZipSigner & Zip for Android NDK" "$VIPZSAAPT" "$VCIPZSAAPT" "osm0sis & topjohnwu @ xda-developers" "Wrapped dexed zipsigner.jar, and static ARM zip and zipalign binaries for Android built with the NDK" "https://forum.xda-developers.com/showthread.php?t=2239421" "https://www.paypal.me/osm0sis" "1500"
SET_PERM_RM
else
cp -f $ZIPSIGNER $IPSB; cp -f $ZIPSIGNERJAR $IPSB; cp -f $ZIPPACKER $IPSB; cp -f $ZIPALIGN $IPSB; cp -f $AADDONS/aapt-$arch $IPSB/aapt; touch $AIOPFMDPH/addons
fi
UIP "$MSGDI"
WCANFTP -bb
}

IPSELC() {
if $MAGISK; then
UCSA "Install SELinux Changer $VIPSELC?" "" "$MSGNUS" "IPSELCS"
fi
}

IPSELCS() {
MODID="$IDSELC"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
SLSP="Permissive"; SLSE="Enforcing"
UIP "Change SELinux" "SELinux Now: $SELINUXS" "$MSGVU In $SLSP" "$MSGVD In $SLSE"
if $KEYFUNCTION; then SLSC=$SLSP; SLSCN=0; else SLSC=$SLSE; SLSCN=1; fi
MMPR -v "SELinux Changer" "$VIPSELC" "Switch SELinux To $SLSC"
echo -e "setenforce $SLSCN\necho -n $SLSCN > /sys/fs/selinux/enforce" > $MODPATH/$MODID/service.sh
if $BOOTMODE; then
setenforce $SLSCN
echo -n $SLSCN > /sys/fs/selinux/enforce
UIP "SELinux Will Now Be In $SLSC" 
fi
SET_PERM_RM -msgdi
}

IPASTE() {
if $MAGISK && [ $ASDK -le 29 ]; then
UCSA "Install App Systemizer (TE) $VIPASTE?" "" "$MSGNUS" "IPASTES"
fi
}

IPASTES() {
UIP "Installing App Systemizer (Terminal Emulator) $IAMM"
MODID="$IDASTE"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$IPPSXBM
$ECHO "#!$MIPSB/sh
# Detect root
_name=\$(basename \$0)
ls /data >/dev/null 2>&1 || { echo \"$MODID needs to run as root!\"; echo \"type 'su' then '\$_name'\"; exit 1; }

# Magisk Mod Directory
MOUNTPATH=\"$MODPATH\"
MODDIR=\"\$MOUNTPATH/$MODID\"
[ ! -d \$MODDIR ] && { echo \"Module not detected!\"; exit 1; }

# Load mod-util.sh
. \$MODDIR/mod-util.sh || exit \$?

# Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file
LOG=$IPDLTMP/$MODID.log
oldLOG=$IPDLTMP/$MODID-old.log
# > Verbose output goes here
VERLOG=$IPDLTMP/$MODID-verbose.log
oldVERLOG=$IPDLTMP/$MODID-verbose-old.log

# Start Logging verbosely
mv -f \$VERLOG \$oldVERLOG 2>/dev/null; mv -f \$LOG \$oldLOG 2>/dev/null
set -x 2>\$VERLOG

# Main
# > You can start your MOD here.
# > You can add functions, variables & etc.
# > Rather than editing the default vars above.

help_me() {
  cat << EOF
\$MODTITLE \$VER(\$REL)
by \$AUTHOR

Usage: \$_name
   or: \$_name [options]...
   
Options:
    -nc                    removes ANSI escape codes
    -f                     use 'Set SELinux' in the session for faster app listing
    -a [package name]      systemizes the package name(s) provided
    -d [apk dir]           systemizes the apk(s) provided
    -l                     list all systemized apps
    -h                     show this message
EOF
exit
}

use_aapt=false
export PATH=\$MODDIR:\$PATH
[[ \"\$(which aapt)\" ]] && use_aapt=true
sysapp=0
privapp=0
IFUPDATED=\"\"
perm_xml1=\$SYSTEM/etc/permissions/privapp-permissions-platform.xml
perm_xml=\$MODDIR\$SYSTEM2/etc/permissions/privapp-permissions-platform.xml
[ -f \$perm_xml1 ] && patch_xml=true || patch_xml=false
LISTFILE=\$MODDIR/systemize.list
BOOTMODE=true
RESCAN=true
MERGEIMG=$NVBASE/magisk_merge.img
use_cmd=false
se_set=false
faster_flag=false
[ -f \$SYSTEM2/build.prop ] && SYSTEM=\$SYSTEM2

# Method
if [ \"\$1\" == \"-f\" ]; then
  use_cmd=true
  se_set=true
  faster_flag=true
  shift
elif [ \"\$(grep_prop selinux \$MODDIR/module.prop)\" == \"true\" ]; then
  use_cmd=true
  se_set=true
else
  [ \$(getenforce) == \"Permissive\" ] && use_cmd=true || {
    [ \$ANDROID_SOCKET_adbd ] && use_cmd=true || use_cmd=false
  }
fi
method=\"ls /data/data\"
detect=\"codePath=\$SYSTEM|targetSdk=0|codePath=/vendor/overlay\"
if \$use_cmd; then
  [ \$API -le 23 ] && method=\"pm list packages -3\"
  [ \$API -ge 24 ] && method=\"cmd package list packages -3\"
  detect=\"targetSdk=0\"
fi
# Detect if /system/app is available
[ -d \$SYSTEM/app ] && sysapp=1

# Detect if /system/priv-app is available
[ -d \$SYSTEM/priv-app ] && privapp=1

# Detect free space
free_space=\"\$(df -m \$MOUNTPATH | tail -n1 | awk '{print \$4}')\"
total_space=\"\$(df -m \$MOUNTPATH | tail -n1 | awk '{print \$2}')\"

# List installed apps
list_installed_apps() {
  if \$RESCAN; then
    if \$se_set; then
      if [ \"\$(getenforce)\" == \"Enforcing\" ]; then
        setenforce 0
      else
        se_set=false
      fi
    fi
    rm \$LISTFILE 2>>\$LOG; app=(); app1=(); app2=();
    for i in \$(\$method | sed 's/.*://'); do
      h=\$(((h+1)%4))
      Spinner \"Loading Apps\"
      if ! dumpsys package \$i | grep -qEm1 -e \"(\$detect)\" - ; then
        app=\${i##*/}
        package=\$app
        package[c]=\$package
        dir_app[c]=/data/app/\$app-*/base.apk
        \$use_aapt && { app=\$(aapt d badging \${dir_app[c]} | grep 'application-label:'); app=\${app#*:}; }
        app1[c]=\$(echo \"\$app\" | tr ' ' '_' | tr -d \"'\")
        echo \"app\${c}^=\${app1[c]}^=\${dir_app[c]}^=\${package[c]}^=\" >> \$LISTFILE
        c=\$((c+1))
      fi
    done
    app2=(\$(echo \"\${app1[@]}\" | sed \"s/.*'//g\"))
    app=(\$(printf '%s\n' \"\${app2[@]}\" | sort -f))
    RESCAN=false
    \$se_set && setenforce 1
  fi
}

# List systemized apps
list_systemized_apps() {
  systemized_apps=(); rev_dir=(); rev_label=(); rev_app=()
  [ \"\$tmpmodpath\" ] && MODDIRS=\"\$MODDIR \$path\" || MODDIRS=\"\$MODDIR\"
  systemized_apps=(\$(find \$MODDIRS -name \"*.apk\" -type f))
  cc=1
  for i in \${systemized_apps[@]}; do
    ProgressBar \$cc \${#systemized_apps[@]}
    rev_dir[cc]=\${i%/*}
    rev_label=\${i%/*}
    rev_label[cc]=\${rev_label##*/}
    rev_app[cc]=\${rev_label[cc]}
    \$use_aapt && { rev_app=\$(aapt d badging \$i | grep 'application-label:'); rev_app=\${rev_app#*:}; rev_app[cc]=\$(echo \$rev_app | tr ' ' '_' | tr -d \"'\"); }
    cc=\$((cc+1))
  done
}

get_cfg() {
  APP_NAME=\$(grep -wm1 \"=\${1}^\" \$LISTFILE | tr '^=' ' ' | awk '{print \$2}') || abort \"Package doesn't exist!\"
  DIR_APP=\$(grep -wm1 \"=\${1}^\" \$LISTFILE | tr '^=' ' ' | awk '{print \$3}') || abort \"Package doesn't exist!\"
  PKG=\$(grep -wm1 \"=\${1}^\" \$LISTFILE | tr '^=' ' ' | awk '{print \$4}') || abort \"Package doesn't exist!\"
}

# Systemize function
# Usage: systemize <install directory> <apk directory>
systemize() {
  if [ \"\$2\" ]; then
    apkdir=\"\$(echo \$2)\"
    [ ! -f \$apkdir ] && abort \" \$apkdir doesn't exist!\"
    apk=\${apkdir##*/}
    [ \"\$3\" ] && PKG=\"\$3\"
    if [ \"\$PKG\" ]; then
      name=\$PKG
    else
      name=\${apkdir%/*}; name=\${name##*/}
      name=\$(echo \$name | tr -d ' ' | tr -d \"'\" | tr -d '*' | tr -d '-')
      \$use_aapt && {
        name=\$(aapt d badging \$apkdir | head -n1 | awk '{print \$2}')
        name=\$(echo \${name#*=} | tr -d ' ' | tr -d \"'\")
      }
    fi
  fi
  chk_apk_size \$apkdir
  echo \" Transfering \${apk}(\${name}) to '\$1'...\"
  if [ -d \$SYSTEM/app/\${name} ] || [ -d \$SYSTEM/priv-app/\${name} ] || [ -d \$MODDIR\$SYSTEM2/app/\${name} ] || [ -d \$MODDIR\$SYSTEM2/priv-app/\${name} ]; then
	\$UNMOUNTIMG && {
	  unmount_magisk_img
	  IMG=\$ORIGIMG
	  MOUNTPATH=\$ORIGMOUNTPATH
	  MODDIR=\$ORIGMODDIR
	}
    abort \" App exists!\"
  else
    mkdir -p \${MODDIR}\${1}/\${name}
    cp -f \$apkdir \${MODDIR}\${1}/\${name}/\${name}.apk
    if [ -d \${apkdir%/*}/lib ]; then
      echo \" Transfering libs\"
      cp -rf \${apkdir%/*}/lib \${MODDIR}\${1}/\${name}
    fi
    set_perm_recursive \${MODDIR}\${1}/\${name} 0 0 0755 0644
    \$patch_xml && [ \${1##*/} == \"priv-app\" ] && {
      echo \" Granting Permissions\"
      mkdir -p \$MODDIR\$SYSTEM2/etc/permissions 2>/dev/null
      pp=0
      app_perm=(); perm=()
      for i in \$(aapt d permissions \$apkdir | grep -v 'package:' | awk '{print \$2}'); do
        _perm=\$(echo \${i#*=} | tr -d \"'\")
        perm[pp]=\$_perm
        pp=\$((pp+1))
      done
      app_perm=(\$(echo \"\${perm[@]}\" | tr ' ' '\n' | sort -u | tr '\n' ' '))
      echo \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>
<!--
	Generated by \$MODTITLE by \$AUTHOR
-->
<permissions>
    <privapp-permissions package=\\\"\${name}\\\">\" >> \$MODDIR\$SYSTEM2/etc/permissions/privapp-permissions-\${name}.xml
      for i in \${app_perm[@]}; do
        echo \"        <permission name=\\\"\$i\\\"/>\" >> \$MODDIR\$SYSTEM2/etc/permissions/privapp-permissions-\${name}.xml
      done
      echo \"    </privapp-permissions>
</permissions>\" >> \$MODDIR\$SYSTEM2/etc/permissions/privapp-permissions-\${name}.xml
      chmod 644 \$MODDIR\$SYSTEM2/etc/permissions/privapp-permissions-\${name}.xml
    }
    echo \" \${name} - \${W}Done\${N}\"
	\$UNMOUNTIMG && {
	  unmount_magisk_img
	  IMG=\$ORIGIMG
	  MOUNTPATH=\$ORIGMOUNTPATH
	  MODDIR=\$ORIGMODDIR
	}
  fi
}

enter_apk_dir() {
  clear
  echo \"Enter APK Path\"
  echo \"Example: \${W}/sdcard/launcher.apk\${N}\"
  echo \" x - \${Bl}Back to Menu\${N}\"
  echo -n \" > \"
  read apkdir
  [ \"\$apkdir\" == \"x\" ] && menu
  echo -n \"Checking if file exists\"
  if [ -f \"\$apkdir\" ]; then
    echo \" - OK\"
    apk=\${apkdir##*/}
    echo -n \"Checking if file is an APK\"
    if [ \"\${apk##*.}\" == \"apk\" ]; then
      echo \" - OK\"
      echo -n \"Checking package name\"
      name=\${apk%'.apk'*}
      if [ \$use_aapt ]; then
        name=\$(aapt d badging \$apkdir | head -n1 | awk '{print \$2}')
        name=\${name#*=}
      fi
      name=\$(echo \$name | tr -d ' ' | tr -d \"'\")
      echo \" - \$name\"
      if [ \$privapp == 1 ] && [ \$sysapp == 1 ]; then
        echo \"Where to install?\"
        echo -n \"< 1 - \$SYSTEM/app | 2 - \$SYSTEM/priv-app | 0 - cancel > : \"
        read loc
        if [ \"\$loc\" == 1 ]; then
          systemize /system/app
        elif [ \"\$loc\" == 2 ]; then
          systemize /system/priv-app
        elif [ \"\$loc\" == 0 ]; then
          echo \" \$name canceled\"; exit
        else
          abort \"Invalid!\"
        fi
      elif [ \$sysapp == 1 ] && [ \$privapp == 0 ]; then
        systemize /system/app
      elif [ \$privapp == 1 ] && [ \$sysapp == 0 ]; then
        systemize /system/priv-app
      else
        abort \" - No installation directory!\"
      fi
    else
      abort \" - \$apk is not an APK!\"
    fi
  else
    abort \" - \$apkdir doesn't exist!\"
  fi
}

enter_apk_name() {
  clear
  echo \"Enter the App Label of the installed app\"
  echo \"Example: com.android.launcher\"
  echo \" x - \${Bl}Back to Menu\${N}\"
  echo -n \" > \"
  read apklabel
  if [ ! \"\$apklabel\" ]; then
    abort \"error\"
  elif [ \"\$apklabel\" == \"x\" ]; then
    menu
  fi
  if [ \$privapp == 1 ] && [ \$sysapp == 1 ]; then
    echo \" Where to install?\"
    echo -n \" < 1 - \$SYSTEM/app | 2 - \$SYSTEM/priv-app | 0 - cancel > : \"
    read loc
    if [ \"\$loc\" == 1 ]; then
      installdir=\"app\"
    elif [ \"\$loc\" == 2 ]; then
      installdir=\"priv-app\"
    elif [ \"\$loc\" == 0 ]; then
      echo \" \$apklabel canceled\"; exit
    else
      abort \"Invalid!\"
    fi
  elif [ -d \$SYSTEM/priv-app ]; then
    installdir=\"priv-app\"
  else
    installdir=\"app\"
  fi
  systemize /system/\$installdir /data/app/\${apklabel}-*/base.apk
  [ \$? -ne 0 ] && abort \"Failed!\"
}

# Merge
merge_img() {
  path=/dev/magisk_merge
  tmpmodpath=\$path/\${ID}
  [ ! \"\$ORIGIMG\" ] && ORIGIMG=\$IMG
  IMG=\$MERGEIMG
  [ ! \"\$ORIGMOUNTPATH\" ] && ORIGMOUNTPATH=\$MOUNTPATH
  MOUNTPATH=\$path
  [ ! \"\$ORIGMODDIR\" ] && ORIGMODDIR=\$MODDIR
  MODDIR=\$tmpmodpath
  reqSizeM=\$apk_sizeM
  mount_magisk_img
  cp -rf \$ORIGMODDIR/. \$MODDIR
}

# Unmount magisk img
unmount_magisk_img() {
  check_filesystem \$IMG \$MOUNTPATH
  newSizeM=\$((curUsedM / 32 * 32 + 64))
  \$MAGISKBIN/magisk imgtool umount \$MOUNTPATH \$MAGISKLOOP
  if [ \$curSizeM -gt \$newSizeM ]; then
    ui_print \"- Shrinking \$IMG to \${newSizeM}M\"
    \$MAGISKBIN/magisk imgtool resize \$IMG \$newSizeM >&2
  fi
}

# Check apk size
chk_apk_size() {
  dir_app=\$(echo \$1)
  free_space=\"\$(df -m \$MOUNTPATH | tail -n1 | awk '{print \$3}')\"
  total_space=\"\$(df -m \$MOUNTPATH | tail -n1 | awk '{print \$2}')\"
  apk_sizeM=\"\$(du -m \$dir_app | awk '{print \$1}')\"
  [ -d \${dir_app%/*}/lib ] && {
    lib_sizeM=\"\$(du -ms \${dir_app%/*}/lib | awk '{print \$1}')\"
    apk_sizeM=\"\$((apk_sizeM+lib_sizeM))\"
  }
  UNMOUNTIMG=false
  if [ \"\$apk_sizeM\" -gt \"\$((free_space-10))\" ] && [ \"\$MOUNTPATH\" == \"/sbin/.magisk/img\" ]; then
    echo \" Checking App size - \${W}\${apk_sizeM}M\${N}\"
    echo \"- Insufficient \$MOUNTPATH space!\"
    echo \"- APK size: \${apk_sizeM}M | \$MOUNTPATH Free: \${free_space}M\"
    echo \"- Using magisk_merge.img in systemizing...\"
    UNMOUNTIMG=true
    merge_img \${dir_app} 2>>\$LOG
  elif [ -f \"\$MERGEIMG\" ] && [ \"\$MOUNTPATH\" == \"/sbin/.magisk/img\" ]; then
    echo \"- Using magisk_merge.img in systemizing...\"
    UNMOUNTIMG=true
    merge_img \${dir_app} 2>>\$LOG
  else
    echo \" Checking APK size - \${W}\${apk_sizeM}M\${N}\"
  fi
}

mount -o remount,rw \$MOUNTPATH 2>>\$LOG

menu_list_systemized_apps() {
  clear
  list_installed_apps 2>>\$LOG
  clear
  echo \"\$div\"
  title_div \"Installed Apps\"
  echo \"\$div\"
  echo \"\"
  for i in \$(seq 0 \$((\${#app[@]}-1))); do
    echo \" \$((i+1)) - \${W}\${app[i]}\${N}\" | tr '_' ' '
  done
  echo \"\"
  echo \" \${Bl}To systemize multiple apps, enter multiple number. Example:\${N} \\\"1 \$(echo \${#app[\$((\${#app[@]}/3))]}) \$(echo \${#app[\$((\${#app[@]}/2))]})\\\"\"
  echo \" x - \${Bl}Back to Menu\${N}\"
  echo \" r - \${Bl}Refresh list\${N}\"
  echo \" 0 - \${Bl}Exit\${N}\"
  echo -n \"[CHOICE]: \"
  read installed
  [ \"\$installed\" == \"x\" ] && menu
  [ \"\$installed\" == \"r\" ] && RESCAN=true && menu_list_systemized_apps
  for i in \$installed; do
    if [ \"\$i\" -gt \${#app[@]} ] || [ \"\$i\" -lt 0 ] || [ \"\$i\" == \"\" ] || [ -n \"\$(echo \$i | tr -d '0-9')\" ] ; then
      abort \"Invalid!\"
    elif [ \"\$i\" == 0 ]; then
      exit
    else
      echo \"\$div\"
      i=\$((i-1))
      echo \"Systemizing \${W}\${app[i]}\${N}\" | tr '_' ' '
      get_cfg \${app[i]}
      echo -n \" Checking APK directory\"
      if [ -f \$DIR_APP ]; then
        echo \" - \${W}OK\${N}\"
        apkdir=\$DIR_APP
        apk=\${apkdir##*/}
        name=\${apkdir%/*}; name=\${name##*/}; name=\$(echo \$name | tr -d ' ' | tr -d \"'\" | tr -d '*' | tr -d '-')
        echo \" Checking package name - \${W}\$PKG\${N}\"
        if [ \$privapp == 1 ] && [ \$sysapp == 1 ]; then
          echo \" Where to install?\"
          echo -n \" < 1 - \$SYSTEM/app | 2 - \$SYSTEM/priv-app | 0 - cancel > : \"
          read loc
          if [ \"\$loc\" == 1 ]; then
            systemize /system/app
          elif [ \"\$loc\" == 2 ]; then
            systemize /system/priv-app
          elif [ \"\$loc\" == 0 ]; then
            echo \" \${app[i]} canceled\"; true
          else
            abort \"Invalid!\"
          fi
        elif [ \$sysapp == 1 ] && [ \$privapp == 0 ]; then
          systemize /system/app
        elif [ \$privapp == 1 ] && [ \$sysapp == 0 ]; then
          systemize /system/priv-app
        else
          abort \" - No installation directory!\"
        fi
      else
        abort \" - APK doesn't exist!\"
      fi
    fi
  done
  echo \"Reboot to apply changes\"
  echo -n \"Return to menu? < y | n >: \"
  read mchoice
  [ \"\$mchoice\" == \"y\" ] && menu || exit
}

revert_apps() {
  list_systemized_apps 2>>\$LOG
  clear
  echo \"\$div\"
  title_div \"Revert\"
  echo \"\$div\"
  echo \"\"
  for i in \$(seq 1 \$((\${#rev_app[@]}-1))); do
    echo \" \$i - \${W}\${rev_app[i]}\${N}\" | tr '_' ' '
  done
  echo \"\"
  echo \" \${Bl}To systemize multiple apps, enter multiple number. Example:\${N} \\\"1 \${#rev_app[\$((\${#rev_app[@]}/3))]} \${#rev_app[\$((\${#rev_app[@]}/2))]}\\\"\"
  echo \" x - \${Bl}Back to Menu\${N}\"
  echo \" 0 -  Exit\"
  echo -n \"[CHOICE]: \"
  read revert
  [ \"\$revert\" == \"x\" ] && menu
  for i in \$revert; do
    if [ \"\$i\" -gt \${#rev_app[@]} ] || [ \"\$i\" -lt 0 ] || [ \"\$i\" == \"\" ] || [ -n \"\$(echo \$i | tr -d '0-9')\" ] ; then
      abort \"Invalid!\"
    elif [ \"\$i\" == 0 ]; then
      exit
    else
      echo \"Reverting \${rev_app[i]}...\" | tr '_' ' '
      rm -rf \${rev_dir[i]}
      rm -rf \$MODDIR\$SYSTEM2/etc/permissions/privapp-permissions-\${rev_label[i]}.xml >>\$LOG 2>&1
    fi
  done
  echo \"Reboot to apply changes\"
  echo -n \"Return to menu? < y | n >: \"
  read mchoice
  [ \"\$mchoice\" == \"y\" ] && menu || exit
}

set_selinux() {
  clear
  echo \"\$div\"
  title_div \"Set SELinux\"
  echo \"\$div\"
  echo \" This setting turns on the ability to dynamically disable\"
  echo \" SELinux if enabled (only when needed to enable unrestricted\"
  echo \" actions) for the script to execute noticeably faster.\"
  echo \" It is fairly safe to do since it will immediately return\"
  echo \" SELinux status after a certain action.\"
  echo \"\$div\"
  echo \"\"
  stat_color=\$G
  \$faster_flag || se_set=\"\$(grep_prop selinux \$MODDIR/module.prop)\"
  [ \"\$se_set\" != true ] && se_set=false && stat_color=\$R
  echo \" SELinux Status: \$(getenforce)\"
  echo \" Enabled: \${stat_color}\$se_set\${N}\"
  [ \$(getenforce) == \"Permissive\" ] && echo \" \${Y}SELinux is disabled! No need to enable this if it's permissive.\${N}\"
  echo \"\"
  echo \" c - \${W}Change status\${N}\"
  echo \" x - \${Bl}Back to Menu\${N}\"
  echo \" 0 - Exit\"
  echo -n \"[CHOICE]: \"
  read sechoice
  case \"\$sechoice\" in
    x|X) menu;;
    c|C) if \$faster_flag; then
        echo \"Using '-f' (faster) option, changes will not be applied!\"
		exit
      elif \$se_set; then
        set_file_prop selinux false \$MODDIR/module.prop
        echo \"Set to false\"
        echo \"Exiting script to apply changes\"
        exit
      else
        set_file_prop selinux true \$MODDIR/module.prop
        echo \"Set to true\"
        echo \"Exiting script to apply changes\"
        exit
      fi;;
    0) exit;;
    *) echo \"Invalid!\"; exit;;
  esac
}

menu() {
  mod_head
  stat_color=\$G
  \$faster_flag || se_set=\"\$(grep_prop selinux \$MODDIR/module.prop)\"
  [ \"\$se_set\" != true ] && se_set=false && stat_color=\$R
  echo \"Set SELinux Enabled: \${stat_color}\$se_set\${N}\"
  echo \"SELinux Status: \$(getenforce)\"
  echo \"\$div\"
  echo \"\"
  echo \" 1 - Systemize Installed Apps (Listed)\"
  echo \" 2 - Systemize Installed Apps (Enter label) \"
  echo \" 3 - Systemize given APK\"
  if [[ \$(find \$MODDIR -name \"*.apk\" 2>>\$LOG) ]]; then
    echo \" 4 - Revert Systemized Apps\"
  fi
  echo \" s - Set SELinux\"
  prandom \" d - \${C}Donate\${N}\"
  echo \" 0 - Exit\"
  echo \"\"
  echo -n \"[CHOICE]: \"
  read choice
  case \"\$choice\" in
    1) menu_list_systemized_apps;;
    2) enter_apk_name; exit \$?;;
    3) enter_apk_dir; exit \$?;;
    4) revert_apps; exit \$?;;

    d|D) am start https://paypal.me/veez21 >>\$LOG 2>&1;;
    logs) upload_logs;;
    s|S) set_selinux;;
    0) exit;;
    *) echo \"Invalid!\"; exit 1;;
  esac
}

case \"\$1\" in
  -a) shift
    for i in \"\$@\"; do
	  [ -d \$SYSTEM/priv-app ] && systemize /system/priv-app \"/data/app/\${i}-*/base.apk\" || systemize /system/app \"/data/app/\${i}-*/base.apk\" \"\$i\"
	  echo \"\$div\"
	done
	exit;;
  -d) shift
    for i in \"\$@\"; do
	  [ -d \$SYSTEM/priv-app ] && systemize /system/priv-app \"\$i\" || systemize /system/app \"\$i\"
	  echo \"\$div\"
	done
	exit;;
  -l) list_systemized_apps 2>>\$LOG
    echo
    for i in \${!rev_dir[@]}; do
      title_div \"App \$i\"
      echo \"Name\t: \$(echo \${rev_app[i]}| tr '_' ' ')\nLabel\t: \${rev_label[i]}\nDirectory\t: \$(echo \${rev_dir[i]} | sed 's/.*\/system\///g')\" | expand -t 10
    done
    exit;;
  -h|--help) help_me;;
esac

menu
exit \$?" > $MODPATH/$MODID$IPPSXBM/systemize
$ECHO "# Check A/B slot
if [ -d /system_root ]; then
  isABDevice=true
  SYSTEM=/system_root/system
  SYSTEM2=/system
  CACHELOC=/data/cache
else
  isABDevice=false
  SYSTEM=/system
  SYSTEM2=/system
  CACHELOC=/cache
fi
[ -z \"\$isABDevice\" ] && { echo \"Something went wrong!\"; exit 1; }

#=========================== Set Busybox up
# Variables:
#  BBok - If busybox detection was ok (true/false)
#  _bb - Busybox binary directory
#  _bbname - Busybox name

# set_busybox <busybox binary>
# alias busybox applets
set_busybox() {
  if [ -x \"\$1\" ]; then
    for i in \$(\${1} --list); do
      if [ \"\$i\" != 'echo' ]; then
        alias \"\$i\"=\"\${1} \$i\" >/dev/null 2>&1
      fi
    done
    _busybox=true
    _bb=\$1
  fi
}
_busybox=false
if \$_busybox; then
  true
elif [ -x \$SYSTEM2/xbin/busybox ]; then
  _bb=\$SYSTEM2/xbin/busybox
elif [ -x \$SYSTEM2/bin/busybox ]; then
  _bb=\$SYSTEM2/bin/busybox
else
  echo \"! Busybox not detected\"
  echo \"Please install one (@osm0sis' busybox recommended)\"
  false
fi
set_busybox \$_bb
[ \$? -ne 0 ] && exit \$?
[ -n \"\$ANDROID_SOCKET_adbd\" ] && alias clear='echo'
_bbname=\"\$(\$_bb | head -n1 | awk '{print \$1,\$2}')\"
BBok=true
if [ \"\$_bbname\" == \"\" ]; then
  _bbname=\"BusyBox not found!\"
  BBok=false
fi

#=========================== Default Functions and Variables

# Set perm
set_perm() {
  chown \$2:\$3 \$1 || return 1
  chmod \$4 \$1 || return 1
  [ -z \$5 ] && chcon 'u:object_r:system_file:s0' \$1 || chcon \$5 \$1 || return 1
}

# Set perm recursive
set_perm_recursive() {
  find \$1 -type d 2>/dev/null | while read dir; do
    set_perm \$dir \$2 \$3 \$4 \$6
  done
  find \$1 -type f -o -type l 2>/dev/null | while read file; do
    set_perm \$file \$2 \$3 \$5 \$6
  done
}

# Mktouch
mktouch() {
  mkdir -p \${1%/*} 2>/dev/null
  [ -z \$2 ] && touch \$1 || echo \$2 > \$1
  chmod 644 \$1
}

# Grep prop
grep_prop() {
  local REGEX=\"s/^\$1=//p\"
  shift
  local FILES=\$@
  [ -z \"\$FILES\" ] && FILES='/system/build.prop'
  sed -n \"\$REGEX\" \$FILES 2>/dev/null | head -n 1
}

# Abort
abort() {
  echo \"\$1\"
  exit 1
}


# Device Info
# Variables: BRAND MODEL DEVICE API ABI ABI2 ABILONG ARCH
BRAND=\$(getprop ro.product.brand)
MODEL=\$(getprop ro.product.model)
DEVICE=\$(getprop ro.product.device)
ROM=\$(getprop ro.build.display.id)
API=\"grep_prop ro.build.version.sdk\"
ABI=\"grep_prop ro.product.cpu.abi | cut -c-3\"
ABI2=\"grep_prop ro.product.cpu.abi2 | cut -c-3\"
ABILONG=\"grep_prop ro.product.cpu.abi\"
ARCH=arm
ARCH32=arm
IS64BIT=false
if [ \"\$ABI\" = \"x86\" ]; then ARCH=x86; ARCH32=x86; fi;
if [ \"\$ABI2\" = \"x86\" ]; then ARCH=x86; ARCH32=x86; fi;
if [ \"\$ABILONG\" = \"arm64-v8a\" ]; then ARCH=arm64; ARCH32=arm; IS64BIT=true; fi;
if [ \"\$ABILONG\" = \"x86_64\" ]; then ARCH=x64; ARCH32=x86; IS64BIT=true; fi;
  
# Version Number
VER=\$(grep_prop version \$MODDIR/module.prop)
# Version Code
REL=\$(grep_prop versionCode \$MODDIR/module.prop)
# Author
AUTHOR=\$(grep_prop author \$MODDIR/module.prop)
# Mod Name/Title
MODTITLE=\$(grep_prop name \$MODDIR/module.prop)

# Colors
G='\e[01;32m'		# GREEN TEXT
R='\e[01;31m'		# RED TEXT
Y='\e[01;33m'		# YELLOW TEXT
B='\e[01;34m'		# BLUE TEXT
V='\e[01;35m'		# VIOLET TEXT
Bl='\e[01;30m'		# BLACK TEXT
C='\e[01;36m'		# CYAN TEXT
W='\e[01;37m'		# WHITE TEXT
BGBL='\e[1;30;47m'	# Background W Text Bl
N='\e[0m'			# How to use (example): echo \"\${G}example\${N}\"
loadBar=' '			# Load UI
# Remove color codes if -nc or in ADB Shell
[ -n \"\$1\" -a \"\$1\" == \"-nc\" ] && shift && NC=true
[ \"\$NC\" -o -n \"\$ANDROID_SOCKET_adbd\" ] && {
  G=''; R=''; Y=''; B=''; V=''; Bl=''; C=''; W=''; N=''; BGBL=''; loadBar='=';
}

# No. of characters in \$MODTITLE, \$VER, and \$REL
character_no=\$(echo \"\$MODTITLE \$VER \$REL\" | wc -c)

# Divider
div=\"\${Bl}\$(printf '%*s' \"\${character_no}\" '' | tr \" \" \"=\")\${N}\"

# title_div [-c] <title>
# based on \$div with <title>
title_div() {
  [ \"\$1\" == \"-c\" ] && local character_no=\$2 && shift 2
  [ -z \"\$1\" ] && { local message=; no=0; } || { local message=\"\$@ \"; local no=\$(echo \"\$@\" | wc -c); }
  [ \$character_no -gt \$no ] && local extdiv=\$((character_no-no)) || { echo \"Invalid!\"; return; }
  echo \"\${W}\$message\${N}\${Bl}\$(printf '%*s' \"\$extdiv\" '' | tr \" \" \"=\")\${N}\"
}

# set_file_prop <property> <value> <prop.file>
set_file_prop() {
  if [ -f \"\$3\" ]; then
    if grep -q \"\$1=\" \"\$3\"; then
      sed -i \"s/\${1}=.*/\${1}=\${2}/g\" \"\$3\"
    else
      echo \"\$1=\$2\" >> \"\$3\"
    fi
  else
    echo \"\$3 doesn't exist!\"
  fi
}

# https://github.com/fearside/ProgressBar
# ProgressBar <progress> <total>
ProgressBar() {
# Determine Screen Size
  if [[ \"\$COLUMNS\" -le \"57\" ]]; then
    local var1=2
	local var2=20
  else
    local var1=4
    local var2=40
  fi
# Process data
  local _progress=\$(((\${1}*100/\${2}*100)/100))
  local _done=\$(((\${_progress}*\${var1})/10))
  local _left=\$((\${var2}-\$_done))
# Build progressbar string lengths
  local _done=\$(printf \"%\${_done}s\")
  local _left=\$(printf \"%\${_left}s\")

# Build progressbar strings and print the ProgressBar line
printf \"\rProgress : \${BGBL}|\${N}\${_done// /\${BGBL}\$loadBar\${N}}\${_left// / }\${BGBL}|\${N} \${_progress}%%\"
}

#https://github.com/fearside/SimpleProgressSpinner
# Spinner <message>
Spinner() {
# Choose which character to show.
case \${_indicator} in
'|') _indicator='/';;
'/') _indicator='-';;
'-') _indicator='\\\';;
'\\\') _indicator='|';;
# Initiate spinner character
*) _indicator='\\\';;
esac
# Print simple progress spinner
printf \"\r\${@} [\${_indicator}] \"
}

# cmd & spinner <message>
e_spinner() {
  PID=\$!
  h=0; anim='-\|/';
  while [ -d /proc/\$PID ]; do
    h=\$(((h+1)%4))
    sleep 0.02
    printf \"\r\${@} [\${anim:\$h:1}]\"
  done
}

# test_connection
# tests if there's internet connection
test_connection() {
  echo -n \"Testing internet connection \"
  ping -q -c 1 -W 1 google.com >/dev/null 2>&1 && echo \"- OK\" || { echo \"Error\"; false; }
}

# Log files will be uploaded to termbin.com
# Logs included: VERLOG LOG oldVERLOG oldLOG
upload_logs() {
  \$BBok && {
    test_connection || exit
    echo \"Uploading logs\"
    [ -s \$VERLOG ] && verUp=\$(cat \$VERLOG | nc termbin.com 9999) || verUp=none
    [ -s \$oldVERLOG ] && oldverUp=\$(cat \$oldVERLOG | nc termbin.com 9999) || oldverUp=none
    [ -s \$LOG ] && logUp=\$(cat \$LOG | nc termbin.com 9999) || logUp=none
    [ -s \$oldLOG ] && oldlogUp=\$(cat \$oldLOG | nc termbin.com 9999) || oldlogUp=none
    echo -n \"Link: \"
    echo \"\$MODEL (\$DEVICE) API \$API\n\$ROM\n\$ID\n
    O_Verbose: \$oldverUp
    Verbose:   \$verUp

    O_Log: \$oldlogUp
    Log:   \$logUp\" | nc termbin.com 9999
  } || echo \"Busybox not found!\"
  exit
}

# Print Random
# Prints a message at random
# CHANCES - no. of chances <integer>
# TARGET - target value out of CHANCES <integer>
prandom() {
  local CHANCES=2
  local TARGET=2
  [ \"\$1\" ==  \"-c\" ] && { local CHANCES=\$2; local TARGET=\$3; shift 3; }
  [ \"\$((RANDOM%CHANCES+1))\" -eq \"\$TARGET\" ] && echo \"\$@\"
}

# Print Center
# Prints text in the center of terminal
pcenter() {
  local CHAR=\$(printf \"\$@\" | sed 's|\\e[[0-9;]*m||g' | wc -m)
  local hfCOLUMN=\$((COLUMNS/2))
  local hfCHAR=\$((CHAR/2))
  local indent=\$((hfCOLUMN-hfCHAR))
  echo \"\$(printf '%*s' \"\${indent}\" '') \$@\"
}

# Heading
mod_head() {
  clear
  echo \"\$div\"
  echo \"\${W}\$MODTITLE \$VER\${N}(\${Bl}\$REL\${N})\"
  echo \"by \${W}\$AUTHOR\${N}\"
  echo \"\$div\"
  echo \"\${W}\$_bbname\${N}\"
  echo \"\${Bl}\$_bb\${N}\"
  echo \"\$div\"
  [ -s \$LOG ] && echo \"Enter \${W}logs\${N} to upload logs\" && echo \$div
}" > $MODPATH/$MODID/mod-util.sh
MMPR -vcmm "App Systemizer (Terminal Emulator)" "$VIPASTE" "$VCIPASTE" "veez21" "Turn apps to System Apps Systemlessly! Supports all device running Magisk." "18000"
cp -f $AADDONS/aapt-$arch $MODPATH/$MODID/aapt
SET_PERM_RM -msgdi
UIP "Usage:" "Run \"su -c systemize\" On Terminal In BootMode"
WCANFTP -bb -sl
}

IPCC() {
if [ $BOOTMODE != true ] && [ -f $IPSB/CC ]; then
UIP -d "$MSGFI Cache Cleaner, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
rm -f $IPSB/CC $AIOPFMDPH/cc
UIP "$MSGUD"
fi
else
UCSA "Install Cache Cleaner $VIPCC?" "" "$MSGNUS" "IPCCS"
fi
}

IPCCS() {
UIP "Installing Cache Cleaner $IAMM"
if $MAGISK; then
MODID="$IDCC"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPSB
MMPR -v "Cache Cleaner" "$VIPCC" "Cache Cleaner - Remove More Empty/TMP/Trash Folder & Files"; SET_PERM_RM; IPCC=$MODPATH/$MODID$MIPSB/CC
else
touch $AIOPFMDPH/cc
IPCC=$IPSB/CC
fi
$ECHO "#!$MIPSB/sh

Spinner() {
# Choose which character to show.
case \${_indicator} in
'|') _indicator='/';;
'/') _indicator='-';;
'-') _indicator='\\\';;
'\\\') _indicator='|';;
# Initiate spinner character
*) _indicator='\\\';;
esac
# Print simple progress spinner
printf \"\r\${@} [\${_indicator}] \"
}

RMLOG() {
clear

KLRML=\"
$IPDM/Stats-data
$IPDS/dropbox
$IPDS/graphicsstats
$IPDS/log-files.xml
$IPDS/procstats
$IPDS/syncmanager-log
$IPDS/usagestats
$IPDSUDE/0/com.android.shell/files/bugreports
/data/anr
/data/log
/data/log_other_mode
/data/tombstones
/dev/log
\"

for kll in \$KLRML; do if [ -d \$kll ]; then echo \"$MSGSD Found Logs In \$kll\"; rm -rf \$kll/*; elif [ -f \$kll ]; then echo \"$MSGSD Found \$kll\"; rm -f \$kll; fi; done
echo \"$MSGSD Other Logs Not Found\"
}

CC() {
clear

if [ $MIUI != true ] && [ -d $STORAGE/MIUI ]; then
rm -rf $STORAGE/MIUI
fi

RMFILELIST=\"
baidu
camera_events/session.pb
dctp
did
dmesg.log
flamegapps_debug_logs.tar.gz
journal*.tmp
miad
open_gapps_debug.logs.tar.gz
open_gapps_log.txt
ramdump
zlsdk.bin
\"

RMFOLDERLIST=\"
.AICPROMStats
.DataStorage
.UTSystemConfig
.com.android.providers.downloads.ui
.gs_fs0
.temp
.thumbnails
.tmfs
.vdevdir
.xlDownload
Crash_Reports
cache
dalvik-cache
resource-cache
thumbs
package_cache
\"

echo \"$MSGSD Search In /data...\"

MSGCC=true
for FILECLEANER in \$RMFILELIST; do
Spinner && if \$MSGCC; then echo \"$MSGSD Remove Trash Files...\"; MSGCC=false; fi && find /data -depth -type f -name \$FILECLEANER -exec rm -f {} \;
done

MSGCC=true
for FOLDERCLEANER in \$RMFOLDERLIST; do
Spinner && if \$MSGCC; then echo \"$MSGSD Remove Trash/Cache/TMP Folders...\"; MSGCC=false; fi && find /data -depth -type d -name \$FOLDERCLEANER -exec rm -rf {} \;
done

CCSDAS=\$(ls $STORAGE/Android/data)
for CCF in \$CCSDAS; do
if find $IPDD/\$CCF -type d -name \$CCF; then
Spinner
else
Spinner && rm -rf $STORAGE/Android/data/\$CCF
fi
done

RMEF
echo \"$MSGSD Please, Reboot Device!\"
}

RMEF() {
Spinner && echo \"$MSGSD Remove Empty Files...\"
find $STORAGE/ -depth -type f -not -name .nomedia -empty -exec rm -f {} \;
Spinner && echo \"$MSGSD Remove Empty Folders...\"
find /data/ -depth -type d -empty -exec rmdir {} \;
echo \"$MSGSD Remove Done.\"
}

VMDL() {
VMDLTMP=\"\$(find $IPDA -type d -name \"vmdl*.tmp\" -o -name \"com.google.android.trichromelibrary*\")\"
for f in \$VMDLTMP; do
echo \"$MSGSD Found \$f\"
rm -rf \$f
echo \"$MSGSD Remove Done.\"
done
}

RMMB() {
clear
for rmmb in \$(ls /data); do
case \$rmmb in
magisk_backup_*) echo \"$MSGSD Remove \$rmmb\"; rm -rf /data/\$rmmb;;
esac
done
echo \"$MSGSD Other Magisk Backup Not Found\"
}

OPTIONS() {
MMB=false
for rmmb in \$(ls /data); do
case \$rmmb in
magisk_backup_*) MMB=true; break;;
esac
done
clear
echo \"$MSGSD Cache Cleaner $VIPCC\"
local opt=\"\"
while :; do
echo -n \"$MSGDELIMITER
$MSGSD Choose Varian:
$MSGDELIMITER
c) Cache Cleaner
e) Remove Empty Files/Folders
l) Remove Logs
t) Remove VMDLTMP & Trash TrichromeLibrary\"
if \$MMB; then
echo -e \"\nm) Remove All Magisk Backup
r) Reboot Device
q) Quit
$MSGDELIMITER
?)\"
else
echo -e \"\nr) Reboot Device
q) Quit
$MSGDELIMITER
?)\"
fi
read opt
echo
case \$opt in
c | C) CC;;
e | E) clear; RMEF;;
l | L) RMLOG;;
t | T) VMDL;;
m | M) if \$MMB; then RMMB; fi;;
r | R) reboot;;
q | Q) exit 0;;
*) OPTIONS;;
esac
break
done
echo -en \"\n $MSGSD Press <enter> To Continue, \\\"q <enter>\\\" To Quit \"
read opt
[ -z \"\$opt\" ] || exit 0
echo
OPTIONS
}
OPTIONS" > $IPCC
chmod 777 $IPCC
UIP "$MSGDI"
UIP "Usage:" "Run \"su -c CC\" On Terminal In BootMode"
WCANFTP -bb
}

IPDETACH() {
if $MAGISK && $BOOTMODE; then
UCSA "Install Detach $VIPDETACH Or $VIPDETACH3?" "" "$MSGNUS" "IPDETACHS"
fi
}

IPDETACHS() {
UIP -d "Choose Detach" "$MSGVU $VIPDETACH" "$MSGVD $VIPDETACH3"
if $KEYFUNCTION; then
UZTPN "Detach"
cp -f $TMPDIR/SQLite3/sqlite3-$arch $TMPDIR/Detach/sqlite_$arch
UNIVERSALUNZIP
UIP "Usage:" "Run \"su -c Detach\" On Terminal In BootMode"
else
UZTPN "Detach3"
mkdir -p $TMPDIR/Detach3/sqlite/arm
cp -f $TMPDIR/SQLite3/sqlite3-$arch $TMPDIR/Detach3/sqlite/arm/sqlite3
UNIVERSALUNZIP
UIP "Usage:" "Run \"detach3\" On Terminal In BootMode"
fi
WCANFTP -bb -sq
}

IPSQL3() {
if [ $BOOTMODE != true ] && [ -f $IPSB/sqlite3 ] || [ -f $IPSXB/sqlite3 ]; then
UIP -d "$MSGFI SQLite3, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Remove SQLite3"
rm -f $IPSB/sqlite3 || rm -f $IPSXB/sqlite3
rm -f $AIOPFMDPH/sqlite3
UIP "$MSGUD"
fi
else
UCSA "Install SQLite3 $VIPSQL3?" "" "$MSGNUS" "IPSQL3S"
fi
}

IPSQL3S() {
UIP "Installing SQLite3 $IAMM"
if $MAGISK; then
MODID="$IDSQL3"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$IPPSXBM
MMPR -vcmm "SQLite3 Universal Binaries" "$VIPSQL3" "$VCIPSQL3" "73sydney (Inspired by Olivier Pantale & aarch64 module)" "Installs an sqlite3 v4.1 binary to either $MIPSXB OR $MIPSB depending on existing system paths" "1500"
FIPSQ=$MODPATH/$MODID$IPPSXBM
SET_PERM_RM
else
FIPSQ=$IPPSXB
touch $AIOPFMDPH/sqlite3
fi
cp -f $TMPDIR/SQLite3/sqlite3-$arch $FIPSQ/sqlite3
chmod 777 $FIPSQ/sqlite3
UIP "$MSGDI"
}

IPMMFRM() {
if $MAGISK; then
UCSA "Install Magisk Manager For TWRP $VIPMMFRM?" "" "$MSGNUS" "IPMMFRMS"
fi
}

IPMMFRMS() {
UIP "Magisk Manager For TWRP $IAMM"
MODID="$IDMMFRM"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
$ECHO "#!/sbin/sh
# Magisk Manager for Recovery Mode (mm)
# Copyright (C) 2018-2020, VR25 & Rikj000 @ xda-developers
# License: GPLv3+

main() {
tmpDir=/dev/_mm
tmpf=\$tmpDir/tmpf
tmpf2=\$tmpDir/tmpf2
mountPath=/_magisk
img=$NVBASE/magisk.img
[ -f \$img ] || img=$NVBASE/modules

echo -e \"\nMagisk Manager for Recovery Mode (mm) 2020.4.17
Copyright (C) 2018-2020, VR25 & Rikj000 @ xda-developers
License: GPLv3+\n\"

trap 'exxit \$?' EXIT

if is_mounted /storage/emulated; then
echo -e \"(!) This is meant to be used in recovery environment only!\n\"
exit 1
fi

umask 022
set -euo pipefail

mount /data 2>/dev/null || :
mount /cache 2>/dev/null || :

if [ ! -d $NVBASE/magisk ]; then
echo -e \"(!) No Magisk installation found or installed version is not supported.\n\"
exit 1
fi

mkdir -p \$tmpDir
mount -o remount,rw /
mkdir -p \$mountPath

[ -f \$img ] && e2fsck -fy \$img 2>/dev/null 1>&2 || :
mount -o rw \$img \$mountPath
cd \$mountPath
options
}


options() {
local opt=\"\"

while :; do
echo -n \"##########################
l) List installed modules
##########################
Toggle
c) Core only mode
m) Magic mount
d) Disable
r) Remove
##########################
q) Quit
##########################

?) \"
read opt

echo
case \$opt in
m) toggle_mnt;;
d) toggle_disable;;
l) echo -e \"Installed Modules\n\"; ls_mods;;
r) toggle_remove;;
q) exit 0;;
c) toggle_com;;
esac
break
done

echo -en \"\n(i) Press <enter> to continue or \\\"q <enter>\\\" to quit... \"
read opt
[ -z \"\$opt\" ] || exit 0
echo
options
}

is_mounted() { grep -q \"\$1\" /proc/mounts; }

ls_mods() { ls -1 \$mountPath | grep -v 'lost+found' || echo \"<None>\"; }

exxit() {
set +euo pipefail
cd /
umount -f \$mountPath
rmdir \$mountPath
mount -o remount,ro /
rm -rf \$tmpDir
[ \${1:-0} -eq 0 ] && { echo -e \"\nGoodbye.\n\"; exit 0; } || exit \$1
} 2>/dev/null

toggle() {
local input=\"\" mod=\"\"
local file=\"\$1\" present=\"\$2\" absent=\"\$3\"
for mod in \$(ls_mods | grep -v \<None\> || :); do
echo -n \"\$mod [\"
[ -f \$mountPath/\$mod/\$file ] && echo \"\$present]\" || echo \"\$absent]\"
done

echo -en \"\nInput pattern(s) (e.g., a dot for all, acc, or fbind|xpo|viper): \"
read input
echo

for mod in \$(ls_mods | grep -v \<None\> || :); do
if echo \$mod | grep -Eq \"\${input:-_noMatch_}\"; then
[ -f \$mountPath/\$mod/\$file ] && { rm \$mountPath/\$mod/\$file; echo \"\$mod [\$absent]\"; } \
|| { touch \$mountPath/\$mod/\$file; echo \"\$mod [\$present]\"; }
fi
done
}

toggle_mnt() {
echo -e \"Toggle Magic Mount\n\"
[ -f \$img ] && { toggle auto_mount ON OFF || :; } \
|| toggle skip_mount OFF ON
}

toggle_disable() {
echo -e \"Toggle ON/OFF\n\"
toggle disable OFF ON
}

toggle_remove() {
echo -e \"Mark for Removal ([X])\n\"
toggle remove X \" \"
}

toggle_com() {
if [ -f /cache/.disable_magisk ] || [ -f /data/cache/.disable_magisk ]; then
rm /data/cache/.disable_magisk /cache/.disable_magisk 2>/dev/null || :
echo \"(i) Core only mode [OFF]\"
else
touch /data/cache/.disable_magisk /cache/.disable_magisk 2>/dev/null || :
echo \"(i) Core only mode [ON]\"
fi
}

main" > $STORAGE/mm
SET_PERM $ASTORAGE/0/mm 0 0 0700
MMPR -vcmm "Magisk Manager for Recovery Mode (mm)" "$VIPMMFRM" "$VCIPMMFRM" "VR25 & Rikj000 @ xda-developers" "Manage your Magisk v19-20 modules from recovery (e.g., TWRP) -- run \"sh $SDCARD/mm\" on recovery terminal." "19000"
echo -e "#!$MIPSB/sh\n# remove leftovers\n(until [ -f $STORAGE/mm ]; do sleep 20; done\nrm $STORAGE/mm &) &\nexit 0" > $MODPATH/$MODID/uninstall.sh
UIP "Usage:"
if $BOOTMODE; then
UIP "Run \"sh $SDCARD/mm\" Or \"*/mm\" On Recovery Terminal And Follow The Wizard."
else
ln -sf $SDCARD/mm /sbin*/
UIP "Run \"mm\" On Recovery Terminal And Follow The Wizard." "Next Time, No Need To Reinstall - Simply Run \"sh $SDCARD/mm\" Or \"*/mm\"."
fi
SET_PERM_RM -msgdi
}

} #

{ #Other: DFO/STZD/DDVFE/FA/SBU

IPBDFFSOQSS() {
if $APIE || $ATEN; then
if [ $MIUI != true ] && [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/batterydrainfix ]; then
UIP -d "Found Moving Overlay, Move Back?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Moving Overlay Back..."
MOVINGER="
OneUIHome
$IDSL
$IDSLA
$IDSOPL
$IDSOUH
$IDSPL
$IDSSL
Systemless_Lawnchair_Plus
Systemless_PixelLauncherX
quickstepswitcher
quickswitch_terminal
"
for TARGET in $MOVINGER; do
if [ -d $MODPATH/$TARGET ]; then
mkdir $MODPATH/$TARGET$MIPSPO
fi
FIND="
QuickStepRecentsProvider
QuickstepSwitcherOverlay
PixelRecentsProvider
OnePlusRecentsProvider
OneUIRecentsProvider
LawnchairRecentsProvider
ShadyRecentsProvider
"
for F in $FIND; do
if [ -d $IPSPO/$F ]; then
mv -f $F $MODPATH/$TARGET$MIPSPO
fi
done
done
rm -f $AIOPFMDPH/batterydrainfix
UIP "Moving Done"
fi
else
FIND="
OneUIHome
$IDSL
$IDSLA
$IDSOPL
$IDSOUH
$IDSPL
$IDSSL
Systemless_Lawnchair_Plus
Systemless_PixelLauncherX
quickstepswitcher
quickswitch_terminal
"
if FINDER -mm "$FIND" && $MAGISK && $LEGACYMODE && [ $ZYGISK != true ]; then
UCSA "Install Battery Drain Fix For SL Or QS?" "" "$MSGNUS" "IPBDFFSOQSSS"
fi
fi
fi
}

IPBDFFSOQSSS() {
SLOQSBDFC=false
if $MAGISK && [ $BOOTMODE != true ]; then
UIP -d "Choose Fix Variant:" "$MSGVU Moving Overlay Method" "$MSGVD GMS UnHide Method"
if $KEYFUNCTION; then SLOQSBDFC=true; fi
fi
if $SLOQSBDFC; then
UIP "Moving Overlay..."
MOVINGER="
OneUIHome
$IDSL
$IDSLA
$IDSOPL
$IDSOUH
$IDSPL
$IDSSL
Systemless_Lawnchair_Plus
Systemless_PixelLauncherX
quickstepswitcher
quickswitch_terminal
"
for TARGET in $MOVINGER; do
if [ -d $MODPATH/$TARGET ]; then
mv -f $MODPATH/$TARGET$MIPSPO/* $IPSPO; rm -rf $MODPATH/$TARGET$MIPSPO
elif [ -d $MODPATHUPD/$TARGET ]; then
mv -f $MODPATHUPD/$TARGET$MIPSPO/* $IPSPO; rm -rf $MODPATHUPD/$TARGET$MIPSPO
fi
done
touch $AIOPFMDPH/batterydrainfix
UIP "Moving Done"
else
UIP "Installing GMS UnHide Script $IAMM"
MHIDE -f "com.google.android.gms"
MODID="$IDBDFFSOQSS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MBCCSERVICE "magiskhide rm com.google.android.gms"
MMPR -v "Battery Drain Fix For SL Or QS" "$VIPBDFFSOQSS" "Battery Drain Fix For Systemless Launcher Or Quick Switch (App & Terminal Version)"; SET_PERM_RM -msgdi
fi
}

IPSTZD() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/tzdata ]; then
UIP -d "$MSGFI Systemless TZData, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Remove Systemless TZData"
BUCKUPER -r "$IPSUSZI/tzdata $IPSUSZI/tz_version"
rm -f $AIOPFMDPH/tzdata
UIP "$MSGUD"
fi
else
UCSA "Install Systemless TZData $VIPSTZD?" "" "$MSGNUS" "IPSTZDS"
fi
}

IPSTZDS() {
UIP "Installing Systemless TZData $IAMM"
UZTPN "SystemlessTZData"
if $MAGISK; then
MODID="$IDSTZD"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPSUSZI
MMPR -vc "Systemless TZData" "$VIPSTZD" "$VCIPSTZD" "Ryaniskira & Nkh0472 & GrayJackFixxxer" "Update your ROM's tzdata (timezone data) file systemlessly. 2020F is installed on Android 10 and above, 2020A is installed on older versions."
if [ $ASDK -ge 29 ]; then 
cp -f $TMPDIR/SystemlessTZData/tzdataN $MODPATH/$MODID$MIPSUSZI/tzdata
cp -f $TMPDIR/SystemlessTZData/tz_versionN $MODPATH/$MODID$MIPSUSZI/tz_version
else
cp -f $TMPDIR/SystemlessTZData/tzdataO $MODPATH/$MODID$MIPSUSZI/tzdata
cp -f $TMPDIR/SystemlessTZData/tz_versionO $MODPATH/$MODID$MIPSUSZI/tz_version
fi
SET_PERM_RM
else
BUCKUPER -s "$IPSUSZI/tzdata $IPSUSZI/tz_version"
if [ $ASDK -ge 29 ]; then 
cp -f $TMPDIR/SystemlessTZData/tzdataN $IPSUSZI/tzdata
cp -f $TMPDIR/SystemlessTZData/tz_versionN $IPSUSZI/tz_version
else
cp -f $TMPDIR/SystemlessTZData/tzdataO $IPSUSZI/tzdata
cp -f $TMPDIR/SystemlessTZData/tz_versionO $IPSUSZI/tz_version
fi
touch $AIOPFMDPH/tzdata
fi
UIP "$MSGDI"
}

IPDDVFE() {
if [ $BOOTMODE != true ]; then
UCSA "Install DDVFE $VIPDDVFE?" "" "$MSGNUS" "IPDDVFES"
fi
}

IPDDVFES() {
UZTPN "DDVFE"
cp -f $BB/busybox-$arch $TMPDIR/$UPN/tools/arm/busybox
cp -f $FKEYCHECK $TMPDIR/$UPN/tools/arm
UNIVERSALUNZIP
}

IPFPA() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/pfpm ]; then
UIP -d "$MSGFI Fingerprint Actions, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing And Enable Stock Files ..."
for ui in $IPSUKL/uinput-fpc.kl $IPSUKL/uinput-gf.kl $IPSUKL/uinput-goodix.kl $IPVUKL/uinput-fpc.kl $IPVUKL/uinput-gf.kl $IPVUKL/uinput-goodix.kl; do if [ -f $ui.bak ]; then rm -f $ui; mv -f $ui.bak $ui; fi; done
UIP "Done"
fi
else
if [ -f $IPSUKL/uinput-fpc.kl ] || [ -f $IPSUKL/uinput-gf.kl ] || [ -f $IPSUKL/uinput-goodix.kl ] || [ -f $IPVUKL/uinput-fpc.kl ] || [ -f $IPVUKL/uinput-gf.kl ] || [ -f $IPVUKL/uinput-goodix.kl ]; then
UCSA "Install Fingerprint Actions $VIPFPA?" "$MSGEFTC" "$MSGNUS" "IPFPAS"
fi
fi
}

IPFPAS() {
MSGPF=true
for NAMEKEYFUNCTION in "POWER" "WAKEUP" "HOME" "MUSIC" "CAMERA" "EXPLORER" "BACK" "MENU" "APP_SWITCH" "MEDIA_PLAY_PAUSE" "VOICE_ASSIST" "CALENDAR" "CALL" "CONTACTS" "CALCULATOR" "ENDCALL" "HEADSETHOOK" "ENVELOPE"; do
MSGPFA="$MSGNIS"
case $NAMEKEYFUNCTION in
"POWER") APF="Button Power";; "WAKEUP") APF="Action Wake Up";; "HOME") APF="Action Home";; "MUSIC") APF="Launch Music Player";; "CAMERA") APF="Launch Camera";; "EXPLORER") APF="Launch Explorer";; "BACK") APF="Action Back";; "MENU") APF="Action Menu";; "APP_SWITCH") APF="Action App Switch/Recent/Split Screen";; "MEDIA_PLAY_PAUSE") APF="Action Media Play/Pause";; "VOICE_ASSIST") APF="Launch Voice Assistant";; "CALENDAR") APF="Launch Calendar";; "CALL") APF="Launch Dialer";; "CONTACTS") APF="Launch Contacts";; "CALCULATOR") APF="Launch Calculator";; "ENDCALL") APF="End Call";; "HEADSETHOOK") APF="Play/Pause/Open Music Player/End Call";; "ENVELOPE") APF="Launch Gmail/Mail" MSGPFA="$MSGNUS";; *) APF=false;;
esac
if $MSGPF; then
UIP -d "Сhoose Fingerprint Action Variant"
MSGPF=false
else
MSGDELIMITER
fi
UIP "$APF" "$MSGVU Yes" "$MSGVD No $MSGPFA"
if $KEYFUNCTION; then
FINGERVARIANT=true
break
else
FINGERVARIANT=false
fi
done
if $FINGERVARIANT; then
UIP "Installing Fingerprint Actions $IAMM"
mkdir -p $TMPDIR/FingerprintActions$MIPSVUKL $TMPDIR/FingerprintActions$MIPSUKL
cd $TMPDIR/FingerprintActions
FILESUINPUT="
.$MIPSUKL/uinput-fpc.kl
.$MIPSVUKL/uinput-fpc.kl
.$MIPSUKL/uinput-gf.kl
.$MIPSVUKL/uinput-gf.kl
.$MIPSUKL/uinput-goodix.kl
.$MIPSVUKL/uinput-goodix.kl
"
for ADDSTRING in $FILESUINPUT; do echo -e "key  96    $NAMEKEYFUNCTION\nkey  102   $NAMEKEYFUNCTION" >> $ADDSTRING; done
if $MAGISK; then
MODID="$IDFPA"; REMOVER -mm "$MODID"
cp -rf $TMPDIR/$MODID $MODPATH
MMPR -v "Fingerprint Actions" "$VIPFPA" "This Mod Makes The Fingerprint Scanner Work Like The Power Button - Lock/Unlock The Screen And Reboot Menu With A Long Press/etc."; SET_PERM_RM
else
for ui in $IPSUKL/uinput-fpc.kl $IPSUKL/uinput-gf.kl $IPSUKL/uinput-goodix.kl $IPVUKL/uinput-fpc.kl $IPVUKL/uinput-gf.kl $IPVUKL/uinput-goodix.kl; do if [ -f $ui ]; then mv -f $ui $ui.bak; fi; done
cp -f $TMPDIR/FingerprintActions$MIPSVUKL/* $IPSUKL; cp -f $TMPDIR/FingerprintActions$MIPSUKL/* $IPVUKL
touch $AIOPFMDPH/pfpm
fi
UIP "$MSGDI"
fi
}

IPFSLFM() {
if $MAGISK && [ $BOOTMODE != true ] && $MIUI; then
UCSA "Install Fix Softloop For Miui (If DPI 800+) $VIPFSLFM?" "" "$MSGNUS" "IPFSLFMS"
fi
}

IPFSLFMS() {
UIP "Installing Fix Softloop For Miui $IAMM"
MODID="$IDFSLFM"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MBCCSERVICE "wm density reset; rm -rf $MODPATH/$MODID"
MMPR -v "Fix Softloop For Miui" "$VIPFSLFM" "Fix Softloop For Miui If DPI=800+"; SET_PERM_RM -msgdi
}

UFAAPP() {
if [ $BOOTMODE != true ]; then
if [ -f $IPDS/packages.xml ] || [ -f $IPDSU/0/package-restrictions.xml ]; then
UCSA "Unfreeze All Applications (If Frozen)?" "" "$MSGNUS" "UFAAPPS"
fi
fi
}

UFAAPPS() {
UIP "Defrosting All Applications" "Patching $IPDS/packages.xml"
sed -i 's/enabled="false"/enabled="true"/g' $IPDS/packages.xml
sed -i 's/enabled="2"/enabled="1"/g' $IPDS/packages.xml
sed -i 's/enabled="3"/enabled="1"/g' $IPDS/packages.xml
UIP "Patching $IPDSU/0/package-restrictions.xml"
sed -i 's/enabled="2"/enabled="1"/g' $IPDSU/0/package-restrictions.xml
sed -i 's/enabled="3"/enabled="1"/g' $IPDSU/0/package-restrictions.xml
UIP "Defrosting Done"
}

SBATTERYUSAGE() {
if [ -f /sys/class/power_supply/battery/charge_full_design ] || [ -f /sys/class/power_supply/battery/constant_charge_current_max ]; then
UCSA "Show Battery Usage?" "" "$MSGNUS" "SBATTERYUSAGES"
fi
}

SBATTERYUSAGES() {
cat /sys/class/power_supply/battery/uevent >> $TMPDIR/battery.stat
BATTERYREMAINING="$(GET_FILE_PROP "$TMPDIR/battery.stat" "POWER_SUPPLY_CHARGE_FULL")"
if [ -f /sys/class/power_supply/battery/charge_full_design ]; then
CURRENTMAXMAH="$(GET_FILE_PROP "$TMPDIR/battery.stat" "POWER_SUPPLY_CHARGE_FULL_DESIGN")"
elif [ -f /sys/class/power_supply/battery/constant_charge_current_max ]; then
CURRENTMAXMAH="$(GET_FILE_PROP "$TMPDIR/battery.stat" "POWER_SUPPLY_CONSTANT_CHARGE_CURRENT_MAX")"
fi
let LOSTMAH=$CURRENTMAXMAH-$BATTERYREMAINING; let LOSTMAHALT=$CURRENTMAXMAH"000"-$BATTERYREMAINING
MAHATTHEMOMENT="$(GET_FILE_PROP "$TMPDIR/battery.stat" "POWER_SUPPLY_CHARGE_COUNTER")"
MAHATTHEMOMENTCAPACITY="$(GET_FILE_PROP "$TMPDIR/battery.stat" "POWER_SUPPLY_CAPACITY")"
BATTERYCHARGECYCLE="$(GET_FILE_PROP "$TMPDIR/battery.stat" "POWER_SUPPLY_CYCLE_COUNT")"
UIP "Battery Remaining: $BATTERYREMAINING" "Lost mAh: $LOSTMAH Or $LOSTMAHALT" "mAh & % At The Moment: $MAHATTHEMOMENT ($MAHATTHEMOMENTCAPACITY%)" "Battery Charge Cycle: $BATTERYCHARGECYCLE"
}

GASL() {
if $BOOTMODE; then
UCSA "Get All Settings List?" "" "$MSGNUS" "GASLS"
fi
}

GASLS() {
UIP "Getting All Settings List..."
settings list system > /sdcard/SystemList.sh
settings list secure > /sdcard/SecureList.sh
settings list global > /sdcard/GlobalList.sh
UIP "Done"
}

} #

{ #SafetyNet/MHPC/GPay

IPSNP() {
if $MAGISK; then
UCSA "Install Safety Net Patches?" "$MSGEFTC" "$MSGNUS" "IPSNPS"
fi
}

IPSNPS() {
UIP -d "Install Safety Net Patch $VIPSNP?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Installing Safety Net Patches $IAMM"
MODID="$IDSNP"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPSB
echo "#!$MIPSB/sh

function usage() {
[ \"\$(getprop persist.pnss.print)\" ] && PRINT=\$(getprop persist.pnss.print) || PRINT=\"default\"
[ \"\$(getprop persist.pnss.appendage)\" ] && APPENDAGE=\$(getprop persist.pnss.appendage || APPENDAGE=\"default\") || APPENDAGE=\"default\"

echo \"Universal SafetyNet Fix \$(getprop persist.pnss.version) settings

Usage: pnss <option> <value>

Options:
set <finger/thumb> <value>
Set your own fingerprint or thumbprint value:
0:finger
1:thumb
Current: \${APPENDAGE} print: \$PRINT

default
Use the included settings.

disable
Use your device settings.\"
}

function ask_reboot() {
echo \"You need reboot to apply changes, reboot now? y/n\"
read reboot_opt
[ \"\$reboot_opt\" == \"y\" ] || [ \"\$reboot_opt\" == \"Y\" ] && reboot
}

function convert_appendage() {
[ \"\$1\" == \"0\" ] && APPENDAGE=\"finger\"
[ \"\$1\" == \"1\" ] && APPENDAGE=\"thumb\"
echo \$APPENDAGE
}

case \"\$1\" in
set) setprop \"persist.pnss.appendage\" \"\$(convert_appendage \"\$2\")\" && setprop \"persist.pnss.print\" \"\$3\" && ask_reboot;;
default) setprop \"persist.pnss.appendage\" \"finger\" && setprop \"persist.pnss.print\" \"1\" && ask_reboot;;
disable) setprop \"persist.pnss.appendage\" \"0\" && setprop \"persist.pnss.print\" \"0\" && ask_reboot;;
*) usage;;
esac" > $MODPATH/$MODID$MIPSB/pnss
echo "#!$MIPSB/sh
exec &> /cache/petnoires-safetyspoofer.log

LOGFILE=/cache/magisk.log

function log_print() {
echo \"\$1\"
echo \"\$1\" >> \$LOGFILE
log -p i -t Magisk \"\$1\"
}

set -x
function background() {
set +x; while :; do
[ \"\$(getprop sys.boot_completed)\" == \"1\" ] && {
set -x; break; }
sleep 1
done
}
BBX=$NVBASE/magisk/busybox
RESETPROP=\"resetprop -v -n\"

if [ -f \"/sbin/resetprop\" ]; then RESETPROP=\"/sbin/\$RESETPROP\"
elif [ -f \"/sbin/magisk\" ]; then RESETPROP=\"/sbin/magisk \$RESETPROP\"
elif [ -f \"/data/magisk/magisk\" ]; then RESETPROP=\"/data/magisk/magisk \$RESETPROP\"
elif [ -f \"/magisk/.core/bin/resetprop\" ]; then RESETPROP=/magisk/.core/bin/\$RESETPROP
elif [ -f \"/data/magisk/resetprop\" ]; then RESETPROP=/data/magisk/\$RESETPROP
fi


log_print \"*** [Universal Hide] Version: \$(\$BBX grep version= $MODPATH/$MODID/module.prop | \$BBX sed 's/version=//')\"

[ ! \"\$(getprop persist.pnss.appendage)\" ] && setprop \"persist.pnss.appendage\" \"finger\"
APPENDAGE=\$(getprop persist.pnss.appendage)

[ \"\$(getprop persist.pnss.appendage)\" == \"0\" ] || {

[ \"\$(getprop persist.pnss.print)\" == \"0\" ] || {
[ \"\$(getprop persist.pnss.print)\" == \"1\" ] || [ ! \"\$(getprop persist.pnss.print)\" ] && PRINT=Xiaomi/sagit/sagit:7.1.1/NMF26X/V8.2.17.0.NCACNEC:user/release-keys || PRINT=\$(getprop persist.pnss.print)
log_print \"*** [Universal Hide] Changing build \${APPENDAGE}print value\"
\$RESETPROP \"ro.build.\${APPENDAGE}print\" \"\$PRINT\"
\$RESETPROP \"ro.bootimage.build.\${APPENDAGE}print\" \"\$PRINT\"
$RESETPROP \"ro.vendor.build.\${APPENDAGE}print\" \"\$PRINT\"
if [ \$(getprop persist.pnss.appendage) == \"finger\" ]; then
\$RESETPROP --delete \"ro.build.thumbprint\"
\$RESETPROP --delete \"ro.bootimage.build.thumbprint\"
\$RESETPROP --delete \"ro.vendor.build.thumbprint\"
elif [ \$(getprop persist.pnss.appendage) == \"thumb\" ]; then
\$RESETPROP --delete \"ro.build.fingerprint\"
\$RESETPROP --delete \"ro.bootimage.build.fingerprint\"
\$RESETPROP --delete \"ro.vendor.build.fingerprint\"
fi
}
}

log_print \"*** [Universal Hide] Hiding dangerous props\"

VERIFYBOOT=\$(getprop ro.boot.verifiedbootstate)
FLASHLOCKED=\$(getprop ro.boot.flash.locked)
VERITYMODE=\$(getprop ro.boot.veritymode)
KNOX1=\$(getprop ro.boot.warranty_bit)
KNOX2=\$(getprop ro.warranty_bit)
DEBUGGABLE=\$(getprop ro.debuggable)
SECURE=\$(getprop ro.secure)
BUILDTYPE=\$(getprop ro.build.type)
BUILDTAGS=\$(getprop ro.build.tags)
BUILDSELINUX=\$(getprop ro.build.selinux)
RELOADPOLICY=\$(getprop selinux.reload_policy)

[ \"\$VERIFYBOOT\" ] && [ \"\$VERIFYBOOT\" != \"green\" ] && \$RESETPROP \"ro.boot.verifiedbootstate\" \"green\"
[ \"\$FLASHLOCKED\" ] && [ \"\$FLASHLOCKED\" != \"1\" ] && \$RESETPROP \"ro.boot.flash.locked\" \"1\"
[ \"\$VERITYMODE\" ] && [ \"\$VERITYMODE\" != \"enforcing\" ] && \$RESETPROP \"ro.boot.veritymode\" \"enforcing\"
[ \"\$KNOX1\" ] && [ \"\$KNOX1\" != \"0\" ] && \$RESETPROP \"ro.boot.warranty_bit\" \"0\"
[ \"\$KNOX2\" ] && [ \"\$KNOX2\" != \"0\" ] && \$RESETPROP \"ro.warranty_bit\" \"0\"
[ \"\$DEBUGGABLE\" ] && [ \"\$DEBUGGABLE\" != \"0\" ] && \$RESETPROP \"ro.debuggable\" \"0\"
[ \"\$SECURE\" ] && [ \"\$SECURE\" != \"1\" ] && \$RESETPROP \"ro.secure\" \"1\"
[ \"\$BUILDTYPE\" ] && [ \"\$BUILDTYPE\" != \"user\" ] && \$RESETPROP \"ro.build.type\" \"user\"
[ \"\$BUILDTAGS\" ] && [ \"\$BUILDTAGS\" != \"release-keys\" ] && \$RESETPROP \"ro.build.tags\" \"release-keys\"
[ \"\$BUILDSELINUX\" ] && [ \"\$BUILDSELINUX\" != \"0\" ] && \$RESETPROP \"ro.build.selinux\" \"0\"
[ \"\$RELOADPOLICY\" ] && [ \"\$RELOADPOLICY\" != \"1\" ] && \$RESETPROP \"selinux.reload_policy\" \"1\"

background &" > $MODPATH/$MODID/post-fs-data.sh
MMPR -vc "PetNoires SafetySpoofer" "$VIPSNP" "$VCIPSNP" "PetNoire,Deiki & Nkh0472 & GrayJackFixxxer" "Try to fix SafetyNet on devices with MIUI Developer/Beta ROM, CyanogenMod, Lineage OS, Resurrection Remix, etc."
MHIDE -l; SET_PERM_RM -msgdi
fi
UIP -d "Install Safety Net Patch $VIPSNPA?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Installing Safety Net Patches $IAMM"
MODID="$IDSNPA"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPSB
echo "#!$MIPSB/sh

#Debug script for safetypatch
function menu {
echo '############# SafetyPatch GUI #############'
echo '# 1) Gather debug info                    #'
echo '# 2) Disable cts until reboot             #'
echo '# 3) Disable basicIntegrity until reboot  #'
echo '## Enter your choice or any key to exit. ##'
read ans
if [ \"\$ans\" == \"1\" ]
then
echo 'Gathering debug info to $STORAGE/safetypatch.debug'
echo '---/proc/cmdline---' > $STORAGE/safetypatch.debug
cat /proc/cmdline >> $STORAGE/safetypatch.debug
echo '---$IPDLTMP/cmdline---' >> $STORAGE/safetypatch.debug
cat $IPDLTMP/cmdline >> $STORAGE/safetypatch.debug
echo '---$MIPSBP---' >> $STORAGE/safetypatch.debug
cat $MIPSBP >> $STORAGE/safetypatch.debug
echo '---$IPDLTMP/build.prop---' >> $STORAGE/safetypatch.debug
cat $IPDLTMP/build.prop >> $STORAGE/safetypatch.debug
echo '--end of log---' >> $STORAGE/safetypatch.debug
echo 'Logging Completed! Please send to the logs at https://forum.xda-developers.com/apps/magisk/module-safetypatcher-t3809879'
elif [ \"\$ans\" == \"\2\" ]
then
umount -lf /proc/cmdline
echo 'Disabled'
elif [ \"\$ans\" == \"\3\" ]
then
umount -lf $MIPSBP
echo 'Disabled'
else
echo 'Bye!'
exit 0
fi
}
while true
do menu
done" > $MODPATH/$MODID$MIPSB/safetypatch
echo "#!$MIPSB/sh
sed 's/ORANGE/GREEN/i' /proc/cmdline | sed 's/YELLOW/GREEN/i' > $IPDLTMP/cmdline
mount -o bind $IPDLTMP/cmdline /proc/cmdline
sed 's;^ro.*\.build\.fingerprint=.*;ro.build.fingerprint=HUAWEI/CLT-L29/HWCLT:8.1.0/HUAWEICLT-L29/128(C432):user/release-keys;' $MIPSBP > $IPDLTMP/build.prop
mount -o bind $IPDLTMP/build.prop $MIPSBP
# The build.prop thing seems to be useless, but at some point Google are sure to catch on and check in the raw build.prop to see if we're abusing getprop/resetprop.
resetprop ro.build.fingerprint 'HUAWEI/CLT-L29/HWCLT:8.1.0/HUAWEICLT-L29/128(C432):user/release-keys'
resetprop ro.bootimage.build.fingerprint 'HUAWEI/CLT-L29/HWCLT:8.1.0/HUAWEICLT-L29/128(C432):user/release-keys'" > $MODPATH/$MODID/post-fs-data.sh
MMPR -vc "SafetyPatch" "$VIPSNPA" "$VCIPSNPA" "hackintosh5 @ xdaDevelopers" "Flash the module, reboot and give me thanks on XDA :)"
MHIDE -l; SET_PERM_RM -msgdi
fi
if [ "$ASDK" -ge 24 ]; then
SAFETYNET=false; SAFETYNETZ=false; SAFETYNETR=false
if [ -d $MODPATH/$IDRIRU ]; then
if $ZYGISK; then
UIP -d "Install Safety Net Patch Zygisk Or Riru?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP -d "Install Safety Net Patch For:" "$MSGVU Zygisk $VIPSNPZ" "$MSGVD Riru $VIPSNPR"
if $KEYFUNCTION; then
SAFETYNET=true; SAFETYNETZ=true
else
SAFETYNET=true; SAFETYNETR=true
fi
else
SAFETYNET=false
fi
else
UIP -d "Install Safety Net Patch $VIPSNPR?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
SAFETYNET=true; SAFETYNETR=true
fi
fi
else
UIP -d "Install Safety Net Patch $VIPSNPR?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
SAFETYNET=true; SAFETYNETR=true
fi
fi
if $SAFETYNET; then
UIP "Installing Safety Net Patches $IAMM"
UZTPN "SafetyNet"
MODID="$IDSNPRZ"; REMOVER -mm "$MODID"
if $SAFETYNETR; then
mkdir -p $MODPATH/$MODID/riru
UIP "Copy arm Libraries"
cp -rf $TMPDIR/SafetyNet/riru/lib $MODPATH/$MODID/riru
if [ "$arch" = "arm64" ]; then
UIP "Copy arm64 Libraries"
cp -rf $TMPDIR/SafetyNet/riru/lib64 $MODPATH/$MODID/riru
fi
cp -f $TMPDIR/SafetyNet/riru/classes.dex $MODPATH/$MODID
MMPR -vc "Universal SafetyNet Fix" "$VIPSNPR" "$VCIPSNPR" "kdrag0n" "A universal fix for SafetyNet on Android 7–12 devices with hardware attestation and unlocked bootloaders. Requires MagiskHide and Riru v24.0.0 or newer."
elif $SAFETYNETZ; then
mkdir -p $MODPATH/$MODID/zygisk
UIP "Copy arm Libraries"
cp -rf $TMPDIR/SafetyNet/zygisk/armeabi-v7a.so $MODPATH/$MODID/zygisk
if [ "$arch" = "arm64" ]; then
UIP "Copy arm64 Libraries"
cp -rf $TMPDIR/SafetyNet/zygisk/armeabi-v8a.so $MODPATH/$MODID/zygisk
fi
cp -f $TMPDIR/SafetyNet/zygisk/classes.dex $MODPATH/$MODID
MMPR -vc "Universal SafetyNet Fix" "$VIPSNPZ" "$VCIPSNPZ" "kdrag0n" "A universal fix for SafetyNet on Android 7–12 devices with hardware attestation and unlocked bootloaders."
echo -e "#!$MIPSB/sh\nmagisk --denylist rm com.google.android.gms" > $MODPATH/$MODID/post-fs-data.sh
fi
echo "# RootBeer, Microsoft
ro.build.tags=release-keys

# Samsung
ro.boot.warranty_bit=0
ro.vendor.boot.warranty_bit=0
ro.vendor.warranty_bit=0
ro.warranty_bit=0

# SafetyNet
ro.boot.flash.locked=1
ro.boot.verifiedbootstate=green
ro.boot.veritymode=enforcing
ro.boot.vbmeta.device_state=locked
vendor.boot.vbmeta.device_state=locked

# Other
ro.build.type=user
ro.debuggable=0
ro.secure=1" > $MODPATH/$MODID/system.prop
echo "#!$MIPSB/sh
maybe_set_prop() {
local prop=\"\$1\"
local contains=\"\$2\"
local value=\"\$3\"

if [[ \"\$(getprop \"\$prop\")\" == *\"\$contains\"* ]]; then
resetprop \"\$prop\" \"\$value\"
fi
}

# Magisk recovery mode
maybe_set_prop ro.bootmode recovery unknown
maybe_set_prop ro.boot.mode recovery unknown
maybe_set_prop vendor.boot.mode recovery unknown

# MIUI cross-region flash
maybe_set_prop ro.boot.hwc CN GLOBAL
maybe_set_prop ro.boot.hwcountry China GLOBAL

resetprop --delete ro.build.selinux

# SELinux permissive
if [[ \"\$(cat /sys/fs/selinux/enforce)\" == \"0\" ]]; then
chmod 640 /sys/fs/selinux/enforce
chmod 440 /sys/fs/selinux/policy
fi

# Late props which must be set after boot_completed
{
until [[ \"\$(getprop sys.boot_completed)\" == \"1\" ]]; do
sleep 1
done

# avoid breaking OnePlus display modes/fingerprint scanners
resetprop vendor.boot.verifiedbootstate green
}&" > $MODPATH/$MODID/service.sh
MHIDE -l; SET_PERM_RM -msgdi
fi
fi
}

IPSNET() {
if [ "$ASDK" -ge 29 ]; then
UCSA "Install Safety Net Eval Type BASIC $VIPSNET?" "" "$MSGNUS" "IPSNETS"
fi
}

IPSNETS() {
UIP "Installing Safety Net Eval Type BASIC $IAMM"
if $MAGISK; then
MODID="$IDSNET"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MMPR -v "Safety Net Eval Type" "$VIPSNET" "Set Safety Net Eval Type To BASIC"; SET_PERM_RM; IPSNET=$MODPATH/$MODID/system.prop
else
BUILD_PROP_BACKUP; IPSNET=$IPSBP
fi
echo -e "\n# Set Safety Net Eval Type To BASIC\nro.product.model=BASIC\nro.product.system.model=BASIC\nro.product.vendor.model=BASIC\nro.product.product.model=BASIC\nro.product.odm.model=BASIC" >> $IPSNET
UIP "$MSGDI"
}

IPMHPC() {
if $MAGISK && [ $MAGISKFIRSTTIME != true ]; then
UCSA "Install MagiskHide Props Config $VIPMHPC?" "" "$MSGNUS" "IPMHPCS"
fi
}

IPMHPCS() {
UZTPN "MHPC"; UNIVERSALUNZIP
UIP "Usage:" "Run \"su -c props\" On Terminal In BootMode"
WCANFTP -bb
}

IPFPMC() {
if [ -f $IPDD/com.android.vending/shared_prefs/finsky.xml ]; then UCSA "Install Force Play Market Certified $VIPFPMC?" "" "$MSGNUS" "IPFPMCS"; fi
}

IPFPMCS() {
UIP "Installing Force Play Market Certified $IAMM" 
if $MAGISK; then
MODID="$IDFPMC"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MBCCSERVICE "sed -i \"s/    <boolean name=\"device-google-certified\" value=\"false\" \/>/   <boolean name=\"device-google-certified\" value=\"true\" \/>/g\" $IPDD/com.android.vending/shared_prefs/finsky.xml; sed -i \"s/    <boolean name=\"device-google-certified-basic-integrity\" value=\"false\" \/>/   <boolean name=\"device-google-certified-basic-integrity\" value=\"true\" \/>/g\" $IPDD/com.android.vending/shared_prefs/finsky.xml"
MMPR -v "Force Play Market Certified" "$VIPFPMC" "Force Play Market Certified $MSGFMM"; SET_PERM_RM
fi
if [ -f $IPDD/com.android.vending/shared_prefs/finsky.xml ]; then sed -i "s/    <boolean name=\"device-google-certified\" value=\"false\" \/>/   <boolean name=\"device-google-certified\" value=\"true\" \/>/gi" $IPDD/com.android.vending/shared_prefs/finsky.xml; sed -i "s/    <boolean name=\"device-google-certified-basic-integrity\" value=\"false\" \/>/   <boolean name=\"device-google-certified-basic-integrity\" value=\"true\" \/>/gi" $IPDD/com.android.vending/shared_prefs/finsky.xml; fi
UIP "$MSGDI"
}

IPGPF() {
if [ -f $IPSFW/com.android.nfc_extras.jar ] || find $SYSTEM -name *NfcNci* >/dev/null; then
if $FINDGAPPS; then
UCSA "Install GooglePay Fix $VIPGPF?" "" "$MSGNUS" "IPGPFS"
fi
fi
}

IPGPFS() {
UIP "Installing GooglePay Fix $IAMM"
if $MAGISK; then
MODID="$IDGPF"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$IPPSXBM
MMPR -vc "GPay SQLite Fix" "$VIPGPF" "$VCIPGPF" "73sydney" "Applies the full SQLite fix for Google Pay"
echo "(
#!$MIPSB/sh
# Do NOT assume where your module will be located.
# ALWAYS use \$MODDIR if you need to know where this script
# and module is placed.
# This will make sure your module will still work
# if Magisk change its mount point in the future
MODDIR=\${0%/*}

# set script to run SQL commands
runsql=1

# set logfile variable
logfile=\"/cache/payfixfirstrun.log\"

# wait till boot completed - thanks to jcmm11
until [ \"\$(getprop sys.boot_completed)\" = 1 ]
do
sleep 1
done

echo \"System boot completed\" > \$logfile
echo \"\" >> \$logfile

while (true); do
if [ -f \"$MIPSB/chmod\" ]; then
echo \"$MIPSB/chmod....accessible\" >> \$logfile
echo \"\" >> \$logfile
break;
fi
sleep 1
done

# check the dg.db file is accessible before we start off doing anything - thanks to didgeridoohan
while (true); do
if [ -f \"/data/data/com.google.android.gms/databases/dg.db\" ]; then
echo \"/data/data/com.google.android.gms/databases/dg.db....accessible\" >> \$logfile
echo \"\" >> \$logfile
break;
fi
sleep 1
done

# check where sqlite is
if [ -f /data/data/com.termux/files/usr/bin/sqlite3 ] ; then
sqlpath=/data/data/com.termux/files/usr/bin
echo \"[termux] SQLite3 binary found in: \$sqlpath\" >> \$logfile
echo \"\" >> \$logfile
elif [ -f /data/data/com.keramidas.TitaniumBackup/files/sqlite3 ] ; then
sqlpath=/data/data/com.keramidas.TitaniumBackup/files
echo \"[titanium] SQLite3 binary found in: \$sqlpath\" >> \$logfile
echo \"\" >> \$logfile	
elif [ -f $MIPSB/sqlite3 ] ; then
sqlpath=$MIPSB
echo \"[standard] SQLite3 binary found in: \$sqlpath\" >> \$logfile
echo \"\" >> \$logfile
elif [ -f $MIPSXB/sqlite3 ] ; then
sqlpath=$MIPSXB
echo \"[standard] SQLite3 binary found in: \$sqlpath\" >> \$logfile
echo \"\" >> \$logfile
else 
echo \"SQLite3 binary not found, please install a SQLite3 binary, without this the fix *may* not work\" >> \$logfile
echo \"I provide an SQLite3 Universal Binary Magisk Module, and links to SQLite3 binaries for other architectures\" >> \$logfile
echo \"at https://forum.xda-developers.com/showpost.php?p=79643248&postcount=176\" >> \$logfile
echo \"\" >> \$logfile
fi
sleep 2

# stop Google Pay
$MIPSB/am force-stop /data/data/com.google.android.apps.walletnfcrel
if [ \$? -eq 0 ] ; then
echo \"Google Pay stopped successfully\" >> \$logfile
echo \"\" >> \$logfile
else
echo \"Google Pay NOT stopped successfully\" >> \$logfile
echo \"\" >> \$logfile
fi
sleep 2

if [ \$runsql -eq 1 ]; then
# set 777 permissions on dg.db
$MIPSB/chmod 777 /data/data/com.google.android.gms/databases/dg.db
perms=\$(stat -c %a /data/data/com.google.android.gms/databases/dg.db)
if [ \$perms -eq 777 ]; then
echo \"Chmod 777 command completed successfully\" >> \$logfile
echo \"Permissions reported as: \$perms\" >> \$logfile
echo \"\" >> \$logfile
else
echo \"Chmod command FAILED\" >> \$logfile
echo \"Permissions reported as: \$perms\" >> \$logfile
echo \"\" >> \$logfile
fi
sleep 2
	
# run sqlite 3 commands on dg.db
\$sqlpath/sqlite3 /data/data/com.google.android.gms/databases/dg.db \"update main set c='0' where a like '%attest%';\"
if [ \$? -eq 0 ] ; 	then
echo \"SQLite3 command completed successfully\" >> \$logfile
echo \"\" >> \$logfile
else
echo \"SQLite3 command FAILED\" >> \$logfile
echo \"\" >> \$logfile
fi
sleep 2
fi
		
# set 440 permissions on dg.db
$MIPSB/chmod 440 /data/data/com.google.android.gms/databases/dg.db
perms=\$(stat -c %a /data/data/com.google.android.gms/databases/dg.db)
if [ \$perms -eq 440 ] ; then
echo \"Chmod 440 command completed successfully\" >> \$logfile
echo \"Permissions reported as: \$perms\" >> \$logfile
echo \"\" >> \$logfile
else
echo \"Chmod command FAILED\" >> \$logfile
echo \"Permissions reported as: \$perms\" >> \$logfile
echo \"\" >> \$logfile
fi
sleep 2
) &" > $MODPATH/$MODID/service.sh
echo "# set payfixuninstall.log
logfile=\"/cache/payfixuninstall.log\"

# wait till boot completed - thanks to jcmm11
until [ \"\$(getprop sys.boot_completed)\" = 1 ]
do
sleep 1
done

echo \"System boot completed\" > \$logfile
echo \"\" > \$logfile

while (true); do
if [ -f \"$MIPSB/chmod\" ]; then
echo \"$MIPSB/chmod....accessible\" > \$logfile
echo \"\" > \$logfile
break;
fi
sleep 1
done

# check the dg.db file is accessible before we start off doing anything - thanks to didgeridoohan
while (true); do
if [ -f \"/data/data/com.google.android.gms/databases/dg.db\" ]; then
echo \"Database file dg.db....accessible\" > \$logfile
echo \"\" > \$logfile
break;
fi
sleep 1
done

# on to the main show............

# stop Google Pay
$MIPSB/am force-stop /data/data/com.google.android.apps.walletnfcrel
if [ \$? -eq 0 ] ; then
echo \"Google Pay stopped successfully\" > \$logfile
echo \"\" > \$logfile
else
echo \"Google Pay NOT stopped successfully\" > \$logfile
echo \"\" > \$logfile
fi
sleep 2

# set default 660 permissions on dg.db
$MIPSB/chmod 660 /data/data/com.google.android.gms/databases/dg.db
perms=\$(stat -c %a /data/data/com.google.android.gms/databases/dg.db)
if [ \$perms -eq 660 ] ; then
echo \"Chmod 660 command completed successfully\" > \$logfile
echo \"Permissions reported as: \$perms\" > \$logfile
echo \"\" > \$logfile
else
echo \"Chmod 660 command FAILED\" > \$logfile
echo \"Permissions reported as: \$perms\" > \$logfile
echo \"\" > \$logfile
fi
sleep 2

# Don't modify anything after this
if [ -f \$INFO ]; then
while read LINE; do
if [ \"\$(echo -n \$LINE | tail -c 1)\" == \"~\" ]; then
continue
elif [ -f \"\$LINE~\" ]; then
mv -f \$LINE~ \$LINE
else
rm -f \$LINE
while true; do
LINE=\$(dirname \$LINE)
[ \"\$(ls -A \$LINE 2>/dev/null)\" ] && break 1 || rm -rf \$LINE
done
fi
done < \$INFO
rm -f \$INFO
fi" > $MODPATH/$MODID/uninstall.sh
MHIDE -f "com.google.android.gsf_com.google.process.gapps com.google.android.gsf_com.google.process.gservices com.google.android.gms com.google.android.apps.walletnfcrel"
if [ -d "$IPDD/*com.google.android.apps.walletnfcrel*" ]; then
UCSA "Clear Cache And Storage For Google Pay?" "Clear, I Understand The RISKS" "No, (It *May* Prevent The Module From Working)" "IPGPFA"
fi
cp -f $TMPDIR/SQLite3/sqlite3-$arch $MODPATH/$MODID$IPPSXBM/sqlite3
SET_PERM_RM; WCANFTP -sq
fi
if [ -d "$IPDD/*com.google.android.apps.walletnfcrel*" ]; then
$SQLITE3 $IPDD/com.google.android.gms/databases/dg.db "update main set c='0' where a like '%attest%';"
if [ $? -eq 0 ]; then
UIP "SQLite3 Command Completed Successfully"
rm -rf $IPDD/com.google.android.gms/app_dg_cache
cp -f $TMPDIR/GPay/dg.db $IPDD/com.google.android.gms/databases
chmod 440 $IPDD/com.google.android.gms/databases/dg.db
else
UIP "SQLite3 Command Failed"
fi
fi
UIP "$MSGDI"
}

IPGPFA() { 
UIP "Clearing Google Pay Caches..."
for x in com.google.android.apps.walletnfcrel
do pm clear $x >&2
if [ $? -eq 0 ]; then
UIP "$x: Cleared Successfully"
else
UIP "$x: Not Cleared Successfully"
fi
done
}

} #

{ #Riru/Edx/LS/Posed/Mudules

IPRIRU() {
if $MAGISK && [ "$ASDK" -ge 27 ]; then
UCSA "Install Riru Core v26 Or v25?" "" "$MSGNUS" "IPRIRUS"
fi
}

IPRIRUS() {
UIP -d "Install Riru Core Variant" "$MSGVU Standart $VIPRIRU" "$MSGVD Legacy $VIPRIRUL"
if $KEYFUNCTION; then
UIP "Installing Riru Core $IAMM"
UZTPN "Riru"
MODID="$IDRIRU"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID/lib
cp -f $TMPDIR/Riru/rirud.apk $MODPATH/$MODID
cp -rf $TMPDIR/Riru/system $MODPATH/$MODID
UIP "Copy arm Libraries"
mv $TMPDIR/Riru$MIPSL/libriru.so $MODPATH/$MODID/lib
mv $TMPDIR/Riru$MIPSL/libriruhide.so $MODPATH/$MODID/lib
mv $TMPDIR/Riru$MIPSL/libriruloader.so $MODPATH/$MODID/lib
if [ "$arch" = "arm64" ]; then
UIP "Copy arm64 Libraries"
mkdir -p $MODPATH/$MODID/lib64
mv $TMPDIR/Riru$MIPSL64/libriru.so $MODPATH/$MODID/lib64
mv $TMPDIR/Riru$MIPSL64/libriruhide.so $MODPATH/$MODID/lib64
mv $TMPDIR/Riru$MIPSL64/libriruloader.so $MODPATH/$MODID/lib64
fi
MMPR -vcrapi "Riru" "$VIPRIRU" "$VCIPRIRU" "Rikka, yujincheng08" "Inject into zygote and run codes from \"Riru\" modules in apps or the system server. Support modules which use Riru API v24+" "26" "24"
echo "#!/sbin/sh
if [ ! -d $NVBASE/riru/modules ]; then rm -rf $NVBASE/riru; fi" > $MODPATH/$MODID/uninstall.sh
echo "#!$MIPSB/sh
MODDIR=\${0%/*}
if [ -z \"\$SHELL\" ]; then export SHELL=sh; fi
flock -n \"\$MODDIR/module.prop\" -c \"sed -Ei 's/^description=(\[.*][[:space:]]*)?/description=[ post-fs-data.sh fails to run. Magisk is broken on this device. ] /g' \\\"\$MODDIR/module.prop\\\"\"" > $MODPATH/$MODID/service.sh
echo "ro.dalvik.vm.native.bridge=libriruloader.so" > $MODPATH/$MODID/system.prop
echo "#!$MIPSB/sh
MODDIR=\${0%/*}
if [ -z \"\$SHELL\" ]; then export SHELL=sh; fi
sed -Ei 's/^description=(\[.*][[:space:]]*)?/description=[ app_process fails to run. ] /g' \"\$MODDIR/module.prop\"
export CLASSPATH=\$MODDIR/rirud.apk
cd \$MODDIR
flock \"module.prop\"
unshare -m sh -c \"$MIPSB/app_process -Djava.class.path=rirud.apk $MIPSB --nice-name=rirud riru.Daemon \$(magisk -V) \$(magisk --path) \$(getprop ro.dalvik.vm.native.bridge)&\"" > $MODPATH/$MODID/post-fs-data.sh
echo "RIRU_MIN_COMPATIBLE_API=9
RIRU_API=\"26\"
RIRU_VERSION_CODE=\"$VCIPRIRU\"
RIRU_VERSION_NAME=\"$VIPRIRU\"

abort_for_requires_new_version() {
ui_print \"*********************************************************\"
ui_print \"! This module requires Riru \$1 or above\"
ui_print \"! Please install (upgrade) Riru from Magisk Manager\"
ui_print \"! Or you can download zip from https://github.com/RikkaApps/Riru/releases\"
abort \"*********************************************************\"
}

abort_for_old_module() {
ui_print \"*********************************************************\"
ui_print \"! This module haven't support Riru v22.0+\"
ui_print \"! Please ask the developer of this module to make changes\"
abort \"*********************************************************\"
}

check_riru_version() {
ui_print \"- Riru: \$RIRU_VERSION_NAME (API \$RIRU_API)\"
[ \"\$RIRU_MODULE_API_VERSION\" -lt \"\$RIRU_MIN_COMPATIBLE_API\" ] && abort_for_old_module
[ \"\$RIRU_MODULE_MIN_API_VERSION\" -gt \"\$RIRU_API\" ] && abort_for_requires_new_version \"\$RIRU_MODULE_MIN_RIRU_VERSION_NAME\"
}

enforce_install_from_magisk_app() {
if \$BOOTMODE; then
ui_print \"- Installing from Magisk app\"
else
ui_print \"*********************************************************\"
ui_print \"! Install from recovery is NOT supported\"
ui_print \"! Some recovery has broken implementations, install with such recovery will finally cause Riru or Riru modules not working\"
ui_print \"! Please install from Magisk app\"
abort \"*********************************************************\"
fi
}" > $MODPATH/$MODID/util_functions.sh
if grep "ro.maple.enable=1" "$IPSBP"; then
UIP "Add ro.maple.enable=0"
echo "ro.maple.enable=0" >> $MODPATH/$MODID/system.prop
fi
UIP "Removing Old Files"
rm -rf $NVBASE/riru/bin $NVBASE/riru/native_bridge $NVBASE/riru/api_version.new $NVBASE/riru/version_code.new $NVBASE/riru/version_name.new $NVBASE/riru/enable_hide $NVBASE/riru/api_version $NVBASE/riru/util_functions.sh $IPDM/riru/api_version $IPDM/riru/version_code $IPDM/riru/version_name
else
UIP "Installing Riru Core Legacy $IAMM"
UZTPN "RiruLegacy"
MODID="$IDRIRU"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID/lib
touch $MODPATH/$MODID/legacy
cp -rf $TMPDIR/RiruLegacy/system $MODPATH/$MODID
UIP "Copy arm Libraries"
mv $TMPDIR/RiruLegacy$MIPSL/libriru.so $MODPATH/$MODID/lib
mv $TMPDIR/RiruLegacy$MIPSL/libriruhide.so $MODPATH/$MODID/lib
mv $TMPDIR/RiruLegacy$MIPSL/libriruloader.so $MODPATH/$MODID/lib
if [ "$arch" = "arm64" ]; then
UIP "Copy arm64 Libraries"
mkdir -p $MODPATH/$MODID/lib64
mv $TMPDIR/RiruLegacy$MIPSL64/libriru.so $MODPATH/$MODID/lib64
mv $TMPDIR/RiruLegacy$MIPSL64/libriruhide.so $MODPATH/$MODID/lib64
mv $TMPDIR/RiruLegacy$MIPSL64/libriruloader.so $MODPATH/$MODID/lib64
mv $TMPDIR/RiruLegacy$MIPSL64/librirud.so $MODPATH/$MODID
else
mv $TMPDIR/RiruLegacy$MIPSL/librirud.so $MODPATH/$MODID
fi
MMPR -vcrapi "Riru" "$VIPRIRUL" "$VCIPRIRUL" "Rikka" "Inject into zygote and run codes from \"Riru\" modules in apps or the system server." "25" "9"
echo "#!$MIPSB/sh
MODDIR=\${0%/*}
# Reset ro.dalvik.vm.native.bridge or reboot if needed
export CLASSPATH=\$MODDIR/rirud.dex
nohup app_process -Djava.class.path=\"\$MODDIR\"/rirud.dex $MIPSB --nice-name=rirud_java riru.Daemon >/dev/null 2>&1 &" > $MODPATH/$MODID/service.sh
echo "ro.dalvik.vm.native.bridge=libriruloader.so" > $MODPATH/$MODID/system.prop
echo "#!$MIPSB/sh
MODDIR=\${0%/*}
# Chmod again just in case
chmod 700 \"\$MODDIR\"/rirud
# Start daemon which runs socket \"rirud\"
exec \"\$MODDIR\"/rirud" > $MODPATH/$MODID/post-fs-data.sh
echo "RIRU_MIN_COMPATIBLE_API=9
RIRU_API=\"25\"
RIRU_VERSION_CODE=\"$VCIPRIRUL\"
RIRU_VERSION_NAME=\"$VIPRIRUL\"

abort_for_requires_new_version() {
ui_print \"*********************************************************\"
ui_print \"! This module requires Riru \$1 or above\"
ui_print \"! Please install (upgrade) Riru from Magisk Manager\"
ui_print \"! Or you can download zip from https://github.com/RikkaApps/Riru/releases\"
abort \"*********************************************************\"
}

abort_for_old_module() {
ui_print \"*********************************************************\"
ui_print \"! This module haven't support Riru v22.0+\"
ui_print \"! Please ask the developer of this module to make changes\"
abort \"*********************************************************\"
}

check_riru_version() {
ui_print \"- Riru: \$RIRU_VERSION_NAME (API \$RIRU_API)\"
[ \"\$RIRU_MODULE_API_VERSION\" -lt \"\$RIRU_MIN_COMPATIBLE_API\" ] && abort_for_old_module
[ \"\$RIRU_MODULE_MIN_API_VERSION\" -gt \"\$RIRU_API\" ] && abort_for_requires_new_version \"\$RIRU_MODULE_MIN_RIRU_VERSION_NAME\"
}

enforce_install_from_magisk_app() {
if \$BOOTMODE; then
ui_print \"- Installing from Magisk app\"
else
ui_print \"*********************************************************\"
ui_print \"! Install from recovery is NOT supported\"
ui_print \"! Some recovery has broken implementations, install with such recovery will finally cause Riru or Riru modules not working\"
ui_print \"! Please install from Magisk app\"
abort \"*********************************************************\"
fi
}" > $MODPATH/$MODID/util_functions.sh
if grep "ro.maple.enable=1" "$IPSBP"; then
UIP "Add ro.maple.enable=0"
echo "ro.maple.enable=0" >> $MODPATH/$MODID/system.prop
fi
UIP "Moving rirud"
mv $MODPATH/$MODID/system/$libarch/librirud.so $MODPATH/$MODID/rirud
SET_PERM $MODPATH/$MODID/rirud 0 0 0700
UIP "Copy rirud.dex"
mv $TMPDIR/RiruLegacy/classes.dex $MODPATH/$MODID/rirud.dex
SET_PERM $MODPATH/$MODID/rirud.dex 0 0 0600
UIP "Removing Old Files"
rm -rf $NVBASE/riru/bin $NVBASE/riru/native_bridge $NVBASE/riru/api_version.new $NVBASE/riru/version_code.new $NVBASE/riru/version_name.new $NVBASE/riru/enable_hide $IPDM/riru/api_version $IPDM/riru/version_code $IPDM/riru/version_name
UIP "Writing Files For pre-v24 Modules"
mkdir -p $NVBASE/riru
echo -n "25" > "$NVBASE/riru/api_version"
SET_PERM $NVBASE/riru/api_version 0 0 0600
fi
SET_PERM_RM -msgdi
}

IPEDXPOSED() {
if $MAGISK && [ -f $MODPATH/$IDRIRU/legacy ] && [ "$ASDK" -ge 27 ]; then
UCSA "Install EdXposed $VIPEDXPOSED?" "" "$MSGNUS" "IPEDXPOSEDS"
fi
}

IPEDXPOSEDS() {
UIP "Installing EdXposed $IAMM"
UZTPN "EdXposed"
MODID="$IDEDXPOSED"; REMOVER -mm "$MODID $IDLSPOSEDR"
mkdir -p $MODPATH/$MODID/system
UIP "Copy arm Libraries"
cp -rf $TMPDIR/EdXposed$MIPSL $MODPATH/$MODID/system
cp -rf $TMPDIR/EdXposed$MIPSFW $MODPATH/$MODID/system
if [ "$arch" = "arm64" ]; then UIP "Copy arm64 Libraries"; cp -rf $TMPDIR/EdXposed$MIPSL64 $MODPATH/$MODID/system; fi
MMPR -vcma "Riru - EdXposed" "$VIPEDXPOSED" "$VCIPEDXPOSED" "solohsu, MlgmXyysd" "Another enhanced implementation of Xposed Framework. Supports Android 8.0, 8.1, 9, 10, 11 or above. Requires Riru v23 or above installed. Telegram: @EdXposed" "10"
echo -e "allow system_server system_server process execmem\nallow system_server system_server memprotect mmap_zero" > $MODPATH/$MODID/sepolicy.rule
echo "#!$MIPSB/sh
MODDIR=\${0%/*}
if [[ -f \"\${MODDIR}/reboot_twice_flag\" ]]; then
rm -f \"\${MODDIR}/reboot_twice_flag\"
reboot
fi" > $MODPATH/$MODID/service.sh
echo "# TODO ensure quicken is not essential
#dalvik.vm.dex2oat-filter=quicken
dalvik.vm.dex2oat-flags=--inline-max-code-units=0
#dalvik.vm.image-dex2oat-flags=--inline-max-code-units=0 --compiler-filter=speed" > $MODPATH/$MODID/system.prop
echo "#!/sbin/sh
MODDIR=\${0%/*}
rm -rf $IPDM/riru/modules/edxp
if [[ -f \"$NVBASE/riru/modules/edxp.prop\" ]]; then
OLD_CONFIG=\$(cat \"$NVBASE/riru/modules/edxp.prop\")
rm -rf \"$NVBASE/riru/modules/\${OLD_CONFIG}\"
rm \"$NVBASE/riru/modules/edxp.prop\"
fi
if [[ -f \"$IPDM/riru/modules/edxp.prop\" ]]; then
OLD_CONFIG=\$(cat \"$IPDM/riru/modules/edxp.prop\")
rm -rf \"$IPDM/riru/modules/\${OLD_CONFIG}\"
rm \"$IPDM/riru/modules/edxp.prop\"
fi" > $MODPATH/$MODID/uninstall.sh
echo "#!$MIPSB/sh

grep_prop() {
local REGEX=\"s/^\$1=//p\"
shift
local FILES=\"\$@\"
[[ -z \"\$FILES\" ]] && FILES='/system/build.prop'
sed -n \"\$REGEX\" \${FILES} 2>/dev/null | head -n 1
}

MODDIR=\${0%/*}

RIRU_PATH=\"$NVBASE/riru\"
RIRU_PROP=\"\$(magisk --path)/.magisk/modules/riru-core/module.prop\"
TARGET=\"\${RIRU_PATH}/modules\"

EDXP_VERSION=\$(grep_prop version \"\${MODDIR}/module.prop\")
EDXP_APICODE=\$(grep_prop api \"\${MODDIR}/module.prop\")

ANDROID_SDK=\$(getprop ro.build.version.sdk)
BUILD_DESC=\$(getprop ro.build.description)
PRODUCT=\$(getprop ro.build.product)
MODEL=\$(getprop ro.product.model)
MANUFACTURER=\$(getprop ro.product.manufacturer)
BRAND=\$(getprop ro.product.brand)
FINGERPRINT=\$(getprop ro.build.fingerprint)
ARCH=\$(getprop ro.product.cpu.abi)
DEVICE=\$(getprop ro.product.device)
ANDROID=\$(getprop ro.build.version.release)
BUILD=\$(getprop ro.build.id)

RIRU_VERSION=\$(grep_prop version \$RIRU_PROP)
RIRU_VERCODE=\$(grep_prop versionCode \$RIRU_PROP)
RIRU_APICODE=\$(cat \"\${RIRU_PATH}/api_version\")

MAGISK_VERSION=\$(magisk -v)
MAGISK_VERCODE=\$(magisk -V)

#EDXP_MANAGER=\"org.meowcat.edxposed.manager\"
#PATH_PREFIX=\"$IPDSUDE/0/\"
#PATH_PREFIX_LEGACY=\"/data/user/0/\"

livePatch() {
# Should be deprecated now. This is for debug only.
supolicy --live \"allow system_server system_server process execmem\" \
\"allow system_server system_server memprotect mmap_zero\"
}

#if [[ \${ANDROID_SDK} -ge 24 ]]; then
#PATH_PREFIX=\"\${PATH_PREFIX_PROT}\"
#else
#PATH_PREFIX=\"\${PATH_PREFIX_LEGACY}\"
#fi

#DEFAULT_BASE_PATH=\"\${PATH_PREFIX}\${EDXP_MANAGER}\"
MISC_PATH=\$(cat $NVBASE/edxp/misc_path)
BASE_PATH=\"$IPDM/\$MISC_PATH\"

LOG_PATH=\"\${BASE_PATH}/0/log\"
CONF_PATH=\"\${BASE_PATH}/0/conf\"
DISABLE_VERBOSE_LOG_FILE=\"\${CONF_PATH}/disable_verbose_log\"
LOG_VERBOSE=true
OLD_PATH=\${PATH}
PATH=\${PATH#*:}
PATH_INFO=\$(ls -ldZ \"\${BASE_PATH}\")
PATH=\${OLD_PATH}
PATH_OWNER=\$(echo \"\${PATH_INFO}\" | awk -F \" \" '{print \$3\":\"\$4}')
PATH_CONTEXT=\$(echo \"\${PATH_INFO}\" | awk -F \" \" '{print \$5}')

if [[ -f \${DISABLE_VERBOSE_LOG_FILE} ]]; then
LOG_VERBOSE=false
fi

# If logcat client is kicked out by klogd server, we'll restart it.
# However, if it is killed manually or by EdXposed Manager, we'll exit.
# Refer to https://github.com/ElderDrivers/EdXposed/pull/575 for more information.
loop_logcat() {
while true
do
logcat \$*
if [[ \$? -ne 1 ]]; then
break
fi
done
}

start_log_cather () {
LOG_FILE_NAME=\$1
LOG_TAG_FILTERS=\$2
CLEAN_OLD=\$3
START_NEW=\$4
LOG_FILE=\"\${LOG_PATH}/\${LOG_FILE_NAME}.log\"
PID_FILE=\"\${LOG_PATH}/\${LOG_FILE_NAME}.pid\"
mkdir -p \${LOG_PATH}
if [[ \${CLEAN_OLD} == true ]]; then
rm \"\${LOG_FILE}.old\"
mv \"\${LOG_FILE}\" \"\${LOG_FILE}.old\"
fi
rm \"\${LOG_PATH}/\${LOG_FILE_NAME}.pid\"
if [[ \${START_NEW} == false ]]; then
return
fi
touch \"\${LOG_FILE}\" \"\${PID_FILE}\"
echo \"EdXposed Log\">>\"\${LOG_FILE}\"
echo \"Powered by Log Catcher\">>\"\${LOG_FILE}\"
echo \"QQ support group: 855219808\">>\"\${LOG_FILE}\"
echo \"Telegram support group: @Code_Of_MeowCat\">>\"\${LOG_FILE}\"
echo \"Telegram channel: @EdXposed\">>\"\${LOG_FILE}\"
echo \"--------- beginning of information\">>\"\${LOG_FILE}\"
echo \"Manufacturer: \${MANUFACTURER}\">>\"\${LOG_FILE}\"
echo \"Brand: \${BRAND}\">>\"\${LOG_FILE}\"
echo \"Device: \${DEVICE}\">>\"\${LOG_FILE}\"
echo \"Product: \${PRODUCT}\">>\"\${LOG_FILE}\"
echo \"Model: \${MODEL}\">>\"\${LOG_FILE}\"
echo \"Fingerprint: \${FINGERPRINT}\">>\"\${LOG_FILE}\"
echo \"ROM description: \${BUILD_DESC}\">>\"\${LOG_FILE}\"
echo \"Architecture: \${ARCH}\">>\"\${LOG_FILE}\"
echo \"Android build: \${BUILD}\">>\"\${LOG_FILE}\"
echo \"Android version: \${ANDROID}\">>\"\${LOG_FILE}\"
echo \"Android sdk: \${ANDROID_SDK}\">>\"\${LOG_FILE}\"
echo \"EdXposed version: \${EDXP_VERSION}\">>\"\${LOG_FILE}\"
echo \"EdXposed api: \${EDXP_APICODE}\">>\"\${LOG_FILE}\"
echo \"Riru version: \${RIRU_VERSION} (\${RIRU_VERCODE})\">>\"\${LOG_FILE}\"
echo \"Riru api: \${RIRU_APICODE}\">>\"\${LOG_FILE}\"
echo \"Magisk: \${MAGISK_VERSION%:*} (\${MAGISK_VERCODE})\">>\"\${LOG_FILE}\"
loop_logcat -f \"\${LOG_FILE}\" *:S \"\${LOG_TAG_FILTERS}\" &
LOG_PID=\$!
echo \"\${LOG_PID}\">\"\${LOG_PATH}/\${LOG_FILE_NAME}.pid\"
}

# install stub if manager not installed
if [[ \"\$(pm path org.meowcat.edxposed.manager 2>&1)\" == \"\" ]]; then
cp \"\${MODDIR}/EdXposed.apk\" \"$IPDLTMP/EdXposed.apk\"
LOCAL_PATH_INFO=\$(ls -ldZ \"$IPDLTMP\")
LOCAL_PATH_OWNER=\$(echo \"\${LOCAL_PATH_INFO}\" | awk -F \" \" '{print \$3\":\"\$4}')
LOCAL_PATH_CONTEXT=\$(echo \"\${LOCAL_PATH_INFO}\" | awk -F \" \" '{print \$5}')
chcon \"\${LOCAL_PATH_CONTEXT}\" \"$IPDLTMP/EdXposed.apk\"
chown \"\${LOCAL_PATH_OWNER}\" \"$IPDLTMP/EdXposed.apk\"
pm install \"$IPDLTMP/EdXposed.apk\"
rm -f \"$IPDLTMP/EdXposed.apk\"
fi

# execute live patch if rule not found
[[ -f \"\${MODDIR}/sepolicy.rule\" ]] || livePatch

# start_verbose_log_catcher
start_log_cather all \"EdXposed:V XSharedPreferences:V EdXposed-Bridge:V EdXposedManager:V XposedInstaller:V *:F\" true \${LOG_VERBOSE}

# start_bridge_log_catcher
start_log_cather error \"XSharedPreferences:V EdXposed-Bridge:V\" true true

if [[ -f \"$NVBASE/riru/modules/edxp.prop\" ]]; then
CONFIG=\$(cat \"$NVBASE/riru/modules/edxp.prop\")
[[ -d \"\${TARGET}/\${CONFIG}\" ]] || mkdir -p \"\${TARGET}/\${CONFIG}\"
cp \"\${MODDIR}/module.prop\" \"\${TARGET}/\${CONFIG}/module.prop\"
fi

chcon -R u:object_r:system_file:s0 \"\${MODDIR}\"
chcon -R \${PATH_CONTEXT} \"\${LOG_PATH}\"
chown -R \${PATH_OWNER} \"\${LOG_PATH}\"
chmod -R 666 \"\${LOG_PATH}\"

if [[ ! -z \"\${MISC_PATH}\" ]]; then
mkdir -p \"\${BASE_PATH}/cache\"
chcon -R u:object_r:magisk_file:s0 \"\${BASE_PATH}\"
chmod 771 \"\${BASE_PATH}\"
chmod 777 \"\${BASE_PATH}/cache\"
VARIANT=\"yahfa\"
if [[ -f \"\${BASE_PATH}/0/conf/use_sandhook\" ]]; then
if [[ ! -f \"\${BASE_PATH}/0/conf/disable_sandhook\" ]]; then
VARIANT=\"sandhook\"
fi
fi
[[ -f \"$NVBASE/edxp/\${VARIANT}.dex\" ]] && cp -f \"$NVBASE/edxp/\${VARIANT}.dex\" \"\${BASE_PATH}/framework/edxp.dex\"
fi

rm -f $NVBASE/edxp/new_install" > $MODPATH/$MODID/post-fs-data.sh
RIRU_PATH="$NVBASE/riru"
RIRU_EDXP="$(GRNE 4 "libriru_" ".so" "
$MIPSL
$MIPSL64
")"

RIRU_MODULES="$RIRU_PATH/modules"
RIRU_TARGET="$RIRU_MODULES/$RIRU_EDXP"
LIB_RIRU_EDXP="libriru_$RIRU_EDXP.so"
LIB_SANDHOOK_EDXP="lib$(GRNE 13 "lib" ".so" "
$MIPSL
$MIPSL64
").so"
if $BOOTMODE; then
UIP "Installing EdXposed Manager"
pm install -r $TMPDIR/EdXposed/EdXposedManager.apk >/dev/null
else
UIP "Installing EdXposed Manager"
mkdir -p $MODPATH/$MODID$MIPSA/EdXposedManager
cp -f $TMPDIR/EdXposed/EdXposedManager.apk $MODPATH/$MODID$MIPSA/EdXposedManager
fi
UIP "Creating Configuration Directories"
if [ -f $NVBASE/edxp/misc_path ]; then
MISC_PATH=$(cat $NVBASE/edxp/misc_path)
UIP "Use Previous Path $MISC_PATH"
else
MISC_RAND=$(tr -cd 'A-Za-z0-9' < /dev/urandom | head -c16)
MISC_PATH="edxp_$MISC_RAND"
UIP "Use New Path $MISC_RAND"
mkdir -p $NVBASE/edxp
echo "$MISC_PATH" > $NVBASE/edxp/misc_path
if [ -d $IPDSUDE/0/org.meowcat.edxposed.manager/conf ]; then
mkdir -p $IPDM/$MISC_PATH/0/conf
cp -rf $IPDSUDE/0/org.meowcat.edxposed.manager/conf/* $IPDM/$MISC_PATH/0/conf
fi
fi
UIP "Copying framework libraries"
touch $NVBASE/edxp/new_install
mkdir -p $IPDM/$MISC_PATH
echo "rm -rf $IPDM/$MISC_PATH" >> $MODPATH/$MODID/uninstall.sh
echo "[[ -f $NVBASE/edxp/new_install ]] || rm -rf $NVBASE/edxp" >> $MODPATH/$MODID/uninstall.sh
rm -rf "$IPDM/$MISC_PATH/framework"
mv "$MODPATH/$MODID$MIPSFW" "$IPDM/$MISC_PATH/framework"
mkdir -p "$IPDM/$MISC_PATH/framework/lib"
mv "$MODPATH/$MODID$MIPSL/libsandhook.edxp.so" "$IPDM/$MISC_PATH/framework/lib/libsandhook.edxp.so"
if [ "$arch" = "arm64" ]; then
mkdir -p "$IPDM/$MISC_PATH/framework/lib64"
mv "$MODPATH/$MODID$MIPSL64/libsandhook.edxp.so" "$IPDM/$MISC_PATH/framework/lib64/libsandhook.edxp.so"
fi
cp -f $IPDM/$MISC_PATH/framework/sandhook.dex $NVBASE/edxp
cp -f $IPDM/$MISC_PATH/framework/yahfa.dex $NVBASE/edxp
mkdir -p $IPDM/$MISC_PATH/cache
rm -rf $IPDM/$MISC_PATH/cache/*
mv "$MODPATH/$MODID$MIPSL/libriru_edxp.so" "$MODPATH/$MODID$MIPSL/$LIB_RIRU_EDXP"
if [ "$arch" = "arm64" ]; then
mv "$MODPATH/$MODID$MIPSL64/libriru_edxp.so" "$MODPATH/$MODID$MIPSL64/$LIB_RIRU_EDXP"
fi
if [ -f "$RIRU_MODULES/edxp.prop" ]; then
UIP "Removing Old edxp.prop"
OLD_CONFIG=$(cat "$RIRU_MODULES/edxp.prop")
rm -rf "$RIRU_MODULES/$OLD_CONFIG"
fi
if [ -f "$RIRU_MODULES/edxp" ]; then
UIP "Removing Old edxp"
rm -f "$RIRU_MODULES/edxp"
fi
UIP "Creating Riru Adds Files"
[ -d "$RIRU_TARGET" ] || mkdir -p "$RIRU_TARGET"
echo "$RIRU_EDXP" > "$RIRU_MODULES/edxp.prop"
rm -f "$RIRU_TARGET/module.prop"
cp "$MODPATH/$MODID/module.prop" "$RIRU_TARGET/module.prop"
SET_PERM_RM -msgdi
}

IPLSPOSEDR() {
if $MAGISK && [ "$ASDK" -ge 27 ]; then
if [ -d $MODPATH/$IDRIRU ] && [ ! -f $MODPATH/$IDRIRU/legacy ]; then
if $ZYGISK; then
UCSA "Install LSPosed Zygisk Or Riru?" "" "$MSGNUS" "IPLSPOSEDS"
else
UCSA "Install LSPosed $VIPLSPOSEDR?" "" "$MSGNUS" "IPLSPOSEDS"
fi
else
UCSA "Install LSPosed $VIPLSPOSEDZ?" "" "$MSGNUS" "IPLSPOSEDS"
fi
fi
}

IPLSPOSEDS() {
if $ZYGISK; then
UIP -d "Install LSPosed Variant" "$MSGVU Zygisk $VIPLSPOSEDZ" "$MSGVD Riru $VIPLSPOSEDR"
if $KEYFUNCTION; then
LSPOSEDR=false; MODID="$IDLSPOSEDZ"
else
LSPOSEDR=true; MODID="$IDLSPOSEDR"
fi
else
LSPOSEDR=true; MODID="$IDLSPOSEDR"
fi
UIP "Installing LSPosed $IAMM"
UZTPN "LSPosed"
REMOVER -mm "$IDLSPOSEDR $IDLSPOSEDZ $IDEDXPOSED"
UIP "Copy arm Libraries"
if $LSPOSEDR; then
mkdir -p $MODPATH/$MODID/riru $NVBASE/lspd/config
cp -rf $TMPDIR/LSPosed/$MODID$MIPSL $MODPATH/$MODID/riru
touch $MODPATH/$MODID/riru/lib/libriru_lspd
else
mkdir -p $MODPATH/$MODID/zygisk
cp -f $TMPDIR/LSPosed/$MODID$MIPSL/libdaemon.so $MODPATH/$MODID
cp -f $TMPDIR/LSPosed/$MODID$MIPSL/liblspd.so $MODPATH/$MODID/zygisk/armeabi-v7a.so
fi
cp -rf $TMPDIR/LSPosed/$MODID$MIPSFW $MODPATH/$MODID
if [ "$arch" = "arm64" ]; then
UIP "Copy arm64 Libraries"
if $LSPOSEDR; then
cp -rf $TMPDIR/LSPosed/$MODID$MIPSL64 $MODPATH/$MODID/riru
mv $MODPATH/$MODID/riru/lib64/libdaemon.so $MODPATH/$MODID
touch $MODPATH/$MODID/riru/lib64/libriru_lspd
rm -f $MODPATH/$MODID/riru/lib/libdaemon.so
else
cp -f $TMPDIR/LSPosed/$MODID$MIPSL64/libdaemon.so $MODPATH/$MODID
cp -f $TMPDIR/LSPosed/$MODID$MIPSL64/liblspd.so $MODPATH/$MODID/zygisk/armeabi-v8a.so
fi
fi
echo "#!$MIPSB/sh
dir=\${0%/*}
tmpLspdDex=\"$IPDLTMP/lspd.dex\"
debug=\"false\"
if [ -r \$tmpLspdDex ]; then
java_options=\"-Djava.class.path=\$tmpLspdDex\"
java_options=\"\$java_options -Dlsp.library.path=$IPDLTMP\"
debug=\"true\"
elif [ -d \"\$dir/system\" ]; then
java_options=\"-Djava.class.path=\$dir$MIPSFW/lspd.dex\"
java_options=\"\$java_options -Dlsp.library.path=\$dir\"
debug=\"true\"
else
java_options=\"-Djava.class.path=\$dir/framework/lspd.dex\"
java_options=\"\$java_options -Dlsp.library.path=\$dir\"
fi
if [ \$debug = \"true\" ]; then
os_version=\$(getprop ro.build.version.sdk)
if [ \"\$os_version\" -eq \"27\" ]; then
java_options=\"\$java_options -Xrunjdwp:transport=dt_android_adb,suspend=n,server=y -Xcompiler-option --debuggable\"
elif [ \"\$os_version\" -eq \"28\" ]; then
java_options=\"\$java_options -XjdwpProvider:adbconnection -XjdwpOptions:suspend=n,server=y -Xcompiler-option --debuggable\"
else
java_options=\"\$java_options -XjdwpProvider:adbconnection -XjdwpOptions:suspend=n,server=y\"
fi
fi
# shellcheck disable=SC2086
exec $MIPSB/app_process \$java_options $MIPSB --nice-name=lspd org.lsposed.lspd.core.Main \"\$@\" >/dev/null 2>&1" > $MODPATH/$MODID/lspd
if $LSPOSEDR; then
MMPR -vc "Riru - LSPosed" "$VIPLSPOSEDR" "$VCIPLSPOSEDR" "LSPosed Developers" "Another enhanced implementation of Xposed Framework. Supports Android 8.1 ~ 12, 12L DP1. Requires Riru 25.0.1 or above installed."
echo "allow system_server system_server process execmem" > $MODPATH/$MODID/sepolicy.rule
else
MMPR -vc "Riru - LSPosed" "$VIPLSPOSEDZ" "$VCIPLSPOSEDZ" "LSPosed Developers" "Another enhanced implementation of Xposed Framework. Supports Android 8.1 ~ 12, 12L DP1. Requires Magisk 24.0+ and Zygisk enabled."
fi
echo "dalvik.vm.dex2oat-flags=--inline-max-code-units=0" > $MODPATH/$MODID/system.prop
echo "#!$MIPSB/sh
MODDIR=\${0%/*}
rm -f \"$IPDLTMP/lspd.dex\"
unshare -m sh -c \"\$MODDIR/lspd &\"" > $MODPATH/$MODID/post-fs-data.sh
echo "#!$MIPSB/sh
MODDIR=\${0%/*}
unshare -m \"\$MODDIR/lspd\" --from-service &" > $MODPATH/$MODID/service.sh
echo "MODDIR=\${0%/*}
MODSDIR=\$(dirname \"\$MODDIR\")
if [ -d \"\$MODSDIR/riru_lsposed\" ] && [ -d \"\$MODSDIR/zygisk_lsposed\" ]; then
if [ -f \"\$MODSDIR/riru_lsposed/remove\" ] && [ -f \"\$MODSDIR/zygisk_lsposed/remove\" ]; then
rm -rf $NVBASE/lspd
fi
else
rm -rf $NVBASE/lspd
fi
rm -rf $NVBASE/riru/modules/lspd" > $MODPATH/$MODID/uninstall.sh
UIP "Installing LSPosed Manager"
if $BOOTMODE; then
pm install -r $TMPDIR/LSPosed/LSPosedManager.apk >/dev/null
fi
mkdir -p $NVBASE/lspd
cp -f $TMPDIR/LSPosed/LSPosedManager.apk $NVBASE/lspd/manager.apk
SET_PERM_RM
chmod 0744 $MODPATH/$MODID/lspd
UIP "$MSGDI"
}

IRIRUCW() {
if $MAGISK && [ -d $MODPATH/$IDRIRU ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Riru Clipboard Whitelist $VIPRIRUCW?" "" "$MSGNUS" "IRIRUCWS"
fi
}

IRIRUCWS() {
UIP "Installing Riru Clipboard Whitelist $IAMM"
UZTPN "RiruClipboardWhitelist"
MODID="$IDRIRUCW"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID/riru/lib $MODPATH/$MODID/packages
touch $MODPATH/$MODID/packages/.android
UIP "Copy arm Libraries"
mv $TMPDIR/RiruClipboardWhitelist$MIPSL/libriru_clipboard_whitelist.so $MODPATH/$MODID/riru/lib
if [ "$arch" = "arm64" ]; then
UIP "Copy arm64 Libraries"
mkdir -p $MODPATH/$MODID/riru/lib64
mv $TMPDIR/RiruClipboardWhitelist$MIPSL64/libriru_clipboard_whitelist.so $MODPATH/$MODID/riru/lib64
fi
MMPR -vcse "Riru - Clipboard Whitelist" "$VIPRIRUCW" "$VCIPRIRUCW" "Kr328" "Allow apps access clipboard in background." "29" "com.github.kr328.clipboard.Injector"
UIP "Extracting dex"
cp -f $TMPDIR/RiruClipboardWhitelist/classes.dex $MODPATH/$MODID
if $BOOTMODE; then
UIP -d "Choose Apk Install Variant:" "$MSGVU Install As Data App" "$MSGVD Install As System App"
if $KEYFUNCTION; then
UIP "Installing Clipboard Whitelist Manager"
pm install -r $TMPDIR/RiruClipboardWhitelist/ClipboardWhitelist.apk >/dev/null
else
UIP "Installing Clipboard Whitelist Manager"
mkdir -p $MODPATH/$MODID$MIPSA/ClipboardWhitelist
cp -f $TMPDIR/RiruClipboardWhitelist/ClipboardWhitelist.apk $MODPATH/$MODID$MIPSA/ClipboardWhitelist
fi
else
UIP "Installing Clipboard Whitelist Manager"
mkdir -p $MODPATH/$MODID$MIPSA/ClipboardWhitelist
cp -f $TMPDIR/RiruClipboardWhitelist/ClipboardWhitelist.apk $MODPATH/$MODID$MIPSA/ClipboardWhitelist
fi
SET_PERM_RM -msgdi
}

IPRMH() {
if $MAGISK && [ -d $MODPATH/$IDRIRU ] && [ "$ASDK" -ge 28 ]; then
UCSA "Install Riru Momo Hider $VIPRMH?" "$MSGEFTC" "$MSGNUS" "IPRMHS"
fi
}

IPRMHS() {
UIP "Installing Riru Momo Hider $IAMM"
UZTPN "RiruMomoHider"
MODID="$IDRMH"; REMOVER -e-mm "$MODID" "config"
mkdir -p $MODPATH/$MODID/riru $MODPATH/$MODID/config
UIP "Copy arm Libraries"
cp -rf $TMPDIR/RiruMomoHider/riru/lib $MODPATH/$MODID/riru
if [ "$arch" = "arm64" ]; then UIP "Copy arm64 Libraries"; cp -rf $TMPDIR/RiruMomoHider/riru/lib64 $MODPATH/$MODID/riru; fi
MMPR -vcmma "Riru-MomoHider" "$VIPRMH" "$VCIPRMH" "canyie" "A Riru module tries to make Magisk more hidden. You can find its source at https://github.com/canyie/Riru-MomoHider" "20400" "5"
echo "rm -rf $IPDM/riru/modules/momohider; rm -rf $NVBASE/riru/modules/momohider" > $MODPATH/$MODID/uninstall.sh
echo "#!$MIPSB/sh
MODDIR=\${0%/*}
DATA_DIR=\"\$MODDIR/config\"

[ -f \"\$DATA_DIR/initrc\" ] || exit 0

MAGISK_TMP=\$(magisk --path) || MAGISK_TMP=\"/sbin\"
INITRC_NAME=\"init.rc\"

# Android 11's new init.rc
[ -f \"/init.rc\" ] || INITRC_NAME=\"system/etc/init/hw/init.rc\"

INITRC=\"/\$INITRC_NAME\"
MAGISKRC=\"\$MAGISK_TMP/.magisk/rootdir/\$INITRC_NAME\"

trim() {
trimmed=\$1
trimmed=\${trimmed%% }
trimmed=\${trimmed## }
echo \$trimmed
}

# https://github.com/topjohnwu/Magisk/blob/master/native/jni/init/rootdir.cpp#L24
grep_flash_recovery() {
# Some devices don't have the flash_recovery service
# (like Samsung renamed it to \"ota_cleanup\" but Magisk won't remove it, so we no need to do anything for this)
LINE=\$(grep \"service flash_recovery \" \"\$INITRC\") || return 1
LINE=\${LINE#*\"service flash_recovery \"}
trim \"\$LINE\"
}

reset_flash_recovery() {
FLASH_RECOVERY=\$(grep_flash_recovery) || return

# Skip if the flash_recovery not removed by Magisk
grep -qxF \"service flash_recovery $MIPSB/xxxxx\" \"\$MAGISKRC\" || return

# Skip if the install-recovery.sh not exist
[ -f \"\$FLASH_RECOVERY\" ] || return

# Skip if there is the state set for the service
[ \"\$(getprop 'init.svc.flash_recovery' 2>/dev/null)\" = \"\" ] || return

# Set a \"fake\" state for the service
resetprop 'init.svc.flash_recovery' 'stopped'
}

grep_service_name() {
ARG=\$1
LINE=\$(grep \"service .* \$MAGISK_TMP/magisk --\$ARG\" \"\$MAGISKRC\")
LINE=\${LINE#*\"service \"}
LINE=\${LINE%\" \$MAGISK_TMP\"*}
trim \"\$LINE\"
}

del_service_name() {
resetprop --delete \"init.svc.\$1\"
}

delete_services() {
# Wait for boot to complete
while [ \"\$(getprop sys.boot_completed)\" != \"1\" ]
do
sleep 1
done

# Remove Magisk's services' names from system properties
POST_FS_DATA=\$(grep_service_name \"post-fs-data\")
LATE_START_SERVICE=\$(grep_service_name \"service\")
BOOT_COMPLETED=\$(grep_service_name \"boot-complete\")
del_service_name \"\$POST_FS_DATA\"
del_service_name \"\$LATE_START_SERVICE\"
del_service_name \"\$BOOT_COMPLETED\"
}

reset_flash_recovery
delete_services &" > $MODPATH/$MODID/service.sh
echo "allow zygote * filesystem { unmount }
# For setns()
allow zygote zygote capability { sys_ptrace sys_chroot }
allow zygote unlabeled file { open read }" > $MODPATH/$MODID/sepolicy.rule
echo "#!$MIPSB/sh
MODDIR=\${0%/*}
DATA_DIR=\"\$MODDIR/config\"
MAGISK_TMP=\$(magisk --path) || MAGISK_TMP=\"/sbin\"
echo -n \"\$MAGISK_TMP\" > \"\$DATA_DIR/magisk_tmp\"
[ -f \$MODDIR/sepolicy.rule ] && exit 0
magiskpolicy --live \"allow zygote * filesystem { unmount }\" \
\"allow zygote zygote capability { sys_ptrace sys_chroot }\" \
\"allow zygote unlabeled file { open read }\"" > $MODPATH/$MODID/post-fs-data.sh
UIP -d "Choose Variant:" "$MSGVU Full Activate" "$MSGVD Activate Separately"
if $KEYFUNCTION; then
for a in isolated setns	app_zygote_magic initrc; do touch $MODPATH/$MODID/config/$a; done
else
UIP -d "Add isolated Files (DEPRECATED)?" "Apply Magisk Hide For Isolated Process And App Zygotes" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
touch $MODPATH/$MODID/config/isolated
else
UIP -d "Add setns Files (Auto Enable \"isolated\")?" "Faster New Way To Hide Magisk In Isolated Processes" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
touch $MODPATH/$MODID/config/setns; if [ ! -f $MODPATH/$MODID/config/isolated ]; then touch $MODPATH/$MODID/config/isolated; fi
else
UIP -d "Add app_zygote_magic Files?" "Make A App Named \"Momo\" Cannot Detect Magisk Hide Is Running" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
touch $MODPATH/$MODID/config/app_zygote_magic
else
UIP -d "Add initrc Files?" "Hide The Modified Traces Of init.rc" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
touch $MODPATH/$MODID/config/initrc
fi
fi
fi
fi
fi
SET_PERM_RM -msgdi
}

} #

{ #Tweaks: FGS/BP/LED/UGMSD/USGP/VS

IPFGS() {
if $MAGISK; then
if $BOOTMODE; then
MSGUC="Run Or Install Force Google Sync?"
else
MSGUC="Install Force Google Sync $VIPFGS?"
fi
UCSA "$MSGUC" "" "$MSGNUS" "IPFGSS"
fi
}

IPFGSS() {
if $BOOTMODE; then
UIP "Force Google Sync In Progress, Wait..."
bmgr run >/dev/null
UIP "Running Incremental Backup For Requested Packages"
bmgr backupnow appdata >/dev/null
UIP "Running Incremental Backup For All Packages"
bmgr backupnow --all >/dev/null
UIP "Force Google Sync Done" "Check The Settings, After A Couple Of Minutes Everything Is In Sync"
UIP -d "Install Force Google Sync $VIPFGS?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
fi
if $KEYFUNCTION || [ $BOOTMODE != true ]; then
UIP "Installing Force Google Sync After Boot $IAMM" 
MODID="$IDFGS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MBCCSERVICE "bmgr run; bmgr backupnow appdata; bmgr backupnow --all"
MMPR -v "Force Google Sync" "$VIPFGS" "Force Google Sync After Boot $MSGFMM"; SET_PERM_RM -msgdi
fi
}

IPFEG() {
if $MAGISK && [ $MIUI != true ] && [ "$ASDK" -ge 29 ]; then
UCSA "Install Force Gestures $VIPFEG?" "" "$MSGNUS" "IPFEGS"
fi
}

IPFEGS() {
UIP "Installing Force Gestures $IAMM" 
MODID="$IDFEG"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
if SP_CHECKER "$IPDSU/0/settings_secure.xml" "navigation_mode"; then
UIP -d "Choose Method:" "$MSGVU CMD Overlay" "$MSGVD Settings Put"
if $KEYFUNCTION; then
MBCCSERVICE "cmd overlay enable com.android.internal.systemui.navbar.gestural"
else
MBCCSERVICE "$SPSECURE navigation_mode 2"
fi
else
MBCCSERVICE "cmd overlay enable com.android.internal.systemui.navbar.gestural"
fi
MMPR -v "Force Gestures" "$VIPFEG" "Force Gestures - If The Gesture Selection Item Disappeared After Installing Other Launchers Or Forced Hiding Gestures $MSGFMM"; SET_PERM_RM -msgdi
}

IPHAP() {
if $MAGISK && [ "$ASDK" -ge 30 ]; then
UCSA "Install Enabling Hidden Api Policy $VIPHAP?" "" "$MSGNUS" "IPHAPS"
fi
}

IPHAPS() {
UIP "Installing Enabling Hidden Api Policy $IAMM"
MODID="$IDHAP"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
if $BOOTMODE; then
UIP "Enabling Hidden Api Policy Right Now"
$SPGLOBAL hidden_api_policy 1; $SPGLOBAL hidden_api_policy_pre_p_apps 1; $SPGLOBAL hidden_api_policy_p_apps 1
fi
MBCCSERVICE "$SPGLOBAL hidden_api_policy 1; $SPGLOBAL hidden_api_policy_pre_p_apps 1; $SPGLOBAL hidden_api_policy_p_apps 1"
MMPR -v "Enabling Hidden Api Policy" "$VIPHAP" "Enabling Hidden Api Policy $MSGFMM"; SET_PERM_RM -msgdi
}

IPAFUS() {
if $MAGISK && [ "$ASDK" -le 28 ] && SP_CHECKER "$IPDSU/0/settings_secure.xml" "install_non_market_apps"; then UCSA "Force Install Apps From Unknown Sources $VIPAFUS?" "" "$MSGNUS" "IPAFUSS"; fi
}

IPAFUSS() {
UIP "Installing AIOAFUS $IAMM" 
if $BOOTMODE; then
UIP "Enabling Install Apps From Unknown Sources Right Now"
$SPSECURE install_non_market_apps 1
fi
MODID="$IDAFUS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MBCCSERVICE "$SPSECURE install_non_market_apps 1"
MMPR -v "Allow Installation Of Apps From Unknown Sources" "$VIPAFUS" "Force Allow Installation Of Apps From Unknown Sources $MSGFMM"; SET_PERM_RM -msgdi
}

IPBPT() {
UCSA "Install BuildProp Tweaks $VIPBPT?" "" "$MSGNUS" "IPBPTS"
}

IPBPTS() {
UIP "Installing Build Prop Tweaks Patch $IAMM" 
if $MAGISK; then
MODID="$IDBPT"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MMPR -v "Build Prop Tweaks" "$VIPBPT" "Build Prop Tweaks $MSGFMM"; SET_PERM_RM; IPBPT="$MODPATH/$MODID/system.prop"
else
BUILD_PROP_BACKUP; IPBPT="$IPSBP"
fi

echo "# Enable 4K in YouTube
sys.display-size=3840x2160

# Scrolling cache settings (1=cache on always, 2=cache on certain times, 3=cache off certain times, 4=cache off always)
persist.sys.scrollingcache=4
persist.sys.smoothscrollbar=true

# Reduces touch delay to the screen
touch.presure.scale=0.001

# Interface smoothness
persist.service.lgospd.enable=0
persist.service.pcsync.enable=0
ro.ril.enable.a52=1
ro.ril.enable.a53=0

# Animation AOD & LS Fix
debug.force_no_blanking=true

# Disable Safemedia
audio.safemedia.bypass=true" >> $IPBPT
UIP "$MSGDI"
}

IPKL() {
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/killlogger ]; then
UIP -d "$MSGFI Kill Logger, Remove?" "$MSGVU Yes $MSGEEFTC" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Restore Stock Files"
RSKL=$(ls $AIOPFMDPH/KL)
cp -f $AIOPFMDPH/KL/* $IPSB
for f in $RSKL; do chmod 777 $IPSB/$f; done
rm -rf $AIOPFMDPH/KL $AIOPFMDPH/killlogger
UIP "$MSGDRS"
fi
else
UCSA "Install Kill Logger $VIPKL?" "" "$MSGNUS" "IPKLS"
fi
}

IPKLS() {
UIP "Installing Kill Logger $IAMM"
if $MAGISK; then
MODID="$IDKL"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID$MIPSB
MMPR -vc "KillLogger" "$VIPKL" "$VCIPKL" "mrfrost475" "This module deletes the files responsible for the dump, logcat, and bug reports also prescribes logcat ban in build.prop"
KLIPP=$MODPATH/$MODID/system.prop
if SP_CHECKER "$IPDSU/0/settings_global.xml" "activity_starts_logging_enabled"; then MBCCSERVICE "$SPGLOBAL activity_starts_logging_enabled 0"; fi
else
BUILD_PROP_BACKUP; KLIPP=$IPSBP; touch $AIOPFMDPH/killlogger
fi
if [ -f $IPSB/logcat ]; then UIP -d "You Don't Need logcat?" "$MSGVU Yes" "$MSGVD No"; if $KEYFUNCTION; then if $MAGISK; then echo '' > $MODPATH/$MODID$MIPSB/logcat; else mkdir -p $AIOPFMDPH/KL; cp -f $IPSB/logcat $AIOPFMDPH/KL; echo '' > $IPSB/logcat; fi; fi; fi
if [ -f $IPSB/dumpsys ]; then UIP -d "You Don't Need dumpsys?" "$MSGVU Yes" "$MSGVD No"; if $KEYFUNCTION; then if $MAGISK; then echo '' > $MODPATH/$MODID$MIPSB/dumpsys; else mkdir -p $AIOPFMDPH/KL; cp -f $IPSB/dumpsys $AIOPFMDPH/KL; echo '' > $IPSB/dumpsys; fi; fi; fi
UIP "Create Daemons Dummy Files In $MIPSB"
KLDL="
DumpSystemInfo
bugreport
bugreportz
cnss_diag
cplog
crash_dump32
crash_dump64
debuggerd
debuggerd64
dexdump
diag_socket_log
dmesg
dmlog
dumpstate
emdlogger1
emdlogger3
log
logd
loggerlauncher
logwrapper
lpdump
lpdumpd
memorydumper
mobile_log_d
outdump
subsystem_ramdump
tcpdump
wpdiagd
xlog
"
for kll in $KLDL; do if $MAGISK; then touch $MODPATH/$MODID$MIPSB/$kll; else if [ -f $IPSB/$kll ]; then mkdir -p $AIOPFMDPH/KL; cp -f $IPSB/$kll $AIOPFMDPH/KL; echo '' > $IPSB/$kll; fi; fi; done
UIP "Clearing All Logs"
KLRML="
$IPDM/Stats-data
$IPDS/dropbox
$IPDS/graphicsstats
$IPDS/log-files.xml
$IPDS/procstats
$IPDS/syncmanager-log
$IPDS/usagestats
$IPDSUDE/0/com.android.shell/files/bugreports
$STORAGE/MIUI/debug_log
/data/anr
/data/log
/data/log_other_mode
/data/tombstones
/dev/log
"
for kll in $KLRML; do if [ -d $kll ]; then UIP "Found Logs In $kll"; rm -rf $kll/*; elif [ -f $kll ]; then UIP "Found $kll"; rm -f $kll; fi; done
if $MIUI; then touch $STORAGE/MIUI/debug_log; fi
echo -e "\n# KillLogger
av.debug.disable.pers.cache=true
dalvik.vm.checkjni=false
dalvik.vm.verify-bytecode=false
debug_test=0
debugtool.anrhistory=0
libc.debug.malloc=0
log.cffdump=0
log.cffdump_no_memzero=0       
log.cffdump_with_ifh=0                 
log.dumpx=0 
log.pm4=0
log.pm4mem=0
log.primitives=0
log.resolves=0
log.sc_dev=0
log.shaders=0
log.tag.EDEN=OFF
log.tag.NPUC=OFF
log_ao=0
log_audiodecnode=0
log_audiooutput=0
log_basedecnode=0
log_datapath=0
log_fps_interval=0
log_frame_info=0
log_metadatadriver=0
log_mp4dectime=0
log_mp4parsernode=0
log_omxmp4=0
log_outputnode=0
log_outputnodeinputport=0
log_playerdriver=0
log_playerengine=0
log_posttime=0
log_profile=0
log_surfaceoutput=0
log_videodecnode=0
logcat.live=disable
net.ipv4.tcp_no_metrics_save=1
persist.android.strictmode=0
persist.vendor.ssr.enable_ramdumps=0
profiler.debugmonitor=false
profiler.force_disable_err_rpt=1
profiler.force_disable_ulog=1
profiler.hung.dumpdobugreport=false
profiler.launch=false
ro.config.ksm.support=false
ro.config.nocheckin=1
ro.kernel.android.checkjni=0
ro.kernel.checkjni=0
ro.logd.size=OFF" >> $KLIPP
if $MAGISK; then MBCCSERVICE "echo \"0\" > /sys/block/mmcblk0/queue/iostats; echo \"0\" > /sys/block/mmcblk1/queue/iostats"; SET_PERM_RM; fi
UIP "$MSGDI"
}

IPFMSAAS() {
UCSA "Install Force 4X MSAA Switcher $VIPFMSAAS?" "" "$MSGNUS" "IPFMSAASS"
}

IPFMSAASS() {
UIP "Installing Force 4X MSAA Switcher $IAMM" 
if $MAGISK; then
MODID="$IDFMSAAS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
echo "debug.egl.force_msaa=true" > $MODPATH/$MODID/system.prop
MMPR -v "Force MSAA Switcher" "$VIPFMSAAS" "Force 4X MSAA Switcher $MSGFMM"; SET_PERM_RM
else
BUILD_PROP_BACKUP
echo -e "\n# Force 4X MSAA Switcher\ndebug.egl.force_msaa=true" >> $IPSBP
fi
UIP "$MSGDI"
}

IPFDHWO() {
if $MAGISK; then
UCSA "Install Force Disable HW Overlays $VIPFDHWO?" "" "$MSGNUS" "IPFDHWOS"
fi
}

IPFDHWOS() {
UIP "Installing Force Disable HW Overlays $IAMM" 
MODID="$IDFDHWO"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MBCCSERVICE "service call SurfaceFlinger 1008 i32 1"
MMPR -v "Force Disable HW Overlays" "$VIPFDHWO" "Force Disable HW Overlays $MSGFMM"; SET_PERM_RM -msgdi
}

IPFDEVADB() {
if $MAGISK && SP_CHECKER "$IPDSU/0/settings_global.xml" "development_settings_enabled adb_enabled"; then UCSA "Install Force Activate DEV & ADB $VIPFDEVADB?" "" "$MSGNUS" "IPFDEVADBS"; fi
}

IPFDEVADBS() {
UIP "Installing Force Activate DEV & ADB $IAMM" 
MODID="$IDFDEVADB"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MBCCSERVICE "$SPGLOBAL development_settings_enabled 1; $SPGLOBAL adb_enabled 1"
echo "persist.security.adbinput=1
persist.security.adbinstall=1
persist.service.adb.enable=1
persist.service.debuggable=1
persist.sys.usb.config=mtp,adb
ro.debuggable=1
service.adb.tcp.port=5555" > $MODPATH/$MODID/system.prop
MMPR -v "Force DEV & ADB" "$VIPFDEVADB" "Force Activate DEV & ADB $MSGFMM"; SET_PERM_RM -msgdi
}

IPSOOOFUIRC() {
if CHECK_DEVICE dipper || CHECK_DEVICE beryllium; then
if [ $BOOTMODE != true ] && [ -f $AIOPFMDPH/sooofuirc ]; then UIP -d "$MSGFI On/Off Face UnLock IR Camera, Remove?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
UIP "Removing..."
BUCKUPER -r "$IPPVO/FaceUnlockService__auto_generated_rro_vendor.apk"
rm -f $AIOPFMDPH/sooofuirc
UIP "$MSGDRM"
fi
else
if [ $MIUI != true ] && [ -f $IPSEP/com.motorola.faceunlock.xml ] || [ -f $IPSEP/privapp-permissions-org.pixelexperience.faceunlock.xml ] || [ -f $IPSEP/privapp-permissions-com.crdroid.faceunlock.xml ] || [ -f $IPSEP/privapp-permissions-com.aospextended.faceunlock.xml ]; then
UCSA "Switch On/Off Face UnLock IR Camera $VIPSOOOFUIRC?" "" "$MSGNUS" "IPSOOOFUIRCS"
fi
fi
fi
}

IPSOOOFUIRCS() {
UZTPN "SOOOFUIRC"
UIP -d "Switching" "$MSGVU On" "$MSGVD Off"
if [ -f $IPSEP/com.motorola.faceunlock.xml ]; then if $KEYFUNCTION; then SWITCHIR=5; MSGSWITCHIR=On; else SWITCHIR=; MSGSWITCHIR=Off; fi; else if $KEYFUNCTION; then MSGSWITCHIR=On; else MSGSWITCHIR=Off; fi; fi
UIP "Installing Switch $MSGSWITCHIR Face UnLock IR Camera $IAMM"
if $MAGISK; then
MODID="$IDSOOOFUIRC"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
if [ -f $IPSEP/com.motorola.faceunlock.xml ]; then
echo -e "vendor.camera.aux.packagelist=org.codeaurora.snapcam,com.android.camera,org.lineageos.snap,com.motorola.faceunlock\nro.face.moto_unlock_service.cam_id=$SWITCHIR" > $MODPATH/$MODID/system.prop
else
mkdir -p $MODPATH/$MODID/$MIPPVO
if [ -f $IPSEP/privapp-permissions-org.pixelexperience.faceunlock.xml ]; then
echo "vendor.camera.aux.packagelist=org.codeaurora.snapcam,com.android.camera,org.lineageos.snap,org.pixelexperience.faceunlock" > $MODPATH/$MODID/system.prop
cp -f $TMPDIR/SOOOFUIRC/FaceUnlockService-org.pixelexperience.faceunlock-$MSGSWITCHIR.apk $MODPATH/$MODID/$MIPPVO/FaceUnlockService__auto_generated_rro_vendor.apk
elif [ -f $IPSEP/privapp-permissions-com.crdroid.faceunlock.xml ]; then
echo "vendor.camera.aux.packagelist=org.codeaurora.snapcam,com.android.camera,org.lineageos.snap,com.crdroid.faceunlock" > $MODPATH/$MODID/system.prop
cp -f $TMPDIR/SOOOFUIRC/FaceUnlockService-com.crdroid.faceunlock-$MSGSWITCHIR.apk $MODPATH/$MODID/$MIPPVO/FaceUnlockService__auto_generated_rro_vendor.apk
else
echo "vendor.camera.aux.packagelist=org.codeaurora.snapcam,com.android.camera,org.lineageos.snap,com.aospextended.faceunlock" > $MODPATH/$MODID/system.prop
cp -f $TMPDIR/SOOOFUIRC/FaceUnlockService-com.aospextended.faceunlock-$MSGSWITCHIR.apk $MODPATH/$MODID/$MIPPVO/FaceUnlockService__auto_generated_rro_vendor.apk
fi
fi
MMPR -v "Switch $MSGSWITCHIR Face UnLock IR Camera" "$VIPSOOOFUIRC" "Switch $MSGSWITCHIR Face UnLock IR Camera $MSGFMM"; SET_PERM_RM
else
BUILD_PROP_BACKUP
if [ -f $IPSEP/com.motorola.faceunlock.xml ]; then
echo -e "vendor.camera.aux.packagelist=org.codeaurora.snapcam,com.android.camera,org.lineageos.snap,com.motorola.faceunlock\nro.face.moto_unlock_service.cam_id=$SWITCHIR" >> $IPSBP
else
touch $AIOPFMDPH/sooofuirc
BUCKUPER -s "$IPPVO/FaceUnlockService__auto_generated_rro_vendor.apk"
if [ -f $IPSEP/privapp-permissions-org.pixelexperience.faceunlock.xml ]; then
cp -f $TMPDIR/SOOOFUIRC/FaceUnlockService-org.pixelexperience.faceunlock-$MSGSWITCHIR.apk $IPPVO/FaceUnlockService__auto_generated_rro_vendor.apk
echo "vendor.camera.aux.packagelist=org.codeaurora.snapcam,com.android.camera,org.lineageos.snap,org.pixelexperience.faceunlock" >> $IPSBP
elif [ -f $IPSEP/privapp-permissions-com.crdroid.faceunlock.xml ]; then
echo "vendor.camera.aux.packagelist=org.codeaurora.snapcam,com.android.camera,org.lineageos.snap,com.crdroid.faceunlock" >> $IPSBP
cp -f $TMPDIR/SOOOFUIRC/FaceUnlockService-com.crdroid.faceunlock-$MSGSWITCHIR.apk $IPPVO/FaceUnlockService__auto_generated_rro_vendor.apk
else
echo "vendor.camera.aux.packagelist=org.codeaurora.snapcam,com.android.camera,org.lineageos.snap,com.aospextended.faceunlock" >> $IPSBP
cp -f $TMPDIR/SOOOFUIRC/FaceUnlockService-com.aospextended.faceunlock-$MSGSWITCHIR.apk $IPPVO/FaceUnlockService__auto_generated_rro_vendor.apk
fi
fi
fi
UIP "$MSGDI"
}

IPFDM() {
if [ "$ASDK" -ge 27 ]; then
UCSA "Install Force Dark Theme $VIPFDM?" "" "$MSGNUS" "IPFDMS"
fi
}

IPFDMS() {
UIP "Installing Force Dark Mode $IAMM"
if $MAGISK; then
MODID="$IDFDM"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
echo "debug.hwui.force_dark=true" > $MODPATH/$MODID/system.prop
MMPR -v "Force Dark Mode" "$VIPFDM" "Force Dark Mode $MSGFMM"; SET_PERM_RM
else
BUILD_PROP_BACKUP
echo -e "\n# Force Dark\ndebug.hwui.force_dark=true" >> $IPSBP
fi
UIP "$MSGDI"
}

IPFDPP() {
if $MAGISK && SP_CHECKER "$IPDSU/0/settings_global.xml" "upload_apk_enable package_verifier_enable package_verifier_user_consent verifier_verify_adb_installs"; then UCSA "Install Force Disabling Play Protect $VIPFDPP?" "" "$MSGNUS" "IPFDPPS"; fi
}

IPFDPPS() {
UIP "Installing Force Disabling Play Protect $IAMM" 
MODID="$IDFDPP"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MBCCSERVICE "$SPGLOBAL upload_apk_enable 0; $SPGLOBAL package_verifier_enable 0; $SPGLOBAL package_verifier_user_consent -1; $SPGLOBAL verifier_verify_adb_installs 0"
MMPR -v "Force Disabling Play Protect" "$VIPFDPP" "Force Disabling Play Protect $MSGFMM"; SET_PERM_RM -msgdi
}

IPFI() {
if $MAGISK; then UCSA "Install Force Idle $VIPFI?" "" "$MSGNUS" "IPFIS"; fi
}

IPFIS() {
UIP "Installing Force Idle $IAMM" 
MODID="$IDFI"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
if [ -f $MODPATH/killlogger/$MIPSB/dumpsys ]; then UIP "Found dumpsys In KillLogger - Removing dumpsys"; fi
if SP_CHECKER "$IPDSU/0/settings_global.xml" "aggressive_idle_enabled aggressive_standby_enabled"; then MBCCSERVICE "$SPGLOBAL aggressive_idle_enabled 1; $SPGLOBAL aggressive_standby_enabled 1; dumpsys deviceidle force-idle; dumpsys deviceidle enable"; else MBCCSERVICE "dumpsys deviceidle force-idle; dumpsys deviceidle enable"; fi
MMPR -v "Force Idle" "$VIPFI" "Force Idle $MSGFMM"; SET_PERM_RM -msgdi
}

IPCLEDLO() {
if $MAGISK; then
if [ -f $LEDMBRED ] || [ -f $LEDMBGREEN ] || [ -f $LEDMBBLUE ] || [ -f $LEDMBWHITE ]; then
UCSA "Install Charging LED Light Off $VIPCLEDLO?" "" "$MSGNUS" "IPCLEDLOS"
fi
fi
}

IPCLEDLOS() {
UIP "Installing Charging LED Light Off $IAMM"
MODID="$IDCLEDLO"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
echo "$LEDLSC; while true; do echo \"0\" | tee $LEDMBRED $LEDMBGREEN $LEDMBBLUE $LEDMBWHITE; done" > $MODPATH/$MODID/service.sh
MMPR -v "Charging Led Light Off" "$VIPCLEDLO" "Charging Led Light Off $MSGFMM"; SET_PERM_RM -msgdi
}

IPLEDLA() {
if $MAGISK; then
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ] || [ -f $FLASHLIGHT ] || [ -f $BUTTONBACKLIGHT ]; then
UCSA "Install LED Light Animation Mod $VIPLEDLA?" "$MSGEFTC" "$MSGNUS" "IPLEDLAS"
fi
fi
}

IPLEDLAS() {

LEDSTANDART="if [ -f $LEDWHITE ]; then
ANIMSPEED=\"0 1 2 3 4 5 6 7 8 9 10 9 8 7 6 5 4 3 2 1 0\"
ANIMCOUNT=\"\$(seq 10)\"
elif [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ]; then
ANIMSPEED=\"0 1 0 0 1 0 0 1 0\"
ANIMCOUNT=\"\$(seq 10)\"
fi"

mkdir -p $TMPDIR/LEDLightAnimation
echo "$LEDLSC
$LEDSTANDART
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
if [ -f $LEDWHITE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDWHITE $FLASHLIGHT $BUTTONBACKLIGHT
fi
if [ -f $LEDRED ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDRED $FLASHLIGHT $BUTTONBACKLIGHT
fi
if [ -f $LEDGREEN ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDGREEN $FLASHLIGHT $BUTTONBACKLIGHT
fi
if [ -f $LEDBLUE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDBLUE $FLASHLIGHT $BUTTONBACKLIGHT
fi
done
done" > $TMPDIR/LEDLightAnimation/serviceledflashbutton.sh

echo "$LEDLSC
$LEDSTANDART
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
if [ -f $LEDWHITE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDWHITE $FLASHLIGHT
fi
if [ -f $LEDRED ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDRED $FLASHLIGHT
fi
if [ -f $LEDGREEN ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDGREEN $FLASHLIGHT
fi
if [ -f $LEDBLUE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDBLUE $FLASHLIGHT
fi
done
done" > $TMPDIR/LEDLightAnimation/serviceledflash.sh

echo "$LEDLSC
$LEDSTANDART
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
if [ -f $LEDWHITE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDWHITE $BUTTONBACKLIGHT
fi
if [ -f $LEDRED ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDRED $BUTTONBACKLIGHT
fi
if [ -f $LEDGREEN ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDGREEN $BUTTONBACKLIGHT
fi
if [ -f $LEDBLUE ]; then
sleep 0.1
echo \$ADDSTRING | tee $LEDBLUE $BUTTONBACKLIGHT
fi
done
done" > $TMPDIR/LEDLightAnimation/serviceledbutton.sh

echo "$LEDLSC
$LEDSTANDART
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
if [ -f $LEDWHITE ]; then
sleep 0.1
echo \$ADDSTRING > $LEDWHITE
elif [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ]; then
sleep 0.1
echo \$ADDSTRING > $LEDRED
sleep 0.1
echo \$ADDSTRING > $LEDGREEN
sleep 0.1
echo \$ADDSTRING > $LEDBLUE
fi
done
done" > $TMPDIR/LEDLightAnimation/serviceled.sh

echo "$LEDLSC
ANIMSPEED=\"0 1 0 0 0 1 0 0 0 1 0\"
ANIMCOUNT=\"\$(seq 10)\"
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
sleep 0.1
echo \$ADDSTRING | tee $FLASHLIGHT $BUTTONBACKLIGHT
done
done" > $TMPDIR/LEDLightAnimation/serviceflashbutton.sh

echo "$LEDLSC
ANIMSPEED=\"0 1 0 0 0 1 0 0 0 1 0\"
ANIMCOUNT=\"\$(seq 10)\"
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
sleep 0.1
echo \$ADDSTRING > $FLASHLIGHT
done
done" > $TMPDIR/LEDLightAnimation/serviceflash.sh

echo "$LEDLSC
ANIMSPEED=\"0 1 0 0 1 0 0 1 0\"
ANIMCOUNT=\"\$(seq 10)\"
for STARTADDSTRING in \$ANIMCOUNT; do
for ADDSTRING in \$ANIMSPEED; do
sleep 0.1
echo \$ADDSTRING > $BUTTONBACKLIGHT
done
done" > $TMPDIR/LEDLightAnimation/servicebutton.sh

UIP -d "Test Or Flash?" "$MSGVU Test" "$MSGVD Flash"
if $KEYFUNCTION; then TEST=true; else TEST=false; fi
MODID="$IDLEDLA"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
UIP -d "Сhoose Animation Variant"
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ]; then
UIP "(Only LED)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/serviceled.sh
UIP -d "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if $KEYFUNCTION; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/serviceled.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/serviceled.sh $MODPATH/$MODID/service.sh
fi
fi

if [ $ANIMATIONVARIANT != true ]; then
if [ -f $FLASHLIGHT ]; then
UIP -d "(Only Flash)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/serviceflash.sh
UIP -d "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if $KEYFUNCTION; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/serviceflash.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/serviceflash.sh $MODPATH/$MODID/service.sh
fi
fi
fi

if [ $ANIMATIONVARIANT != true ]; then
if [ -f $BUTTONBACKLIGHT ]; then
UIP -d "(Only Buttons)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/servicebutton.sh
UIP -d "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if $KEYFUNCTION; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/servicebutton.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/servicebutton.sh $MODPATH/$MODID/service.sh
fi
fi
fi

if [ $ANIMATIONVARIANT != true ]; then
if [ -f $FLASHLIGHT ]; then
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ]; then
UIP -d "(LED And Flash)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/serviceledflash.sh
UIP -d "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if $KEYFUNCTION; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/serviceledflash.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/serviceledflash.sh $MODPATH/$MODID/service.sh
fi
fi
fi
fi

if [ $ANIMATIONVARIANT != true ]; then
if [ -f $FLASHLIGHT ] && [ -f $BUTTONBACKLIGHT ]; then
UIP -d "(Flash And Buttons)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/serviceflashbutton.sh
UIP -d "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if $KEYFUNCTION; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/serviceflashbutton.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/serviceflashbutton.sh $MODPATH/$MODID/service.sh
fi
fi
fi

if [ $ANIMATIONVARIANT != true ]; then
if [ -f $BUTTONBACKLIGHT ]; then
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ]; then
UIP -d "(LED And Buttons)" "$MSGVU Yes" "$MSGVD No $MSGNIS"
if $KEYFUNCTION; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/serviceledbutton.sh
UIP -d "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if $KEYFUNCTION; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/serviceledbutton.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/serviceledbutton.sh $MODPATH/$MODID/service.sh
fi
fi
fi
fi

if [ $ANIMATIONVARIANT != true ]; then
if [ -f $FLASHLIGHT ] && [ -f $BUTTONBACKLIGHT ]; then
if [ -f $LEDRED ] || [ -f $LEDGREEN ] || [ -f $LEDBLUE ] || [ -f $LEDWHITE ]; then
UIP -d "(LED, Flash, Buttons)" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
ANIMATIONVARIANT=true
else
ANIMATIONVARIANT=false
fi
else
ANIMATIONVARIANT=false
fi
if $ANIMATIONVARIANT; then
if $TEST; then
UIP "Please Wait..."
sh $TMPDIR/$MODID/serviceledflashbutton.sh
UIP -d "Flash Or Next?" "$MSGVU Flash" "$MSGVD Next"
if $KEYFUNCTION; then
NEXTTEST=true
else
NEXTTEST=false
ANIMATIONVARIANT=false
fi
if $NEXTTEST; then
cp -f $TMPDIR/$MODID/serviceledflashbutton.sh $MODPATH/$MODID/service.sh
fi
else
cp -f $TMPDIR/$MODID/serviceledflashbutton.sh $MODPATH/$MODID/service.sh
fi
fi
fi
fi

if $ANIMATIONVARIANT; then
UIP "Installing LED Light Animation Mod $IAMM"
MMPR -v "LED Light Animation" "$VIPLEDLA" "LED Light Animation at boot time."
SET_PERM_RM -msgdi
else
REMOVER -mm "$MODID"
fi
}

IPUGMSD() {
if $MAGISK && $FINDGAPPS && [ $ASDK -gt 23 ]; then
UCSA "Install Universal GMS Doze $VIPUGMSD?" "" "$MSGNUS" "IPUGMSDS"
fi
}

IPUGMSDS() {
UIP "Installing Universal GMS Doze $IAMM"
MODID="$IDUGMSD"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID/$IPPSXBM
UIP "Patching Needed Files..."
MAGISKMIRROR_CHECKER
list=$(xml=$(find $SYSTEM $VENDOR -name "*.xml"); for i in $xml; do SEARCHPATH="$MAGISKMIRROR$i"; if grep -q 'allow-in-power-save package="com.google.android.gms"' $SEARCHPATH 2>/dev/null; then echo "$i"; fi; done)
for i in $list; do
UIP "Found $i" "Patching..."
mkdir -p `dirname $MODPATH/$MODID/$i`
cp -f $i $MODPATH/$MODID/$i
sed -i '/allow-in-power-save package="com.google.android.gms"/d;/allow-in-data-usage-save package="com.google.android.gms"/d;/allow-in-power-save package="com.google.android.ims"/d;/allow-in-power-save package="com.google.android.apps.turbo"/d' $MODPATH/$MODID/$i
UIP "Files Found And Patched"
done
conflict=$(xml=$(find $NVBASE -name "*.xml");for i in $xml; do if grep -q 'allow-in-power-save package="com.google.android.gms"' $i 2>/dev/null; then echo "$i"; fi; done)
for i in $conflict; do
search=$(echo "$i" | sed -e 's/\// /g' | awk '{print $4}')
UIP "Conflicting Modules Detected" "Module: $search" "Found $i"
sed -i '/allow-in-power-save package="com.google.android.gms"/d;/allow-in-data-usage-save package="com.google.android.gms"/d' $i
UIP "Files Found And Patched"
done
MOVERPATH
echo "#!$MIPSB/sh
conflict=\$(xml=\$(find $NVBASE -iname \"*.xml\");for i in \$xml; do if grep -q 'allow-in-power-save package=\"com.google.android.gms\"' \$i 2>/dev/null; then echo \"\$i\"; fi; done)
for i in \$conflict; do
sed -i '/allow-in-power-save package=\"com.google.android.gms\"/d;/allow-in-data-usage-save package=\"com.google.android.gms\"/d' \$i
done" > $MODPATH/$MODID/post-fs-data.sh
MBCCSERVICE "for i in \$(ls /data/user/); do pm disable --user \$i com.google.android.gms/com.google.android.gms.auth.managed.admin.DeviceAdminReceiver; pm disable --user \$i com.google.android.gms/com.google.android.gms.mdm.receivers.MdmDeviceAdminReceiver; cmd appops set --user \$i com.google.android.gms WRITE_SETTINGS ignore; cmd appops set --user \$i com.google.android.ims WRITE_SETTINGS ignore; cmd appops set --user \$i com.google.android.gms BOOT_COMPLETED ignore; cmd appops set --user \$i com.google.android.ims BOOT_COMPLETED ignore; cmd appops set --user \$i com.google.android.gms AUTO_START ignore; cmd appops set --user \$i com.google.android.ims AUTO_START ignore; done"
echo "gms='dumpsys deviceidle whitelist | grep -o com.google.android.gms | head -n 1'
if [ \"\$gms\" = \"com.google.android.gms\" ]; then
echo \"\033[0;31m Google Play services is Not Optimized \033[0m\"
else
echo \"\033[0;32m Google Play services is Optimized \033[0m\"
fi" > $MODPATH/$MODID/$IPPSXBM/gmsc
MMPR -vc "Universal GMS Doze" "$VIPUGMSD" "$VCIPUGMSD" "gloeyisk" "Optimized and adjusted Google Play services"
SET_PERM_RM -msgdi
}

SUGMSDO() {
if $BOOTMODE && [ -d $MODPATH/UniversalGMSDoze ]; then
UCSA "Show Universal GMS Doze Optimized?" "" "$MSGNUS" "SUGMSDOS"
fi
}

SUGMSDOS() {
MSGDELIMITER
gms="dumpsys deviceidle whitelist | grep -o com.google.android.gms | head -n 1"
if [ "$gms" = com.google.android.gms ]; then UIP "Google Play Services Is Not Optimized"; else UIP "Google Play Services Is Optimized"; fi
}

IPUSGP() {
UCSA "Install Unlimited Storage For GPhotos $VIPUSGP?" "" "$MSGNUS" "IPUSGPS"
}

IPUSGPS() {
UIP "Installing USGP $IAMM"
mkdir -p $TMPDIR/USGP
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!-- Copyright (C) 2015 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the \"License\");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an \"AS IS\" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->

<!-- The OMA DM service must be whitelisted so they are always able to run. -->
<config>
    <allow-in-power-save package=\"com.android.omadm.service\" />
</config>" > $TMPDIR/USGP/allowlist_com.android.omadm.service.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!-- Copyright (C) 2014 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the \"License\");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an \"AS IS\" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->

<!-- These are configurations that must exist on all GMS devices. -->
<config>
    <!-- These are the standard packages that are white-listed to always have internet
         access while in power save mode, even if they aren't in the foreground. -->

    <!-- GmsCore must always have network access for GCM and other things. -->
    <allow-in-power-save package=\"com.google.android.gms\" />
    <allow-in-data-usage-save package=\"com.google.android.gms\" />
    <allow-unthrottled-location package=\"com.google.android.gms\" />
    <allow-ignore-location-settings package=\"com.google.android.gms\" />

    <!-- OobConfig must always have network access to fetch enterprise and carrier lock config. -->
    <allow-in-power-save-except-idle package=\"com.google.android.apps.work.oobconfig\" />
    <allow-in-data-usage-save package=\"com.google.android.apps.work.oobconfig\" />

    <!-- Turbo must not have App Standby restrictions in order to push new
         App Standby buckets to the platform periodically -->
    <allow-in-power-save-except-idle package=\"com.google.android.apps.turbo\" />

    <!-- Certain broadcasts must still go to legacy implicit receivers -->
    <allow-implicit-broadcast action=\"com.google.android.checkin.CHECKIN_COMPLETE\" />
    <allow-implicit-broadcast action=\"com.google.gservices.intent.action.GSERVICES_CHANGED\" />
    <allow-implicit-broadcast action=\"com.google.gservices.intent.action.GSERVICES_OVERRIDE\" />
    <allow-implicit-broadcast action=\"com.google.android.c2dm.intent.RECEIVE\" />
    <!-- TODO: This is a temporary workaround for allowing GmsCore to receive this broadcast.
         This can be removed once OneTimeInitializer functionality is moved to GmsCore. -->
    <allow-implicit-broadcast action=\"com.google.android.onetimeinitializer.ONE_TIME_INITIALIZED\" />

    <!-- Play Store likewise must have network access to support other applications. -->
    <allow-in-power-save-except-idle package=\"com.android.vending\" />

    <!-- If the volta app is pre-installed (for monitoring power use), let it do checkins. -->
    <allow-in-power-save package=\"com.google.android.volta\" />

    <!-- If GoogleCellBroadcastServiceModule is installed, let it run in the background -->
    <allow-in-power-save package=\"com.google.android.cellbroadcastreceiver\" />

    <!-- If CarrierServices is installed, it must always have network access to
         reliably receive IMS messages. -->
    <allow-in-power-save package=\"com.google.android.ims\" />
    <allow-in-data-usage-save package=\"com.google.android.ims\" />

    <!-- These Google applications all handle URLs to their websites by default -->

    <!-- Apps below are required on all GMS devices -->
    <app-link package=\"com.android.vending\" />
    <app-link package=\"com.google.android.apps.maps\" />
    <app-link package=\"com.google.android.youtube\" />
    <app-link package=\"com.google.android.apps.docs\" />
    <app-link package=\"com.google.android.talk\" />
    <app-link package=\"com.google.android.apps.photos\" />
    <app-link package=\"com.google.android.apps.youtube.music\" />

    <!-- Apps below are optional on GMS devices -->
    <app-link package=\"com.google.android.apps.tycho\" />
    <app-link package=\"com.google.android.apps.plus\" />
    <app-link package=\"com.google.android.apps.docs.editors.sheets\" />
    <app-link package=\"com.google.android.apps.docs.editors.slides\" />
    <app-link package=\"com.google.android.apps.docs.editors.docs\" />
    <app-link package=\"com.google.android.talk\" />
    <app-link package=\"com.google.android.videos\" />
    <app-link package=\"com.google.android.calendar\" />
    <app-link package=\"com.google.android.apps.wallpaper\" />

    <!-- These are the packages that are white-listed to be able to run as system user -->
    <system-user-whitelisted-app package=\"com.android.vending\" />
    <system-user-whitelisted-app package=\"com.google.android.gms\" />
    <system-user-whitelisted-app package=\"com.google.android.gms.policy_auth\" />
    <system-user-whitelisted-app package=\"com.google.android.play.games\" />
    <system-user-whitelisted-app package=\"com.google.android.tts\" />

    <!-- These are the packages that are uninstalled for system user -->
    <!-- Apps below are required on all GMS devices -->
    <system-user-blacklisted-app package=\"com.google.android.googlequicksearchbox\" />
    <!-- Apps below are optional on GMS devices -->
    <system-user-blacklisted-app package=\"com.google.android.launcher\" />

    <!-- Whitelist of what components are permitted as backup data transports.  The
         'service' attribute here is a flattened ComponentName string. -->
    <backup-transport-whitelisted-service
        service=\"com.google.android.gms/.backup.BackupTransportService\" />
    <backup-transport-whitelisted-service
        service=\"com.google.android.gms/.backup.component.D2dTransportService\" />

    <!-- Specify the explicit set of other applications that AI services are allowed to
         interact with, including the providers that back the implementation of the APIs
         provided by the package. -->
    <allow-association target=\"com.google.android.as\" allowed=\"com.android.bluetooth\" />
    <allow-association target=\"com.google.android.as\" allowed=\"com.android.providers.contacts\" />
    <allow-association target=\"com.google.android.as\" allowed=\"com.android.providers.media\" />
    <allow-association target=\"com.google.android.as\" allowed=\"com.android.providers.telephony\" />
    <allow-association target=\"com.google.android.as\" allowed=\"com.android.systemui\" />
    <allow-association target=\"com.google.android.as\" allowed=\"com.google.android.providers.media.module\" />

    <!-- Specify the explicit set of other applications whose app data directories are
        accessible by other applications. -->
    <app-data-isolation-whitelisted-app package=\"com.google.android.gms\" />

    <!-- Whitelist of packages that eligible for rollback -->
    <rollback-whitelisted-app package=\"com.android.vending\" />
</config>" > $TMPDIR/USGP/google.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!-- Copyright (C) 2014 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the \"License\");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an \"AS IS\" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->

<!-- These are configurations that should exist on Google's own Nexus and GPe devices. -->
<config>
    <feature name=\"com.google.android.feature.GOOGLE_BUILD\" />
    <!-- This should be added to all Nexus and GPe devices -->
    <feature name=\"com.google.android.feature.GOOGLE_EXPERIENCE\" />
    <!-- This should declare the version of Exchange that ships -->
    <feature name=\"com.google.android.feature.EXCHANGE_6_2\" />
</config>" > $TMPDIR/USGP/google_build.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!--
  ~ Copyright (C) 2018 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the \"License\");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an \"AS IS\" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License
  -->

<!--
This XML file declares which platform apps that need to access internal APIs.
-->
<config>
  <hidden-api-whitelisted-app package=\"android.car.cluster.maserati\" />
  <hidden-api-whitelisted-app package=\"com.android.apps.tag\" />
  <hidden-api-whitelisted-app package=\"com.android.auto.embedded.cts.verifier\" />
  <hidden-api-whitelisted-app package=\"com.android.car.bugreport\" />
  <hidden-api-whitelisted-app package=\"com.android.car.carlauncher\" />
  <hidden-api-whitelisted-app package=\"com.android.car.home\" />
  <hidden-api-whitelisted-app package=\"com.android.car.retaildemo\" />
  <hidden-api-whitelisted-app package=\"com.android.car.settingslib.robotests\" />
  <hidden-api-whitelisted-app package=\"com.android.car.setupwizardlib.robotests\" />
  <hidden-api-whitelisted-app package=\"com.android.cardock\" />
  <hidden-api-whitelisted-app package=\"com.android.connectivity.metrics\" />
  <hidden-api-whitelisted-app package=\"com.android.facelock\" />
  <hidden-api-whitelisted-app package=\"com.android.google.gce.gceservice\" />
  <hidden-api-whitelisted-app package=\"com.android.hotwordenrollment.okgoogle\" />
  <hidden-api-whitelisted-app package=\"com.android.hotwordenrollment.tgoogle\" />
  <hidden-api-whitelisted-app package=\"com.android.hotwordenrollment.xgoogle\" />
  <hidden-api-whitelisted-app package=\"com.android.inputmethod.latin\" />
  <hidden-api-whitelisted-app package=\"com.android.media.update\" />
  <hidden-api-whitelisted-app package=\"com.android.netspeed\" />
  <hidden-api-whitelisted-app package=\"com.android.onemedia\" />
  <hidden-api-whitelisted-app package=\"com.android.pixellogger\" />
  <hidden-api-whitelisted-app package=\"com.android.ramdump\" />
  <hidden-api-whitelisted-app package=\"com.android.settingslib.robotests\" />
  <hidden-api-whitelisted-app package=\"com.android.simappdialog\" />
  <hidden-api-whitelisted-app package=\"com.android.statsd.dogfood\" />
  <hidden-api-whitelisted-app package=\"com.android.statsd.loadtest\" />
  <hidden-api-whitelisted-app package=\"com.android.systemui.shared\" />
  <hidden-api-whitelisted-app package=\"com.android.test.power\" />
  <hidden-api-whitelisted-app package=\"com.android.test.voiceenrollment\" />
  <hidden-api-whitelisted-app package=\"com.android.tv.provision\" />
  <hidden-api-whitelisted-app package=\"com.google.SSRestartDetector\" />
  <hidden-api-whitelisted-app package=\"com.google.android.apps.nexuslauncher\" />
  <hidden-api-whitelisted-app package=\"com.google.android.apps.wallpaper\" />
  <hidden-api-whitelisted-app package=\"com.google.android.asdiv\" />
  <hidden-api-whitelisted-app package=\"com.google.android.athome.globalkeyinterceptor\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.defaultstoragemonitoringcompanionapp\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.diagnosticrecorder\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.diagnosticverifier\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.diskwriteapp\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.flashapp\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.kitchensink\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.obd2app\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.setupwizard\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.usb.aoap.host\" />
  <hidden-api-whitelisted-app package=\"com.google.android.car.vms.subscriber\" />
  <hidden-api-whitelisted-app package=\"com.google.android.carrier\" />
  <hidden-api-whitelisted-app package=\"com.google.android.carriersetup\" />
  <hidden-api-whitelisted-app package=\"com.google.android.connectivitymonitor\" />
  <hidden-api-whitelisted-app package=\"com.google.android.edu.harnesssettings\" />
  <hidden-api-whitelisted-app package=\"com.google.android.ext.services\" />
  <hidden-api-whitelisted-app package=\"com.google.android.factoryota\" />
  <hidden-api-whitelisted-app package=\"com.google.android.feedback\" />
  <hidden-api-whitelisted-app package=\"com.google.android.gsf\" />
  <hidden-api-whitelisted-app package=\"com.google.android.hardwareinfo\" />
  <hidden-api-whitelisted-app package=\"com.google.android.hiddenmenu\" />
  <hidden-api-whitelisted-app package=\"com.google.android.onetimeinitializer\" />
  <hidden-api-whitelisted-app package=\"com.google.android.permissioncontroller\" />
  <hidden-api-whitelisted-app package=\"com.google.android.partner.provisioning\" />
  <hidden-api-whitelisted-app package=\"com.google.android.partnersetup\" />
  <hidden-api-whitelisted-app package=\"com.google.android.pixel.setupwizard\" />
  <hidden-api-whitelisted-app package=\"com.google.android.preloaded_drawable_viewer\" />
  <hidden-api-whitelisted-app package=\"com.google.android.printservice.recommendation\" />
  <hidden-api-whitelisted-app package=\"com.google.android.sampledeviceowner\" />
  <hidden-api-whitelisted-app package=\"com.google.android.apps.scone\" />
  <hidden-api-whitelisted-app package=\"com.google.android.sdksetup\" />
  <hidden-api-whitelisted-app package=\"com.google.android.setupwizard\" />
  <hidden-api-whitelisted-app package=\"com.google.android.storagemanager\" />
  <hidden-api-whitelisted-app package=\"com.google.android.tag\" />
  <hidden-api-whitelisted-app package=\"com.google.android.tungsten.setupwraith\" />
  <hidden-api-whitelisted-app package=\"com.google.android.tv.bugreportsender\" />
  <hidden-api-whitelisted-app package=\"com.google.android.tv.frameworkpackagestubs\" />
  <hidden-api-whitelisted-app package=\"com.google.android.tv.pairedsetup\" />
  <hidden-api-whitelisted-app package=\"com.google.android.vendorloggingservice\" />
  <hidden-api-whitelisted-app package=\"com.google.android.volta\" />
  <hidden-api-whitelisted-app package=\"com.google.android.wfcactivation\" />
  <hidden-api-whitelisted-app package=\"com.google.mds\" />
  <hidden-api-whitelisted-app package=\"com.google.modemservice\" />
  <hidden-api-whitelisted-app package=\"com.htc.omadm.trigger\" />
  <hidden-api-whitelisted-app package=\"com.qualcomm.qcrilmsgtunnel\" />
  <hidden-api-whitelisted-app package=\"com.ustwo.lwp\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.accessibilityhelper\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.apkcacheprovider\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.applauncher\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.backup_settings\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.cast_receiver\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.crash_collector\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.file_system\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.gms\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.home\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.intent_helper\" />
  <hidden-api-whitelisted-app package=\"org.chromium.arc.tts\" />
</config>" > $TMPDIR/USGP/google-hiddenapi-package-whitelist.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!--
  ~ Copyright (C) 2018 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the \"License\");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an \"AS IS\" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License
  -->

<!--
This XML file declares packages eligible for rollback.
-->
<config>
  <!-- Mainline modules (apk or apex) go here. -->
  <rollback-whitelisted-app package=\"com.google.android.adbd\" />
  <rollback-whitelisted-app package=\"com.google.android.angle\" />
  <rollback-whitelisted-app package=\"com.google.android.captiveportallogin\" />
  <rollback-whitelisted-app package=\"com.google.android.cellbroadcast\" />
  <rollback-whitelisted-app package=\"com.google.android.conscrypt\" />
  <rollback-whitelisted-app package=\"com.google.android.documentsui\" />
  <rollback-whitelisted-app package=\"com.google.android.ext.services\" />
  <rollback-whitelisted-app package=\"com.google.android.extservices\" />
  <rollback-whitelisted-app package=\"com.google.android.ipsec\" />
  <rollback-whitelisted-app package=\"com.google.android.media\" />
  <rollback-whitelisted-app package=\"com.google.android.media.swcodec\" />
  <rollback-whitelisted-app package=\"com.google.android.mediaprovider\" />
  <rollback-whitelisted-app package=\"com.google.android.modulemetadata\" />
  <rollback-whitelisted-app package=\"com.google.android.networkstack\" />
  <rollback-whitelisted-app package=\"com.google.android.networkstack.permissionconfig\" />
  <rollback-whitelisted-app package=\"com.google.android.neuralnetworks\" />
  <rollback-whitelisted-app package=\"com.google.android.os.statsd\" />
  <rollback-whitelisted-app package=\"com.google.android.permission\" />
  <rollback-whitelisted-app package=\"com.google.android.permissioncontroller\" />
  <rollback-whitelisted-app package=\"com.google.android.resolv\" />
  <rollback-whitelisted-app package=\"com.google.android.sdkext\" />
  <rollback-whitelisted-app package=\"com.google.android.tethering\" />
  <rollback-whitelisted-app package=\"com.google.android.tzdata\" />
  <rollback-whitelisted-app package=\"com.google.android.tzdata2\" />
  <rollback-whitelisted-app package=\"com.google.android.wifi\" />
  <rollback-whitelisted-app package=\"com.google.mainline.telemetry\" />
  <!-- Mainline modules as apk-in-apex go here. -->
  <rollback-whitelisted-app package=\"com.android.cellbroadcastreceiver\" />
  <rollback-whitelisted-app package=\"com.android.cellbroadcastservice\" />
  <rollback-whitelisted-app package=\"com.android.networkstack.tethering\" />
  <rollback-whitelisted-app package=\"com.google.android.cellbroadcastreceiver\" />
  <rollback-whitelisted-app package=\"com.google.android.cellbroadcastservice\" />
  <rollback-whitelisted-app package=\"com.google.android.hotspot2.osulogin\" />
  <rollback-whitelisted-app package=\"com.google.android.networkstack.tethering\" />
  <rollback-whitelisted-app package=\"com.google.android.providers.media.module\" />
  <rollback-whitelisted-app package=\"com.google.android.wifi.resources\" />
</config>" > $TMPDIR/USGP/google-rollback-package-whitelist.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!--
 This XML file declares installer eligible for committing stage install.
-->
<config>
  <whitelisted-staged-installer package=\"com.android.vending\" />
</config>" > $TMPDIR/USGP/google-staged-installer-whitelist.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2016 and newer Nexus devices. -->
<config>
    <!-- This is meant to be the canonical feature identifying 2016 and newer Nexus devices. -->
    <feature name=\"com.google.android.feature.PIXEL_EXPERIENCE\" />

    <!-- The feature identifying devices which are able to use the Turbo app -->
    <feature name=\"com.google.android.feature.TURBO_PRELOAD\" />

    <!-- The feature identifying devices which are able to use the Android Wellbeing app. -->
    <feature name=\"com.google.android.feature.WELLBEING\" />

    <!-- The feature identifying devices which are able to use the device-to-device migration
        over cable provided by the Pixelmigrate app. -->
    <feature name=\"com.google.android.feature.D2D_CABLE_MIGRATION_FEATURE\" />

    <!-- Enable Zero Touch Provisioning support for 2016 and newer Nexus devices. -->
    <feature name=\"com.google.android.feature.ZERO_TOUCH\" />

    <!-- Allow WfcActivation app scheduled jobs to run when app in background. -->
    <allow-in-power-save-except-idle package=\"com.google.android.wfcactivation\" />

    <!-- Allow ssr detector service in background -->
    <allow-in-power-save package=\"com.google.SSRestartDetector\" />

    <!-- Allow connectivitymonitor service in background -->
    <allow-in-power-save package=\"com.google.android.connectivitymonitor\" />

    <!-- Allow connectivitythermalpowermanager service in background -->
    <allow-in-power-save package=\"com.google.android.connectivitythermalpowermanager\" />

    <!-- Allow ramdump uploader service in background -->
    <allow-in-power-save package=\"com.android.ramdump\" />

    <!-- Whitelist log pkg so JobIntentService can work. b/71630894 -->
    <allow-in-power-save-except-idle package=\"com.google.android.apps.carrier.log\" />

    <!-- Whitelist so headless app JobIntentService can work. b/73250911 -->
    <allow-in-power-save-except-idle package=\"com.google.android.carrier\" />

    <!-- Whitelist so headless app JobService can work. b/135126855 -->
    <allow-in-power-save-except-idle package=\"com.google.android.apps.carrier.carrierwifi\" />

    <!-- These are telephony components that need to run in the background -->
    <allow-in-power-save package=\"com.qualcomm.atfwd\" />
    <allow-in-power-save package=\"com.qualcomm.embms\" />
    <allow-in-power-save package=\"com.qualcomm.qti.telephonyservice\" />
    <allow-in-power-save package=\"com.qulacomm.qcrilmsgtunnel\" />
    <allow-in-power-save package=\"com.qualcomm.qti.ims\" />
    <allow-in-power-save package=\"com.qualcomm.qti.radioconfiginterface\" />

    <!-- Pre-installed carrier apps which should be disabled until a matching SIM is inserted. -->
    <disabled-until-used-preinstalled-carrier-app package=\"com.google.android.apps.tycho\" />

    <!-- Whitelist so the app can run JobIntentService in background. b/77932342 -->
    <allow-in-power-save-except-idle package=\"com.google.android.tetheringentitlement\" />
    <!-- Tethering entitlement check app should have Internet access while in data saving mode,
         even if they're in background. -->
    <allow-in-data-usage-save package=\"com.google.android.tetheringentitlement\" />

    <!-- Allow eMBMS middleware services to run in the background -->
    <allow-in-power-save package=\"com.qualcomm.ltebc_vzw\" />
    <allow-in-power-save package=\"com.qualcomm.ltebc\" />
</config>" > $TMPDIR/USGP/nexus.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on devices that support Next Generation Assistant -->
<config>
    <!-- This feature is meant to be the feature identifying devices that support NGA -->
    <feature name=\"com.google.android.feature.NEXT_GENERATION_ASSISTANT\" />
</config>" > $TMPDIR/USGP/nga.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2016 Pixel devices. -->
<config>
    <!-- Both versions of this string are needed due to a miscommunication. b/29978934 -->
    <feature name=\"com.google.android.apps.photos.NEXUS_PRELOAD\" />
    <feature name=\"com.google.android.apps.photos.nexus_preload\" />
</config>" > $TMPDIR/USGP/pixel_2016_exclusive.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2017 and newer Nexus devices. -->
<config>
    <!-- This is meant to be the canonical feature identifying 2017 and newer Nexus devices. -->
    <feature name=\"com.google.android.feature.PIXEL_2017_EXPERIENCE\" />

    <!-- Allow SCONE JobIntentService & Services to run in background -->
    <allow-in-power-save package=\"com.google.android.apps.scone\" />

    <!-- Allow Flipendo in power save. Will be present on pre-2020 devices for dogfooding. -->
    <allow-in-power-save-except-idle package=\"com.google.android.flipendo\" />

    <!-- Allow Better Bug to take bug report. -->
    <bugreport-whitelisted package=\"com.google.android.apps.betterbug\" />
    <bugreport-whitelisted package=\"com.google.android.apps.internal.betterbug\" />
    <bugreport-whitelisted package=\"com.google.android.apps.betterbug.partners\" />

    <!-- Allow Pixel modem service to run in background -->
    <allow-in-power-save package=\"com.google.modemservice\" />

    <!-- Allow MDS ExperimentService to run in background -->
    <allow-in-power-save package=\"com.google.mds\" />

    <!-- Hide DocumentsUi Launcher/Downloads intent handling. DocumentsUi
         PrebootReceiver does not properly hide the launcher in work profile,
         so we need to include this as well. -->
    <component-override package=\"com.google.android.documentsui\" >
        <component class=\"com.android.documentsui.LauncherActivity\" enabled=\"false\" />
        <component class=\"com.android.documentsui.ViewDownloadsActivity\" enabled=\"false\" />
    </component-override>

    <!-- ACTION_MANAGE_STORAGE handled by Files by Google -->
    <component-override package=\"com.google.android.storagemanager\" >
        <component class=\"com.android.storagemanager.deletionhelper.DeletionHelperActivity\" enabled=\"false\" />
    </component-override>

    <!-- Make sure photos/video previews are handled by Photos. -->
    <component-override package=\"com.google.android.apps.nbu.files\" >
        <component class=\"com.google.android.apps.nbu.files.gateway.preview.PreviewActivity\" enabled=\"false\" />
    </component-override>

    <component-override package=\"com.android.settings\" >
        <!-- Display regulatory info in settings. -->
        <component class=\".RegulatoryInfoDisplayActivity\" enabled=\"true\" />
    </component-override>

    <!-- Stub for Fi to request bug reports, disabled until a Fi SIM is added.
         Included for all in-market devices receiving the R OTA as well as
         devices launching with R. -->
    <disabled-until-used-preinstalled-carrier-associated-app
        package=\"com.google.android.apps.nova.bugreportwrapper\"
        carrierAppPackage=\"com.google.android.apps.tycho\"
        addedInSdk=\"30\" />
    <!-- Allow access to BugreportManager. -->
    <bugreport-whitelisted package=\"com.google.android.apps.nova.bugreportwrapper\" />

    <!-- Feature flag on RVC builds for AER requirements, b/159247801 -->
    <feature name=\"com.google.android.feature.AER_OPTIMIZED\" />

</config>" > $TMPDIR/USGP/pixel_experience_2017.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2018 and newer Pixel devices. -->
<config>
    <!-- Allow Pixel modem service in background -->
    <allow-in-power-save package=\"com.google.modemservice\" />

    <!-- Allow PixelLogger LoggingService to run in background -->
    <allow-in-power-save package=\"com.android.pixellogger\" />

    <!-- Allow Flipendo in power save. Will be present on pre-2020 devices for dogfooding. -->
    <allow-in-power-save-except-idle package=\"com.google.android.flipendo\" />

    <!-- This is meant to be the canonical feature identifying 2018 and newer Pixel devices. -->
    <feature name=\"com.google.android.feature.PIXEL_2018_EXPERIENCE\" />
</config>" > $TMPDIR/USGP/pixel_experience_2018.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2019 and newer devices. -->
<config>
    <!-- This is meant to be the canonical feature identifying 2019 and newer devices. -->
    <feature name=\"com.google.android.feature.PIXEL_2019_EXPERIENCE\" />

    <!-- Allow Flipendo in power save. Will be present on pre-2020 devices for dogfooding. -->
    <allow-in-power-save-except-idle package=\"com.google.android.flipendo\" />
</config>" > $TMPDIR/USGP/pixel_experience_2019.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2019 mid year and newer devices. -->
<config>
    <!-- This is meant to be the canonical feature identifying 2019 mid year and newer devices. -->
    <feature name=\"com.google.android.feature.PIXEL_2019_MIDYEAR_EXPERIENCE\" />

    <!-- Allow Flipendo in power save. Will be present on pre-2020 devices for dogfooding. -->
    <allow-in-power-save-except-idle package=\"com.google.android.flipendo\" />
</config>" > $TMPDIR/USGP/pixel_experience_2019_midyear.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2020 and newer devices. -->
<config>
    <!-- This is meant to be the canonical feature identifying 2020 and newer devices. -->
    <feature name=\"com.google.android.feature.PIXEL_2020_EXPERIENCE\" />

    <!-- Allow Flipendo in power save. -->
    <allow-in-power-save-except-idle package=\"com.google.android.flipendo\" />
</config>" > $TMPDIR/USGP/pixel_experience_2020.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>

<!-- These are configurations that should exist on Google's 2020 mid year and newer devices. -->
<config>
    <!-- This is meant to be the canonical feature identifying 2020 mid year and newer devices. -->
    <feature name=\"com.google.android.feature.PIXEL_2020_MIDYEAR_EXPERIENCE\" />

    <!-- Allow Flipendo in power save. -->
    <allow-in-power-save-except-idle package=\"com.google.android.flipendo\" />
</config>" > $TMPDIR/USGP/pixel_experience_2020_midyear.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!-- Copyright (C) 2019 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the \"License\");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an \"AS IS\" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<!-- System packages to preinstall on all devices with handheld_product, per user type.
     Documentation at frameworks/base/data/etc/preinstalled-packages-platform.xml
-->
<config>
    <install-in-user-type package=\"com.android.wallpapercropper\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
</config>" > $TMPDIR/USGP/preinstalled-packages-platform-handheld-product.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!-- Copyright (C) 2019 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the \"License\");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an \"AS IS\" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->
<!-- System packages to preinstall on all devices with frameworks-base-overlays, per user type.
     Documentation at frameworks/base/data/etc/preinstalled-packages-platform.xml
-->
<config>
    <install-in-user-type package=\"com.android.internal.display.cutout.emulation.corner\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.android.internal.display.cutout.emulation.double\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.android.internal.display.cutout.emulation.tall\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.android.internal.systemui.navbar.gestural\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.android.internal.systemui.navbar.gestural_extra_wide_back\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.android.internal.systemui.navbar.gestural_narrow_back\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.android.internal.systemui.navbar.gestural_wide_back\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.android.internal.systemui.navbar.threebutton\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.android.internal.systemui.navbar.twobutton\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
</config>" > $TMPDIR/USGP/preinstalled-packages-platform-overlays.xml
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!-- System packages to preinstall on Pixel 2017-and-newer devices, per user type.
     Documentation at frameworks/base/data/etc/preinstalled-packages-platform.xml
-->
<config>
    <install-in-user-type package=\"com.android.wallpaper.livepicker\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.google.android.apps.nexuslauncher\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.google.android.apps.wallpaper\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.google.android.apps.wallpaper.nexus\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.google.android.calculator\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
    <install-in-user-type package=\"com.google.android.deskclock\">
        <install-in user-type=\"FULL\" />
    </install-in-user-type>
</config>" > $TMPDIR/USGP/preinstalled-packages-product-pixel-2017-and-newer.xml
if $MAGISK; then
MODID="$IDUSGP"; REMOVER -mm "$MODID"
[ -d $IPSES ] && mkdir -p $MODPATH/$MODID$MIPSES && cp -f $TMPDIR/$MODID/* $MODPATH/$MODID$MIPSES
[ -d $IPSSPES ] && mkdir -p $MODPATH/$MODID$MIPSSPES && cp -f $TMPDIR/$MODID/* $MODPATH/$MODID$MIPSSPES
MMPR -v "$MODID" "$VIPUSGP" "Activating Unlimited Storage For Google Photos (Maybe)"; SET_PERM_RM; IPUSGP=$MODPATH/$MODID/system.prop
else
BUILD_PROP_BACKUP; IPUSGP=$IPSBP
touch $AIOPFMDPH/USGP
[ -d $IPSES ] && cp -f $TMPDIR/USGP/* $IPSES
[ -d $IPSSPES ] && cp -f $TMPDIR/USGP/* $IPSSPES
fi
echo -e "\n# Activating Unlimited Storage For Google Photos (Maybe)\nro.com.google.clientidbase=android-google\nro.opa.eligible_device=true" >> $IPUSGP
UIP "$MSGDI"
}

IPAS() {
if $MAGISK && SP_CHECKER "$IPDSU/0/settings_global.xml" "window_animation_scale transition_animation_scale animator_duration_scale"; then UCSA "Install Animation Scale $VIPAS?" "" "$MSGNUS" "IPASS"; fi
}

IPASS() {
UCSF "0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0" "Choose Animation Scale:" "Animation Scale" "1.0"
if $UCSFNM; then
UIP "Installing Animation Scale $IAMM"
MODID="$IDAS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MBCCSERVICE "$SPGLOBAL window_animation_scale $UCSFNMC; $SPGLOBAL transition_animation_scale $UCSFNMC; $SPGLOBAL animator_duration_scale $UCSFNMC"
if $BOOTMODE; then
UIP "Enabling Animation Scale Right Now"
$SPGLOBAL window_animation_scale $UCSFNMC; $SPGLOBAL transition_animation_scale $UCSFNMC; $SPGLOBAL animator_duration_scale $UCSFNMC
fi
MMPR -v "Animation Scale" "$VIPAS" "Animation Scale - Set On $UCSFNMC $MSGFMM"; SET_PERM_RM -msgdi
fi
}

IPGPUR() {
if [ "$ASDK" -ge 29 ]; then
UCSA "Install GPU Rendering $VIPGPUR?" "$MSGEFTC" "$MSGNUS" "IPGPURS"
fi
}

IPGPURS() {
MSGGPURVR=true
for GPURVR in "OpenGL (Default)" "OpenGL Skia (Faster)" "OpenGL Skia Vulkan (Very Fast)"; do
MSGVGPURVR="$MSGNIS"
case $GPURVR in
"OpenGL (Default)") GPURV="debug.hwui.renderer=opengl";; "OpenGL Skia (Faster)") GPURV="debug.hwui.renderer=skiagl";; "OpenGL Skia Vulkan (Very Fast)") GPURV="debug.hwui.renderer=skiavk"; MSGVGPURVR="$MSGNUS";; *) VGPUR=false;;
esac
if $MSGGPURVR; then
UIP -d "Сhoose GPU Rendering"
MSGGPURVR=false
else
MSGDELIMITER
fi
UIP "$MSGVU $GPURVR" "$MSGVD No $MSGVGPURVR"
if $KEYFUNCTION; then
VGPUR=true
break
else
VGPUR=false
fi
done
if $VGPUR; then
UIP "Installing GPU Rendering $IAMM"
if $MAGISK; then
MODID="$IDGPUR"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
echo "$GPURV" > $MODPATH/$MODID/build.prop
MMPR -v "GPU Rendering" "$VIPGPUR" "GPU Rendering - Set In $GPURVR"; SET_PERM_RM
else
BUILD_PROP_BACKUP
echo -e "# GPU Rendering\n$GPURV" >> $IPSBP
fi
UIP "$MSGDI"
fi
}

IPVS() {
if [ $ENDMODE != true ]; then MSGNUS="$MSGEND"; fi; UCSA "Install Volume Steps $VIPVS?" "$MSGEFTC" "$MSGNUS" "IPVSS"
}

IPVSS() {
UIP -d "$MSGFI Choose Variant:" "$MSGVU Edit All Lines Together" "$MSGVD Edit All Lines Separately"
MSGVS=true; SETMEDIAVOLUMESTEPS=false; SETCALLVOLUMESTEPS=false; SETSYSTEMVOLUMESTEPS=false; SETALARMVOLUMESTEPS=false; MSGVSA="$MSGNIS"
if $KEYFUNCTION; then
for VS in $(seq 10 5 50); do
MSGVSA="$MSGNIS"
case $VS in
"40") MSGVSA="$MSGNUS";;
esac
if $MSGVS; then
UIP -d "Choose Volume Steps:"
MSGVS=false
else
MSGDELIMITER
fi
UIP "Step Set On ($VS)" "$MSGVU Yes" "$MSGVD No $MSGVSA"
if $KEYFUNCTION; then
VOLUMESTEPSC=true; SETMEDIAVOLUMESTEPS=true; SETCALLVOLUMESTEPS=true; SETSYSTEMVOLUMESTEPS=true; SETALARMVOLUMESTEPS=true; MEDIAVOLUMESTEPS="$VS"; CALLVOLUMESTEPS="$VS"; SYSTEMVOLUMESTEPS="$VS"; ALARMVOLUMESTEPS="$VS"
break
else
VOLUMESTEPSC=false
fi
done
else
for ALLVVS in "Media" "Call" "System" "Alarm"; do
case $ALLVVS in "Alarm") MSGVSA="$MSGNUS";; esac
UIP -d "Set For $ALLVVS" "$MSGVU Yes" "$MSGVD No $MSGVSA"
if $KEYFUNCTION; then
for VS in $(seq 10 5 50); do
MSGVSA="$MSGNIS"
case $VS in "50") MSGVSA="$MSGNUS";; esac
if $MSGVS; then
UIP -d "Choose Volume Steps:"
MSGVS=false
else
MSGDELIMITER
fi
UIP "Step For $ALLVVS Set On ($VS)" "$MSGVU Yes" "$MSGVD No $MSGVSA"
if $KEYFUNCTION; then
VOLUMESTEPSC=true
case $ALLVVS in
"Media") SETMEDIAVOLUMESTEPS=true; MEDIAVOLUMESTEPS="$VS";; "Call") SETCALLVOLUMESTEPS=true; CALLVOLUMESTEPS="$VS";; "System") SETSYSTEMVOLUMESTEPS=true; SYSTEMVOLUMESTEPS="$VS";; "Alarm") SETALARMVOLUMESTEPS=true; ALARMVOLUMESTEPS="$VS";;
esac
break
fi
done
fi
done
fi
if $VOLUMESTEPSC; then
UIP "Installing Volume Steps $IAMM"
if $MAGISK; then
MODID="$IDVS"; REMOVER -mm "$MODID"
mkdir -p $MODPATH/$MODID
MMPR -v "Volume Steps" "$VIPVS" "Volume Steps $MSGFMM - Set On: Media $MEDIAVOLUMESTEPS, Call $CALLVOLUMESTEPS, System $SYSTEMVOLUMESTEPS, Alarm $ALARMVOLUMESTEPS"; SET_PERM_RM; IPVS=$MODPATH/$MODID/system.prop
else
BUILD_PROP_BACKUP; IPVS=$IPSBP
fi
if $SETMEDIAVOLUMESTEPS; then echo "ro.config.media_vol_steps=$MEDIAVOLUMESTEPS" >> $IPVS; fi
if $SETCALLVOLUMESTEPS; then echo "ro.config.vc_call_vol_steps=$CALLVOLUMESTEPS" >> $IPVS; fi
if $SETSYSTEMVOLUMESTEPS; then echo "ro.config.system_vol_steps=$SYSTEMVOLUMESTEPS" >> $IPVS; fi
if $SETALARMVOLUMESTEPS; then echo "ro.config.alarm_vol_steps=$ALARMVOLUMESTEPS" >> $IPVS; fi
UIP "$MSGDI"
fi
}

} #

} #

{ #Presets

UI_PRESETS() {
IPPO
IPPCO
IPPHO
IPPSHNB
IPBGD
IPGBNBS
IPGBRC
IPGBT
IPGBSTE
IPSBINNI
IPGPPM
IPRUI
IPBIP
IPNSP
IPSBIS
IPSBCS
IPSUE
IPSBP
IPQSCP
IPSUIRSRS
IPQSCIAR
IPEBB
IPBA
IPIOSEMOJI
IPMUIS
IPFDNI
}

APPS_PRESETS() {
IPGFUL
IPGSF
IPSL
IPASUSS
IPAPP
}

AUDIO_PRESETS() {
IPVFX
IPVFXP
IPJDSM
IPDTSHPX
IPAN
IPNLS
IPAIST
IPSAQ
IPIB
IPUSBPP
IPACP
IPAML
}

REMOVAL_PRESETS() {
RPASSF
RSWIFTO
GTRRRM
GTRMFL
RWFS
RRTPXML
RAPEXA
}

TEST_COMING_SOON_PRESETS() {
if $TESTMODE; then
APKSignOC
RoundedUIC
PillsOverlayC
SBINNIC
SHNB
QuickStepC
BIPC
FaceUnlockServiceC
NSPC
SBPC
COSBCS
CSBIS
QSCIARC
fi
}

NET_PRESETS() {
IPGOGPS
IPTTLF
IPNT
IPWIFIB
IPUSBTF
}

UTILITIES_PRESETS() {
IPBB
IPZSAAPT
IPSELC
IPASTE
IPCC
IPDETACH
IPSQL3
IPMMFRM
}

OTHER_PRESETS() {
IPBDFFSOQSS
IPSTZD
IPDDVFE
IPFPA
IPFSLFM
UFAAPP
SBATTERYUSAGE
GASL
}

SAFETY_NET_AND_MHPC_PRESETS() {
IPSNP
IPSNET
IPFPMC
IPMHPC
IPGPF
}

RIRU_AND_EDX_LS_POSED_PRESETS() {
IPRIRU
IPEDXPOSED
IPLSPOSEDR
IRIRUCW
IPRMH
}

TWEAKS_PRESETS() {
IPFGS
IPFEG
IPHAP
IPAFUS
IPBPT
IPKL
IPFMSAAS
IPFDHWO
IPFDEVADB
IPSOOOFUIRC
IPFDM
IPFDPP
IPFI
IPCLEDLO
IPLEDLA
IPUGMSD
SUGMSDO
IPUSGP
IPAS
IPGPUR
IPVS
}

PRESETS() {
if [ -d $MODPATH ] && [ $MAGISKFIRSTTIME != true ] && $MAGISK && $MMUPDC; then for mmc in $(ls $MODPATH); do if [ -d "$MODPATH/$mmc" ]; then UCSA "Checking Update?" "$MSGEFTC" "$MSGNUS" "MMUPD_LIST" && break; fi; done; fi
if $PDESIGN; then
UIP -d "UI: Pills/NavBar/Gboard/Themes/BA/Sounds" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then UI_PRESETS; fi
if $MIUI && [ -d $STORAGE/Applications ] && find $STORAGE/Applications -type f -name "*.apk" >/dev/null; then IPAPP; else UIP -d "Apps: GFU/GSF/SL/ASUSS/IA" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then APPS_PRESETS; fi; fi
UIP -d "Audio: VFX(P)/NL/AIST/SAQ/IB/ACP/AML" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then AUDIO_PRESETS; fi
if $BOOTMODE; then REMOVAL_PRESETS; else UIP -d "Removal: RSL/RSO/RSTA/RWFSB" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then REMOVAL_PRESETS; fi; fi
if $TESTMODE; then UIP -d "Test/Coming Soon" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then TEST_COMING_SOON_PRESETS; fi; fi
UIP -d "Net: GPS/TTL/DNS/WB/USBTF" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then NET_PRESETS; fi
UIP -d "Utilities: BB/ZSigner/SELC/ASTE/CC" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then UTILITIES_PRESETS; fi
UIP -d "Other: DFO/STZD/DDVFE/FA/SBU" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then OTHER_PRESETS; fi
IPHF
if $MAGISK; then UIP -d "SafetyNet/MHPC/GPay" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then SAFETY_NET_AND_MHPC_PRESETS; fi; if [ "$ASDK" -ge 27 ]; then UIP -d "Riru/Edx/LS/Posed/Mudules" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then RIRU_AND_EDX_LS_POSED_PRESETS; fi; fi; fi
if [ $ENDMODE != true ]; then MSGNUS="$MSGEND"; fi
UIP -d "Tweaks: FGS/BP/LED/UGMSD/USGP/VS" "$MSGVU Yes $MSGEFTC" "$MSGVD No $MSGNUS"; if $KEYFUNCTION; then MSGNUS="(/)"; TWEAKS_PRESETS; fi
else
UI_PRESETS
APPS_PRESETS
AUDIO_PRESETS
REMOVAL_PRESETS
TEST_COMING_SOON_PRESETS
NET_PRESETS
UTILITIES_PRESETS
OTHER_PRESETS
IPHF
SAFETY_NET_AND_MHPC_PRESETS
RIRU_AND_EDX_LS_POSED_PRESETS
TWEAKS_PRESETS
fi
}

} #

BOOT_DETECTED
APMSGASD
PARTITION_AND_MOUNTS
IMPORTANT_VARIABLES
APP_LIST
MIUI_CHECKER
BB_CHECKER
ARCH_CHECKER
SELINUX_CHECKER
SQLITE_CHECKER
SOC_CHECKER
GAPPS_CHECKER
PATCHMODE
AIOPFMD
CHECK_AVERSION
CHECK_DEVICE -x
KEYCHECK
MAGISK_CHECKER
PRESETS
END