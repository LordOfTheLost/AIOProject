#!/sbin/sh

VAIOIARPFMD="28.03.21 (23)"

{ #TMPDIR & Magisk Default Var
IPDLTMP="/data/local/tmp"
TMPDIR="$IPDLTMP/AIOIARPFMD"
ALTTMPDIR="/dev/AIOIARPFMD"
MAGISKTMP="/sbin/.magisk"
NVBASE="/data/adb"
SERVICED="$NVBASE/service.d"
POSTFSDATAD="$NVBASE/post-fs-data.d"
} #

{ #Var Off By Fefault
STANDARTREMOVER=false
STANDARTBUCKUPER=false
DELETEWITHOUTSELECTION=false
HFMODE=false
FINDPATCHMODE=false
} #

{ #BB & Other Useful Links In This Patch (BB/ToyBox/ToolBox In Rom/TWRP May Not Do Some Things)
OUTFD="$2"
ZIPFILE="$3"
ADDONS="$ALTTMPDIR/Addons"
ZADDONS="$TMPDIR/ZipAddons"
BB="$ALTTMPDIR/BB"
EVENTS="$BB/events"
UNTARXZ="$BB/tar"
UNZIP="$BB/unzip"
TIMEOUT="$BB/timeout"
FKEYCHECK="$ADDONS/keycheck"
} #

{ #Helper Functions

BOOT_DETECTED() {
# Detect whether in boot mode
[ -z $BOOTMODE ] && ps | grep zygote | grep -qv grep && BOOTMODE=true
[ -z $BOOTMODE ] && ps -A 2>/dev/null | grep zygote | grep -qv grep && BOOTMODE=true
[ -z $BOOTMODE ] && BOOTMODE=false
}

SYMBOLDESIGN() {
MSGSD="•"
if $BOOTMODE; then
MSGVU="▲ ►"
MSGVD="▼ ►"
elif [ $BOOTMODE != true ]; then
MSGVU="+ >"
MSGVD="- >"
fi
}

ALLPATCHMSG() {
MSGDELIMITER="••••••••••••••••••••••••••••••••••••••••"
MSGDI="Install Done"
MSGUD="Uninstall Done"
MSGDRM="Remove Done"
MSGDRP="Replace Done"
MSGDRS="Restore Done"
MSGDD="Disable Done"
MSGED="Enable Done"
MSGFI="Found Install"
MSGIIP="(I)"
MSGEFTC="(\)"
MSGNIS="(|)"
MSGNUS="(/)"
RI="(R)"
WDI="Community"
FMR="For More Rom"
FAOOR="For AOSP/LOS & Others Rom"
MSGPMODE="$MSGSD Opens Some Test Items/Patches - Set: U(ser) Or D(ebug)"
MSGKMETHOD="$MSGSD Force Switching Between Old And New \"KeyCheck\" Method - Set: N(ew) Or O(ld)"
MSGTKEY="$MSGSD A Second Check Is Turned On For KMETHOD O(ld) - Set: false Or true"
MSGPDESIGN="$MSGSD Changes The \"Design\" Of The Patch - Set: N(ew) Or O(ld)"
MSGLEDCOLOR="$MSGSD This Is The Color Of Your Diode - Set: R(ed), G(reen), B(lue) Or W(hite)"
MSGHFMODE="$MSGSD Adds Tactile Feedback To Patch Selections - Set: Values From 1 To 255 For Weak/Strong Vibration"
MSGHFSMODE="$MSGSD Sets Values From HFMODE Not To duration, But To enable And/Or activate - Set: false Or true"
MSGMCMODE="$MSGSD Enables Or Disables The Choice In TWRP How To Install Via Magisk Or Not With DEBUGMODE - Set: false Or true"
if $MAGISK; then
IAMM="(M)"
else
IAMM=
fi
}

IS_MOUNTED() {
grep -q " `readlink -f $1` " /proc/mounts 2>/dev/null
return $?
}

PARTITION_AND_MOUNTS() {
if [ $BOOTMODE != true ]; then
if [ -n "$(cat /proc/cmdline | grep slot_suffix)" ]; then
DABP=true
SYSTEM_MOUNT="/system"
SYSTEM="$SYSTEM_MOUNT/system"
VENDOR="/vendor/vendor"
elif [ -n "$(cat /etc/fstab | grep /system_root)" ]; then
DABP=false
SYSTEM_MOUNT="/system_root"
SYSTEM="$SYSTEM_MOUNT/system"
VENDOR="/vendor"
else
DABP=false
SYSTEM_MOUNT="/system"
SYSTEM="$SYSTEM_MOUNT"
VENDOR="/vendor"
fi
Mounts=""
for p in "$SYSTEM_MOUNT" "$VENDOR"; do
if [ -d "$p" ] && grep -q "$p" "/etc/fstab"; then
Mounts="$Mounts $p"
fi
done
for m in $Mounts; do
if IS_MOUNTED "$m"; then
umount "$m"
fi
mount "$m"
done
grep -q "$SYSTEM_MOUNT.*\sro[\s,]" /proc/mounts && mount -o remount,rw $SYSTEM_MOUNT  # remount whatever $SYSTEM_MOUNT is, sometimes necessary if mounted read-only
MSGDELIMITER && UIP "Mounting$Mounts"
else
MSGDELIMITER
fi
if [ -f /system/system/build.prop ]; then
FTSYSTEM=true
FTSYSTEMROOT=false
SYSTEM="/system/system"
elif [ -f /system_root/system/build.prop ]; then
FTSYSTEM=true
FTSYSTEMROOT=true
SYSTEM="/system_root/system"
elif [ -f /system/build.prop ]; then
FTSYSTEM=false
FTSYSTEMROOT=false
SYSTEM="/system"
fi
if [ $BOOTMODE != true ] && [ -n "$(cat /etc/fstab | grep /vendor)" ]; then
FVENDOR=true
elif [ $BOOTMODE != true ] && [ -d $SYSTEM/vendor ]; then
FVENDOR=false
VENDOR="$SYSTEM/vendor"
elif $BOOTMODE; then
VENDOR="/vendor"
fi
}

IMPORTANT_VARIABLES() {
MODPATH="$NVBASE/modules"; MODPATHUPD="$NVBASE/modules_update"
IPSAX="$SYSTEM/apex"; MIPSAX="/system/apex"
IPSB="$SYSTEM/bin"; MIPSB="/system/bin"
IPSXB="$SYSTEM/xbin"; MIPSXB="/system/xbin"
IPSA="$SYSTEM/app"; MIPSA="/system/app"
IPSPA="$SYSTEM/priv-app"; MIPSPA="/system/priv-app"
IPSE="$SYSTEM/etc"; MIPSE="/system/etc"
IPSEID="$SYSTEM/etc/init.d"; MIPSEID="/system/etc/init.d"
IPSES="$SYSTEM/etc/sysconfig"; MIPSES="/system/etc/sysconfig"
IPSEP="$SYSTEM/etc/permissions"; MIPSEP="/system/etc/permissions"
IPSEDP="$SYSTEM/etc/default-permissions"; MIPSEDP="/system/etc/default-permissions"
IPSL="$SYSTEM/lib"; MIPSL="/system/lib"
IPSL64="$SYSTEM/lib64"; MIPSL64="/system/lib64"
IPSAD="$SYSTEM/addon.d"; MIPSAD="/system/addon.d"
IPSBP="$SYSTEM/build.prop"; MIPSBP="/system/build.prop"
IPSSP="$SYSTEM/product"; MIPSSP="/system/product"
IPSSPBP="$SYSTEM/product/build.prop"; MIPSSPBP="/system/product/build.prop"
IPSDP="$SYSTEM/default.prop"; MIPSDP="/system/default.prop"
IPSSPA="$SYSTEM/product/app"; MIPSSPA="/system/product/app"
IPSSPPA="$SYSTEM/product/priv-app"; MIPSSPPA="/system/product/priv-app"
IPSSPE="$SYSTEM/product/etc"; MIPSSPE="/system/product/etc"
IPSSPER="$SYSTEM/product/etc/res"; MIPSSPER="/system/product/etc/res"
IPSSPERVC="$SYSTEM/product/etc/res/values/charger"; MIPSSPERVC="/system/product/etc/res/values/charger"
IPSSPERIC="$SYSTEM/product/etc/res/images/charger"; MIPSSPERIC="/system/product/etc/res/images/charger"
IPSSPEP="$SYSTEM/product/etc/permissions"; MIPSSPEP="/system/product/etc/permissions"
IPSSS="$SYSTEM/system_ext"; MIPSSS="/system/system_ext"
IPSSSA="$SYSTEM/system_ext/app"; MIPSSSA="/system/system_ext/app"
IPSSSPA="$SYSTEM/system_ext/priv-app"; MIPSSSPA="/system/system_ext/priv-app"
IPSFW="$SYSTEM/framework"; MIPSFW="/system/framework"
IPSPO="$SYSTEM/product/overlay"; MIPSPO="/system/product/overlay"
IPSO="$SYSTEM/overlay"; MIPSO="/system/overlay"
IPSUKL="$SYSTEM/usr/keylayout"; MIPSUKL="/system/usr/keylayout"
IPSPMAU="$SYSTEM/product/media/audio/ui"; MIPSPMAU="/system/product/media/audio/ui"
IPSPM="$SYSTEM/product/media"; MIPSPM="/system/product/media"
IPSMAU="$SYSTEM/media/audio/ui"; MIPSMAU="/system/media/audio/ui"
IPSM="$SYSTEM/media"; MIPSM="/system/media"
IPSF="$SYSTEM/fonts"; MIPSF="/system/fonts"
IPVBP="$VENDOR/build.prop"; MIPSVBP="/system/vendor/build.prop"
IPVE="$VENDOR/etc"; MIPSVE="/system/vendor/etc"
IPVLS="$VENDOR/lib/soundfx"; MIPSVLS="/system/vendor/lib/soundfx"
IPVLS64="$VENDOR/lib64/soundfx"; MIPSVLS64="/system/vendor/lib64/soundfx"
IPVO="$VENDOR/overlay"; MIPSVO="/system/vendor/overlay"
IPVL="$VENDOR/lib"; MIPSVL="/system/vendor/lib"
IPVL64="$VENDOR/lib64"; MIPSVL64="/system/vendor/lib64"
IPVUKL="$VENDOR/usr/keylayout"; MIPSVUKL="/vendor/usr/keylayout"
IPDA="/data/app"; IPDD="/data/data"; IPDS="/data/system"; IPDSU="/data/system/users"; IPDSNS="/data/system/netstats"; IPDBBN="/dev/block/by-name"; IPDM="/data/misc"; IPDMDE="/data/misc_de"; IPDRESC="/data/resource-cache"; STORAGE="/sdcard"; ASTORAGE="/data/media"
SPG="settings put global"; SPS="settings put secure"
if [ -f $STORAGE/PATCHMODE* ]; then PATCHMODEFILE="$(find $STORAGE/PATCHMODE*)"; FINDPATCHMODE=true; else for f in $(ls $STORAGE); do if [ -f $STORAGE/$f/PATCHMODE* ]; then PATCHMODEFILE="$(find $STORAGE/$f/PATCHMODE*)"; FINDPATCHMODE=true; break; fi; done; fi; if [ $FINDPATCHMODE != true ]; then touch $STORAGE/PATCHMODE.sh; PATCHMODEFILE="$STORAGE/PATCHMODE.sh"; fi
PMODE="$(GET_PMODE_PROP "$PATCHMODEFILE" "PMODE")"; HFDURATION="$(GET_PMODE_PROP "$PATCHMODEFILE" "HFMODE")"; HFSWAPMODE="$(GET_PMODE_PROP "$PATCHMODEFILE" "HFSMODE")"; PDESIGN="$(GET_PMODE_PROP "$PATCHMODEFILE" "PDESIGN")"; LEDCOLOR="$(GET_PMODE_PROP "$PATCHMODEFILE" "LEDCOLOR")"; KMETHOD="$(GET_PMODE_PROP "$PATCHMODEFILE" "KMETHOD")"; TKEY="$(GET_PMODE_PROP "$PATCHMODEFILE" "TKEY")"; MCMODE="$(GET_PMODE_PROP "$PATCHMODEFILE" "MCMODE")"
PROPFILES="$IPSDP $IPSBP $IPVBP /data/local.prop /default.prop /build.prop"; PROPFILESALT="$IPSSPBP $IPSBP $IPVBP"
DMYHMS="$( date +"%d-%m-%Y-%H:%M:%S" )"
if [ -d $IPSPO ]; then IPPO="$IPSPO"; MIPPO="$MIPSPO"; elif [ -d $IPSO ]; then IPPO="$IPSO"; MIPPO="$MIPSO"; elif [ -d $IPVO ]; then IPPO="$IPVO"; MIPPO="$MIPSVO"; fi
if [ -d $IPSPMAU ]; then IPPMU="$IPSPMAU"; MIPPMU="$MIPSPMAU"; elif [ -d $IPSMAU ]; then IPPMU="$IPSMAU"; MIPPMU="$MIPSMAU"; fi
if [ -d $IPSPM ]; then IPPM="$IPSPM"; MIPPM="$MIPSPM"; elif [ -d $IPSM ]; then IPPM="$IPSM"; MIPPM="$MIPSM"; fi
for f in Fox TWRP SHRP; do if [ -d $STORAGE/$f ]; then PLOGS="$STORAGE/$f/AIOLogs"; FPLOGS=true; break; else FPLOGS=false; fi; done; if [ $FPLOGS != true ]; then PLOGS="$STORAGE/AIOLogs"; fi
if [ ! -d $IPSXB ] && [ $BOOTMODE != true ]; then mkdir -p $IPSXB; IPPSXB=$IPSXB; IPPSXBM=$MIPSXB; elif [ ! -d $IPSXB ] && $BOOTMODE; then IPPSXB=$IPSB; IPPSXBM=$MIPSB; else IPPSXB=$IPSXB; IPPSXBM=$MIPSXB; fi
}

MIUI_CHECKER() {
if [ -d /data/miui ] || grep "ro.miui.build.region" $IPSBP || grep "ro.miui.region" $IPSBP || grep "ro.miui.ui.version*" $IPSBP || grep "ro.miui.ui.version.name*" $IPSBP; then MIUI=true; else MIUI=false; fi
}

BB_CHECKER() {
if [ -f $IPSB/busybox ]; then
BUSYBOX=/bin
elif [ -f $IPSXB/busybox ]; then
BUSYBOX=/xbin
else
BUSYBOX=false
fi
}

ARCH_CHECKER() {
DARCH="$(GET_PROP "ro.product.cpu.abi")"
case "$DARCH" in
*x86_64*) arch="x86_64"; MSGDELIMITER; UIP "Warning, Arch $arch Not Supported!"; libarch="lib64";;
*x86*) arch="x86"; MSGDELIMITER; UIP "Warning, Arch $arch Not Supported!"; libarch="lib";;
*arm64*) arch="arm64"; libarch="lib64";;
*armeabi*) arch="arm"; libarch="lib";;
*) arch="unknown"; MSGDELIMITER; UIP "Warning, $arch Not Supported/Found!!";;
esac
AAPT="$ZADDONS/aapt-$arch"
}

SELINUX_CHECKER() {
if grep -q "1" /sys/fs/selinux/enforce || [ $BOOTMODE != true ]; then SELINUXENFORVING=true; SELINUXPERMISSIVE=false; SELINUXS='Enforcing'; SELINUXSN='1'; elif grep -q "0" /sys/fs/selinux/enforce; then SELINUXENFORVING=false; SELINUXPERMISSIVE=true; SELINUXS='Permissive'; SELINUXSN='0';fi
}

SOC_CHECKER() {
SNAPSOC=false; MTKSOC=false; if [ "$(grep "ro.board.platform=msm*" $PROPFILESALT)" ] || [ "$(grep "ro.board.platform=sdm*" $PROPFILESALT)" ]; then SNAPSOC=true; elif [ "$(grep "ro.board.platform=mt*" $PROPFILESALT)" ] || [ "$(grep "ro.board.platform=MT*" $PROPFILESALT)" ] || [ "$(grep "Build.BRAND=MTK*" $PROPFILESALT)" ]; then MTKSOC=true; fi
}

AIOIARPFMD() {
case "$PMODE" in
D) DEBUGMODE=true; TESTMODE=false; MSGPMODE=", Debug Mode";;
T) TESTMODE=true; DEBUGMODE=true; MSGPMODE=", Test Mode";;
U) MSGPMODE=", User Mode";;
*) echo "$MSGPMODE
PMODE=U" >> $PATCHMODEFILE; MSGPMODE=", User Mode"; DEBUGMODE=false; TESTMODE=false;;
esac
if $DEBUGMODE || $TESTMODE; then mkdir -p $PLOGS/TWRP; mkdir -p $PLOGS/MM; fi; [ -d $TMPDIR ] && rm -rf $TMPDIR; mkdir -p $TMPDIR; [ -d $ALTTMPDIR ] && rm -rf $ALTTMPDIR; mkdir -p $ALTTMPDIR
UIP "Copy AIOIARPFMD To TMPDIR$MSGPMODE"
unzip -oq $ZIPFILE BB.zip Addons.tar.xz all.tar.xz arm.tar.xz arm64.tar.xz -d $ALTTMPDIR 2>/dev/null
unzip -oq $BB.zip -d $ALTTMPDIR 2>/dev/null; rm -f $BB.zip
chmod -R 777 $TMPDIR; chmod -R 777 $ALTTMPDIR
$BB/busybox-$arch --install -s $BB
$UNTARXZ -xf $ADDONS.tar.xz -C $ALTTMPDIR; rm -f $ADDONS.tar.xz
UPN="ZipAddons" && UZTPN &
}

GAPPS_CHECKER() {
if find $SYSTEM -name *GmsCore* >/dev/null || find $SYSTEM -name *GoogleServicesFramework* >/dev/null; then FINDGAPPS=true; else FINDGAPPS=false; fi
}

CHECK_AVERSION() {
ASDK="$(GREP_PROP "ro.build.version.sdk")"
AVERSION="$(GREP_PROP "ro.build.version.release")"
# Major supported versions default=false
AKITKAT=false; ALOLLIPOP=false; AMARSHMALLOW=false; ANOUGAT=false; AOREO=false; APIE=false; ATEN=false; AELEVEN=false; ATWELVE=false
# Check major supported versions
if [ "$ASDK" = "19" ] && [ "$AVERSION" = "4.4.4" ]; then
AKITKAT=true
elif [ "$ASDK" = "22" ] && [ "$AVERSION" = "5.1.1" ]; then
ALOLLIPOP=true
elif [ "$ASDK" = "23" ] && [ "$AVERSION" = "6.0.1" ]; then
AMARSHMALLOW=true
elif [ "$ASDK" = "25" ] && [ "$AVERSION" = "7.1.2" ]; then
ANOUGAT=true
elif [ "$ASDK" = "27" ] && [ "$AVERSION" = "8.1" ] || [ "$AVERSION" = "8.1.0" ]; then
AOREO=true
elif [ "$ASDK" = "28" ] && [ "$AVERSION" = "9" ] || [ "$AVERSION" = "9.0" ]; then
APIE=true
elif [ "$ASDK" = "29" ] && [ "$AVERSION" = "10" ] || [ "$AVERSION" = "10.0" ]; then
ATEN=true
elif [ "$ASDK" = "30" ] && [ "$AVERSION" = "11" ] || [ "$AVERSION" = "11.0" ]; then
AELEVEN=true
elif [ "$ASDK" = "31" ] && [ "$AVERSION" = "12" ] || [ "$AVERSION" = "12.0" ]; then
ATWELVE=true
fi
case $ASDK in
"10");; "15");; "16");; "17");; "18");; "19");; "21");; "22");; "23");; "24");; "25");; "26");; "27");; "28");; "29");; "30");; "31");; *) MSGDELIMITER; UIP "Warning, SDK Not Supported/Found!";;
esac
}

CHECK_DEVICE() {
local PROPDEVICE=$(echo "$1" | tr '[:upper:]' '[:lower:]')
for i in $SYSTEM $VENDOR $IPSSP; do
if [ -f $i/build.prop ]; then
for j in "ro.product.device" "ro.build.product" "ro.product.vendor.device" "ro.vendor.product.device"; do
[ "$(sed -n "s/^$j=//p" $i/build.prop 2>/dev/null | head -n 1 | tr '[:upper:]' '[:lower:]')" == "$PROPDEVICE" ] && return 0
done
fi
done
return 1
}

PATCHMODE() {
case "$MCMODE" in
"true") MCMODE=true;;
"false") MCMODE=false;;
*) echo "$MSGMCMODE
MCMODE=true" >> $PATCHMODEFILE; MCMODE=true;;
esac
if find /sys/class -name leds >/dev/null; then
LEDPATH="$(find /sys/class -name leds)"
case "$LEDCOLOR" in
R) LEDCOLOR=red;;
G) LEDCOLOR=green;;
B) LEDCOLOR=blue;;
W) LEDCOLOR=white;;
"false") BLINKMODE=false;;
*) BLINKMODE=false; echo "$MSGLEDCOLOR
LEDCOLOR=false" >> $PATCHMODEFILE;;
esac
if [ -f $LEDPATH/$LEDCOLOR/blink ]; then echo -n 1 > $LEDPATH/$LEDCOLOR/blink; BLINKMODE=true; fi
fi
if grep -q "HFMODE=false" $PATCHMODEFILE; then
HFMODE=false
else
HFPATH="$(find /sys/class -name vibrator)"
if grep -q "HFMODE" $PATCHMODEFILE; then
if [ -f $HFPATH/duration ]; then echo -n $HFDURATION > $HFPATH/duration; fi
HFMODE=true
elif [ -f $HFPATH/activate ] || [ -f $HFPATH/enable ]; then
MSGDELIMITER; UIP "Use Haptic Feedback?" "$MSGVU Yes" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
if [ -f $HFPATH/duration ]; then echo -n $HFDURATION > $HFPATH/duration; fi
echo "$MSGHFMODE
HFMODE=20" >> $PATCHMODEFILE; HFMODE=true
else
HFMODE=false; echo "$MSGHFMODE
HFMODE=false" >> $PATCHMODEFILE
fi
fi
if [ -f $HFPATH/activate ]; then HFFPATH=$HFPATH/activate; elif [ -f $HFPATH/enable ]; then HFFPATH=$HFPATH/enable; fi
fi
case "$HFSWAPMODE" in
"true") HFSWAPMODE=true;;
"false") HFSWAPMODE=false;;
*) echo "$MSGHFSMODE
HFSMODE=false" >> $PATCHMODEFILE; HFSWAPMODE=false;;
esac
case "$PDESIGN" in
N) NEWDESIGN=true; OLDDESIGN=false;;
O) OLDDESIGN=true; NEWDESIGN=false;;
*) MSGDELIMITER; UIP "Choose Patch Design:" "$MSGVU New (By Сategory) $RI" "$MSGVD Old (The Whole List)"; if $KEYFUNCTION; then NEWDESIGN=true; OLDDESIGN=false; echo "$MSGPDESIGN
PDESIGN=N" >> $PATCHMODEFILE; else OLDDESIGN=true; NEWDESIGN=false; echo "$MSGPDESIGN
PDESIGN=O" >> $PATCHMODEFILE; fi;;
esac
}

MAGISK_CHECKER() {
if [ -d /data/magisk ] && [ -f /data/magisk/util_functions.sh ]; then
MAGISKFIRSTTIME=true
FINDMAGISK=true
MAGISK=true
MAGISKVC="$(GET_FILE_PROP "/data/magisk/util_functions.sh" "MAGISK_VER_CODE")"
elif [ -d $NVBASE/magisk ] && [ -f $NVBASE/magisk/util_functions.sh ]; then
MAGISKFIRSTTIME=false
FINDMAGISK=true
MAGISK=true
MAGISKVC="$(GET_FILE_PROP "$NVBASE/magisk/util_functions.sh" "MAGISK_VER_CODE")"
else
MAGISKFIRSTTIME=false
FINDMAGISK=false
MAGISK=false
fi
if $FINDMAGISK && [ $BOOTMODE != true ] && $DEBUGMODE && $MCMODE; then
MSGDELIMITER
if [ $MAGISKVC -ge 20000 ]; then
UIP "Found Magisk, Install Everything $IAMM?"
elif [ $MAGISKVC -lt 20400 ]; then
UIP "Found Old Magisk, Please Install Magisk v18.0+!" "Found Magisk, Install Everything $IAMM?"
fi
UIP "$MSGVU Yes $RI" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
MAGISK=true
else
MAGISK=false
fi
fi
if $MAGISK; then
mkdir -p $MODPATH; mkdir -p $POSTFSDATAD; mkdir -p $SERVICED
chmod 755 $MODPATH; chmod 755 $POSTFSDATAD; chmod 755 $SERVICED
fi
ALLPATCHMSG
}

PHONESCRIPT() {
MSGNUS="(//)"
RTrash_System_App
MSGDELIMITER && UIP "Extract System"
$UNTARXZ -xf $TMPDIR/all.tar.xz -C $TMPDIR; rm -f $TMPDIR/all.tar.xz && $UNTARXZ -xf $TMPDIR/arm.tar.xz -C $TMPDIR; rm -f $TMPDIR/arm.tar.xz && $UNTARXZ -xf $TMPDIR/arm64.tar.xz -C $TMPDIR; rm -f $TMPDIR/arm64.tar.xz
MiXplorerSilver
GBoard
if [ $ATEN != true ] && [ $AELEVEN != true ]; then
UCSA "Install Lawnchair?" "$MSGEFTC" "$MSGNUS" "Lawnchair"
fi
}

PHONE() {
if find $STORAGE/Applications/*.apk >/dev/null; then
MSGNUS="(/)"
else
MSGNUS="(//)"
fi
UCSA "Phone" "$MSGEFTC" "$MSGNUS" "PHONESCRIPT"
IApplications
}

HFBMODE() {
if $HFMODE; then if $HFSWAPMODE; then echo -n $HFDURATION > $HFFPATH; else echo -n 1 > $HFFPATH; fi; fi
}

UNMOUNT() {
if [ $BOOTMODE != true ]; then
UIP "UnMounting$Mounts"
for m in $Mounts; do
case $m in
$SYSTEM_MOUNT)
if $DABP; then
mount -o ro $SYSTEM_MOUNT
else
umount $SYSTEM_MOUNT
fi;;
*) umount "$m";;
esac
done
fi
}

END() {
MSGDELIMITER
UNMOUNT
if $DEBUGMODE; then
UIP "Clear TMPDIR, Copy Logs & Exit"
if [ $BOOTMODE != true ]; then
cp -f /tmp/recovery.log $PLOGS/TWRP/recovery-"$DMYHMS".log
fi
find $STORAGE/Download/ -type f -name 'magisk_install_log*.log' -exec mv {} $PLOGS/MM/ \;
else
UIP "Clear TMPDIR & Exit"
fi
if $BLINKMODE; then
echo -n 0 >$LEDPATH/$LEDCOLOR/blink
fi
rm -rf $TMPDIR && rm -rf $ALTTMPDIR && MSGDELIMITER && exit 0
}

ui_print() {
$BOOTMODE && echo "$MSGSD $1" || echo -e "ui_print $MSGSD $1\nui_print" >> /proc/self/fd/$OUTFD
}

UIP() {
for uip in "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10"; do
if [ "$uip" ]; then
ui_print "$uip"
else
break
fi
done
}

MSGDELIMITER() {
$BOOTMODE && echo "$MSGDELIMITER" || echo -e "ui_print $MSGDELIMITER\nui_print" >> /proc/self/fd/$OUTFD
}

GREP_PROP() {
local REGEX="s/^$1=//p"
shift
local FILES=$@
[ -z "$FILES" ] && FILES="$PROPFILESALT"
sed -n "$REGEX" $FILES 2>/dev/null | head -n 1
}

BUILD_PROP_BACKUP() {
if [ -f $IPSBP ]; then
cp -f $IPSBP "$IPSBP-$DMYHMS.bak"
fi
}

UCS() {
UIP "$MSGUC" "$MSGVU $UCUP" 
UIP "$MSGVD $UCDOWN"
if $KEYFUNCTION; then
$UCONE
else
$UCTWO
fi
}

UCSA() {
MSGDELIMITER
UIP "$1" "$MSGVU Yes $2" "$MSGVD No $3"
if $KEYFUNCTION; then
$4
else
$5
fi
}

GET_FILE_PROP() {
grep -m1 "^$2=" "$1" | cut -d= -f2
}

GET_PMODE_PROP() {
grep -m1 "^$2=" "$1" | cut -d= -f2 | cut -d ' ' -f1
}

GET_PROP() {
#check known .prop files using GET_FILE_PROP
for f in $PROPFILES; do
if [ -e "$f" ]; then
PROP="$(GET_FILE_PROP "$f" "$1")"
if [ -n "$PROP" ]; then
break #if an entry has been found, break out of the loop
fi
fi
done
#if prop is still empty; try to use recovery's built-in getprop method; otherwise output current result
if [ -z "$PROP" ]; then
getprop "$1" | cut -c1-
else
printf "$PROP"
fi
}

MKTOUCHER() {
mkdir -p ${1%/*} 2>/dev/null
[ -z $2 ] && touch $1 || echo $2 > $1
chmod 644 $1
}

REPLACER() {
# Handle replace folders
for TARGET in $REPLACE; do
MKTOUCHER $MODPATH/$MODID$TARGET/.replace
done
}

REMOVER() {
for TARGET in $REMOVE; do
if $STANDARTREMOVER; then
if [ -d $TARGET ]; then
rm -rf $TARGET
fi
else
if [ -d $MODPATH/$TARGET ]; then
rm -rf $MODPATH/$TARGET
fi
fi
done
STANDARTREMOVER=false
}

BUCKUPER() {
for TARGET in $BUCKUP; do
if [ -f $TARGET.bak ]; then
mv -f $TARGET.bak $TARGET
elif $STANDARTBUCKUPER && [ -f $TARGET ]; then
for STANDARTBUCKUPERTARGET in $TARGET; do
cp -f $STANDARTBUCKUPERTARGET $STANDARTBUCKUPERTARGET.bak
done
fi
done
STANDARTBUCKUPER=false
}

FINDER() {
for TARGET in $FIND; do
if [ -d $TARGET ]; then
STANDARTFINDER=true
fi
done
}

SET_PERM() {
chown $2:$3 $1 || return 1
chmod $4 $1 || return 1
CON=$5
[ -z $CON ] && CON=u:object_r:system_file:s0
chcon $CON $1 || return 1
}

SET_PERM_R() {
find $1 -type d 2>/dev/null | while read dir; do
SET_PERM $dir $2 $3 $4 $6
done
find $1 -type f -o -type l 2>/dev/null | while read file; do
SET_PERM $file $2 $3 $5 $6
done
}

SET_PERM_RM() {
SET_PERM_R $MODPATH/$MODID 0 0 0755 0644
}

UZTPN() {
$UNZIP -oq $ZIPFILE $UPN.tar.xz -d $TMPDIR 2>/dev/null
$UNTARXZ -xf $TMPDIR/$UPN.tar.xz -C $TMPDIR; rm -f $TMPDIR/$UPN.tar.xz
}

MOVERPATH() {
if [ $BOOTMODE != true ] && [ -d $MODPATH/$MODID/system_root/system ]; then
mkdir -p $MODPATH/$MODID/system; cp -rf $MODPATH/$MODID/system_root/system/* $MODPATH/$MODID/system; rm -rf $MODPATH/$MODID/system_root
fi
if [ -d $MODPATH/$MODID/vendor ]; then
mkdir -p $MODPATH/$MODID/system/vendor; cp -rf $MODPATH/$MODID/vendor/* $MODPATH/$MODID/system/vendor; rm -rf $MODPATH/$MODID/vendor
fi
if [ $BOOTMODE != true ] && [ -d $MODPATH/$MODID/system/system ]; then
mkdir -p $MODPATH/$MODID/system; cp -rf $MODPATH/$MODID/system/system/* $MODPATH/$MODID/system; rm -rf $MODPATH/$MODID/system/system
fi
if [ $BOOTMODE != true ] && [ -d $MODPATH/$MODID/system_root/system/system_ext ]; then
mkdir -p $MODPATH/$MODID/system/system_ext; cp -rf $MODPATH/$MODID/system_root/system/system_ext/* $MODPATH/$MODID/system/system_ext; rm -rf $MODPATH/$MODID/system_root
fi
}

APKPERM() {
PACKAGENAME=$($AAPT list -a $APKINPUT | awk -v FS='"' '/package=/{print $2}')
mkdir -p $APKDIROUTPUT
PERM=$($AAPT d permissions $APKINPUT | grep "uses-permission:" | \
     sed -r "s|.*='(.*)'|\1|")
APPPERM=$(echo "$PERM" | \
     sed -re "s|  ||g; s|^|        <permission name=\"|; s|$|\"/>|")
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
# <!--
# This XML file declares which signature|privileged permissions should be granted to privileged
# applications on GMS or Google-branded devices.
# It allows additional grants on top of privapp-permissions-platform.xml
# -->
<permissions>
    <privapp-permissions package=\"$PACKAGENAME\">
$APPPERM
    </privapp-permissions>
</permissions>" > $APKDIROUTPUT/privapp-permissions-$PACKAGENAME.xml
chmod 644 $APKDIROUTPUT/privapp-permissions-$PACKAGENAME.xml
}

HAPWL() {
mkdir -p $APKDIROUTPUT
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!--
This XML file declares which platform apps that need to access internal APIs.
-->
<config>
  <hidden-api-whitelisted-app package=\"${PACKAGENAME}\" />
</config>" >> $APKDIROUTPUT/$PACKAGENAME-package-whitelist.xml
}

MMPR() {
case $1 in
-v) echo "id=$MODID
name=$2
version=$3
author=$WDI
description=$4" > $MODPATH/$MODID/module.prop;;
-vs) echo "id=$MODID
name=$2
version=$3
author=$WDI
description=$4
support=$5" > $MODPATH/$MODID/module.prop;;
-vc) echo "id=$MODID
name=$2
version=$3
versionCode=$4
author=$5
description=$6" > $MODPATH/$MODID/module.prop;;
-vcs) echo "id=$MODID
name=$2
version=$3
versionCode=$4
author=$5
description=$6
support=$7" > $MODPATH/$MODID/module.prop;;
-vcmm) echo "id=$MODID
name=$2
version=$3
versionCode=$4
author=$5
description=$6
minMagisk=$7" > $MODPATH/$MODID/module.prop;;
-vcma) echo "id=$MODID
name=$2
version=$3
versionCode=$4
author=$5
description=$6
minApi=$7" > $MODPATH/$MODID/module.prop;;
-vcsd) echo "id=$MODID
name=$2
version=$3
versionCode=$4
author=$5
description=$6
support=$7
donate=$8" > $MODPATH/$MODID/module.prop;;
-vcsdt) echo "id=$MODID
name=$2
version=$3
versionCode=$4
author=$5
description=$6
support=$7
donate=$8
template=$9" > $MODPATH/$MODID/module.prop;;
esac
}

} #

{ #KeyCheck

KEYTEST() {
UIP "Press Vol: Up Or Down" "Or Tap The Screen To Assign Buttons"
if ($TIMEOUT 5 $KGETEVENT -lc 1 2>&1 | $KGREP VOLUME | $KGREP " DOWN" > $EVENTS); then HFBMODE && sed -i "s/KMETHOD=false/KMETHOD=N/g" $PATCHMODEFILE && return 0; else return 1; fi
}

CHOOSENEW() {
# Original idea by chainfire @xda-developers, improved on by ianmacd @xda-developers
# Note from chainfire @xda-developers: getevent behaves weird when piped, and busybox grep likes that even less than toolbox/toybox grep
while true; do
$KGETEVENT -lc 1 2>&1 | $KGREP VOLUME | $KGREP " DOWN" > $EVENTS
if (`cat $EVENTS 2>/dev/null | $KGREP VOLUME >/dev/null`); then
break
fi
done
if (`cat $EVENTS 2>/dev/null | $KGREP VOLUMEUP >/dev/null`); then
HFBMODE && return 0
else
HFBMODE && return 1
fi
}

CHOOSEOLD() {
# Keycheck binary by someone755 @Github, idea for code below by Zappo @xda-developers
while true; do
if $TKEYCHECK; then
$FKEYCHECK
fi
$FKEYCHECK
local SEL=$?
if [ "$1" == "UP" ]; then
HFBMODE && UP=$SEL
break
elif [ "$1" == "DOWN" ]; then
HFBMODE && DOWN=$SEL
break
elif [ $SEL -eq $UP ]; then
HFBMODE && return 0
elif [ $SEL -eq $DOWN ]; then
HFBMODE && return 1
fi
done
}

KEYCHOOSEOLDBIND() {
MSGDELIMITER; UIP "Vol Key Programming Method" "Press Vol Up"
$KEYFUNCTION "UP"
UIP "Press Vol Down"
$KEYFUNCTION "DOWN"
if [ $UP = $DOWN ]; then
UIP "Two Identical Keys Are Tied! Try Again!" "Activated TKEY For CHOOSEOLD"
TKEYCHECK=true
MSGDELIMITER; UIP "Vol Key Programming Method" "Press Vol Up"
HFBMODE && $KEYFUNCTION "UP"
UIP "Press Vol Down"
HFBMODE && $KEYFUNCTION "DOWN"
if [ $UP = $DOWN ]; then
UIP "Two Identical Keys Are Tied! Try Again!" "Or Vol Key Not Detected!"
END
else
sed -i "s/TKEY=false/TKEY=true/g" $PATCHMODEFILE
fi
else
sed -i "s/KMETHOD=false/KMETHOD=O/g" $PATCHMODEFILE
fi
}

KEYCHECK() {
if [ -f /sbin/getevent ] && [ -f /sbin/grep ]; then KGETEVENT="/sbin/getevent"; KGREP="/sbin/grep"; elif [ -f $IPSB/getevent ] && [ -f $IPSB/grep ]; then KGETEVENT="$IPSB/getevent"; KGREP="$IPSB/grep"; else KGETEVENT="getevent"; KGREP="grep"; fi
case "$KMETHOD" in
N) KNEW=true; KOLD=false;;
O) KOLD=true; KNEW=false;;
"false") KOLD=false; KNEW=false;;
*) echo "$MSGKMETHOD
KMETHOD=false" >> $PATCHMODEFILE; KOLD=false; KNEW=false;;
esac
case "$TKEY" in
"true") TKEYCHECK=true;;
"false") TKEYCHECK=false;;
*) TKEYCHECK=false; echo "$MSGTKEY
TKEY=false" >> $PATCHMODEFILE;;
esac
if $KOLD && [ $KNEW != true ]; then
KEYFUNCTION=CHOOSEOLD
KEYCHOOSEOLDBIND
elif $KNEW && [ $KOLD != true ]; then
KEYFUNCTION=CHOOSENEW
elif KEYTEST; then
KEYFUNCTION=CHOOSENEW
else
KEYFUNCTION=CHOOSEOLD
KEYCHOOSEOLDBIND
fi
}

} #

{ #Code/Path/App

APKINSTALLER() {
if $MAGISK; then
MODID="AIOIARPFMD"
PATHINSTALLAPP=$MODPATH/$MODID$MIPSA/$NAMEINSTALLAPP
else
PATHINSTALLAPP=$IPSA/$NAMEINSTALLAPP
fi
UIP "Installing $NAMEINSTALLAPP $IAMM"
rm -rf $PATHINSTALLAPP
mkdir -p $TMPDIR/Lib_$NAMEINSTALLAPP
for ARCH in "armeabi" "armeabi-v7a" "arm64-v8a"; do
$UNZIP -oq $ZIPFILE $NAMEPATHOUT/$NAMEINSTALLAPP.apk -d $TMPDIR 2>/dev/null
$UNZIP -oq $TMPDIR/$NAMEPATHOUT/$NAMEINSTALLAPP.apk lib/$ARCH/* -d $TMPDIR/Lib_$NAMEINSTALLAPP 2>/dev/null
case $ARCH in
"armeabi") ARCHOUT="arm";; "armeabi-v7a") ARCHOUT="arm";; "arm64-v8a") ARCHOUT="arm64";;
esac
if [ -d $TMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCH ]; then
mkdir -p $PATHINSTALLAPP/lib/$ARCHOUT
cp -f $TMPDIR/Lib_$NAMEINSTALLAPP/lib/$ARCH/* $PATHINSTALLAPP/lib/$ARCHOUT
else
mkdir -p $PATHINSTALLAPP
fi
cp -f $TMPDIR/$NAMEPATHOUT/$NAMEINSTALLAPP.apk $PATHINSTALLAPP
done
rm -rf $TMPDIR/Lib_$NAMEINSTALLAPP
if $MAGISK; then
MMPR -v "AIOIARPFMD" "$VAIOIARPFMD" "AIOIARPFMD - Systemless Apps"
APKINPUT="$PATHINSTALLAPP/$NAMEINSTALLAPP.apk" && APKDIROUTPUT="$MODPATH/$MODID$MIPSEP" && APKPERM && APKDIROUTPUT="$MODPATH/$MODID$MIPSES" && HAPWL
SET_PERM_RM
else
APKINPUT="$PATHINSTALLAPP/$NAMEINSTALLAPP.apk" && APKDIROUTPUT="$IPSEP" && APKPERM && APKDIROUTPUT="$IPSES" && HAPWL
SET_PERM_R $IPSA/$NAMEINSTALLAPP 0 0 0755 0644
fi
}

IApplications() {
if find $STORAGE/Applications/*.apk >/dev/null; then
UCSA "Install App In $STORAGE/Applications?" "" "$MSGNUS" "IApplicationsS"
fi
}

IApplicationsS() {
MSGDELIMITER && UIP "Choose Variant:" "$MSGVU Install Every App With Confirm" "$MSGVD Install Every App Without Confirm"
if $KEYFUNCTION; then
IEAW=true
else
IEAW=false
fi
dirname=$STORAGE/Applications; IFS=$'\n'
for i in $(find $dirname -depth -name '* *'); do mv $i $(dirname $i)/$(basename $i| tr ' ' '_'); done
for APKINPUT in $(ls $STORAGE/Applications); do
if $IEAW; then
MSGDELIMITER && UIP "Found $APKINPUT" "$MSGVU Install?" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
PACKAGENAME="$($AAPT list -a "$STORAGE/Applications/$APKINPUT" | awk -v FS='"' '/package=/{print $2}')"
mkdir -p $TMPDIR/$PACKAGENAME && cp -f "$STORAGE/Applications/$APKINPUT" "$TMPDIR/$PACKAGENAME/$PACKAGENAME.apk"
NAMEINSTALLAPP="$PACKAGENAME" && NAMEPATHOUT="$PACKAGENAME" && ALTAPKINSTALLER && rm -rf $TMPDIR/$PACKAGENAME
fi
else
PACKAGENAME="$($AAPT list -a "$STORAGE/Applications/$APKINPUT" | awk -v FS='"' '/package=/{print $2}')"
mkdir -p $TMPDIR/$PACKAGENAME && cp -f "$STORAGE/Applications/$APKINPUT" "$TMPDIR/$PACKAGENAME/$PACKAGENAME.apk"
NAMEINSTALLAPP="$PACKAGENAME" && NAMEPATHOUT="$PACKAGENAME" && ALTAPKINSTALLER && rm -rf $TMPDIR/$PACKAGENAME
fi
done
UIP "$MSGDI"
}

Lawnchair() {
NAMEINSTALLAPP="Lawnchair"
NAMEPATHOUT="all"
APKINSTALLER
}

GBoard() {
NAMEINSTALLAPP="GBoard"
NAMEPATHOUT="$arch"
APKINSTALLER
}

MiXplorerSilver() {
NAMEINSTALLAPP="MiXplorerSilver"
NAMEPATHOUT="$arch"
APKINSTALLER
}

} #

{ #Removal Mechanics

RTrash_System_App() {
if [ $BOOTMODE != true ] && $MAGISK; then
MSGUC="Go To Remove/Replace Mode?"
elif [ $BOOTMODE != true ]; then
MSGUC="Go To Remove Mode?"
elif $BOOTMODE; then
MSGUC="Go To Replace Mode?"
fi
UCSA "$MSGUC" "$MSGEFTC" "$MSGNUS" "RTrash_System_AppS"
}

RTrash_System_AppS() {
RMTSAV=false
CAILIST=false
if [ $BOOTMODE != true ] && $MAGISK; then
MSGDELIMITER; UIP "Choose Variant:" "$MSGVU Replace All Find Apps" "$MSGVD Remove All Find Apps"
if $KEYFUNCTION; then
RMTSAV=true
fi
elif $BOOTMODE; then
RMTSAV=true
fi
if $RMTSAV; then
MSGDELIMITER; UIP "Choose Variant:" "$MSGVU Replace Every App Found With Confirm" "$MSGVD Replace Every App Found Without Confirm"
else
MSGDELIMITER; UIP "Choose Variant:" "$MSGVU Remove Every App Found With Confirm" "$MSGVD Remove Every App Found Without Confirm"
fi
if $KEYFUNCTION; then
RMLISTCHOICECONFIRMATION=true
else
RMLISTCHOICECONFIRMATION=false
DELETEWITHOUTSELECTION=true
fi
if [ -f $STORAGE/rmlist.sh ]; then
MSGDELIMITER; UIP "Choose Variant:" "$MSGVU Use rmlist.sh & Patch List" "$MSGVD Use Only rmlist.sh"
if $KEYFUNCTION; then
RMLISTCHOICEVARIANT=true
else
RMLISTCHOICEVARIANT=false
fi
RMLIST=$(cat $STORAGE/rmlist.sh)
REMOVETRASHNAME="$RMLIST"
UIP "Search App, Please Wait..."
RTrash_System_AppSA
UIP "Other App Not Found"
sleep 3
DELETEWITHOUTSELECTION=false
fi
if $RMLISTCHOICEVARIANT; then
if [ -f $AIOPFMDPH/AIL.txt ]; then
MSGDELIMITER; UIP "Found $AIOPFMDPH/AIL.txt" "$MSGVU Use AIL.txt List" "$MSGVD No, Next List $MSGNUS"
if $KEYFUNCTION; then
CAILIST=true
AILIST=$(cat $AIOPFMDPH/AIL.txt)
REMOVETRASHNAME="$AILIST"
UIP "Search App, Please Wait..."
RTrash_System_AppSA
UIP "Other App Not Found"
sleep 3
fi
fi
MSGDELIMITER; UIP "Choose Variant:" "$MSGVU Use Stock List" "$MSGVD No, Next List $MSGNUS"
if $KEYFUNCTION; then
if [ $MIUI != true ] || $RMLISTCHOICECONFIRMATION; then
REMOVETRASHNAME="
Calculator
Calendar
Contacts
DeskClock
MiuiCamera
Mms
"
RTrash_System_AppSA
fi
REMOVETRASHNAME="
AEXPapers
Abstruct
AccuweatherPhone2015_MASS_HD_SWS
AdAway
Aegis
AnalyticsCore
AndroidAutoPrebuilt
AndroidAutoStub
AndroidAutoStubPrebuilt
AndroidForWork
AudioFX
BatteryTile
BookmarkProvider
Books
BooksPhone
BooksStub
Browser
Browser2
CMFileManager
CalculatorGoogle
CalculatorGooglePrebuilt
CalendarGoogle
CalendarGooglePrebuilt
Camera2
CameraGo
CarHomeGoogle
CarrierServices
CatchLog
ChocoEUKor
Chrome
Chrome-Stub
ChromeCustomizations
ClockPackage_MASS_Le
CloudPrint
CloudPrint2
ColtPapers
DeskClockGoogle
DevicePersonalizationPrebuiltPixel2020
DevicePersonalizationPrebuiltPixel4
DevicePolicyPrebuilt
DiagMonAgent
Dialer
DigitalClockEasy_L
DigitalClock_L
DotWallpapers
Drive
DualClockDigital_L
DuckDuckGo
Duo
EasterEgg
EasymodeContactsWidget
Eleven
Email
EngineerMode
Etar
ExactCalculator
Excel_SamsungStub
Exchange2
FBAppManager_NS
FBInstaller_NS
FDroid
FDroidPrivilegedExtension
FM
FM2
FMRadio
FM_TEST
Facebook_stub
FileExplorer
FileExplorerGlobal
FilesPrebuilt
FitnessPrebuilt
Focus
FotaAgent
GCS
GCam
GCamGOPrebuilt
GCamGo
GalaxyApps
Gallery
Gallery2
GalleryGo
GalleryGoPrebuilt
GalleryGoogle
GalleryPrebuilt
GameCenter
GameCenterGlobal
Gboard
Gcam
GenieWidget
GlobalTrendNews
GlobalUserGuide
Gmail
Gmail2
GoogleCalendar
GoogleCamera
GoogleCameraGo
GoogleCameraLegacy
GoogleCloudPrint
GoogleContacts
GoogleDialer
GoogleEars
GoogleEarth
GoogleFeedback
GoogleHangouts
GoogleHindiIME
GoogleHome
GoogleJapaneseInput
GoogleKeep
GoogleKeyboard
GoogleLatinIme
GoogleMusic
GoogleNow
GoogleNowVoiceSearch
GooglePinyinIME
GooglePlus
GooglePrintRecommendationService
GoogleTTS
GoogleVrCore
HTMLViewer
Hangouts
HangoutsDialer
Health
HelpRtcPrebuilt
HotwordEnrollment
HotwordEnrollmentOKGoogle*
HotwordEnrollmentXGoogle*
HybridAccessory
HybridPlatform
HybridRadio2015
IdMipay
InMipay
Jelly
Joyose
KLMSAgent
Keep
KimciRecorder
KoreanIME
KoreanIMEStub
LPaper-v1.0.0-release
LatinIME
LatinIMEGooglePrebuild
LatinIMEGooglePrebuilt
LatinImeDictionaryPack
LatinImeGoogle
LatinImeTutorial
Lawnfeed
Lens
MSA-Global
MSSkype_stub
MaestroPrebuilt
Maps
MatLog
MatchmakerPrebuilt
MatchmakerPrebuiltPixel4
Messages
Messaging
MiBrowser
MiDrop
MiGalleryLockscreen
MiHealth
MiMover
MiMusic
MiPicks
MiService
MiShare
MiVideo
Mimoji
MiuiBugReport
MiuiCompass
MiuiScanner
MiuiSuperMarket
MiuiVideo
MiuiVideoGlobal
MiuiVideoPlayer
MozillaNlpBackend
Music
Music2
MusicFX
MyVerizonServices
Netflix_activation
NewsWeather
Newsstand
NewsstandStub
NextPay
NexusLauncherIcons
NexusWallpapersStubPrebuilt2017
NexusWallpapersStubPrebuilt2019
Notes
NovaBugreportWrapper
OPFileManager
OPIconpackRound
OPScreenRecord
OPScreenRecorder
OPWeather
OPWidget
OmniSwitch
OneNote
Ornament
Papers
PartnerBookmarksProvider
PaymentService
PersonalAssistant
PersonalAssistantGlobal
Phonograph
PhotoTable
Photos
PicoTts
PixelLiveWallpaperPrebuilt
PixelWallpapers2020
PlayGames
PowerPoint_SamsungStub
PrebuiltBugle
PrebuiltBugleStub
PrebuiltDeskClockGoogle
PrebuiltEmailGoogle
PrebuiltExchange3Google
PrebuiltGmail
PureBrowser
QPGallery
QuickAccessWallet
QuickSearchBox
RRWallpapers
Recorder
RecorderPrebuilt
RetroMusicPlayer
RetroMusicPlayerPrebuilt
RevengeMessages
RevengeOSCalculator
RoseEUKor
SBrowser_3.0.38_MASS_LATEST
SOAgent
SPPPushClient_Prod
SPenSdk3
SPlannerWidget_Essential
SPlanner_Essential
SafetyHubPrebuilt
SamsungIMEv2
SamsungSans
SamsungTTS
ScribePrebuilt
SecCalculator2_L
SecEmailComposer-mass
SecEmailProvider-mass
SecEmailSync-mass
SecEmailUI-mass
SecEmailWidget-mass
SecHTMLViewer
SecMyFiles2015_ESS
SecSetupWizard2015
SecurityLogAgent
ShiftPapers
SimpleCalendar
SimpleGallery
SimpleGalleryPro
SmartManagerSDK
SmartManager_OLEDHD
Snap
SoundAmplifierPrebuilt
Street
Superiorwalls
Talk
Terminal
TipsPrebuilt
TouchAssistant
Translate
TranslatePrebuilt
Turbo
TurboAdapter
TurboPrebuilt
Tycho
UPTsmService
Velvet
Velvet_update
Via
ViaBrowser
Videos
VinylMusicPlayer
VoiceSearch
VoiceSearchStub
Wallet
Wallpaper
WallpaperPickerGooglePrebuilt
WallpaperPickerGoogleRelease
WallpapersBReel2017
WallpapersBReel2019
WallpapersBReel2020
WallpapersBReel2020a
WarpShare
WaveWidget
WeatherDaemon
WeatherTile
WebManual
Wellbeing
WellbeingPrebuilt
Word_SamsungStub
XiaomiKeyboard
YGPS
YellowPage
YouDaoEngine
YouTube
YouTubeMusicPrebuilt
YouTubeVanced
ZVideoMass
arcore
com.google.ar.core
crDroidMusic
facebook-appmanager
facebook-installer
facebook-services
greenguard
iWnnIME
iWnnIME_Kbd_White
mab
madCamera
madLauncher
madWallpapers
messaging
stats
talkback
"
UIP "Search App, Please Wait..."
RTrash_System_AppSA
UIP "Other App Not Found"
sleep 3
fi
MSGDELIMITER; UIP "Choose Variant:" "$MSGVU Use Experimental List" "$MSGVD No, Next List $MSGNUS"
if $KEYFUNCTION; then
REMOVETRASHNAME="
AmbientSensePrebuilt
AndroidMigratePrebuilt
AndroidPlatformServices
BackupRestoreConfirmation
BasicDreams
BrowserProviderProxy
BuiltInPrintService
CalendarProvider
CellBroadcastReceiver
ChromeBookmarksSyncAdapter
ConfigUpdater
ConnMO
Currents
DMAgent
EditorsDocs
EditorsDocsStub
EditorsSheets
EditorsSheetsStub
EditorsSlides
EditorsSlidesStub
EuiccGoogle
ExchangeServices
FOTAKill
FaceLock
Finsky
GmsCore
GmsCoreSetupPrebuilt
GmsCore_update
GoogleBackupTransport
GoogleCalendarSyncAdapter
GoogleContactsSyncAdapter
GoogleLoginService
GoogleOneTimeInitializer
GooglePartnerSetup
GooglePlay
GoogleQuickSearchBox
GoogleSearch
GoogleServicesFramework
GoogleZhuyinIME
LineageSetupWizard
LocationHistoryPrebuilt
Magazines
MarketUpdater
Markup
MarkupGoogle
MediaUploader
NetworkLocation
OccamQuickOffice
OneTimeInitializer
Phonesky
PlayAutoInstallConfig
PlayStore
PlusOne
PrebuiltGmsCore
PrebuiltGmsCorePix
PrebuiltGmsCoreQt
PrebuiltGmsCoreRvc
PrebuiltKeep
PrebuiltKeepStub
PrebuiltNewsWeather
PrintSpooler
QuickOffice
SPrintSpoolerLMR1
SamsungBilling
SettingsGoogle
SettingsIntelligenceGooglePrebuilt
SoundPicker
SoundPickerPrebuilt
Stk
Stk2
StorageManagerGoogle
Tag
TagGoogle
TrichromeLibrary
Vending
WallpaperPicker_Zero2
WebView
WebViewGoogle
WebViewStub
"
UIP "Search App, Please Wait..."
RTrash_System_AppSA
UIP "Other App Not Found"
sleep 3
fi
MSGDELIMITER; UIP "Choose Variant:" "$MSGVU Use Launchers List" "$MSGVD No $MSGNUS"
if $KEYFUNCTION; then
REMOVETRASHNAME="
AsusLauncher
AsusLauncherDev
EasyLauncher2_Zero
EnigmaLauncher
Launcher3QuickStep
Lawnchair
NexusLauncher
NexusLauncherPrebuilt
NexusLauncherRelease
ParanoidQuickStep
PixelLauncher
ShadyLauncher
TWLauncherESS
Trebuchet
TrebuchetQuickStep
"
UIP "Search App, Please Wait..."
RTrash_System_AppSA
UIP "Other App Not Found"
sleep 3
fi
fi
}

RTrash_System_AppSA() {
for FINDTRASH in $REMOVETRASHNAME; do
for NAMEPATHDELLTRASH in "$IPSA" "$IPSPA" "$IPSSPA" "$IPSSPPA" "$IPSSSA" "$IPSSSPA"; do
if [ -d $NAMEPATHDELLTRASH/$FINDTRASH ]; then
if $DELETEWITHOUTSELECTION; then
UIP "Found ($FINDTRASH)"
RTrash_System_AppSAA
else
MSGDELIMITER
MSGUC="Found ($FINDTRASH)"
if $RMTSAV; then
UCUP="Replace?"
else
UCUP="Remove?"
fi
UCDOWN="No, Next Search $MSGNUS"
UCONE="RTrash_System_AppSAA"
UCS
fi
break
UIP "Other Search App, Please Wait..."
fi
done
done
}

RTrash_System_AppSAA() {
if $RMTSAV; then
REPLACE="$NAMEPATHDELLTRASH/$FINDTRASH"
MODID="RTSA"; REPLACER; MOVERPATH
MMPR -v "Replace Trash System App" "$VAIOPFMD" "Replace Trash System App $FMR"
UIP "$MSGDRP"
else
rm -rf $NAMEPATHDELLTRASH/$FINDTRASH; UIP "$MSGDRM"
if $CAILIST; then
sed -i "/$FINDTRASH/d" $AIOPFMDPH/AIL.txt
fi
fi
}

} #

BOOT_DETECTED
SYMBOLDESIGN
ALLPATCHMSG
PARTITION_AND_MOUNTS
IMPORTANT_VARIABLES
MIUI_CHECKER #&
BB_CHECKER
ARCH_CHECKER
AIOIARPFMD
CHECK_AVERSION
KEYCHECK
PATCHMODE
MAGISK_CHECKER
PHONE
END